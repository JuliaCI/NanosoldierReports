cset: moving following pidspec: 14597
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.960398773 seconds)
loading group "shootout"... done (took 1.130812104 seconds)
loading group "string"... done (took 0.667387222 seconds)
loading group "linalg"... done (took 8.539225434 seconds)
loading group "parallel"... done (took 0.166887277 seconds)
loading group "find"... done (took 3.013717353 seconds)
loading group "tuple"... done (took 2.190392608 seconds)
loading group "union"... done (took 15.200194608 seconds)
loading group "dates"... done (took 1.481107172 seconds)
loading group "micro"... done (took 0.221965737 seconds)
loading group "simd"... done (took 4.81533844 seconds)
loading group "io"... done (took 1.078303613 seconds)
loading group "random"... done (took 9.625031009 seconds)
loading group "problem"... done (took 1.523136494 seconds)
loading group "array"... done (took 25.356306254 seconds)
loading group "misc"... done (took 1.906430162 seconds)
loading group "scalar"... done (took 43.748046154 seconds)
loading group "sort"... done (took 3.345725155 seconds)
loading group "sparse"... done (took 12.824719519 seconds)
loading group "collection"... done (took 18.790711305 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.540640632 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.127098736 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.131269483 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.125254684 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.184193769 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121433384 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130733222 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.08561535 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.848740843 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140185418 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115872878 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.437239491 seconds)
done (took 5.404498037 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167042903 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093099734 seconds)
    (2/2) benchmarking "String"...
    done (took 0.084081295 seconds)
  done (took 1.364806616 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071932133 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061399551 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068056343 seconds)
  done (took 1.388475375 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065361891 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135134209 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066848739 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068567459 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.072187179 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067861545 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067971618 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068555166 seconds)
  done (took 1.739990259 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.073231751 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067753624 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066033255 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068444204 seconds)
  done (took 1.470101557 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066397427 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.12205546 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065805543 seconds)
    (4/4) benchmarking "different"...
    done (took 0.06595662 seconds)
  done (took 1.51198542 seconds)
done (took 8.907809154 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.139687787 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.829811521 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.757987798 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126666292 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.253051092 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.45043657 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124156764 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.18343717 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089679818 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075817394 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121805717 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.077937606 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.450301154 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.401410338 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071832457 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.17121871 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.642196938 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087097044 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132252584 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.45326445 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074137563 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088052667 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08472548 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071753403 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.344855494 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.153849963 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.667893133 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.100229526 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070580137 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096310288 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070873459 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078517513 seconds)
  done (took 10.767296498 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093342824 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090813922 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.06958635 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123924134 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094202535 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070590216 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075902761 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069089074 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091707995 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126832887 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.092591121 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.101376647 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.06916269 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071360936 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.082418519 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.199598643 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082939691 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083401201 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069715527 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083511427 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108991251 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.080344105 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.08043627 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.08022632 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132574968 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169646436 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.09718483 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.09899094 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066544625 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079006757 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118768923 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125745852 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066907258 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066044792 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119935887 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096316867 seconds)
  done (took 4.673606544 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.896736533 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.098133808 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085289812 seconds)
    (3/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.097024198 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.075584753 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109069416 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.11647926 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.124271156 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.124016594 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.105899617 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071382963 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152806052 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.651410579 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.146644332 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072161889 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.12133851 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.367849592 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.062895521 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070799412 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068884398 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071679372 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069799283 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112436291 seconds)
    (23/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.084654917 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066803465 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175491919 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.581108758 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071957294 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071270671 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.099051759 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.069873604 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.143609822 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095050893 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07250645 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.553612207 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065766311 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064052311 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088310041 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094252524 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.179647519 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068934061 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080386805 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067300639 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109525022 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081572559 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.493670913 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070513618 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.563064531 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.226597445 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.075391701 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.074086673 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104468489 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.06614089 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069978129 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.832561213 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.125868681 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068514939 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.273871685 seconds)
    (58/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.068336759 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069444231 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070880937 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071689325 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102951709 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069572831 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070984032 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075123176 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098635518 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.869827958 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090278794 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.09882039 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068886875 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.410167055 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076563064 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071801528 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071359603 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.085906526 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.114267149 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069061233 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068415491 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.108455038 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089159026 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089446137 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069812685 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067338714 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066584137 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.344248394 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.155238504 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06680867 seconds)
    (88/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.064006832 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067472988 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.481350809 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063872475 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066377393 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067999414 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089531871 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066397814 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063621838 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064707196 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098870261 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066901862 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.447761055 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067675599 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.469177729 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071754201 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.109475741 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122790598 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069947536 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.098814606 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.070809733 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.067217819 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.076231997 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067359394 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066744135 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071007787 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067404272 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068431183 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070845739 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069733554 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069125969 seconds)
  done (took 22.783308318 seconds)
done (took 40.315601371 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.317972569 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080565265 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.081284366 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.081044735 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.081008285 seconds)
  done (took 1.877306256 seconds)
done (took 3.212712398 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.136050413 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077274458 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066449308 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103627464 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070738816 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104310152 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111132916 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.106960443 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070720679 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.071199726 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070626337 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105094419 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107916859 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.071091842 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.101016628 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106979675 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070765808 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.069328675 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.071058319 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.071155737 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070735588 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066181267 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070989252 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.07126142 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101726906 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.071389041 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065372846 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099084757 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069231838 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099151393 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069001979 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069503637 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069260245 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100533927 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069512133 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099761256 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065070725 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069339266 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069473447 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.06928763 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.068829217 seconds)
  done (took 4.651590215 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072756614 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081909793 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083860926 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063048341 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072545978 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083089746 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062822385 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081985109 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08844966 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082903891 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082889695 seconds)
  done (took 2.139245412 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07116535 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083024885 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087120111 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062277974 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073599451 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083899022 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063679489 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084837021 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08813464 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085560069 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085905947 seconds)
  done (took 2.132933633 seconds)
done (took 10.183807311 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.098021839 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066608074 seconds)
  done (took 1.40850858 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.224265364 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.624508542 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.305102861 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093468039 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072693037 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086368216 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.200901188 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067198094 seconds)
  done (took 8.115280866 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.101229074 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071981885 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071013517 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.073718489 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070733307 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071483006 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071163503 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069787221 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070376694 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070227816 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.07068507 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070212527 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069754749 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069299875 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069453338 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067949594 seconds)
  done (took 2.527206705 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.106076848 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071583994 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101661535 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063390955 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072074797 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063136149 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070963291 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073480386 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070364635 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071001903 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073703344 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.07332221 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072715162 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073300286 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074150066 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074256264 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075055675 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071050361 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073272614 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073470541 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073851443 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.07490155 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074418567 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072366467 seconds)
  done (took 3.177715566 seconds)
done (took 16.493730332 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176250571 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074842171 seconds)
  done (took 1.503767962 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068432991 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068510175 seconds)
  done (took 1.407937522 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074233969 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061013044 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078545453 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070227874 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062082891 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061322281 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077295032 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061872901 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.06131239 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061785618 seconds)
  done (took 1.941354161 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063816409 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069277 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068444 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066440881 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.068957165 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064322734 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067251356 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064829025 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.07118867 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063825549 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.067813101 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085512976 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.068110697 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086508911 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067384139 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068464446 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069678121 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.066885945 seconds)
  done (took 2.523760935 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.063188302 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062528879 seconds)
  done (took 1.41244768 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.06588935 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062874711 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06528755 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064533828 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062131931 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061987204 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062488954 seconds)
  done (took 1.723874805 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.422279101 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121900935 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.340531142 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069465664 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076681395 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.257687207 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064437161 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069889538 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070926613 seconds)
  done (took 2.816394897 seconds)
done (took 14.615477303 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083548906 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182343386 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087703527 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.406914977 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094213578 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069425892 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114659845 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.175573701 seconds)
done (took 2.516895379 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.217512809 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.242440163 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.3895605 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124629549 seconds)
  done (took 3.045029732 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.338545117 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078498428 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076819835 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066646441 seconds)
  done (took 1.859690386 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066294832 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071796316 seconds)
  done (took 1.430792391 seconds)
done (took 7.854231025 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072455782 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062177839 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.092151243 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.06784732 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.064261052 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064548086 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.064255604 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.074170979 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062560966 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064383017 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062359487 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.064085699 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.064383398 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064751437 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064048269 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064096917 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064941849 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06407356 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064056311 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063293582 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064169468 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064948382 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063576732 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064352487 seconds)
  done (took 2.903907445 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079730343 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066258421 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067085348 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067069109 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067593299 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067208703 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068278335 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067702412 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069094228 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.06727266 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068891678 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069283154 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.06728933 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068962073 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067421159 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069877596 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068934607 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067870964 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06734854 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069378855 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068808703 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067933419 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069435786 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06884161 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069388803 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069252778 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067251248 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067811207 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06908904 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069647813 seconds)
  done (took 3.364114591 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066819424 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.06050072 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061243028 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070214059 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060512183 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060682816 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.06140708 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060882754 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060699519 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061541703 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.06106856 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060725683 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061973343 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060451791 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061517102 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062740452 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066879571 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080597792 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061587171 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061783438 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06667025 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061923343 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062070295 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06235673 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062841304 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061741805 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060870257 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060858117 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061079263 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061795793 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061452925 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066076557 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066231564 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.06014509 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070684256 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065596427 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060229307 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064744578 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061217297 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060635969 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060256181 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060579418 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060523357 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060617183 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070757715 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060962071 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.0614713 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061540316 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.06079547 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060559617 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.06074868 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062014444 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068803214 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062024966 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060012315 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061216603 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060035175 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060980311 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060570399 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060367195 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060427076 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064599173 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063532706 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061252869 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081500483 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063428642 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071841368 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061930617 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062751155 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065568761 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062596533 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.08011871 seconds)
  done (took 5.86011602 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071638764 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.07268294 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079083854 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.07104229 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064989308 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062798792 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066715685 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062828161 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072912277 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067251967 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063348992 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066703165 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072914586 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067583825 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064798767 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072316485 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066945339 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066482888 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063483641 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067306981 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064143827 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066854629 seconds)
  done (took 2.813161303 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135442607 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066726011 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106108544 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074399785 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068777228 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.075111319 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068187104 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068091015 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068306349 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068820511 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068492847 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068131243 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070869562 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068755642 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068423176 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068423876 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068118285 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068257963 seconds)
  done (took 2.657142897 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.078298188 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066908694 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091262664 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067241422 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067971669 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067047573 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071191243 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071809462 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.06742685 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.068253879 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071758411 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067585448 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067362477 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067525285 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067038766 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067708519 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.0674572 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067475707 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071828611 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071325615 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071645795 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071672804 seconds)
  done (took 2.857138728 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078456267 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065590603 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082616376 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067931018 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062030645 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062629199 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068006186 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066918233 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067702612 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.06625492 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067081726 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062051664 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068386787 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066905913 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068332222 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067127617 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06667033 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067048423 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06674192 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062445555 seconds)
  done (took 2.667093073 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.088232281 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065527005 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064569257 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084145989 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064856235 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064647473 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084247819 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065005807 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065242535 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087750555 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06503713 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064965273 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.084575198 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084583283 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064831 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084917416 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084727179 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084733384 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065116416 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064691016 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08759552 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065681684 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084516742 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064764794 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064997607 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065010006 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065592309 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.085310992 seconds)
  done (took 3.380784199 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066910094 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064973849 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065850345 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065726636 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.066068924 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.066317664 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065957358 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065701962 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065515295 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066232356 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066111617 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065796318 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068910105 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065234049 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065765736 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.06565145 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065741875 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066059976 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066473902 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066443187 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064094792 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064136256 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063951968 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064552724 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064931233 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063919036 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064224022 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064556738 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063545165 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064237806 seconds)
  done (took 3.28404557 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.075054269 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071891599 seconds)
  done (took 1.471303533 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063500726 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079158853 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060755072 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072686609 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068784201 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063953647 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069348021 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069180153 seconds)
  done (took 1.864005574 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.068206278 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.09065075 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062418658 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063489507 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066227454 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.133540661 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076625518 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.07498764 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076087044 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064898316 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062688751 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.07445841 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061590476 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075180666 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063874079 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071399805 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069605207 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079744458 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07535049 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061981267 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074760878 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063366461 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060784935 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062995357 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062368823 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069010641 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077849642 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074616754 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071493115 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061958072 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083142306 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062094625 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062672143 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07108054 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065481311 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061548437 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097945656 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061717888 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066470236 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061162334 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073232771 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081945949 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.07550306 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078865838 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062840677 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063345035 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061054891 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062987418 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065173046 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.07076271 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061356957 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068359834 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.061112197 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.063564507 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072093488 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062869984 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06842088 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071000936 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076099501 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07393382 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071628207 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078941785 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071833745 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070805629 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064067975 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082774199 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064730257 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076241735 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07800597 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064190111 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.075899542 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062126335 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061242395 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062393457 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097124837 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.06443492 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063947503 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062816675 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062910273 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.063922602 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070798228 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06655533 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068499203 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06397567 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07640272 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070082371 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060955493 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.066824856 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078472132 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.063948175 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060852182 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077430443 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064373505 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.06039957 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078171046 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070744126 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062339258 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061840055 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064290258 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073924514 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061699408 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059720374 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068974487 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06178488 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062620371 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.0648558 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069001125 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060135118 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.07091376 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064697929 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062129528 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059839655 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064533602 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060968074 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059071399 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069391819 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.06010348 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073775432 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066378064 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074615856 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074629154 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070293073 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075159446 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061484523 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060063725 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.07817633 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069190681 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.19729083 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081092901 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.061910428 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073260461 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.064792634 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063693457 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072149234 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061295867 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06348692 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061320498 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066197987 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062573721 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063415576 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066988802 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070030083 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073599544 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062746702 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070540722 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062109258 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077117706 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071981453 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066979826 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066402775 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.06346347 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.074532434 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06839785 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070905857 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062133891 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063875389 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062701575 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073706678 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072665992 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064339692 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068495575 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065532043 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062394101 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061901967 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062782627 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065415655 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064791053 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062254427 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06984568 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070237389 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07526591 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068700714 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.07062527 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060528106 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060592336 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063042623 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060830791 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065639674 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070901032 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076888144 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073120876 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082760994 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061645252 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071158954 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063245986 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077969866 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074644618 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062738525 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066406079 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060458952 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063310002 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070708779 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072468775 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074689978 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076387849 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06629713 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066799784 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062389568 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078162948 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063115142 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071207372 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072127915 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067388362 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.062889658 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064430318 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072283619 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066383472 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061456122 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076979514 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067235831 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060700034 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075685248 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061219792 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072120586 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.06112777 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066577382 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068589095 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064853537 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072108221 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078092863 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061610309 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063648712 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078235702 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.065023538 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064372656 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071030212 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077205471 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065438718 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068973854 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072042023 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071326572 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067051068 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072568603 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063244575 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071931853 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065160886 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07436312 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062844565 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080654049 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061341837 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075819579 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061870457 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071345241 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061363269 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070039562 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061632527 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077073707 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061952286 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061256902 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071852987 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059573206 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069550824 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.05971816 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065033272 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06657274 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069759313 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061652285 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068993553 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.200971353 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071879797 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067837248 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.072287556 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.074097327 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068218447 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063391207 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.072105579 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074901131 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071922973 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.065112427 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064238083 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063917692 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072736504 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.065093507 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064710276 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071025439 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066339546 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067623763 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063417075 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063586917 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063213224 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070196875 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071255214 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079066385 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070218527 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069882193 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070964894 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061268855 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077012663 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061989023 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071580144 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060845317 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067476271 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070750321 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062161958 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080458141 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063106809 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069801879 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07420414 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070687452 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.06516642 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081284892 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064530004 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.0700795 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070271362 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066127264 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068111877 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063501331 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070021395 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071010214 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072197046 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062513894 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068758439 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070439716 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063505351 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068657346 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063301292 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070166459 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065369671 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062652718 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067612933 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075032593 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.06777654 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068387264 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063764388 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061788679 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063567209 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.069748493 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066692773 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071283158 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07879223 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062095507 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064234745 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.06307678 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066501657 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081085429 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072869921 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070820561 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.068006556 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062487085 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.06469745 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.064017881 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.06179679 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064642928 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060650192 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061104387 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074074182 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064341396 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067460662 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063518758 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.063756351 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072668269 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.067997017 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.06402249 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069499487 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.06284226 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068226139 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.06216405 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064281575 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067285353 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061948021 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066258312 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072979852 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079454072 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069558386 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071841242 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063964304 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071270268 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077932699 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069798878 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063425114 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072111017 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.062293759 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080972079 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072360586 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071239433 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070378529 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061412086 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076499623 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064844009 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070581445 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077090799 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063348363 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068051174 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061222932 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077305125 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066602293 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.06189063 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.070149294 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070015215 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067440466 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073536072 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.206921363 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071042172 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067865442 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.067604542 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065754154 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065352818 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072654017 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079667896 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064095394 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067890769 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071550975 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072311232 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067972799 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075506299 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071956205 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064820461 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064910797 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066605612 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064229316 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075305529 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063823173 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067537375 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068178077 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062750412 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069780284 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079725658 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072617016 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072910051 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.063200583 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061475421 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078677104 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065231388 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065155442 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069721778 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072209875 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07521533 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072752792 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080582925 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063943592 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068973183 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075056487 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064590702 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063193358 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066818387 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064908201 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071960242 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073712696 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070417982 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065097873 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069760818 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.077054282 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064737204 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067869894 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.067155563 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062276622 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.07350621 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071581575 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.074932917 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064756018 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062411224 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066521215 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071999888 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070983941 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072619113 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064128026 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.07002902 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.077381593 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.0709017 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066692803 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.06325713 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066556579 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072267726 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068110859 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062670382 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067854951 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066381737 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070247386 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.07289043 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067521783 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062982028 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080870104 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071497353 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072199323 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.064901423 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065224056 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063653286 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062770619 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074216557 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063245933 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064748374 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067876323 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064882346 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080758196 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071451777 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079026663 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064034874 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067779858 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062684119 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07281594 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067657841 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.06367269 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.074358782 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062504637 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078131492 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074854204 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.069183313 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062519222 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.089261804 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.070634456 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078145912 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07253284 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072327647 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066135985 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072683831 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064583469 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073600543 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062607032 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061334736 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072389202 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070974871 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075045281 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061637498 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072710786 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.063923034 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070855355 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.070147006 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.064076131 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063628983 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06399944 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07164414 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065593789 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069702438 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.207594222 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080285832 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063721155 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073822787 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071850145 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073279906 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076196883 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07411977 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069907479 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062424717 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069099734 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.070240667 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063082879 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066627797 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065057975 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083263286 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063474522 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063380842 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075717085 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068379684 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062256797 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068352013 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066726672 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071923092 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063645686 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.074202937 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067663241 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064241524 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067632037 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067806717 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062182185 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062919989 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.063368615 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073096908 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067780389 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063415235 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082262376 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064955513 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072584151 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073303745 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.06877703 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063704414 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060790355 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064141576 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.076270843 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078822115 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066769267 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07183208 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064928896 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072275786 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060900308 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070204687 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070361044 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071999199 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062719788 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063730034 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078917802 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079180851 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067992884 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072604502 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072931892 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.065140423 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085311118 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072280671 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064570191 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.074703856 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065697782 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062485747 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062382401 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064884316 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.075070507 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.063153855 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065843285 seconds)
  done (took 42.779719965 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.101161723 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063980113 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062674385 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062681664 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073447931 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063974023 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06265899 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063530457 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06400425 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065557685 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063099633 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065754693 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.0740487 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076775453 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073636518 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066661656 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063003885 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063838456 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062708007 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063804033 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071918569 seconds)
  done (took 2.871104211 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066718407 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066826887 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067540174 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067606282 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066330926 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06330009 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067712928 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063514077 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067703916 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063494686 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067704236 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062462082 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062427427 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061978128 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06242968 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062965356 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065665996 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065043113 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062774042 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066994916 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064825345 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067229836 seconds)
  done (took 2.845042409 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.064746974 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063097088 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071828665 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062350064 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062171876 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066113537 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062504978 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066875347 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066922024 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066972193 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071870847 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063349332 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061922773 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068277397 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062953598 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063588673 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106056918 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063644304 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063987667 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062337668 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065208122 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072142567 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062164896 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062603756 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066897761 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066392367 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062353726 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064964855 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06313041 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067290757 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063723905 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061682857 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071559014 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070859106 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067051048 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066810884 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064552807 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06362563 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062720235 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062212957 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071244663 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064258783 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.06332004 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063990228 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.07184334 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062381556 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062357031 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071886185 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062330543 seconds)
  done (took 4.661770292 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073897196 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.115632194 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.069173475 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.096452228 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.075720239 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.068865961 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068987721 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097072225 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063906847 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064445561 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076630452 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075779534 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064877067 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066412274 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068469283 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065378679 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066352726 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065217361 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068189049 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064706919 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068357582 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.07036221 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075220388 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.076453159 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066492574 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064859969 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06576187 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.067056714 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.075619935 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.069296521 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067680063 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067781177 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.07671917 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.071027598 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065180692 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065455188 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07571598 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064726098 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065355606 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.06258644 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065339038 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067261367 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.069811389 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077033798 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065679581 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070224039 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.066056287 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063643518 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076182856 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065732361 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.06941553 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077471385 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066871538 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065854272 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.069489191 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076777504 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065928985 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062842903 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06401497 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074049251 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062495733 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064994093 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.079703697 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064994599 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069147233 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.076743001 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070683199 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066612235 seconds)
  done (took 6.360765816 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.073290075 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.099055073 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073900594 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074035176 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07321186 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073832522 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073517283 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.07320354 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073376023 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074139467 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073369558 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.114309838 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070299911 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076855045 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071820628 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071443804 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.07148578 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071380246 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071546825 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071084923 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071498675 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071983625 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071408328 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071609739 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074167651 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069942688 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073417258 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073887511 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07422169 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073900802 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076335356 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073634628 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071513087 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071983966 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073826374 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071392275 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06237878 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071227995 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071232821 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071294046 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068039886 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072685283 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071283669 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067946312 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071840458 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073698934 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074066328 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076467936 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.080502589 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073953914 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.074004756 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074394721 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073322061 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.074058537 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07440936 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.080314009 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074420242 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074377508 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074011147 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073961527 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07402965 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.07949357 seconds)
  done (took 6.05526873 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078157265 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069508198 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082658075 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062666751 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062585843 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072160539 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062962539 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062717837 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070568993 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.06967796 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071140856 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072176341 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074068831 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071508865 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072421237 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074690707 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071969871 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.07230134 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069742695 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.07212914 seconds)
  done (took 2.867266738 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.078099809 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079927185 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067130564 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071269002 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067461971 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072259468 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067595318 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068925513 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068882738 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068835987 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073602856 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073064869 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068994104 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072459667 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.07333704 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072509503 seconds)
  done (took 2.587015463 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.066952851 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.06896043 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067891767 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062671431 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064421917 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061727184 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063157566 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062320298 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.065480541 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.076920933 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063896603 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066533141 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064053519 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062972624 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063088274 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067237867 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.065662505 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063726524 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064313817 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068082868 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072156811 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064800799 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066805899 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064296043 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065970848 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.072678698 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064901721 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066005667 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.06398376 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.066299896 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066455195 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070544418 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.066296218 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064252482 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062707021 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064258405 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064337866 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.067161099 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066766278 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064355995 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062354429 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069213954 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064183926 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064547534 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06545789 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066447061 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065397864 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069779603 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.063941437 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.065987523 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064274317 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.066036688 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063968263 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.070730071 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066618203 seconds)
  done (took 5.065884912 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080974249 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068443345 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062495516 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062850147 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06792509 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.069916093 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06827024 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068350134 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068532556 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063078237 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.0691191 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067922376 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068193785 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067936997 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068486925 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067962193 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062248582 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067935029 seconds)
  done (took 2.676043537 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.069573309 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061751249 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065917336 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063005188 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063237351 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.061583343 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061584491 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062912955 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064573297 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063129218 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064104139 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.063900272 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06402625 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063962124 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062699331 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064740602 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.064166983 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061926318 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063189663 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061281322 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061390522 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.0616496 seconds)
  done (took 2.843366437 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.091231968 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086724939 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.130559476 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081897766 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.08866668 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072043047 seconds)
  done (took 2.002103674 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.09725434 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104212961 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066100494 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065938484 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074190277 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068727599 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070783632 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071529948 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076458892 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075160601 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070963616 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075816609 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074637916 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07101974 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074471353 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076906932 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069347043 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069399426 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066241678 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076790415 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069387053 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074462159 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069055122 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069149729 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06961211 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070599237 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076979651 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073093602 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070114257 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07708909 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078279206 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070255053 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074445342 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072704619 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06603728 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074779635 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068815087 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076706853 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074749854 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071027682 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065885361 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074735951 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074645498 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07101884 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076965698 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069731404 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070875925 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069400374 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06972781 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079832734 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074689482 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071464449 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074919356 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07730126 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07768216 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079901193 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073194714 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071189307 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075770732 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07397195 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07248338 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075373932 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073216511 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073971865 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077362297 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071064253 seconds)
  done (took 6.312517577 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102306729 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066932607 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069674666 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07364139 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071352242 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06941956 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069714722 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069143207 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069677508 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066936055 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104943836 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070000583 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070939107 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071655698 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069879752 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069554259 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072735629 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072221554 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069049498 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081490103 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071474378 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073507305 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073203623 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073809155 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075244916 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079171989 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072320005 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071900546 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071623537 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071133704 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072268646 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069287696 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070901689 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067005444 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071072 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069600324 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069347228 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071135299 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069183189 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074779192 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071456709 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076797353 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069843053 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0696682 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073234693 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069244185 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069278809 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067034248 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06979507 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066650064 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073598127 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073539491 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073849505 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071760865 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069952702 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069711427 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069300546 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069864317 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069619868 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077281017 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070805892 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069668866 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079181854 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071120397 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071657135 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073478933 seconds)
  done (took 6.25233983 seconds)
done (took 130.599590452 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219935108 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.190193527 seconds)
  done (took 1.842013808 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.076124116 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166210317 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075476252 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.0755273 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108840891 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108095265 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.075907066 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072844257 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.077287539 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.074478537 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.141959675 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076658098 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072594009 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073977266 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.074349557 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.074644654 seconds)
  done (took 2.880407088 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.111400473 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.189225091 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.084923523 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072128144 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.117615568 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.07979394 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.074489943 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078003183 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079729611 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.072704881 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.109938473 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084648939 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076666805 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.079722436 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.074519199 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076421827 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.078079822 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079665619 seconds)
  done (took 3.083726054 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.099965941 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089079197 seconds)
  done (took 1.654022664 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.158588679 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105528453 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145134397 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.331805083 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.135304965 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.130381378 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.131695586 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125328256 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.11224255 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.121606114 seconds)
  done (took 2.953246256 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.108502882 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.108354661 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.313702475 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.105646721 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.085028942 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.080130605 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.077286487 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.08272926 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.077885023 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.079244307 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.124959686 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077838222 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.07446813 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127272836 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.102089549 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.109734385 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.072832085 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.080318757 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.082040451 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.073141382 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.078926355 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.082193518 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.1818661 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079083201 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099746937 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075423637 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077724622 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074592145 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074411162 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078112187 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079591173 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099744651 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078519931 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082899127 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077337976 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096650071 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072060686 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.09877812 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074815935 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072712858 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075232056 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078887043 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072591902 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078432924 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075563711 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077819773 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080089148 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071688501 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.07595174 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075069366 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074392587 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.079396134 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.078855548 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.08001 seconds)
  done (took 6.332502722 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.109841927 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106391101 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070557531 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113350638 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109016962 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072492912 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.108290881 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103557622 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.112028923 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072812126 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071625957 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072077625 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079255627 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.083150277 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116793156 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108446914 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072130522 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070611892 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107707311 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107532869 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069309026 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102180583 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100274156 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106495798 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068506585 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070234626 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069276558 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070836952 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074849632 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075527535 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069183236 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076327067 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081845212 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075514584 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068626624 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068886044 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069090512 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076235753 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076257217 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076234733 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074768253 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068358581 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069906386 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071673543 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.072169465 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070761692 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077491237 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.078527114 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.07738402 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071905597 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072159671 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.07069374 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071450257 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077828308 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077725551 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079166296 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077005183 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069056652 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069154763 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070833355 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077133701 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077122678 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076321983 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070426784 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077524911 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069337124 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078100024 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081558321 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069216664 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069752318 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069231525 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068946237 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069410243 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074891457 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075219582 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070019901 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068975983 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070570413 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078646756 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075885328 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068940321 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075126729 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068633844 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069076557 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069473965 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069933353 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074549025 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075381634 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069644929 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068891871 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069035371 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069697154 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070314446 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.077150479 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077399848 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.077655781 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.07701459 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071008594 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076290278 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076809785 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070102774 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.076028478 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069378374 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068651485 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067725437 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073081842 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072198346 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074368123 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067627723 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067337329 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073061354 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075752893 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067562987 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072371947 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074773862 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.073489298 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066959137 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076011894 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067959856 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075014376 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067536698 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074937513 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067537006 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072921595 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06787443 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.067144078 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067733824 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.073060009 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068348566 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067443885 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06818778 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068162714 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.07409692 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076866534 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068272033 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073314744 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073972714 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068764238 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073505073 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067663414 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.072649188 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067239043 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067846094 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067094441 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074285173 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067149527 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067400156 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067307291 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.073825989 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067534386 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073896442 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.071133808 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066441041 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075787773 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.073546225 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07129538 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.073812043 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068338443 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067819365 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067044137 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067176557 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071542813 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.071973527 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070821027 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067205923 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071191224 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074231449 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067081198 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.071324165 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.071503282 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.071347995 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067815383 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067227087 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.074734647 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07354615 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.302970245 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.071613935 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072179168 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067159802 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072351169 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072318222 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06727491 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077977145 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066847287 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.076397793 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072115837 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.070817213 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.071517134 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.072505521 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074427279 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074148001 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.07645209 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067160004 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066995217 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.071632197 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067551016 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066867693 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.071140824 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067440217 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067877912 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.076408148 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067263738 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.0745672 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066321261 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.071967012 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067044725 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067441821 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076178589 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067476241 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067710711 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.071000746 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067417525 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072400383 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074482871 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.071821739 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066485696 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067184629 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072437402 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.072888312 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066885318 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06723056 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068201127 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072027352 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.070817882 seconds)
  done (took 18.28286808 seconds)
done (took 38.50733483 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.177593495 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.120288222 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.216098174 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.208650333 seconds)
  done (took 2.331369682 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.107807507 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.070183866 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.084788563 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.094408344 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.069227679 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.079098879 seconds)
  done (took 2.050262343 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.20662286 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.178885388 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.245916673 seconds)
  done (took 2.16847727 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.380727177 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.153538899 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.220838056 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.516833612 seconds)
  done (took 2.91787008 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.116605045 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.104589819 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.081604157 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.11297605 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086655701 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.064500776 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.135059008 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.071487463 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.102053154 seconds)
  done (took 2.48144576 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.131267912 seconds)
done (took 13.775338679 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.128002328 seconds)
    (2/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.235522416 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.195165441 seconds)
    (4/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.13108076 seconds)
    (5/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.114109738 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.093997778 seconds)
    (7/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.190944 seconds)
    (8/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.092494286 seconds)
    (9/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.192172075 seconds)
    (10/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.070267012 seconds)
    (11/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.269038142 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.140799892 seconds)
    (13/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.201019691 seconds)
    (14/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.204925355 seconds)
    (15/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.185421616 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.080819533 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.129803117 seconds)
    (18/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.095857667 seconds)
    (19/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.195093038 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.082231139 seconds)
    (21/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.069145153 seconds)
    (22/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.069679523 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.082425267 seconds)
    (24/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.095749115 seconds)
    (25/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.244814934 seconds)
    (26/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.163182446 seconds)
    (27/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.069831908 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.079044764 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.136853528 seconds)
    (30/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.078722834 seconds)
    (31/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.156316145 seconds)
    (32/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.113214027 seconds)
    (33/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.199534944 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.17916895 seconds)
    (35/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.074589653 seconds)
    (36/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.280235177 seconds)
    (37/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.200894874 seconds)
    (38/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.14223092 seconds)
    (39/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.08571552 seconds)
    (40/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.08094914 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.077647033 seconds)
    (42/341) benchmarking ("sort", Int8, false)...
    done (took 0.158815085 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.080608292 seconds)
    (44/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.245832915 seconds)
    (45/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.080808112 seconds)
    (46/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.229544507 seconds)
    (47/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.083449734 seconds)
    (48/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.077492574 seconds)
    (49/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.165884655 seconds)
    (50/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.238682536 seconds)
    (51/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.207878715 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.084649269 seconds)
    (53/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.133556152 seconds)
    (54/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.207453897 seconds)
    (55/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.077357276 seconds)
    (56/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.075663982 seconds)
    (57/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.181377242 seconds)
    (58/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.070764687 seconds)
    (59/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.07541511 seconds)
    (60/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.141631258 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.084363809 seconds)
    (62/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070853712 seconds)
    (63/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.085010013 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.119866888 seconds)
    (65/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066939083 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.089937398 seconds)
    (67/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066455435 seconds)
    (68/341) benchmarking ("sort", Float64, false)...
    done (took 0.13850375 seconds)
    (69/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.19785233 seconds)
    (70/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.069360424 seconds)
    (71/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.198621865 seconds)
    (72/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091521547 seconds)
    (73/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.141462295 seconds)
    (74/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.082869138 seconds)
    (75/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.14219102 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.069776889 seconds)
    (77/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.083834887 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.08837775 seconds)
    (79/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.223267278 seconds)
    (80/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.191509871 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.077406309 seconds)
    (82/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.078884582 seconds)
    (83/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.071859361 seconds)
    (84/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.08027582 seconds)
    (85/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.237011117 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.078492539 seconds)
    (87/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.225936394 seconds)
    (88/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.148505082 seconds)
    (89/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.078373713 seconds)
    (90/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.205337091 seconds)
    (91/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.072320859 seconds)
    (92/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.160301741 seconds)
    (93/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.151148292 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.090182655 seconds)
    (95/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.251532011 seconds)
    (96/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.188712327 seconds)
    (97/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.069964765 seconds)
    (98/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.071965229 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.101669204 seconds)
    (100/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.146877958 seconds)
    (101/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.159004389 seconds)
    (102/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.070142569 seconds)
    (103/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072984582 seconds)
    (104/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.078209853 seconds)
    (105/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.0688242 seconds)
    (106/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.123423442 seconds)
    (107/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.078196068 seconds)
    (108/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.073862947 seconds)
    (109/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.087285513 seconds)
    (110/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.206961163 seconds)
    (111/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.069535841 seconds)
    (112/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.073427693 seconds)
    (113/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.235514299 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.085056719 seconds)
    (115/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.07404286 seconds)
    (116/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.170551616 seconds)
    (117/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.07782924 seconds)
    (118/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.076353365 seconds)
    (119/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.082091702 seconds)
    (120/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.155606735 seconds)
    (121/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.206880688 seconds)
    (122/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.081619157 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.068943024 seconds)
    (124/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.211035856 seconds)
    (125/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.078620951 seconds)
    (126/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075612624 seconds)
    (127/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069357279 seconds)
    (128/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.069645244 seconds)
    (129/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.078078304 seconds)
    (130/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070464483 seconds)
    (131/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.069785702 seconds)
    (132/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.07656215 seconds)
    (133/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.094762128 seconds)
    (134/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.06686219 seconds)
    (135/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.079572028 seconds)
    (136/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067928015 seconds)
    (137/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.076167362 seconds)
    (138/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.094695927 seconds)
    (139/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.076421049 seconds)
    (140/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.077745717 seconds)
    (141/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.073334923 seconds)
    (142/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.172501752 seconds)
    (143/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.154827592 seconds)
    (144/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.068180607 seconds)
    (145/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.065930414 seconds)
    (146/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.219969814 seconds)
    (147/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.146035323 seconds)
    (148/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.178627333 seconds)
    (149/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.09314095 seconds)
    (150/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.08493482 seconds)
    (151/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.077569892 seconds)
    (152/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.069213969 seconds)
    (153/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.069209123 seconds)
    (154/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.078812302 seconds)
    (155/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.0691979 seconds)
    (156/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.138358216 seconds)
    (157/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.089524249 seconds)
    (158/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.08748333 seconds)
    (159/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.069235447 seconds)
    (160/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.078735375 seconds)
    (161/341) benchmarking ("sort", Bool, false)...
    done (took 0.146463968 seconds)
    (162/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.069151852 seconds)
    (163/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.068837864 seconds)
    (164/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.093861573 seconds)
    (165/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.186547403 seconds)
    (166/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.069125594 seconds)
    (167/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.067405482 seconds)
    (168/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072835272 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.086779492 seconds)
    (170/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.068979414 seconds)
    (171/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075192207 seconds)
    (172/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.077641647 seconds)
    (173/341) benchmarking ("sort", Float32, false)...
    done (took 0.140045425 seconds)
    (174/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.080602182 seconds)
    (175/341) benchmarking ("sort", Int64, false)...
    done (took 0.06953393 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091278397 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.115475922 seconds)
    (178/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.148638306 seconds)
    (179/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.098232546 seconds)
    (180/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.06771443 seconds)
    (181/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.155237193 seconds)
    (182/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.068172091 seconds)
    (183/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.069486628 seconds)
    (184/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067663081 seconds)
    (185/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.081023233 seconds)
    (186/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083345945 seconds)
    (187/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073476474 seconds)
    (188/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066032893 seconds)
    (189/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.06871201 seconds)
    (190/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.065709235 seconds)
    (191/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.170993432 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.149747967 seconds)
    (193/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065854581 seconds)
    (194/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074555608 seconds)
    (195/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.067411722 seconds)
    (196/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.097264397 seconds)
    (197/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.075858984 seconds)
    (198/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072669244 seconds)
    (199/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.066006709 seconds)
    (200/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.072442665 seconds)
    (201/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075758286 seconds)
    (202/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.069431251 seconds)
    (203/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.068736863 seconds)
    (204/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.071787875 seconds)
    (205/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.069281599 seconds)
    (206/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148531731 seconds)
    (207/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.074242299 seconds)
    (208/341) benchmarking ("sort", BigInt, false)...
    done (took 0.267043963 seconds)
    (209/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.166389633 seconds)
    (210/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.086532431 seconds)
    (211/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.069839186 seconds)
    (212/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.069363552 seconds)
    (213/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.07555431 seconds)
    (214/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.080400096 seconds)
    (215/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.160522721 seconds)
    (216/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.065735715 seconds)
    (217/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.069179113 seconds)
    (218/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.065274083 seconds)
    (219/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063914524 seconds)
    (220/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.14125855 seconds)
    (221/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.19664027 seconds)
    (222/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.150560118 seconds)
    (223/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.067893726 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072982365 seconds)
    (225/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065777105 seconds)
    (226/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073053144 seconds)
    (227/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.068809715 seconds)
    (228/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.073336864 seconds)
    (229/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068738399 seconds)
    (230/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.162646628 seconds)
    (231/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.070180727 seconds)
    (232/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.171715388 seconds)
    (233/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.067715277 seconds)
    (234/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.066336573 seconds)
    (235/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.064706488 seconds)
    (236/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.160397596 seconds)
    (237/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.067969708 seconds)
    (238/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.141399722 seconds)
    (239/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073405227 seconds)
    (240/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077780369 seconds)
    (241/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076044209 seconds)
    (242/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.065856895 seconds)
    (243/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091722903 seconds)
    (244/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.065779716 seconds)
    (245/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072653337 seconds)
    (246/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.152949236 seconds)
    (247/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.067015358 seconds)
    (248/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.066768929 seconds)
    (249/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.090595817 seconds)
    (250/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.071701316 seconds)
    (251/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074863742 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.07110097 seconds)
    (253/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067626284 seconds)
    (254/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067015695 seconds)
    (255/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.067442266 seconds)
    (256/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.068304507 seconds)
    (257/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075854575 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065991772 seconds)
    (259/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075817128 seconds)
    (260/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.074700623 seconds)
    (261/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.068602005 seconds)
    (262/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084921624 seconds)
    (263/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082285933 seconds)
    (264/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.068758305 seconds)
    (265/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.067053297 seconds)
    (266/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.068492433 seconds)
    (267/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.06811303 seconds)
    (268/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.079535993 seconds)
    (269/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075127295 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.068026747 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067785319 seconds)
    (272/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.072864523 seconds)
    (273/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.183696907 seconds)
    (274/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.068989988 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090917109 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.066496401 seconds)
    (277/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087386789 seconds)
    (278/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.070654958 seconds)
    (279/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.07700839 seconds)
    (280/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.068382176 seconds)
    (281/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.069730674 seconds)
    (282/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.071695583 seconds)
    (283/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.068233863 seconds)
    (284/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.068793059 seconds)
    (285/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.06833783 seconds)
    (286/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.06667245 seconds)
    (287/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067325573 seconds)
    (288/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.189732084 seconds)
    (289/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.065643808 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148367321 seconds)
    (291/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.096249944 seconds)
    (292/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075998072 seconds)
    (293/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.078666812 seconds)
    (294/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.067484407 seconds)
    (295/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.067668291 seconds)
    (296/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.068480044 seconds)
    (297/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.06802364 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15356583 seconds)
    (299/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.068323298 seconds)
    (300/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.06652521 seconds)
    (301/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.066576775 seconds)
    (302/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.068363973 seconds)
    (303/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.068933841 seconds)
    (304/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.067334005 seconds)
    (305/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.065758767 seconds)
    (306/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.066054736 seconds)
    (307/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083240292 seconds)
    (308/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068462271 seconds)
    (309/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.064204251 seconds)
    (310/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.073000319 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.431677129 seconds)
    (312/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.076358031 seconds)
    (313/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.0778015 seconds)
    (314/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.190220025 seconds)
    (315/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.181023791 seconds)
    (316/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.071129951 seconds)
    (317/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.076995277 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.136181813 seconds)
    (319/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.087237587 seconds)
    (320/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.076812966 seconds)
    (321/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.075097805 seconds)
    (322/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.074352026 seconds)
    (323/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.073826002 seconds)
    (324/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.087101236 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.145309272 seconds)
    (326/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.072839082 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.15531729 seconds)
    (328/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.073384547 seconds)
    (329/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.07460538 seconds)
    (330/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.072548263 seconds)
    (331/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.073131081 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.125735078 seconds)
    (333/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.073211672 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.071792515 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.090867623 seconds)
    (336/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.095864387 seconds)
    (337/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.085586632 seconds)
    (338/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.074547094 seconds)
    (339/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.071770421 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.149631593 seconds)
    (341/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.142555365 seconds)
  done (took 37.856646337 seconds)
done (took 39.41980939 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.098779642 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.086065637 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.084343247 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.080947473 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.084410976 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.08297422 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.083931172 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.081661506 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.082877461 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.082315527 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.082468502 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.070041615 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.078293774 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.08591443 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.079915427 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.086634121 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.083091655 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.086389599 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.07045732 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.084910524 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.098193139 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.082524771 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.078937413 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.084359399 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.070121013 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.079698921 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.094749897 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.092172082 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.077217955 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.079875535 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.07774182 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.085300049 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.077181566 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.075830348 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.082888901 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.075607273 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.079491565 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.077277175 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.093910636 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.075820568 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.070116346 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.08244356 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.077551169 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.077710017 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.078424942 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.082186979 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.075028586 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.083328203 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.069840763 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.081200139 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.094808381 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.075384354 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.076794744 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.078546565 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.075134717 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.079114149 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.077035219 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.081729018 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.072948747 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078955254 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078773987 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.078437091 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.069606693 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.078490529 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.077750318 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.077307146 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.068127504 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.075138619 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.069264315 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.069730548 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.068743746 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.078796996 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.076608039 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.074437893 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.068974376 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.069453051 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06920201 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.082155092 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.075945098 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.079085315 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.070160516 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.075162334 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.074539865 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.070040829 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.075597674 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.081312394 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.068443632 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.070096256 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.068643714 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.084292492 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.075795384 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.069040128 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.081271657 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.075571253 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074921767 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068052537 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.068009901 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071991238 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.075122141 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.069095538 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.067861458 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.075190934 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.074810694 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.078715787 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.069660492 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.075126633 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074966112 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.06815479 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.078436805 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.076499753 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.078262123 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.083022858 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.078351465 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.081426365 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.069663452 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.068102103 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.079520727 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.069310908 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074590141 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076907999 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.074879077 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.077527998 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.069678346 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.068402821 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074251477 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.075914722 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.0693545 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.069606143 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.068893248 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.078744763 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07663294 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.068084442 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.069070428 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.07794039 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.077698576 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.068728269 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.068207423 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.078457538 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.068089598 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.075127356 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.075127132 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.078029562 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.069835815 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.069423155 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.212422739 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066951851 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.068225098 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.074724548 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074597084 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.069163306 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.077910814 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.075961094 seconds)
done (took 13.518980874 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.070540257 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.10937077 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077236803 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.086384755 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.081654391 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.070977092 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.07345583 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086401207 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.074113764 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090138067 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.098211227 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.092629478 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.097146597 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.069588845 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.070066622 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.071469138 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.068310241 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077645737 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.084965415 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.093924685 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099650902 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.070434834 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079460309 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.087029257 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080890194 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.087120346 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.071410535 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.070758207 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.07267046 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.12918616 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.096061915 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.069460388 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070823341 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083550463 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.084578414 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.077339695 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.070409802 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07402764 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070241467 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.069800999 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.071686786 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.087798126 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.074626413 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.074233907 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.071190327 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.071525459 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.070088081 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072521369 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.082083222 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070917695 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075328592 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.07960193 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068961383 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.069373052 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.068169644 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074353786 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.070160458 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.070691383 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.070064506 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.06976903 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.070064408 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.072084264 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070369527 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070505374 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.073354083 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072368024 seconds)
  done (took 6.822422274 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.086933418 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.096698747 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.084857975 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.085740215 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.069552199 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.070363642 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.070680203 seconds)
  done (took 2.297146032 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.069185172 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076925718 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.081390726 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080314931 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.090327905 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.07740658 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068416684 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099456765 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066805245 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076178819 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083311552 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081250585 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071172582 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.0795114 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.0689529 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.082043776 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070474406 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077388804 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.078566606 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.083904624 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074302832 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.101054927 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.083870243 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.07049613 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.084033706 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.07814874 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.072864668 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070216131 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070873414 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069859777 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.070295685 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.092369453 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.077244607 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082372553 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.071012097 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.069237736 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.074714933 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070634877 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.074379134 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.079078653 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.073622123 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.070106532 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.070553886 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.069378886 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070939033 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.074518438 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.071229677 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.069359425 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.068501603 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.076376599 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066957438 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074123094 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069918809 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072521229 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.074674908 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074041144 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075714609 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068377747 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076464754 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.074507712 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068467165 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079894736 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.082361882 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.072221632 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.080793752 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.078530406 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.075290016 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.074099715 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.069612786 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.069031417 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.070514348 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.081892589 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.073588969 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069986267 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068367687 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072512306 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071466031 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082486873 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082656571 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080777223 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070633371 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.069928315 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073717823 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.08542214 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.075335703 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069717945 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.070692865 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.068936876 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074532043 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.070416002 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074303767 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.070006049 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.077235891 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072328543 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.072349132 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077820973 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.070028732 seconds)
  done (took 9.002941449 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.073286813 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.071982247 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.070764509 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068828999 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.06927571 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068758539 seconds)
  done (took 2.192462108 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.093887016 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.071406752 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.083069657 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.070879837 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.093399649 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.077500041 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.077442198 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072608806 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.087189182 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.081472339 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.077391858 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.079769857 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076488475 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.072094021 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.077000458 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.07166137 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.077203348 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.074179106 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080397899 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.073092899 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083720941 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072020681 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.075580635 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082804978 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.074385113 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.07178431 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072105645 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080964643 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080561674 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.072280401 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.071980013 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.073540137 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.079375203 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.072369404 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.077128234 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.079472512 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070340282 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.076245389 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072905007 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.073435531 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.079167375 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.073252573 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072399868 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.076092897 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.071946448 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.079197558 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.075970593 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07425008 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.076778042 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.075685004 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.075935869 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070749444 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.073643955 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.076279531 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.079207495 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071996161 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.075987798 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.076726051 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.072080292 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.079342048 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.070255344 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073580743 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072048215 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.073670194 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075339193 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075634351 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.079249816 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072222796 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072013552 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070206442 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.076371684 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.070220404 seconds)
  done (took 7.198357722 seconds)
done (took 29.225982232 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.557105427 seconds)
  done (took 2.25912767 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.601757795 seconds)
  done (took 2.348140434 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.566446734 seconds)
  done (took 10.311736678 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.301670584 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.325869929 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.743275954 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133064331 seconds)
  done (took 3.290570267 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.759545631 seconds)
  done (took 2.516418052 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.236575519 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226248909 seconds)
  done (took 2.222875236 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.339674151 seconds)
  done (took 2.086827786 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.159392942 seconds)
  done (took 2.909409784 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.230639864 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160023218 seconds)
  done (took 2.148816515 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.546552239 seconds)
  done (took 2.298902583 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.294843124 seconds)
  done (took 6.048579183 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.237617795 seconds)
  done (took 2.031457079 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.235422209 seconds)
  done (took 1.992575143 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.05553604 seconds)
  done (took 3.808670368 seconds)
done (took 48.02902545 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.087784462 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087299559 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087195322 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082239574 seconds)
  done (took 2.065100073 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076333352 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071502012 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074885179 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074639355 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073228462 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073844324 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073975454 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071011288 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072921712 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.070802897 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069977869 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071667259 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073857434 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071436185 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073599421 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074453244 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.070862547 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071018229 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.072907903 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071133086 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073417071 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071319525 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.06920083 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070580421 seconds)
  done (took 3.493102358 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.081911948 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.074933506 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077241368 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072641144 seconds)
  done (took 2.071716116 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.080402095 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.080000092 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.088321557 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.093000631 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078031939 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078202922 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084906922 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085278863 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066439646 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088242863 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069593719 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067470657 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067748769 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086327484 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084127523 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063238613 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064977438 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078095651 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077293664 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.08089023 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.06959694 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066410295 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078350096 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078316615 seconds)
  done (took 3.617464609 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.081740328 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066614978 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079676537 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092036167 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092905056 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066332534 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.07949238 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.09413556 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128419318 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.069020733 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075587153 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.068789759 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.108676906 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.068978862 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.085206063 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112837463 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115863496 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.073130899 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.10258566 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.069099123 seconds)
  done (took 3.507425245 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079747546 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.07053421 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071452251 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066595141 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077857541 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073779175 seconds)
  done (took 2.214718435 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.072491318 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.070850381 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070024849 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.075558324 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.073846279 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.071080569 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.070375749 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.069719265 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.069202223 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.070226301 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.070013936 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.071005681 seconds)
  done (took 2.617761363 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.161416534 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070099429 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071651305 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067218861 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071848499 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068180518 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082984502 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069416183 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085476752 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067771737 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.06778377 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069857245 seconds)
  done (took 2.720600918 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104468893 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104491679 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150554297 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121746791 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121643707 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099446235 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120847515 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095610437 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161804195 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137885232 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117508533 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094407081 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087432034 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070572449 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100334763 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102165458 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135875657 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073254821 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114351363 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165902328 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115473098 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.112627067 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122422193 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117629418 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081798651 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123115896 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095237826 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102792914 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12497713 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11068775 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120154323 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098505227 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072851948 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072100762 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149997911 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101421881 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108967053 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093676901 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100835477 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089118545 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108043462 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070526917 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.088944781 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107961789 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085339614 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117290632 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.08891833 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104614454 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083754416 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.133113289 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108386063 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103496056 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090007689 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108840813 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134065325 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097661529 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112198137 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111170444 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085053454 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.122325796 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103118695 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.251908821 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095277206 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083572708 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.160433268 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090313074 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113397441 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11486889 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.086383007 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093382081 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106949334 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134338281 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112222798 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.111526023 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118448361 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097440452 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111243027 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.092996048 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130206993 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094958588 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.075905061 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109401172 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.132952879 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089787014 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105123339 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134142405 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09296946 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078742148 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093185296 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119643274 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081517722 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.09699269 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071072712 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.09815068 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108030826 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097864693 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112848889 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108047835 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079374118 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125186713 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11033011 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073975309 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118152865 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099862819 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153456661 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096799481 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077545179 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100796821 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095065777 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149588317 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086222897 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081599801 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099740859 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142294864 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095468882 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170155758 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097695565 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129608444 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098452718 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089093331 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076280913 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091508455 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103474571 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109056327 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103316339 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090003662 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.078089179 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088407208 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097042049 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093099767 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08102056 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113514865 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.101912851 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075281833 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088209782 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076658837 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123809704 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077588974 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11060788 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12321191 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.07828528 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104086557 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096687684 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106455184 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097038471 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106109977 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137606016 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.115019445 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079511444 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.083157222 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106967719 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.139603388 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.112109063 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084366862 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075925712 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098132004 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108325055 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095053428 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104246042 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098463411 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105498495 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095317735 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136209051 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11453175 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088639139 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093064459 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095017947 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.119014381 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076086069 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151528489 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092165804 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115943116 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084917599 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136409905 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111847847 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087809007 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083411953 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094153242 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.10185737 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103440111 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138366079 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.09443274 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071990857 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090727146 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127553775 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075016217 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097809345 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.089225446 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091129893 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114896801 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.081968286 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080875096 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068433937 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099544086 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131608962 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068163964 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110146919 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.112799115 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096096398 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.099637119 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.068579459 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097111946 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132372193 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10264586 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130960234 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112452966 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095538849 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112453515 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.095352574 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.101158727 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078398939 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.119644885 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.12770878 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091039384 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087372833 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12661142 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113861817 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.127284504 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.092956176 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10824141 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.099709983 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097380222 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098260109 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.095353512 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135362716 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115942537 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.119480518 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084023157 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102337965 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105597705 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128547704 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080803129 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111368525 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.073208857 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106256466 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075682163 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103440723 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077987677 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109776178 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078051357 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096027244 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068920816 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.072183868 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13449668 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.106478407 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085549269 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083302935 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.12831439 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.124935897 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079781529 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098454193 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100732275 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097135776 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097289645 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104896712 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.084112323 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.479952008 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114902876 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083651863 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.085458932 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104682326 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099644423 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113736811 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.089627602 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.080525114 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142649855 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109862756 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099065151 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08214835 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09950886 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.126554291 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093978434 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091279699 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109351215 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107532551 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146084531 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.094212667 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.102076533 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121814879 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083897423 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.095790747 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.073276159 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088761053 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.07982304 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.11315644 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079716678 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111682593 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.071765949 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.1342676 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09022351 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.09571387 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105824676 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099975145 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131165355 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094457225 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134805904 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092686877 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104184197 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110600201 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09662476 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08285936 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107066085 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098360468 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111850836 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.099624867 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108342935 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112216012 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096112772 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145089433 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092323553 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122707589 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108101801 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109893817 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108677089 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120731062 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143009935 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115434627 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114331857 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076847931 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084456054 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106584967 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101981534 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147484513 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104456884 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.075019568 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088164067 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093917023 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099134674 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106432838 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083940715 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144697204 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089012622 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088831416 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114712888 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.09183863 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098681828 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07758117 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096296416 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.100788312 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095125676 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095111194 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107591284 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117352169 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11353901 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.132435919 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099338183 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.09344516 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118873758 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111135203 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110289235 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086264513 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086360078 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1229278 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101556661 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.127603491 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.099729007 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094558932 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101060118 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089659836 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098424678 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09552961 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.108138893 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079835637 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075966556 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.06886838 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.072274973 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.116059831 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10807666 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099803426 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098689324 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074221718 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102408353 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098865194 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07245445 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086808947 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09265592 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097404716 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.082842355 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090936894 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.112838807 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.090900998 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101243227 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098319972 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126721303 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099567144 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087124052 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138972902 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125287221 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085937614 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090598452 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.07207333 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078971076 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099793307 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141292836 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116375662 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.363823606 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087654681 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.081721533 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091584606 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.075974454 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.092026146 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.09340817 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10726955 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096163271 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.115874061 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107296733 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078455825 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106049325 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100027351 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094803893 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.099296566 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104499343 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107936108 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.125849824 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103063799 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099688185 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078948995 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.083011572 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077591634 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081445782 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104078814 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079275919 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078382568 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13255855 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.093038133 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106133206 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110951952 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087159221 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077860875 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13952446 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.074469612 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14002928 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075354323 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084597723 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082429256 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080789957 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095038854 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106471157 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09753944 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11446107 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106606258 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106103807 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112085477 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156797549 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07254319 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145704067 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077394195 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077252558 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077819848 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112640889 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092070688 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109399341 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14231096 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09119531 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094438774 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078507109 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129780827 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.101506647 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106010404 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084253548 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080439184 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130509901 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084524204 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.075948758 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089811456 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114500197 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07493781 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.28219252 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087354689 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081953494 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114802268 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.633191668 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091977867 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.081572899 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091034194 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143377636 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130193304 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084804253 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109915893 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120645485 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092137897 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085343753 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109089602 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.184113782 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07598762 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096030611 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104816423 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099865892 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09458488 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093651433 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088767406 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.094044339 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087595022 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081589896 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108795859 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089163548 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093312279 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098931601 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084746814 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.082003827 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132307531 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10520553 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083954072 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089778592 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.101970893 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089071985 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092453202 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.071543905 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115225006 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092692739 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104619006 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092811839 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10854503 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120694886 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092278806 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116603349 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.092136295 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112563569 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088898547 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.083031845 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107176917 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.082520499 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081534053 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121441759 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.088071937 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.097073412 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108453613 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.098648446 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116741668 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119624336 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111673124 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098629084 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080354461 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087263492 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.089770662 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079036157 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080451327 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075575824 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.241446749 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11004907 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088390389 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08585253 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118888131 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086399482 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107944946 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.105611228 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114745341 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087890825 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105977213 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113735797 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094730374 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108245445 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105158524 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.133032591 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150965463 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104119899 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129353189 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138992951 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.081660223 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.080187625 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072661218 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120712384 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084179387 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.086088112 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086127937 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138651434 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.086521226 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100125162 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.236395646 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085361146 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086322727 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099698221 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071424589 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084750033 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10937424 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086172037 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081761051 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099523572 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0852073 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118607184 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113389787 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092505173 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08788527 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085704517 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097885879 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.108748921 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.131374038 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091761739 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076766368 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108689672 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10502338 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124881837 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074435019 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082140861 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131300165 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092860702 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104917591 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081654408 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121845295 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134452539 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090983361 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134863378 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074959122 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087751887 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092105282 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.129876352 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078982661 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09048696 seconds)
  done (took 65.291570694 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.17766986 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.150873803 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.087530761 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.099774469 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.189326271 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199678579 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.121680739 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.098547143 seconds)
  done (took 3.190156577 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.073250718 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.087289258 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.083440382 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.211275843 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.111172446 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.070038436 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074783981 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.084462529 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.069127987 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068768491 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103757246 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.069631267 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069160653 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.376164369 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.070409807 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.075938485 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.071648207 seconds)
  done (took 3.775233941 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.333610458 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.421540599 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.256736757 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.648310109 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.144662343 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.489747452 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.079441708 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.085090974 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.63262719 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.374528092 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.133344106 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.09019971 seconds)
  done (took 18.70538233 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.082114282 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.083868494 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.083510312 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.080129907 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.080153894 seconds)
  done (took 2.436507982 seconds)
done (took 117.476923557 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.089319787 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.180952816 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.072699868 seconds)
  done (took 2.299514278 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.088116102 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.086323945 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.086587491 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.083786191 seconds)
  done (took 2.361697343 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.079622504 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.081604131 seconds)
  done (took 2.173304519 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.229693969 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.18324889 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.09577802 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.088507125 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.085215393 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.085337498 seconds)
  done (took 2.281895675 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.077521595 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.07663464 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.077008423 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.077333422 seconds)
  done (took 2.317714238 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.07342946 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.070685209 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.072862777 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.075563953 seconds)
  done (took 2.302617818 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.091033414 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.089019749 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117909907 seconds)
  done (took 2.30824747 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.088692596 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.087898168 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.083129306 seconds)
  done (took 2.278923073 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.115568574 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.103006047 seconds)
  done (took 2.232603657 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.085801363 seconds)
  done (took 2.100410511 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.095250159 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.103414965 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.143222596 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108737443 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.141681655 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127152254 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078839948 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079794693 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075930522 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07484858 seconds)
  done (took 3.037711988 seconds)
done (took 28.298758074 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085375557 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.376166019 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.369661413 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.092863764 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.676847626 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.365444072 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.003029479 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093144829 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101740789 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070082318 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087016478 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650966297 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.001606298 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.32776335 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.979054609 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.326326738 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.652201394 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070243659 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069073671 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070226739 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.985568165 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069180816 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070115585 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070224404 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.651002648 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.376227036 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070442068 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.326556482 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070110574 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07299538 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.35871681 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071267935 seconds)
  done (took 16.650176936 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.075831525 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.126599515 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074924286 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085923154 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072194299 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071458435 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073299245 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070706046 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.1126146 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070156139 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087182505 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.0696911 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073540675 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071460504 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089748332 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070423688 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072284791 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071478432 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070528818 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.074553079 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08863761 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071804771 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072608975 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071074131 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071252818 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083105263 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071237293 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070149233 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070445631 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072629019 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074044806 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071827693 seconds)
  done (took 4.510208277 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.127945418 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129019427 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075634204 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.111612438 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120414804 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071849651 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.15306966 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093522914 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116199481 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070605338 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087659673 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070032023 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.106073665 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071392877 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090936001 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070513132 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071966409 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.0707384 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070533653 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070799831 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088870728 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070088212 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070872793 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071124805 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070887206 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085144491 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071441487 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070693953 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070232674 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07272655 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074654088 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071677453 seconds)
  done (took 4.769260781 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.07500084 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.074212022 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.082051418 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083242817 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069063578 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070883665 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071980682 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068739586 seconds)
  done (took 2.631781246 seconds)
done (took 30.595886682 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.084407369 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.071550293 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.074189791 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089891311 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.07614171 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072744593 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067022446 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.077089206 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073658003 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.074265142 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07768427 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.072230305 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.075142485 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.06935906 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.075495379 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068396887 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.075421531 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.07532834 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.075727349 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.076926707 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.073680245 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.076455492 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.079841586 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.075795619 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.075617451 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.076189281 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.080076347 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.077088109 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.070943587 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.074635414 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.073455381 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.085072042 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.075362251 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074436867 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068062823 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067707237 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.073175411 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.072024213 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.075068119 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077435004 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.0702048 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077109458 seconds)
  done (took 5.145616401 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.094736021 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.09803255 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088636415 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083575236 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.109543728 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.084284397 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.092290191 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081071612 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.07990608 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.095812019 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.077193915 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.083933591 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083470537 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077401214 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080174432 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.077139664 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082116223 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075515803 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080716901 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080648366 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.0928507 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073542201 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080920875 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082143117 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075787913 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081774744 seconds)
  done (took 4.243552269 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.078114866 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090339968 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.096706163 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.14421459 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112061271 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084610336 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084530709 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.100049658 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103572022 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070579325 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.074529384 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096337231 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099064225 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076825534 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.1092099 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088663601 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082731758 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.072262447 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076357002 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105210919 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.09345651 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088938777 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.103291532 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090689416 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069615889 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079604996 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076671576 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.085209053 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077684853 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.08212624 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074715113 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073379224 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070644005 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082477468 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073853858 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067940454 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.095225633 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082604283 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085863076 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.108492211 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080001318 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071401943 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.100306445 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.136719193 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.072280578 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.075733436 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.076834233 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.085306218 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.074039377 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.103149955 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.09142709 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.072402482 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.091851353 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.073860558 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.073788187 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089918128 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.074124958 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.074493906 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.084972281 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.077836514 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091411945 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074987311 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090598569 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06989096 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.082404179 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.072963318 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.07385177 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.071483745 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.109388024 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080230062 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.12698773 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.073585663 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.071020542 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.085019736 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.084729741 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07979221 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.072647987 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.091299144 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081606012 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073278656 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.082002484 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.074074147 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.075510643 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.109022156 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.071557213 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.070274806 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.070634024 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.075030058 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.075566882 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.073053353 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.086388226 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.071685013 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.075872417 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.088810899 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.07109435 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.07099801 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.074319032 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.073869552 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.071855887 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084066959 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.076475813 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.074129348 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.086071852 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.073657989 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.075971822 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.08720996 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.082229832 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.07209762 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.073678136 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.075251647 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.074125331 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07679698 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.076059369 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.074636743 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07937087 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.080023425 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.077929202 seconds)
  done (took 11.75870435 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.172314395 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.160392962 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.074144341 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.157207376 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.08162676 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.07759431 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.157772136 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.093530069 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.073260936 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.075207247 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.072597553 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.102413548 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.098175049 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.111099385 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.077745979 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.074157181 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.099667845 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.107781306 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.159786231 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.154436525 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.097708062 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.081866378 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.075798991 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.0743556 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.074004333 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.082568745 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.092193106 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.082315011 seconds)
  done (took 4.936763923 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.081300888 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.089176195 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.077319201 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.097510505 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.092231 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.073555435 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.075213644 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.074805435 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.090722449 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.080317073 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.073085925 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.078275373 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.077346517 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.073898299 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.07376432 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077303587 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076981422 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069608083 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074183167 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074735169 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.081036934 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095822452 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074931163 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070840553 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073414752 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070444333 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.077124446 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080122333 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.07023511 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100632819 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067794631 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074756384 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084574888 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071438187 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.071015307 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071645367 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.071491691 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070641032 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071275033 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06879334 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.070558953 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.078379761 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.071297092 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.078806485 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.085751576 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.078507347 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.07468942 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.076064594 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.07604432 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.073526974 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.076676989 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.076368198 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.076365629 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.081220413 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.076065264 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073451309 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.073270246 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.104431936 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.079317608 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.072421641 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.07253564 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.071230887 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.074924842 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.080437875 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.088922684 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072797101 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068750521 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070345929 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.076035286 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084949411 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.072186627 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.077650488 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.068959056 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.071640731 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.074439614 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.074854372 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.072336269 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.070260798 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069793748 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.07134883 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070880285 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070111305 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069519021 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072824268 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068534686 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068768235 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070613128 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071675709 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076856095 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069588316 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073305309 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072239642 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.070293117 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073939543 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.076198205 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073228539 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090694268 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078802917 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070894915 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068130045 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.08465363 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072601805 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069473131 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075753941 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.07450467 seconds)
  done (took 10.05734898 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.097586438 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.074622037 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.093294282 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.100750691 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.083872131 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.078926644 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.087942763 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.074351493 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.089741268 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.072266138 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.082206714 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.071659518 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084464196 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079829829 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072256113 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080374838 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072487427 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090867681 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085524809 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069134517 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079399673 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082509079 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082902743 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088744166 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088093816 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089123921 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082810938 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073340202 seconds)
  done (took 4.403230433 seconds)
done (took 42.571239716 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.11221451 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.287219607 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.117642381 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.324014287 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.164490371 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.318585026 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.239360452 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.112427802 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.210539503 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.134386955 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.437975559 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.529664118 seconds)
done (took 71.103855449 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.125732683 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.255911482 seconds)
    (2/2) benchmarking "String"...
    done (took 2.325018136 seconds)
  done (took 6.609438601 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.711861323 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.110705713 seconds)
    (3/3) benchmarking "different"...
    done (took 2.158178944 seconds)
  done (took 9.015999926 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.201273912 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.139989092 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.36051723 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.109099011 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.112295072 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.500205028 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.914551535 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.565961152 seconds)
  done (took 33.741052786 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.386521551 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.331481222 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.868761355 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.900943782 seconds)
  done (took 17.573878401 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.717462379 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.371896089 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.373655416 seconds)
    (4/4) benchmarking "different"...
    done (took 2.3679082 seconds)
  done (took 11.929719611 seconds)
done (took 91.336057926 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.114912945 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.188437258 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.156201836 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.264184628 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.146155719 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.138183117 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.112792774 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.137527128 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.11047241 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.112438835 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.548584336 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.110015184 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.108801445 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.133684608 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.110041649 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.13675656 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.579800671 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.116344715 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.172580706 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.686357522 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.589025028 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.118856395 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.121817229 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.163961879 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.208898682 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.155310225 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.650004601 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.113667817 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.73216979 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.126969563 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.288184527 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.113245332 seconds)
  done (took 215.604189946 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.110752094 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.121497743 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.175471329 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.135386357 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.632763328 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.296137129 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.255532979 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.720509278 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.106266873 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.131146067 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.378722045 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.102388112 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.35497609 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.112573227 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.101646071 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.139777002 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.241068764 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.3630361 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.098371834 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.294812713 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.132888138 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.305436781 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.336487527 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.317203079 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.128730869 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.157043152 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.115120811 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.103552709 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.292109363 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.24298032 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.114107819 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.119384895 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.305737265 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.964797254 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.114974651 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.108968846 seconds)
  done (took 182.773581644 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.276648598 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.112122837 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.162928858 seconds)
    (3/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.101773106 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.236285578 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.865617536 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.844950487 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.098876933 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.099009957 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.099549957 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.103673103 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.096750586 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.166282006 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.492478169 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.118678663 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.095674941 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.099195952 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.344219861 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.101610517 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.095343387 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.094479866 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.161043824 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.468298458 seconds)
    (23/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.093863036 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.235587705 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.097664003 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.106832806 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.23429747 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.105110575 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.093054072 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.234560063 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.098375461 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.177090009 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.232251297 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.104893693 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.179680895 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.101830428 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.587476559 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.096881466 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.098444848 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.100798953 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.162689925 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.096550826 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.215757846 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.189222577 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.096031999 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.114496361 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.289606967 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.778554275 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.099962221 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.098843504 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.09807502 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.103819962 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.090988763 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.862140386 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.09948753 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.126780402 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.721955104 seconds)
    (58/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.09463722 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.091652918 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.092951831 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.094055714 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.093145465 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.091327704 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.099457545 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.124257471 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.902657972 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.128046799 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.47520334 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.909968071 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.088448197 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.30154742 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.140627376 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.087906129 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.162011575 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.079983574 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.083046055 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.081699651 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.082938607 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.175454379 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.163599539 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.078798941 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.216842859 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.082559373 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.080834288 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.287009174 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.39643416 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.080545097 seconds)
    (88/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.077923812 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.090683132 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.135328746 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.077296832 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.07797436 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.085634762 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.166701017 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.075094049 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.07725359 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.076643337 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.175113926 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.073709248 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.29335713 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.293891085 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.142479355 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.314772374 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.300639999 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.073898101 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.072465456 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.086713621 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.072214481 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.073157491 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.079888162 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.071374778 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.071536747 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.072825592 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.075893235 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.071568475 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.074176093 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.086212537 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.069466007 seconds)
  done (took 445.784985497 seconds)
done (took 848.532400563 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.707777105 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.786731286 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.687547007 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.718304205 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.692685873 seconds)
  done (took 15.591661222 seconds)
done (took 17.5950416 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.100956568 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.087054419 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.077495916 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.127561708 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.095688914 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.082815838 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.116808882 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.115459663 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.101907021 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.08650908 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.119074026 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.086676843 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.099959927 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.10309039 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.146459693 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.106330217 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.086422098 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.080272514 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.125241248 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.085684278 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.086847029 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.084448383 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.083008074 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.121711317 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.151418782 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.092981778 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.080069593 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.120087412 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.092954416 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.115785924 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.140377056 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.102784627 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.117425218 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.148842825 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.127799286 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.151195332 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.089686966 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.138136606 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.087674237 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.16507238 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.125190773 seconds)
  done (took 88.456269816 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.082778293 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.212438552 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.286405242 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.112017088 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.080116459 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.288835298 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.135382126 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.201303637 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.212525037 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.298676095 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.293292146 seconds)
  done (took 26.20558412 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.076891753 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.217770864 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.289620738 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.114336644 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.079525894 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.297170772 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.144057037 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.206331494 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.214347393 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.320609458 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.308161219 seconds)
  done (took 26.274812069 seconds)
done (took 142.940774091 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.448918399 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.099581479 seconds)
  done (took 6.543891296 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.077103606 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.09028917 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.225502739 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.063370112 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.073962263 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.072264233 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.073631219 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.073191948 seconds)
  done (took 18.746857043 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.07222149 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.069230871 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.068903527 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.067845789 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.069245911 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.071587591 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.068861691 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.070362338 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.07025953 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.07052023 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.07185729 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.069653372 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.070232042 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.069133998 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.069980165 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.070940982 seconds)
  done (took 35.117492213 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.07160474 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.07069813 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.069771217 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.075367852 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.069989351 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.072060971 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.070702318 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.072732245 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.069863703 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.072441151 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.069947633 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.070802383 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.073932084 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.070385834 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.069090333 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.071199137 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.070585702 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.07366866 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.070547359 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.07056792 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.071720164 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.07121998 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.076078223 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.069818545 seconds)
  done (took 51.712180459 seconds)
done (took 114.131831577 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.288558933 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.894252371 seconds)
  done (took 9.175838182 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.088013767 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.08500838 seconds)
  done (took 6.252604858 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.083895718 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.085784811 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.084865779 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.085038525 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.084622351 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.087013077 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.084781775 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.085437726 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.085341126 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.085124277 seconds)
  done (took 22.860988384 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.084733652 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.086344974 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.085700323 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.085518753 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.08595526 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.084901194 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.087901947 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.084634287 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.086309936 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.084661123 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.084685366 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.085052848 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.084925938 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.085765724 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.0858646 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.084261039 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.086420525 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.086839675 seconds)
  done (took 39.550980575 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.085741306 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.084992512 seconds)
  done (took 6.181211948 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.084128354 seconds)
    (2/7) benchmarking "second"...
    done (took 2.086329481 seconds)
    (3/7) benchmarking "month"...
    done (took 2.085375682 seconds)
    (4/7) benchmarking "year"...
    done (took 2.086783518 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.086440481 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.086168097 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.084566339 seconds)
  done (took 16.610551223 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.085440835 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.238142539 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.285087498 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.683439925 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.087457666 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.089993225 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 3.013949788 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.088681721 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.092204392 seconds)
  done (took 22.675492434 seconds)
done (took 125.305991882 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.946721803 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.08701409 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.339885681 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.157427903 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.156957997 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.379152402 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.111835632 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.628777619 seconds)
done (took 44.822178948 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.150640892 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.090525735 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.12373288 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.123935708 seconds)
  done (took 23.357402618 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.093094163 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.425514583 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.12060189 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.059384106 seconds)
  done (took 23.735020398 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.475371405 seconds)
    (2/2) benchmarking "read"...
    done (took 2.448559528 seconds)
  done (took 6.950927387 seconds)
done (took 63.21294655 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.094252465 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.093703182 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.094869149 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.094832253 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 2.095929747 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.094720377 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.095124086 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.093054727 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.095156476 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.093129138 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.092975357 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.093736221 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.081922425 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.097639636 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.093304641 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.093636196 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.093422559 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.067955031 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.093972045 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.094779663 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.092287998 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.093918354 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.095826675 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.096599705 seconds)
  done (took 52.247761759 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.094333737 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.097150265 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.095975169 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.096225906 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.097641629 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.096936721 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.093563908 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.095924861 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.095526525 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.094235821 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.096782568 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.097017103 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.096648212 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.095340524 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.095189083 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.096077642 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.094717549 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.096682519 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.09419932 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.096455082 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.096869179 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.095475701 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.095885396 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.095578347 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.095622215 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.095306091 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.097814334 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.096057603 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.096005241 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.097597556 seconds)
  done (took 64.902175822 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.099504189 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.093753767 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.098351421 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.095592035 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.092681054 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.099980413 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.097730777 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.097808914 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.099592213 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.097060956 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.09910531 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.099003794 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.097855452 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.097091314 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.096041495 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.097813539 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.097700045 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.095796923 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.096697931 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.097919794 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.098731949 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.09520129 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.09682553 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.099681463 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.097298648 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.097501505 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.101040461 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.098121968 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.098536977 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.098655829 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.098434515 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.097821272 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.097826558 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.098688471 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.098026868 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.098928503 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.097972276 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.09755461 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.099790598 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.097664799 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.097235674 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.098557245 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.097826689 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.097739779 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.09701969 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.09670921 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.100184776 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.099333201 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.100726476 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.096756054 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.098663779 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.098202481 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.100608819 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.100078218 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.099203997 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.099246431 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.100133092 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.100001601 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.10000496 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.09960272 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.100158096 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.102478226 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.09779607 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.099757206 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.100403502 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.099774488 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.102361184 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.101342691 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.099034776 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.098692193 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.100948999 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.09944556 seconds)
  done (took 153.117485067 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.101563616 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.09991368 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.100891457 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.101783588 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.100219245 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.100444905 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.098777201 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.100120886 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.097473679 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.099058261 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.101699858 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.101004634 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.103133504 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.099144889 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.073434295 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.099585913 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.101694416 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.09997431 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.101981994 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.100631382 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.1020941 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.102311817 seconds)
  done (took 48.215603714 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.102226955 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.102610574 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.100387054 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.101230334 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.102690777 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.103152765 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.101320155 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.089486925 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.10400064 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.102581688 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.103077532 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.101959228 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.103137561 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.101510183 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.102711502 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.103382878 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.102742294 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.102581626 seconds)
  done (took 39.858773044 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.103689779 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.101808992 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.104898649 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.101700122 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.101963065 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.102420589 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.103266293 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.101771393 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.102115653 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.102877697 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.102703523 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.103445126 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.10179021 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.104391046 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.103150241 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.104800211 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.102150282 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.102838504 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.103601224 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.103652171 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.104035167 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.103314599 seconds)
  done (took 48.29628391 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.102782118 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.103590548 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.103528597 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.104648688 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.10424494 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.105627927 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.103700549 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.104058741 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.103133222 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.103456367 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.106469545 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.10571226 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.103947961 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.104729332 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.104749404 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.105984221 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.104189155 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.103665204 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.105205771 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.104855149 seconds)
  done (took 44.120065488 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.103149651 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.105744013 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.105255106 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.107912435 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.104161134 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.106005548 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.106814373 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.107021534 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.106968992 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.10571096 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.108311259 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.10706283 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.107487566 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.11032344 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.105824502 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.107615476 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.105804679 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.106670562 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.109217462 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.107683087 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.106503512 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.107725808 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.109716694 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.105674705 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.106173208 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.106621362 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.10726717 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.110135309 seconds)
  done (took 61.028404293 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.107498972 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.106106331 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.106803674 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.107715906 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.10678947 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.106182138 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.106241935 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.110007075 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.107121893 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.106190883 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.106068667 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.107924715 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.107192483 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.105964558 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.104696817 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.106992001 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.108724801 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.108066806 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.108731571 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.106803175 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.105481713 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.106375272 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.112163699 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.107427812 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.109689658 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.107885063 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.107770968 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.11045034 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.108555197 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.108390773 seconds)
  done (took 65.260232611 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.125859661 seconds)
    (2/2) benchmarking "in"...
    done (took 2.128786983 seconds)
  done (took 6.289854302 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.107474172 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.108602878 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.107810783 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.107379281 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.106946559 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.107666218 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.109352796 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.109289883 seconds)
  done (took 18.899913811 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.108176902 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.111194269 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.109345511 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.108792529 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.109456444 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.11690365 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.109078672 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.110824531 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.114253552 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.112655227 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.115095154 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.113121234 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.117732962 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.11593124 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.11129783 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.112483378 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.110203282 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.113251362 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.109816866 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.110457934 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.11423592 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.111457545 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.112802973 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.110077687 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.110442519 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.113310272 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.121636652 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.111345156 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.112304846 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.112755378 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.119191751 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.112918817 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.110347233 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.112673763 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.110288141 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.111235219 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.119593407 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.112289258 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.111577527 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.112795558 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.115211578 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.1139838 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.115578376 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.121110604 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.111605378 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.114913719 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.114720616 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.113241651 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.109560963 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.115389353 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.123718383 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.111636356 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.113503364 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.114860776 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.115463513 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.114412604 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.111472627 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.115019145 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.118424926 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.118009846 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.115986554 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.13431615 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.120296628 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.112245698 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.113801828 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.12202476 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.137167867 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.113826622 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.113691151 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.114958041 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.118748779 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.111484568 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.113288634 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.11409563 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.127599346 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.120833829 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.116074626 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.113315958 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.114373903 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.113191516 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.115454536 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.113455998 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.115109891 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.113833801 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.123001995 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.140172486 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.112445898 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.113904633 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.116268117 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.115918094 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.117353051 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.116147914 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.113155307 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.114665856 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.11371635 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.117204701 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.116090583 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.114487957 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.11254946 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.121855255 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.114125366 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.115178982 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.118811342 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.122775539 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.115445535 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.114285668 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.115066468 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.117486573 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.12494927 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.114242396 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.11554348 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.114696848 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.117089319 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.117761118 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.114196395 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.119585251 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.124422704 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.122658186 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.116324664 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.119474983 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.119581383 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.119427725 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.124320505 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.140745107 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.116159002 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.119940275 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.123161904 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.125281927 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.117476182 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.115835181 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.118900966 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.115170882 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.117680168 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.118019834 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.1172577 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.118406075 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.11648807 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.117582406 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.11617161 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.116244445 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.118430552 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.118865965 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.120954083 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.11756118 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.121127141 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.117651404 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.119107034 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.126033525 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.118490141 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.119704397 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.119769685 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.119556936 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.121012129 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.121176515 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.120048743 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.120139681 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.117927441 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.117617101 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.119640757 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.119396984 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.117975651 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.119249173 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.124584602 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.120206043 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.117930094 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.118740155 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.119829919 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.118731875 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.122944013 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.121659573 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.12215319 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.119399917 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.123318328 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.120586839 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.119960918 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.11977178 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.119668019 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.119274551 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.124381792 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.132793994 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.123901783 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.13182795 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.12307553 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.1271596 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.121271721 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.125068685 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.122236123 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.123246294 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.119187529 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.120860579 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.12036243 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.124740269 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.142845656 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.133265745 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.120282808 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.119838072 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.128244879 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.125358773 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.123713342 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.119357946 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.11940202 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.123829286 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.119099957 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.119140006 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.120904811 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.123769784 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.121260202 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.12140302 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.124107137 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.120515738 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.122329736 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.120574433 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.120721147 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.122341188 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.12176734 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.120727065 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.121037271 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.120339552 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.127233803 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.123841468 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.121756582 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.121914643 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.124643177 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.124326875 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.123564128 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.12339529 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.126060435 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.119257511 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.124397087 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.13379462 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.121294317 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.123409431 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.122345938 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.123242001 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.125039361 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.125780548 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.126212653 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.133830174 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.125890056 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.123218809 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.127931072 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.124204805 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.126412716 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.124076007 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.123723406 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.124710032 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.124618564 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.124190641 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.126683903 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.132589216 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.123690821 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.124358508 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.125031607 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.130334397 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.125983603 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.128754232 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.125015326 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.127309356 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.132580988 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.13080962 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.125817438 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.125024289 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.127520178 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.124955547 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.128114051 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.126322134 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.138272759 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.137025658 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.124984185 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.127008452 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.125603837 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.126931935 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.129534215 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.124535208 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.135339367 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.12484405 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.129518688 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.130399053 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.126200228 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.125404593 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.133618748 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.127189085 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.130048501 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.128977267 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.127991175 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.127533781 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.126311204 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.129097531 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.126733621 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.129581044 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.129799178 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.126435371 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.128930111 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.127200836 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.136038822 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.124828064 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.128849739 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.133892592 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.12730799 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.12571213 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.129472001 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.123059004 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.123003134 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.129766832 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.127912337 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.128734731 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.127153245 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.131253218 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.13696481 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.132201118 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.135140659 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.128309897 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.136140473 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.128552373 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.130606538 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.131138265 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.133214411 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.138610922 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.125640253 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.128312757 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.139237902 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.129225567 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.13055099 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.134716736 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.13158261 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.131471345 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.129347983 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.132551659 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.13883889 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.133465443 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.131172558 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.130731783 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.128864022 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.130642735 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.133133746 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.130740609 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.132335256 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.130018696 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.128133581 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.130716291 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.12907242 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.133073277 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.13439649 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.129462765 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.129213718 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.137941036 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.12977233 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.130226746 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.134196137 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.129969236 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.139465469 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.130236299 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.130903604 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.129904886 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.130930149 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.132902553 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.13013908 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.129477329 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.130770883 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.130571145 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.132968579 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.145157774 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.137022814 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.131938614 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.133072208 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.129478161 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.134205861 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.141262882 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.155870269 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.129474966 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.132726585 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.135035057 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.136737028 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.131737957 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.138494697 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.134849358 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.109650324 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.126764558 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.109481476 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.133024588 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.143612469 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.131181674 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.130537949 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.130578191 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.136914327 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.131383541 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.132199702 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.130878731 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.134606111 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.134314341 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.143325069 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.127977218 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.124409772 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.131523787 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.132633853 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.131318301 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.130095917 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.134000419 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.135152384 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.133156675 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.133792045 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.136283511 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.135316852 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.134772743 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.13581578 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.142987361 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.132716807 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.131701143 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.134188518 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.131664108 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.135099684 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.133458165 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.135241657 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.131827557 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.132138183 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.132908875 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.134845468 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.139960857 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.134757714 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.132709966 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.132087092 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.105998665 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.127604386 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.109137991 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.13319969 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.139874146 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.122393973 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.132138845 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.141789964 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.133386695 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.134147594 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.137397743 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.140846284 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.134098996 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.132448875 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.13412182 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.136065512 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.137350304 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.135424596 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.132782826 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.132944574 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.140619693 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.133844465 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.134961955 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.134170841 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.133504326 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.138482546 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.136539454 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.139446521 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.134332708 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.135502053 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.133930331 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.13528497 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.136723314 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.137069061 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.134424201 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.135000471 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.137842265 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.138063784 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.139515397 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.135511495 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.136121656 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.137428342 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.135044708 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.134665854 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.135215034 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.135546155 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.134468365 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.141027145 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.132416318 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.119204052 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.138691037 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.139084795 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.140513551 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.134713081 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.135535285 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.135470308 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.137693167 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.144392521 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.136461852 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.13578958 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.136457134 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.136854945 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.142918775 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.13841136 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.141075031 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.136961076 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.138893602 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.137640984 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.141319322 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.146364023 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.141657352 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.142766723 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.146168312 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.142418753 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.13791625 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.138700303 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.137395654 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.138113163 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.13785753 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.14208754 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.140944443 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.141074318 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.140446948 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.140882679 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.138184832 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.142646234 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.137954944 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.137534072 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.141984492 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.149456079 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.149794965 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.139703695 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.143032171 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.13938717 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.144406724 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.148216067 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.139105858 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.138781657 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.138775756 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.143021966 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.138990511 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.146963993 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.148496071 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.138341817 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.13675302 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.144195578 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.1559087 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.142083137 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.150428215 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.169906387 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.139818776 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.139875917 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.111161487 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.143772256 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.143221947 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.143946284 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.142888177 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.148438483 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.142853972 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.141097266 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.148279136 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.140814619 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.141435989 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.142642153 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.141948077 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.148018889 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.143128226 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.120352817 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.142258812 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.142141636 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.14264528 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.14514336 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.142882294 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.142527407 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.141211364 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.146011898 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.142987065 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.143027919 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.152181719 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.14263483 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.143348446 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.15793175 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.61796611 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.144321769 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.143154641 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.145223438 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.1532487 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.147022333 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.143916324 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.149070065 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.151770208 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.147219144 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.152691166 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.147502382 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.146721674 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.147195388 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.147077404 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.143254108 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.157607887 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.153428488 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.143651812 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.145976675 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.151836873 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.144538558 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.152649002 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.152084689 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.146231502 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.146085926 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.145525377 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.144067651 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.145514366 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.145455855 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.153546241 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.155367301 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.14752955 seconds)
  done (took 1271.33750704 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.147395282 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.148349497 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.146061236 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.146187784 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.145630127 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.145953471 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.146915915 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.147939106 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.147248446 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.147150643 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.150667552 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.149109931 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.146683084 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.148620805 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.144111494 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.147138282 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.146332327 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.145794912 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.145082156 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.146334745 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.147589887 seconds)
  done (took 47.158504544 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.147604901 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.146513454 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.145859212 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.146638527 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.1474573 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.146271349 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.146251534 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.147618348 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.147162708 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.151477333 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.150386722 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.147881344 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.148054242 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.14894539 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.147091004 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.147719677 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.149512257 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.146455246 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.15014243 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.149510845 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.14876055 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.151376963 seconds)
  done (took 49.33509411 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.149997787 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.149758276 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.15074203 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.150353035 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.149404494 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.150400408 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.149599305 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.153924729 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.150570578 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.150522289 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.158179808 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.160465475 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.15029075 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.154727513 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.151648462 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.148408435 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.296964216 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.150264009 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.151308649 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.149727788 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.150779632 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.15731959 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.150595063 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.151383513 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.148097277 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.153634383 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.149928471 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.150889422 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.152335911 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.152055934 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.154984888 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.15079796 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.154567375 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.154318257 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.152687145 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.152103995 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.156284174 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.149677941 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.15127332 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.151345142 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.159393497 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.174938138 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.151515743 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.152063652 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.159909275 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.151885138 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.153546921 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.157254503 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.161357537 seconds)
  done (took 107.719532409 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.1517199 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.154046758 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.153106417 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.155759584 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.153323847 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.154829139 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.152293902 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.152091782 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.153590855 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.154670827 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.15318081 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.153035894 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.154644264 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.153271166 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.157280989 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.153638219 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.153931373 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.152060898 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.154083754 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.151546279 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.154934944 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.152335051 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.153565049 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.151377258 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.15549343 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.15348713 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.154695512 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.153857085 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.155173534 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.154377483 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.154753934 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.154626362 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.154239482 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.151736765 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.152518113 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.153790342 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.15300271 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.155242402 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.152810096 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.15454061 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.156067433 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.156833661 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.156239531 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.156322087 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.155302074 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.152168431 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.153812767 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.154504313 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.156279431 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.156608611 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.153423101 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.155294695 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.154009181 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.15528082 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.154788808 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.154599457 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.154115242 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.156852435 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.154026627 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.156241768 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.157214311 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.156976287 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.156405179 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.156123583 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.156531901 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.15799018 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.15711683 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.158685062 seconds)
  done (took 148.586755506 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.155112253 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.156055515 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.154654529 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.156676956 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.155738838 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.156562822 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.157362298 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.15765974 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.156848517 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.157391435 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.155356821 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.159103403 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.15611905 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.157698716 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.156929777 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.156993804 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.157050934 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.160188138 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.158160415 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.156260763 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.161061067 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.157686452 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.157985325 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.16023881 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.160195738 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.159134041 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.15919355 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.158000992 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.160657432 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.159783777 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.159017441 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.156904888 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.15894246 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.16119858 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.161369837 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.159496382 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.158767989 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.160214613 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.156374612 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.159979476 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.157867242 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.158456183 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.160510186 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.156666903 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.158569903 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.16031818 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.161866956 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.160749879 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.160412878 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.158516816 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.159647712 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.158881494 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.159470409 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.160950735 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.156986731 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.157540575 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.157615204 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.159295935 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.160402641 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.160573044 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.159013977 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.159444286 seconds)
  done (took 135.908253234 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.160442131 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.160536068 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.16150236 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.161683734 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.161223119 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.159240879 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.16224702 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.161358593 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.16099168 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.160561724 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.159241111 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.161236708 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.162404688 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.163992555 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.16165246 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.161808888 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.161473399 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.160407881 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.159410972 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.162838189 seconds)
  done (took 45.307934181 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.161021425 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.162042941 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.161125803 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.161468876 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.162416408 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.162766699 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.16108209 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.161659617 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.163266975 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.161818381 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.160538617 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.161951401 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.162325366 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.161916567 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.162893777 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.162054284 seconds)
  done (took 36.677169558 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.16242774 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.162520503 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.163212167 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.164149824 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.162955603 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.163108666 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.159808817 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.162123932 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.163346204 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.164303001 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.162612614 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.162841538 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.164533761 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.16324496 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.162609657 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.162319088 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.162707123 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.161583867 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.161602358 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.16301564 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.162402712 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.160912935 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.163403422 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.163124534 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.164357486 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.162534776 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.16565794 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.163572507 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.151281728 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.163901402 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.163163499 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.16394112 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.1642509 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.163963972 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.163681515 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.164637341 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.164114576 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.16593565 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.163991099 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.164143589 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.162870753 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.161563703 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.162455994 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.163986901 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.16488914 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.161867815 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.164860687 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.165767645 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.163840918 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.164933571 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.165427547 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.16456034 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.167210546 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.158852283 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.1655454 seconds)
  done (took 121.064281295 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.166141522 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.164505306 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.16586019 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.165369978 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.164838427 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.163041705 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.164430077 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.16455766 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.164165464 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.166001472 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.165364997 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.164223658 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.16611313 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.166734359 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.165802837 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.163872036 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.165783865 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.165454276 seconds)
  done (took 41.060487404 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.167741765 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.165364403 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.164178418 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.165373052 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.168052046 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.166251523 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.165473632 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.166304221 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.165852113 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.161908517 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.165954594 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.166423854 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.165091285 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.16727965 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.165400006 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.166621681 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.168569885 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.166813582 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.167108438 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.168331412 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.166986165 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.166207627 seconds)
  done (took 49.746709649 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.167356358 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.167528369 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.182891484 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.187109147 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.190555405 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.201113854 seconds)
  done (took 15.185357884 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.165168603 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.166271509 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.168065865 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.168019881 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.167439706 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.167768698 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.168355293 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.168715385 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.16854634 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.167080896 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.166786859 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.165220017 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.167106844 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.171052972 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.168768565 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.168139039 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.168829745 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.164288976 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.168581686 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.168831557 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.167585225 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.168120686 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.169760774 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.166414605 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.170754571 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.170152909 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.169775708 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.168688913 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.169186773 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.167525775 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.170525053 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.167086395 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.169636599 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.160803807 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.170282425 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.168458914 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.168917146 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.17003147 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.166645706 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.168367514 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.168535648 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.16647516 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.166798892 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.170474579 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.169997285 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.167108106 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.17023727 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.169857997 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.171257059 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.168933097 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.171469143 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.169441347 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.169051934 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.170115083 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.170890181 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.170464748 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.171107373 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.168858635 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.172325517 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.17315215 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.171841451 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.173106727 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.169795299 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.170394226 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.158294657 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.168721244 seconds)
  done (took 145.222600653 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.172691159 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.171546517 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.172238537 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.170434147 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.170534792 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.171854263 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173050185 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.172218885 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.16338208 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.171286391 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.172469915 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.172210965 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.171338037 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.172850906 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.172211059 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.172958546 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.171538025 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.173855914 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.151175635 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.171113949 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.172361028 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.172011275 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174170817 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.171410476 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173670732 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.172287957 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.170851849 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.172598048 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.170884807 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.173097982 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.17125193 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.173868925 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.173215483 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.172437283 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.173144712 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.175504872 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.175768387 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.172938386 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.172216118 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.171763124 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.172861204 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.17304131 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.175536112 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.173259683 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.176839243 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.175387332 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.174832671 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.17212586 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.173523193 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.173641269 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.175982544 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.172238462 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.159399007 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.172940439 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.17472481 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.176675435 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.160625419 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.177095332 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.174953289 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.167269512 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.175396144 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.172884996 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.175536987 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.175938999 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.140557085 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.171730461 seconds)
  done (took 145.429959626 seconds)
done (took 2964.009728557 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.22393471 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.263170103 seconds)
  done (took 16.586225218 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.337648547 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.212647381 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.361963988 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.292597545 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.180152532 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.179283176 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.17556808 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.175534612 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.268787902 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.175777165 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.190953332 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.174673231 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.174712364 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.174635683 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.176061616 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.176328888 seconds)
  done (took 57.529965884 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.17921848 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.180250821 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.179271948 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.174878466 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.188408364 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.254330416 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.199262032 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.181286857 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.190177478 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.209288947 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.197521256 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.182707504 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.186179282 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.184731764 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.269520236 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.223269157 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.234807972 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.254193405 seconds)
  done (took 41.766529494 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.257078786 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.187010134 seconds)
  done (took 11.548068545 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.190572948 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.176883757 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.194355577 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.205476358 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.189152184 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.178298278 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.194921757 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.193481654 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.206105331 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.192698322 seconds)
  done (took 74.025386975 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.180623001 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.180635243 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.486721177 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.186210365 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.1857414 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.206048334 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.176408778 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.208563657 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.180164394 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.175555782 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.186034376 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.493969199 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.187460696 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.177673807 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.595810956 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.193026299 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.175272632 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.198901523 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.214769712 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.182159215 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.183867915 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.185189212 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.340683431 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.867221875 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.178377694 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.184856565 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.186567279 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.175617388 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.180309299 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.177362343 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.180124498 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.17828377 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.18676215 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.182756283 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.184734798 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.183665132 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.674949962 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.20339582 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.184491989 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.270381024 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.224329152 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.183747547 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.973819378 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.181219772 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.179194402 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.190680396 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.864167661 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.274051315 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.178861565 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.359388372 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.52340677 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.19246106 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.337835266 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.392698736 seconds)
  done (took 150.017916835 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.178756617 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.411406266 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.32965383 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.179023467 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.432821181 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.389055534 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.180407477 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.223757345 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.179706782 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.38153949 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.430926309 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.281599863 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.179219206 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.177851076 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.178050419 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.176220067 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.323533818 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.244080543 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.182536664 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.175679698 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.202940433 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.377944643 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.299765354 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.181973313 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.203166183 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.385346881 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.300836886 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.280945951 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.961879938 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.178169888 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.240042551 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.180467288 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.180012984 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.178447507 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.330271339 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.271877511 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.263644077 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.180704875 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.179561087 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.178912309 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.855405115 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.381723622 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.272838791 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.300783235 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.427567325 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.393658152 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.790533274 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.1759812 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.812113021 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.34613158 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.3841812 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.386361273 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.296731466 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.180320876 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.467210302 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.177233655 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.180220315 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.401896732 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.401244613 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.278174776 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.181724349 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.178791753 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.180344431 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.419084971 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.184628412 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.271963025 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.185500714 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.180855896 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.27386539 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.281950386 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.407292037 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.403948808 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.210732843 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.500084582 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.669497111 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.38388811 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.245291779 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.399465136 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.18383046 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.18330506 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.261972322 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.020603891 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.433786969 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.422683533 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.379366947 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.213619561 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.828467401 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.182574524 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.366912473 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.373505729 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.413938438 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.427179029 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.416633047 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.538873428 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.183863305 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.182546572 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.499175746 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.296775019 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.133383311 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.533385351 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.414216353 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.721109728 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.207010799 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.466408769 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.310590539 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.185971049 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.83078284 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.186371306 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.387972923 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.226676276 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.183497605 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.18826801 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.371993905 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.092798266 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.183063489 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.891251328 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.243828746 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.18676737 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.388365108 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.186617653 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.429753293 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.186710638 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.40888883 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.835421449 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.216176087 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.35756648 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.429084815 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.821311453 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.472552425 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.423170467 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.296552895 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.405539963 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.99035341 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.182527631 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.447301513 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.187537176 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.184819198 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.353267808 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.186077961 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.328374984 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.187968881 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.45128232 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.20485188 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.412799154 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.19129602 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.420635997 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.216866701 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.23507101 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.188099698 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.312544277 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.18809239 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.026452468 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.342483375 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.188461484 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.185282071 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.775766315 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.184522125 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.338468804 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.409549992 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.20830243 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.253374391 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.749358426 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.178919619 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.268234766 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.20466173 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.455713188 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.186252307 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.432337937 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.172257861 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.672831421 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.185776405 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.421997335 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.371796802 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.18737458 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.185456118 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.027977999 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.184517755 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.187324905 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.343317671 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.602083201 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.106119565 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.38544392 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.190667859 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.314010371 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.189291755 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.264517058 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.524809307 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.186708765 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.185574457 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.190092585 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.18919292 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.18873632 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.397094206 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.21397837 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.629553472 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.324120442 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.443648659 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.492869678 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.385834258 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.2273911 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.190156558 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.410374061 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.192229183 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.249694896 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.189109779 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.208410668 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.419461524 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.193365504 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.39344625 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.423743117 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.076095439 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.234526915 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.189962399 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.189189115 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.10502432 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.329446909 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.274509411 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.190249449 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.18848974 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.301852625 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.307016858 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.372405531 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.009433245 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.321201547 seconds)
  done (took 970.776823512 seconds)
done (took 1324.354938975 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.188485238 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.192581628 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.192117813 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.191836002 seconds)
  done (took 30.878795119 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.1912906 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.189708124 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.193377525 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.190561542 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.190829348 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.189941032 seconds)
  done (took 15.261425606 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.189326604 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.190011214 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.189098882 seconds)
  done (took 23.6846117 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.616400717 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.595905514 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.266965752 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.335743777 seconds)
  done (took 11.930755116 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.194355542 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.192011729 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.192465817 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.192371671 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.193210554 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.19189418 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.192003992 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.191573526 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.190822251 seconds)
  done (took 21.854814319 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.453039087 seconds)
done (took 110.182171573 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.260638145 seconds)
    (2/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.269347434 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.203599819 seconds)
    (4/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.898952897 seconds)
    (5/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.191299489 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.097986853 seconds)
    (7/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.226822078 seconds)
    (8/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.579388031 seconds)
    (9/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.469229261 seconds)
    (10/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.193078226 seconds)
    (11/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.22885721 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.381953342 seconds)
    (13/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.729686726 seconds)
    (14/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.148141072 seconds)
    (15/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.271375536 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.207864076 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.965080683 seconds)
    (18/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.032868882 seconds)
    (19/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.313729443 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.209123838 seconds)
    (21/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.886301553 seconds)
    (22/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.341176142 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.214308026 seconds)
    (24/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.587461276 seconds)
    (25/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.510790749 seconds)
    (26/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.196893993 seconds)
    (27/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.523483013 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.209024792 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.315499554 seconds)
    (30/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.271416919 seconds)
    (31/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.192084826 seconds)
    (32/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.842153163 seconds)
    (33/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.200713529 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.29030799 seconds)
    (35/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.30728325 seconds)
    (36/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.197589383 seconds)
    (37/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.45362916 seconds)
    (38/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.324477582 seconds)
    (39/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.293513716 seconds)
    (40/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.062567023 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.510661516 seconds)
    (42/341) benchmarking ("sort", Int8, false)...
    done (took 5.106022573 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.277778905 seconds)
    (44/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.197513435 seconds)
    (45/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.208294251 seconds)
    (46/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.454227758 seconds)
    (47/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.413531869 seconds)
    (48/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.330781019 seconds)
    (49/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.295671824 seconds)
    (50/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.595354546 seconds)
    (51/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.505452511 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.61526561 seconds)
    (53/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.125325284 seconds)
    (54/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.691044088 seconds)
    (55/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.589115003 seconds)
    (56/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.424798417 seconds)
    (57/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.147214176 seconds)
    (58/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.482361347 seconds)
    (59/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.275054434 seconds)
    (60/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.293525627 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.447505747 seconds)
    (62/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.255559656 seconds)
    (63/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.341498418 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.323239423 seconds)
    (65/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.276987616 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.548845998 seconds)
    (67/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.379148852 seconds)
    (68/341) benchmarking ("sort", Float64, false)...
    done (took 5.91114936 seconds)
    (69/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.228880755 seconds)
    (70/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.356311048 seconds)
    (71/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.001427648 seconds)
    (72/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.955794563 seconds)
    (73/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.66055645 seconds)
    (74/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.67007098 seconds)
    (75/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.301854111 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.78434056 seconds)
    (77/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.479610513 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.436122039 seconds)
    (79/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.198909712 seconds)
    (80/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.311853091 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.212236244 seconds)
    (82/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.910429406 seconds)
    (83/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.302009272 seconds)
    (84/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.214246889 seconds)
    (85/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.490585538 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.211661095 seconds)
    (87/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.262637903 seconds)
    (88/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.364390516 seconds)
    (89/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.212192758 seconds)
    (90/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.3917198 seconds)
    (91/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.199907881 seconds)
    (92/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.209286814 seconds)
    (93/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.573556262 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.191455337 seconds)
    (95/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.511886751 seconds)
    (96/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.679230333 seconds)
    (97/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.276198546 seconds)
    (98/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.832655493 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.172495 seconds)
    (100/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.459101177 seconds)
    (101/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.785356065 seconds)
    (102/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.44424177 seconds)
    (103/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.260185545 seconds)
    (104/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.19701002 seconds)
    (105/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.402695042 seconds)
    (106/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.209927613 seconds)
    (107/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.284078476 seconds)
    (108/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.472643391 seconds)
    (109/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.277060674 seconds)
    (110/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.973653183 seconds)
    (111/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.919419957 seconds)
    (112/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.508241841 seconds)
    (113/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.614489221 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.497594532 seconds)
    (115/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.279510941 seconds)
    (116/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.502693147 seconds)
    (117/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.211811653 seconds)
    (118/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.198219827 seconds)
    (119/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.312511424 seconds)
    (120/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.198077745 seconds)
    (121/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.596076774 seconds)
    (122/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.202980688 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.540838119 seconds)
    (124/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.60183041 seconds)
    (125/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.835578178 seconds)
    (126/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.346035776 seconds)
    (127/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.443068642 seconds)
    (128/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.219448068 seconds)
    (129/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.523418588 seconds)
    (130/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.477999222 seconds)
    (131/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.200717205 seconds)
    (132/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 3.722380903 seconds)
    (133/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.200270474 seconds)
    (134/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 3.881611414 seconds)
    (135/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.20140447 seconds)
    (136/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.569253453 seconds)
    (137/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.143409131 seconds)
    (138/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.339941168 seconds)
    (139/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.313828203 seconds)
    (140/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.214257505 seconds)
    (141/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.589861304 seconds)
    (142/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.551181743 seconds)
    (143/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.225127509 seconds)
    (144/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.610894502 seconds)
    (145/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.295873632 seconds)
    (146/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.518695246 seconds)
    (147/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.480245516 seconds)
    (148/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.200330993 seconds)
    (149/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.793737488 seconds)
    (150/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.469621418 seconds)
    (151/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.299178584 seconds)
    (152/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.622279735 seconds)
    (153/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.483477779 seconds)
    (154/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.453956725 seconds)
    (155/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.401169084 seconds)
    (156/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.306222728 seconds)
    (157/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.093904753 seconds)
    (158/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.415969145 seconds)
    (159/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.538857836 seconds)
    (160/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.506881727 seconds)
    (161/341) benchmarking ("sort", Bool, false)...
    done (took 2.416182224 seconds)
    (162/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.59779748 seconds)
    (163/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.537601253 seconds)
    (164/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.216356806 seconds)
    (165/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.364459241 seconds)
    (166/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.554232276 seconds)
    (167/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.286006761 seconds)
    (168/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.35146529 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.093316148 seconds)
    (170/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.20948416 seconds)
    (171/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.22464423 seconds)
    (172/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.216520914 seconds)
    (173/341) benchmarking ("sort", Float32, false)...
    done (took 5.861409485 seconds)
    (174/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.850751926 seconds)
    (175/341) benchmarking ("sort", Int64, false)...
    done (took 5.85744002 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.850577301 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.347317571 seconds)
    (178/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.55968059 seconds)
    (179/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.423935191 seconds)
    (180/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.214532348 seconds)
    (181/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.042702371 seconds)
    (182/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.607186025 seconds)
    (183/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.204552737 seconds)
    (184/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 4.268754228 seconds)
    (185/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.673223464 seconds)
    (186/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.362169089 seconds)
    (187/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.220709572 seconds)
    (188/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.408677461 seconds)
    (189/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.417821515 seconds)
    (190/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.392001988 seconds)
    (191/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.203517231 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.202804074 seconds)
    (193/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.305729159 seconds)
    (194/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.223717705 seconds)
    (195/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.417372886 seconds)
    (196/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.239765348 seconds)
    (197/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.32912565 seconds)
    (198/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.282123191 seconds)
    (199/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.355013005 seconds)
    (200/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.217652565 seconds)
    (201/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.21496994 seconds)
    (202/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.406285636 seconds)
    (203/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.275055399 seconds)
    (204/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.383752109 seconds)
    (205/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.206556939 seconds)
    (206/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.216637596 seconds)
    (207/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.223325642 seconds)
    (208/341) benchmarking ("sort", BigInt, false)...
    done (took 7.204633455 seconds)
    (209/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.297351874 seconds)
    (210/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.593212168 seconds)
    (211/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.206107126 seconds)
    (212/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 8.577153885 seconds)
    (213/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 3.757307432 seconds)
    (214/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.707150825 seconds)
    (215/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.49041002 seconds)
    (216/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.530397495 seconds)
    (217/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.456438808 seconds)
    (218/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.422574569 seconds)
    (219/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.220946457 seconds)
    (220/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.31004915 seconds)
    (221/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.511215229 seconds)
    (222/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.208745182 seconds)
    (223/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.090096451 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.380274236 seconds)
    (225/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.630368968 seconds)
    (226/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.222344931 seconds)
    (227/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.075577506 seconds)
    (228/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.645413033 seconds)
    (229/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.616045453 seconds)
    (230/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.321599698 seconds)
    (231/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.419598971 seconds)
    (232/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.721707501 seconds)
    (233/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.209364967 seconds)
    (234/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.265040079 seconds)
    (235/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.419949142 seconds)
    (236/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.405441202 seconds)
    (237/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.612121572 seconds)
    (238/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.385847674 seconds)
    (239/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.235892917 seconds)
    (240/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.90395546 seconds)
    (241/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.518657816 seconds)
    (242/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.684884463 seconds)
    (243/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.08122565 seconds)
    (244/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.609410274 seconds)
    (245/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.221959902 seconds)
    (246/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.082932876 seconds)
    (247/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.520535024 seconds)
    (248/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.945663527 seconds)
    (249/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.820776792 seconds)
    (250/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.459883772 seconds)
    (251/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.227830334 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.283739234 seconds)
    (253/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.066975968 seconds)
    (254/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.714872894 seconds)
    (255/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.209499141 seconds)
    (256/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.501611716 seconds)
    (257/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.22243737 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.297246203 seconds)
    (259/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.218183344 seconds)
    (260/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.478090526 seconds)
    (261/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.372160259 seconds)
    (262/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.00908689 seconds)
    (263/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.019888547 seconds)
    (264/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.436906483 seconds)
    (265/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.46379642 seconds)
    (266/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.595737916 seconds)
    (267/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.40577314 seconds)
    (268/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.222691338 seconds)
    (269/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.210974121 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.44445895 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.325405565 seconds)
    (272/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.347990521 seconds)
    (273/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.366220713 seconds)
    (274/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.441747033 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.530096148 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.224507196 seconds)
    (277/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.318227864 seconds)
    (278/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.187325324 seconds)
    (279/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.316961537 seconds)
    (280/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.422267943 seconds)
    (281/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.211938631 seconds)
    (282/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.283688475 seconds)
    (283/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.622632483 seconds)
    (284/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.523184725 seconds)
    (285/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.365031916 seconds)
    (286/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.396238999 seconds)
    (287/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.216674618 seconds)
    (288/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 8.922416802 seconds)
    (289/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.525344989 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.210570242 seconds)
    (291/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.212388567 seconds)
    (292/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.262515698 seconds)
    (293/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.212677398 seconds)
    (294/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.547495541 seconds)
    (295/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.525111377 seconds)
    (296/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.989271111 seconds)
    (297/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.402578111 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.244927974 seconds)
    (299/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.483759199 seconds)
    (300/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.216988305 seconds)
    (301/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.28935211 seconds)
    (302/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.358046264 seconds)
    (303/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.521011164 seconds)
    (304/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.322251644 seconds)
    (305/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.365966697 seconds)
    (306/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.45041528 seconds)
    (307/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.079839713 seconds)
    (308/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.30199301 seconds)
    (309/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.314735867 seconds)
    (310/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.220976767 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.213575641 seconds)
    (312/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.330248152 seconds)
    (313/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.303423343 seconds)
    (314/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.212946354 seconds)
    (315/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.211923078 seconds)
    (316/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.308088782 seconds)
    (317/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.269934398 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.213203756 seconds)
    (319/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.135896413 seconds)
    (320/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.176599297 seconds)
    (321/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.521731012 seconds)
    (322/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.624738233 seconds)
    (323/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.212825818 seconds)
    (324/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.785182103 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.329754536 seconds)
    (326/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.65549773 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.350883523 seconds)
    (328/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.331181238 seconds)
    (329/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.215058666 seconds)
    (330/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 4.511140477 seconds)
    (331/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.213552392 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.439137343 seconds)
    (333/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.963793412 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.527323215 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.083953424 seconds)
    (336/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.23778443 seconds)
    (337/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.100822211 seconds)
    (338/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.353230241 seconds)
    (339/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.342295231 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.337233775 seconds)
    (341/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.213958649 seconds)
  done (took 1203.983525077 seconds)
done (took 1206.213731748 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.234516065 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.21252925 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.703806218 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.224251775 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.216476009 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.20707005 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.715073186 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.24400023 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.231947582 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.711850222 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.225616297 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.215695389 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.232286467 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.250105721 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.225519209 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.228514821 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.220551343 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.240142426 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.248951285 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.220993248 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.267287025 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.221559954 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.215293241 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.268844769 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.2146482 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.230560982 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.235463171 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.2680709 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.267762478 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.218772226 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.221895698 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.569159813 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.261738903 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.223504785 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.227313246 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.23421735 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.222980393 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.23158428 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.234210444 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.232687291 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.216568232 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.227540908 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.221821881 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.21862562 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.216085187 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.215948565 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.219861062 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.341699666 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.230711124 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.553004723 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.272133624 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.236518752 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.270107986 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.216848499 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.21974487 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.221668299 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.268056879 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.224004122 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.221419458 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.55218202 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.307312578 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.231420509 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.549110474 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.273891601 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.228373908 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.227978562 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.216729571 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.235059299 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.571318563 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.753723815 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.250012263 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.238749824 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.221871203 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.220899123 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.232574519 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.717156589 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.231245936 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.782878476 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.243452027 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.234015761 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.222602059 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.22069874 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.220081644 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.237133443 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.240363991 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.218716226 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.22624603 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.225904729 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.234701419 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.575190811 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.258499312 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.706456196 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.226902686 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.239218203 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.239911768 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.783026495 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.244105982 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.239599467 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.220947727 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.571401795 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.255978299 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.239323084 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.221832265 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.231257856 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.334572821 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.238668091 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.240592869 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.220412888 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.242944944 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.228843963 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.220897178 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.233644583 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.24009124 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.256514739 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.237990959 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.219155515 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.230810633 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.225758935 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.238233381 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.228544932 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.226410033 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.231326636 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.222251226 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.272487103 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.240810486 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.237065245 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.336802618 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.228867054 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.344709262 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.234578021 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.229029594 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.220641032 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.555535293 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.2594091 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.24442542 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.229818151 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.244897675 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.243776411 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.238300792 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.223819574 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.23803574 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.224215825 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.273472256 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.222807376 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.249632836 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.274113077 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.236861783 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.229897002 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.239844513 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.255328925 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.243180817 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.227367575 seconds)
done (took 348.874194862 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.268168584 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.223469395 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.297495076 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.22198817 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.288525112 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.272283594 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.223045282 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.223782488 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.222454934 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.609694755 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.224174771 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.227017433 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.221305537 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.222597238 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.272176718 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.222409487 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.224104911 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.45854442 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.223939116 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.281904969 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.223512491 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.223919849 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.224690726 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.614900543 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.222880719 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.222630345 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.285057553 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.22422484 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.46080299 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.223456994 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.224246173 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.464713141 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.281672564 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.236574722 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.231712462 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.235122605 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.290896038 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.231925098 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.270118276 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.269570838 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.298846389 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.256833304 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.226295489 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.22329 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.228332956 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.227811451 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.227055409 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.2558216 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.22640784 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.230392257 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.455403859 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.232251135 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.229415658 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.223844883 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.226819626 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.239894959 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.225776777 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.224224971 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.284674358 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.226724597 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.269715399 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.61384136 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.610057274 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.225746754 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.224142651 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.225547747 seconds)
  done (took 207.376465051 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.293118338 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.300502038 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.290142669 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.230083708 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.277379207 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.293944899 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.230339385 seconds)
  done (took 18.064398161 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.233924399 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.22674328 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.249818512 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.251443052 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.230283775 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.366540601 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.2370368 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.232532476 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.252080573 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.229113543 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.562962687 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.249130902 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.234801053 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.227318109 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.237559089 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.25700068 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.229464265 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.227364645 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.32599183 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.304002208 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.233052854 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.232762848 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.256077688 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.239483299 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.228947056 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.228282893 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.225235747 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.235609199 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.226202967 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.227672225 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.22797519 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.24390687 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.228695657 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.226510221 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.228661727 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.22831452 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.227687074 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.228982439 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.227644135 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.221072107 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.229917955 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.227331658 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.229268659 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.229043835 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.230139283 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.251988643 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.229116484 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.225321346 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.229352586 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.229983269 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.258671729 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.230449439 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.232126124 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.234635909 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.269204114 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.237059089 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.229238434 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.228802054 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.222566371 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.226611835 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.231426785 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.309180834 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.253145587 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.230712426 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.254412174 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.267923175 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.229373683 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.232667548 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.229462072 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.253886259 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.227903342 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.255355331 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.229622693 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.329506891 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.20272099 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.371345614 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.254614989 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.234920017 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.234645738 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.229470793 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.238387645 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.230001326 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.231098461 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.238045399 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.235608583 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.231353875 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.223517664 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.225598322 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.226425841 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.22811973 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.277096101 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.231900863 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.230918655 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.331169488 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.233434217 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.328476942 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.25895596 seconds)
  done (took 240.082362301 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.236036366 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.23246052 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.244339354 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.232712301 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.23373444 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.235341129 seconds)
  done (took 15.568386942 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.235366744 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.237355083 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.230322797 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.230601985 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.232943931 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.234060917 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.231901959 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.236516392 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.237639796 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.232123763 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.233158443 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.232430061 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.234849146 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.232344833 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.235594154 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.23353285 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.235050789 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.23267197 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.230744347 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.231281707 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.439398216 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.234116186 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.233236219 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.236456964 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.236551433 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.233516821 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.24152106 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.233976063 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.23600771 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.238830747 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.238295368 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.235312606 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.238477408 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.240504666 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.236779662 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.239001101 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.238512372 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.234410784 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.233067733 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.236698323 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.232795569 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.234182484 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.234623675 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.234168199 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.236682962 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.243854857 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.239154033 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.243247046 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.235994201 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.236172365 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.233890737 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.235358648 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.235167135 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.235867339 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.238490711 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.240901855 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.241353694 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.234913424 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.235315954 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.237406016 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.241181768 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.235350074 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.235038989 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.240316219 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.243824554 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.236627234 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.240468899 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.241949474 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.234716494 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.235539526 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.238322098 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.23816466 seconds)
  done (took 164.365176702 seconds)
done (took 647.607607314 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.350032781 seconds)
  done (took 9.509315714 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.356287482 seconds)
  done (took 9.615659815 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.575883459 seconds)
  done (took 12.736580304 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.254266842 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.244178783 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.249949638 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.238127992 seconds)
  done (took 31.136097775 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.525787156 seconds)
  done (took 9.683645919 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.247464372 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.233974192 seconds)
  done (took 16.705478307 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.256757722 seconds)
  done (took 9.418002888 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.713940912 seconds)
  done (took 9.902407755 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.259606198 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.259190302 seconds)
  done (took 16.700744973 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.239614811 seconds)
  done (took 9.401200838 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.034847342 seconds)
  done (took 10.28768886 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.245700954 seconds)
  done (took 9.418832266 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.285458605 seconds)
  done (took 9.446968815 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.204298568 seconds)
  done (took 10.36402712 seconds)
done (took 176.48907654 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.244048243 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.237251081 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.235241136 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.236306729 seconds)
  done (took 31.112775805 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.267860595 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.273291906 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.280162058 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.272958854 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.263268187 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.262255194 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.275668648 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.271742331 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.261636814 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.269586831 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.272497211 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.272605821 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.275351626 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.282481972 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.28184499 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.270772272 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.274102275 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.273460076 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.264544726 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.283816054 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.2702364 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.272795668 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.238358579 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.239373593 seconds)
  done (took 56.629950535 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.428679331 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.30573171 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.392909395 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.283626597 seconds)
  done (took 11.572693296 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.240190957 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.302612383 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.291285963 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.28463393 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.333043431 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.34293206 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.291627967 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.460876925 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.355797119 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.365334428 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.249199433 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.261092479 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.264117665 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.284234523 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.343048127 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.239422269 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.239417068 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.350695196 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.301727459 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.450781227 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.240039981 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.295979448 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.325281031 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.29291624 seconds)
  done (took 57.567375383 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.243659352 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.250314611 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.247987302 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.24148928 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.243083973 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.243931625 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.248929544 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.244281296 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.265895346 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.245787261 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.243609573 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.242533504 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.252166113 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.242274043 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.240797207 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.25447645 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.254523753 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.243770792 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.247331615 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.248103307 seconds)
  done (took 47.107873245 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.239893651 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.087900019 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.585557369 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.491601338 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.238972434 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.238904879 seconds)
  done (took 34.047814571 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.255587145 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.256058168 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.221889326 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.263251853 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.288805938 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.229817381 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.299606085 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.379962297 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.25014097 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.296962585 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.263182244 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.247546266 seconds)
  done (took 29.418489043 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.243060025 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.241961046 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.243840968 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.254996856 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.254142558 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.250746747 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.25235407 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.241302929 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.256184211 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.259406384 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.248416242 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.254996005 seconds)
  done (took 49.166946195 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.458867578 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.468871399 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.452346804 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.671605081 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.562334639 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.2288769 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.529646244 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.457425807 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.038735404 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.068409781 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.547266881 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.228124675 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.195604132 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.170615201 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.158655534 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.486741815 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.244029321 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.099739126 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.509666367 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.297410197 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.24961019 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.245209002 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.245372071 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.540617999 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.577761865 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.249699806 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.455253546 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.260256375 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.242859986 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.472288242 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.645860468 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.290194965 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.447467663 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.503375394 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.592419608 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.307462235 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.354207652 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.263046666 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.281975592 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.280390999 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.255841936 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.254694 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.755463522 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.260103224 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.518370625 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.247191603 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.244740311 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.34386936 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.173475652 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.676748485 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.368026478 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.245007343 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.281825915 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.679989679 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.364070499 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.489364112 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.249524106 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.265206047 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.293768058 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.604332399 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.369618738 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.353844277 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.456923119 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.17422416 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.688331005 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.381234948 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.248266268 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.252771357 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.947896435 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.490356338 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.327615204 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.669134717 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.018706375 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.250124686 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.24865846 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.292022353 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.337499903 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.245416115 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.539484184 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.258903616 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.174794133 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.34737852 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.642371773 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.252992475 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.24682666 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.25476138 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.094924939 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.17422753 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.348326479 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.602005153 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.579343045 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.247789214 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.249058663 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.27078979 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.252704039 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.196250361 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.646432076 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.307548723 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.174687279 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.810011776 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.592992363 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.208118587 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.597404852 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.2858062 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.515872815 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.383348863 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.655714991 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.457460571 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.494504488 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.784592235 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.252700246 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.80700103 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.331150277 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.323857342 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.247999481 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.806959022 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.268032281 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.645570131 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.37120843 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.248718745 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.182791465 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.263897993 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.455323389 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.592555915 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.299638581 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.252938133 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.257704117 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.254137232 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.257337623 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.366249491 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.269958134 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.553878179 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.33009962 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.252537767 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.189377515 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.257693134 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.545436278 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.67254612 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.311616889 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.517410992 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.528388631 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.953463943 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.847660908 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.200268306 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.531519576 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.329933081 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.32637592 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.811186348 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.378641866 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.350229683 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.179025526 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.390440409 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.261958346 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.255853778 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.396823113 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.663717215 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.677659912 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.295665925 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.255028092 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.206769287 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.275500372 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.489798387 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.37543879 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.28336427 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.258491955 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.342362634 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.48123782 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.257351974 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.181011823 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.491571691 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.49312708 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.554804659 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.66954838 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.369438775 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.32945882 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.267165623 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.46910248 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.337356635 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.91807442 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.805772054 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.46427454 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.662447386 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.214781369 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.921546693 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.612678481 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.645085347 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.27065199 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.709008557 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.27779404 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.791346749 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.279606871 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.782023167 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.183970858 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.262320988 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.581890973 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.209227111 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.580548344 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.329894994 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.318863093 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.258522254 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.256316679 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.264671497 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.239645508 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.365189228 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.325174813 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.328092444 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.184408019 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.765607369 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.289388496 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.258796397 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.255576955 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.671048093 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.120067078 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.213366396 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.254908084 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.33236223 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.005084162 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.807739496 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.262863019 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.259346993 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.876009313 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.265134564 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.84890005 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.26622821 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.170200812 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.286663525 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.618694755 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.967028115 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.557704775 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.341943533 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.335822405 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.258650127 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.264636787 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.959107838 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.266864376 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.959176516 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.553338159 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.540682134 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.716463794 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.328127718 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.47231361 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.273569599 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.260908856 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.799690029 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.288371779 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.26305049 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.461486942 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.774354478 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.681057712 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.23141877 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.346143408 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.260747544 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.538274528 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.271783407 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.665090889 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.955249741 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.272588115 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.26171928 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.530809573 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.947772456 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.264172525 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.236216631 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.26868365 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.473449456 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.464986935 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.522128316 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.562099662 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.713569582 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.18489744 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.268183443 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.303064784 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.504315726 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.26204002 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.299318852 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.70693014 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.37625209 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.691918129 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.554645534 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.758475842 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.898561597 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.5362666 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.335722644 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.275392339 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.927411462 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.402046034 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.195838833 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.38254565 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.187010809 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.011693334 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.553299832 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.276716665 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.540364748 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.248809384 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.610331512 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.568007636 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.635799161 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.315574127 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.292483258 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.21203673 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.318199651 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.263377839 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.292197045 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.3750668 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.267710056 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.652453901 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.297212151 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.310769673 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.26869742 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.839276714 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.287546669 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.263558346 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.954583448 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.287811296 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.383328963 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.337921234 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.065311907 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.643582572 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.289289147 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.139737452 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.918787865 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.542016419 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.329629313 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.715597697 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.299415677 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.671061856 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.265282823 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.466670121 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.260265126 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.676980984 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.308336526 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.526440658 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.217160425 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.476224871 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.457021838 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.285733224 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.268561052 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.189579706 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.432623467 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.134196347 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.246376266 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.266149827 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.948054219 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.744228025 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.31394766 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.78337393 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.092093738 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.268466892 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.675850592 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.683581649 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.731089964 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.29313511 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.267086821 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.694180792 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.403874168 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.670582453 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.563991491 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.272290509 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.289630101 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.477519455 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.394307387 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.185300345 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.757074509 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.804045683 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.965581615 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.277596517 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.470958964 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.694617661 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.399221593 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.295106798 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.345136769 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.667766852 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.540415988 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.343523271 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.192237175 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.265273009 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.66257476 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.662166919 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.361734534 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.50801385 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.56623873 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.639617838 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.625387481 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.578093179 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.735904307 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.720594857 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.668217586 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.46923166 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.627965903 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.587085742 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.857401647 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.681880015 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.478412986 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.360757048 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.532589371 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.139010958 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.977254554 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.512040515 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.273451889 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.198715697 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.475700972 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.279155061 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.497175292 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.788993601 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.512843969 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.63002891 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.744482377 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.807070017 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.292176288 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.290252019 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.220416395 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.290167694 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.290686415 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.267835421 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.760470845 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.554878529 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.280997162 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.20882157 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.938453507 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.196732232 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.483444967 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.297964202 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.300566837 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.823573113 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.626816526 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.375204548 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.571521316 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.354453368 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.299991508 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.199009292 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.012589922 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.216931998 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.384516493 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.695527467 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.287076433 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.271259719 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.473866213 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.200234324 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.317269904 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.275642089 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.461964431 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.847406683 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.551901533 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40507414 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.505801967 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.565612106 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.211104459 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.303696202 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.540962535 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.197506874 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.767775453 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.947244294 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.312676615 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.344028579 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.270425038 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.272564127 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.541333962 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.695048963 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.370696507 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.73819755 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.300000099 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.297882616 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.698587044 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.369700145 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.273445605 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.275006 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.633108237 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.500292016 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.271020088 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.260012454 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.484198363 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.345052314 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.467303559 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.342683309 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.786864216 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.274110939 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.219078828 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.377330563 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.207127848 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.205380754 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.038389065 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.334992593 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.272813999 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.552128712 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.934298812 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.475278561 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.668131117 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.137327302 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.305756566 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.308478814 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.276165458 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.285707027 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.667563436 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.584591155 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.272687463 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.552966926 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.324736362 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.276424376 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.936337611 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.244427726 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.272371027 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.073920847 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.158792974 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 5.003767484 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.671115429 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.28763597 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.30737363 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.274310529 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.202665186 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.274582362 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.468545018 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.265315127 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.282793647 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.651724725 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.699446886 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.370490414 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.275732118 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.274437293 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.277321991 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.489495408 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.788282142 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.289305409 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.975225533 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.478072615 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.278094822 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.767209878 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.73845369 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.38298637 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.308071719 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.313481684 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.505468438 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.809197089 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.314781545 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.254220796 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.502484797 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.277009937 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.548463656 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.54843857 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.275776575 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.490101929 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.649497178 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.558792732 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.630094428 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.599026564 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.347808048 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.316335928 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.190705877 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.276673391 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.277434304 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.550348919 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.326160979 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.257858936 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.288881948 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.830294753 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.021292394 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.742499329 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.426947271 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.705426835 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.124662105 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.031774373 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.277848276 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.204213066 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.275684957 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.301909638 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.279600958 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.203841989 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.082522729 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.998199929 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.490218999 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.588668981 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.202855501 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.480918154 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.879174762 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.20288058 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.243683875 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.218318967 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.543221473 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.205599198 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.279384758 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.235841856 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.65613763 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.875922625 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.541698168 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.277319855 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.223148245 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.280631999 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.28041504 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.27686142 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.361263562 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.277789897 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.396532134 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.552976859 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.760981077 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.390119577 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.918028979 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.084803394 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.214444306 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.323440486 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.891944091 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.846924127 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.673417389 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.412700686 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.100352033 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.224255874 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.28385018 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.294371735 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.558576372 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.280575226 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.281976179 seconds)
  done (took 2315.682208274 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.278230025 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.321511838 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.33540119 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.365581235 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.421719899 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.405342404 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.360238994 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.350899047 seconds)
  done (took 61.035768294 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.278648151 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.250475429 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.288292279 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.2831979 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.284090252 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.323255961 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.472421462 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.307230021 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.285054503 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.285428039 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.282136963 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.284720305 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.281373141 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.280783969 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.275788028 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.567763766 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.29940029 seconds)
  done (took 83.545851851 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.342041517 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.614396947 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.283359407 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.975845125 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.33802609 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.30977987 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.28488535 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.286526351 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.449915243 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.584387439 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.324592476 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.302373161 seconds)
  done (took 95.767793894 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.287033448 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.285631125 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.287335443 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.287107602 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.286077717 seconds)
  done (took 13.636784996 seconds)
done (took 2888.515740647 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.624744821 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.380370305 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.360476923 seconds)
  done (took 6.945132593 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.430179946 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.48022298 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.590706207 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.612069467 seconds)
  done (took 12.323439285 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.577500796 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.669812421 seconds)
  done (took 7.450475002 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.705201624 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.292349411 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.678849058 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.289047025 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.286177879 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.290619872 seconds)
  done (took 24.075382951 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.290018493 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.288277027 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.287989897 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.287851984 seconds)
  done (took 11.358278277 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.284867337 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.061496907 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.287367863 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.297429216 seconds)
  done (took 23.134861367 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.508966522 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.342460941 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.059926328 seconds)
  done (took 11.115491664 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.902472543 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.733347939 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.894903616 seconds)
  done (took 10.734942208 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.427195167 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.271948018 seconds)
  done (took 8.904071333 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.429991409 seconds)
  done (took 4.635045523 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.128779034 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.601692497 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.763850048 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.79026922 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.88004911 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.506177778 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.62422197 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.575122855 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.669520942 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.734423283 seconds)
  done (took 29.479228306 seconds)
done (took 167.664775558 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.742914405 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.314342448 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.494196146 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.676554331 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.535602935 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.499133831 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.588671354 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.671842715 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.362584459 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.33429174 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.675626172 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.537811338 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.527456286 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.311467115 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.536846137 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.309501727 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.535266595 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.767752222 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.352637931 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.593528589 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.59349195 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.315522709 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.519039344 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.33453278 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.536368982 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.450130546 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.925081989 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.313622737 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.502030401 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.948616202 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.450320429 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.744172904 seconds)
  done (took 183.20499624 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.175339845 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.289182953 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.289615835 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.288599795 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.727439434 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.290400049 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.292325613 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.290131334 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.620025133 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.588396505 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.288745333 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.691709636 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.293891976 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.290287729 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.292155477 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.289481947 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.726441844 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.225115309 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.29038443 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.28995598 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.289983054 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.57447656 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.290475951 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.604349734 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.695254175 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.292465229 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.291452661 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.289539726 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.290904174 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.291371807 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.289967208 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.291080395 seconds)
  done (took 222.231129751 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.293207525 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.292300469 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.293609562 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.291151255 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.292675273 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.292349977 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.292935576 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.290913327 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.059961526 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.048380879 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.292262934 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.296735635 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.297773829 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.292860884 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.30263165 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.291566908 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.298641557 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.298313991 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.30051314 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.299260992 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.292144343 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.162035976 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.293592876 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.207381816 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.292850144 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.29874007 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.29226991 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.291866479 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.291444415 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.292074331 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.295291098 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.294282572 seconds)
  done (took 234.932682812 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.533721328 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.29368921 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.296194968 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.3019541 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.297855319 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.294908696 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.283442125 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.543569649 seconds)
  done (took 23.057111958 seconds)
done (took 665.650530559 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.633893532 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.02489598 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.426085199 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.320013252 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.576064677 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.360469642 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.311681623 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.374499632 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.963670464 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.381152676 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.702379687 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.322769476 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.010952245 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.34606002 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.491300101 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.372092915 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.677527243 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.965166257 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.451305657 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.966897601 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.526338248 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.239092703 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.392139954 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.001206367 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.720526786 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.261600815 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.330157313 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.682678795 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.317737148 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.554129808 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.96761574 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.575200356 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.331727018 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.31687658 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.363951557 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.343792081 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.508403278 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.325793912 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.425168841 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.031296311 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.985612804 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.843585327 seconds)
  done (took 117.93500315 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.362837159 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.29335761 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.293378994 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.294718916 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.30273737 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.30311836 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.295993686 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.29607321 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.293848847 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.302592052 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.294289219 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.303084294 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.294223456 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.313345244 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.293901238 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.294429805 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.29416366 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.303646745 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.3081687 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.295505693 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.296068447 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.295355873 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.303550982 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.294998927 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.296236409 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.296135222 seconds)
  done (took 62.038472374 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.308212179 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.471913881 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.575858775 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.323958317 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.298207331 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.295115834 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.32123932 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.296758773 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.297429369 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.292399745 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.404055546 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.294661394 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.310008081 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.56637705 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.319949396 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.289966257 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.290798646 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.292414836 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.478584509 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.30725975 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.321431145 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.297490508 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.320824428 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.306192787 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.293389154 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.292245294 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.296172294 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.751372319 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.303166546 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.404730135 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.344550642 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.327261317 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.676754332 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.583720433 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.361951436 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.301004101 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.293358815 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.453172114 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.304621933 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.291662074 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.321266029 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.298891968 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.575618808 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.808749513 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.307123512 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.29003889 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.745661783 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.464841897 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.340063551 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.305419144 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.584843153 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.324432329 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.291451574 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.294268309 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.344355505 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.304530036 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.292286028 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.570446961 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.317350569 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.31816627 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.296984403 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.291867933 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.478485335 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.305460107 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.471789877 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.300809975 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.297974351 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.299548305 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.571849345 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.32357033 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.801563646 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.312850174 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.290710884 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.403272789 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.475136531 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.771142755 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.302949091 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.484943561 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.690704069 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.33126132 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.299430574 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.730944537 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.329409891 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.299306023 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.288840812 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.287740371 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.287337135 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.331450833 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.314959365 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.716304039 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.798535616 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.580684859 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.327595136 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.300328815 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.290473732 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.563949484 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.297948839 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.288680746 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.568153227 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.823492167 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.301989457 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.296732608 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.777556189 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.304888265 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.320322371 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.298756595 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.583431174 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.320437254 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.33102626 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.29037881 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.297231198 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.290930002 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.317511517 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.298089303 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.286841018 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.768432157 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.456181992 seconds)
  done (took 282.639015894 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.293691712 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.285256589 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.28880583 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.286199172 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.288700409 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.287904293 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.288848943 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.286494151 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.287839313 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.286660393 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.28725092 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.289214278 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.290371459 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.295772361 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.339287573 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.298050767 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.785132076 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.299662783 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.297558801 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.297157843 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.871197812 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.289215199 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.297160199 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.298839892 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.296325857 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.299696362 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.299809326 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.336269887 seconds)
  done (took 179.561456269 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.299140976 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.354377317 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.311610508 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.345902427 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.310650614 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.300703788 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.32527558 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.313063331 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.301566357 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.300618425 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.298940211 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.332316723 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.303239116 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.402517731 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.328967582 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.332229354 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.397236567 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.303520465 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.303455793 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.301647595 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.348873976 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.31362709 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.33158022 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.361035268 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.312036456 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.355096361 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.315028059 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.296655294 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.300987981 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.405026244 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.319806974 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.332927985 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.333978161 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.31919894 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.418884411 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.40746171 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.401192398 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.331444014 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.303624672 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.297671206 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.302279827 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.302849671 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.356664338 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.314636646 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.304368864 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.419622398 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.318272288 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.302149114 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.321089188 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.302496253 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.315750857 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.317578976 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.337001712 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.425291522 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.347155787 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.326549579 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.3276007 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.318468764 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.301760336 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.399726794 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.307399639 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.419517582 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.322044416 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.304664027 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.305637964 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.306030211 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.351157455 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.340755467 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.400434417 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.308296261 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.399593737 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.355326769 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.314828047 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.304122892 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.30484524 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.359605091 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.411499353 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.357234027 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.352650721 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.33773593 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.313200828 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.301634558 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.306468536 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.331693237 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.30781946 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.419146542 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.419805065 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.308655186 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.305098707 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.304074805 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.303244055 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.330003517 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.365462114 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.342928618 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.411120373 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.340164892 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.34197466 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.311930451 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.319721593 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.306337967 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.330872015 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.31274017 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.316367045 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.638338825 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.346361456 seconds)
  done (took 247.651424403 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.657667253 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.34587405 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.373109545 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.591660581 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.66770852 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.178685354 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.342990963 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.349426443 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.361726626 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.476920538 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.415674252 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.398927114 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.342092312 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.323663761 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.343790056 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.360086833 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.380195803 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.640820664 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.451884764 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.860251042 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.345912752 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.629142294 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.648697562 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.691410057 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.394119784 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.764985725 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.956139368 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.460200603 seconds)
  done (took 74.979195503 seconds)
done (took 967.021422275 seconds)
SAVING RESULT...
DONE!
