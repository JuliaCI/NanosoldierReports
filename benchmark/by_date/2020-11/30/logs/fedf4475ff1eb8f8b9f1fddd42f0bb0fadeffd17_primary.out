cset: moving following pidspec: 15337
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.927860319 seconds)
loading group "shootout"... done (took 1.12202876 seconds)
loading group "string"... done (took 0.667261261 seconds)
loading group "linalg"... done (took 8.633767419 seconds)
loading group "parallel"... done (took 0.188475101 seconds)
loading group "find"... done (took 2.944209036 seconds)
loading group "tuple"... done (took 2.204350186 seconds)
loading group "union"... done (took 14.930997158 seconds)
loading group "dates"... done (took 1.472559476 seconds)
loading group "micro"... done (took 0.220112851 seconds)
loading group "simd"... done (took 4.755823858 seconds)
loading group "io"... done (took 1.073666615 seconds)
loading group "random"... done (took 9.59127395 seconds)
loading group "problem"... done (took 1.505907824 seconds)
loading group "array"... done (took 25.181535876 seconds)
loading group "misc"... done (took 1.89020708 seconds)
loading group "scalar"... done (took 43.468325648 seconds)
loading group "sort"... done (took 3.325216869 seconds)
loading group "sparse"... done (took 12.72445277 seconds)
loading group "collection"... done (took 18.411306458 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.42543097 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.123816889 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128068628 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.121716735 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.179520014 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121683157 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129581159 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085936466 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.845430896 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140111107 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116020141 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.435908635 seconds)
done (took 5.286313984 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.168761822 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093688532 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083212772 seconds)
  done (took 1.388112705 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071643942 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.06093733 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06769702 seconds)
  done (took 1.411485804 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.06566455 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135460523 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066640819 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067091157 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.070880526 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066970532 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066706691 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066795987 seconds)
  done (took 1.756422362 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072991418 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068132951 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066738436 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067884829 seconds)
  done (took 1.490767447 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066346053 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.1220224 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065394438 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065031295 seconds)
  done (took 1.531211297 seconds)
done (took 9.042870407 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140127017 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.815847869 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.751934737 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123060178 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.246015107 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450360003 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123743181 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183788949 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.08877225 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075313776 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121971435 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078431536 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.398846128 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.399697036 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071283662 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.168944729 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.64247189 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089370192 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133871151 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.45560804 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073832368 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088187634 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085479364 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071563451 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.328626461 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.153604493 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.671904632 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.096677795 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068635915 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094867064 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070768351 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078253735 seconds)
  done (took 10.689925864 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093519256 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090557115 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068856133 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123774904 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.095056577 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070176813 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075728401 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068144016 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088986482 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124073697 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090404147 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.098410572 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066908157 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069522281 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.079447043 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.19721703 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.08096599 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081739127 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068430887 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081167846 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105642792 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078389828 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078416592 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078173936 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.129685694 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169066934 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096784646 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098403567 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066454858 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.07875188 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11859902 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.124855514 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067474001 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065760845 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119620886 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095901847 seconds)
  done (took 4.651282562 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.893577372 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096331049 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083660307 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074635917 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106878684 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114249139 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.122734983 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122337188 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.099706761 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069165487 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152178108 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.641902393 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.132514845 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072307684 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120474914 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361515118 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.069036961 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070515925 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067990332 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.07092981 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070063722 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112276858 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066282995 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176051428 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.580031361 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070811314 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069369892 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096922978 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065423655 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140015431 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095040672 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069808811 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.549098916 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065633718 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063914418 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088283454 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.092598576 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066063966 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067290051 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077352207 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.179225112 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.11008733 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081334022 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.491289636 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070431778 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.563029415 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.226558393 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073152553 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072089319 seconds)
    (49/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.115298359 seconds)
    (50/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.064659265 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101783693 seconds)
    (52/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065124214 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064838771 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067732624 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.931718471 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.122999951 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067362222 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272441963 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070349421 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069614479 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068941 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099480439 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067779861 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069066193 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073019487 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096113196 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.890196068 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.085624721 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096349751 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066987463 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.399560381 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.075265905 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.06967883 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069775559 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.084703457 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.110847995 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06664783 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066643352 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.106623642 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089017049 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089426715 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070248066 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067312328 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066638506 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.322536466 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.143487017 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066882922 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067524275 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.479659721 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063877106 seconds)
    (91/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063893002 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065764008 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068207798 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089098912 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06650074 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063609277 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064670665 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099369065 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067168472 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.469025132 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.069710249 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.462472957 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068981521 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.105547989 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119419676 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068076553 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.095098242 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068644105 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065495236 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074091567 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066293622 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064749401 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069222069 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065884293 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066513659 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069469217 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068080176 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068034546 seconds)
  done (took 22.722972851 seconds)
done (took 40.175743231 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312841296 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078588614 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078314374 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078673618 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078314109 seconds)
  done (took 1.89371411 seconds)
done (took 3.251393024 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.13245879 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075644535 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065252979 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100862449 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068907089 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.101483072 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108608094 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104091652 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069219396 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068506259 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069210722 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102005196 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.104990684 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068880253 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098260132 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103428653 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.068581555 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.068219254 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.06895983 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.068627259 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068518657 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064809813 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.068938488 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069164179 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099252213 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069059822 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064884806 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099006611 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.068856426 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098385368 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.068953563 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.068636752 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069138206 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.099354628 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.068625568 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099126127 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064909457 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.068923513 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069260515 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069222762 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.06904948 seconds)
  done (took 4.612937539 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071214751 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081967808 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08356189 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062637273 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072207273 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082666178 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062518856 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081864477 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087844988 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082342209 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.0826568 seconds)
  done (took 2.163389322 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.0708597 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083245634 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087251438 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062630454 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073851502 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08403374 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062629432 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083248956 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085649996 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083805381 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084094027 seconds)
  done (took 2.155716519 seconds)
done (took 10.216659177 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097185391 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066530723 seconds)
  done (took 1.440810753 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.223933738 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.505500589 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.378325876 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092699277 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.071923701 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085035281 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.199169745 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067086373 seconds)
  done (took 8.085522329 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.102673548 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069145177 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068427822 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069718147 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068204119 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.06920332 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067752514 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.068432961 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069769257 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069923761 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069267527 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070339335 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068131082 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068017804 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068462444 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069134739 seconds)
  done (took 2.530204387 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103554208 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069612313 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099550846 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062552888 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071811711 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062586243 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070698693 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073010392 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070085835 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.07177341 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072065592 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071284082 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071180927 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071912845 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073302549 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.072937868 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072837365 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070495595 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072934761 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073395782 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072633867 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073373419 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.07375221 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071357226 seconds)
  done (took 3.176864308 seconds)
done (took 16.520809994 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.173661555 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074461442 seconds)
  done (took 1.535222529 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067971778 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069320537 seconds)
  done (took 1.440746894 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073292435 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061032174 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078498892 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.07017205 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061733451 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061613668 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077121405 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06175541 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061286243 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061913374 seconds)
  done (took 1.971465475 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062995735 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068484474 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066918572 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065279004 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067380722 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062722848 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065229699 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063089014 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.0693488 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.06250791 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066688369 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083395879 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066112477 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084067389 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065680273 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066240216 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067439672 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065429958 seconds)
  done (took 2.527691021 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.06155176 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.06182043 seconds)
  done (took 1.433209716 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.06509354 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062751123 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064285604 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064220372 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061715929 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061698133 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062021045 seconds)
  done (took 1.747025559 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421403641 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122650692 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.339984898 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069048405 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076045009 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.255611406 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064380932 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068613806 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.06854286 seconds)
  done (took 2.835115414 seconds)
done (took 14.808143971 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082312397 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181939134 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088074497 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.404181859 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091503132 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067382745 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113110927 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.173131391 seconds)
done (took 2.532952069 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214626271 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.242009719 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.389925977 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125421348 seconds)
  done (took 3.074901333 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.337628254 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078850376 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077486514 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066824967 seconds)
  done (took 1.885826829 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065053268 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071603062 seconds)
  done (took 1.456820972 seconds)
done (took 7.96273666 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072393931 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.097270448 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062111043 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063655996 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.063853804 seconds)
    (6/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.063524627 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064433785 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.074651588 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.06365589 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064714607 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062436876 seconds)
    (12/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062015649 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 0.064238565 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 0.064955073 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0645981 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064129263 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063754424 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064499407 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06409363 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06417716 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064047905 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064038072 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063461945 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064112608 seconds)
  done (took 2.933657853 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079262688 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065835356 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067288151 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066727701 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067407156 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066528265 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067017249 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065654533 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066870999 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065150286 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067463491 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067233592 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065359704 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.0671787 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065605253 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067817169 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06711959 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065424597 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065375534 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067648125 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06683746 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066580406 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067592184 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066819235 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067297503 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06724775 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065553097 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066262594 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067282515 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067578639 seconds)
  done (took 3.350325742 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066449574 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060036184 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060767133 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070054902 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060563613 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060662068 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061149041 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060602379 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060323116 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061397754 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060859007 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060115031 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060992569 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060659282 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060226361 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061126491 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064582374 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079350081 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060563501 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060383556 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065092024 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060668906 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060222331 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06069665 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060481891 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.06021769 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060662653 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060455639 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060587209 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060769419 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060410273 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064714358 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065611319 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060530285 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070348764 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.0649506 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060003604 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064694277 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.06145428 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060212562 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060322717 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060197991 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060094614 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060580401 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.07096674 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060545895 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.06193282 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061093278 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060112029 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.06042691 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060090791 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062443778 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068923492 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061768517 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060347091 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061524621 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.06033478 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060894513 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060671928 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.059907885 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060086992 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063840424 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061581886 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060961443 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080159221 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061657353 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070502447 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060057526 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061401357 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064529049 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061066175 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078116209 seconds)
  done (took 5.844388871 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071709065 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072546315 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.078722897 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070617165 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064468526 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06163007 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065447093 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061987595 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070679771 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065132526 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061259067 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065082387 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070464556 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065445621 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062290712 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070381384 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065440236 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064165084 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061610057 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065562721 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062788193 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064843708 seconds)
  done (took 2.810893474 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135190141 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066545707 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.10565953 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074591521 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068429917 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.07472296 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066607837 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066219631 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066512088 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06679536 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066690523 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066155541 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068448995 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067483982 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066742259 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066866218 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066251455 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066423583 seconds)
  done (took 2.663553535 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077227685 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066148767 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089520427 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065609165 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065727633 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066102436 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069171045 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070484209 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066005776 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065828354 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069979767 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065812052 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066226388 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066773962 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065981257 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066430478 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066243399 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066290187 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069996017 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069354001 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069555638 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069595091 seconds)
  done (took 2.854137916 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077235175 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065191293 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080920051 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066351691 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061072187 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060679628 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065905148 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065749206 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065591249 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064859825 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065108194 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060954048 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067148929 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065563576 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.066595057 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06547606 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065112418 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065417223 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064911483 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060995937 seconds)
  done (took 2.665009999 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086381857 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06337078 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063803627 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082972281 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063761273 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063393904 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082618734 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063227097 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063462359 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084889075 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063627912 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063207019 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082495335 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.082397357 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063566132 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.08246996 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083137922 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.082021258 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063686603 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063721926 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085107114 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063347849 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.083253506 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063582155 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063489121 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063533615 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063664065 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.08192256 seconds)
  done (took 3.361789562 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064513049 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063227166 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063616543 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064063942 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064061172 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064096297 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064631736 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064608406 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064050718 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064896028 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064861952 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064550184 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067191044 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.06432488 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06417898 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064187309 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06386377 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064392617 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064954672 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064825033 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064058788 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064126683 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064156478 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064439074 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064419149 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06416392 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064418392 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064059329 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063810155 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064243391 seconds)
  done (took 3.281547816 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073352743 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071269748 seconds)
  done (took 1.495537206 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062581654 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077871421 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060420247 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072813679 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069261184 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064114698 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069564586 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068841529 seconds)
  done (took 1.891742567 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.06694317 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091319757 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062805774 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064267729 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065646922 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131666475 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074690717 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074433422 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07585298 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064639343 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062862232 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074382303 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062413989 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075369133 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063464216 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.07144971 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069466515 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.0797493 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075364992 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060738593 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074753311 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063421589 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061312269 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063040359 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062263905 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069187471 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077844278 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074637766 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070702157 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060664068 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081506414 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061189284 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062102047 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070727418 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065715006 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061789652 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098018942 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062042112 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065982922 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060605538 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073465072 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081895637 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075479497 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079111407 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062922798 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063371691 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.06053446 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.06314593 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064854875 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070214454 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061056252 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068505049 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060227728 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062512456 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071606209 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061850779 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066000656 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070264455 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074622341 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071567941 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.069891386 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.07645466 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070464675 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068716512 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062246707 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.08021952 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062762647 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074263426 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076196827 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062321655 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074135341 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060759175 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059875108 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060924619 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09455325 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063146942 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062502381 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061298597 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061122201 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062389906 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070549216 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066345296 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068323229 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064594608 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077066233 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070135698 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.0609721 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067409609 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078828155 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064901914 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061286446 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077885072 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.06497149 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.06044612 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.077863956 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070202223 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062369775 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061778832 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063674076 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073427764 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061831443 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059017083 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06878962 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062138566 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062348961 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064876253 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068202713 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060198646 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070047967 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064227825 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061743465 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059381927 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064246512 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060881647 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058465727 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069061052 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060168954 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073922243 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.06613941 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074390033 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074365741 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070062209 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075325888 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.05975242 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058848131 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076995048 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069293685 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.199293242 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080571839 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.06251221 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075810377 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061791131 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063568883 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.07118763 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060991415 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06335755 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061090133 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066446201 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062831907 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063429509 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067106812 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.07022858 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073637639 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062346404 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071051786 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061984089 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077257564 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071385415 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066006953 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064750466 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062544589 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073582661 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068224587 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071062499 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061001167 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062135455 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061498765 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072140173 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071173921 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063770397 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068088539 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065773533 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062298094 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.06156526 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062654445 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065332804 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06498813 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062234511 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069455562 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070679635 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07519838 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068191989 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070658684 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.06077026 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061223739 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06276301 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.06110657 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065727738 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070922328 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076637184 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073203814 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082068594 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061721251 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071499916 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063156146 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078049919 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075165509 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062880332 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065508291 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.06036859 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062588427 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070487739 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072346725 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074721083 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076176698 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065514383 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065819066 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061193101 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076298992 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061691097 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069744954 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070794463 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065553803 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061328791 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062704997 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070585371 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065768652 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.06168985 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076707035 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067065009 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061062172 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075386528 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061306839 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072002172 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060822386 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064891342 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066605393 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063186422 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.07096774 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076645588 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060277659 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.06164619 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076638678 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063085207 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062509312 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069325231 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07620557 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065681511 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.06933811 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071717856 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071036158 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065121554 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070232024 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061440969 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069981322 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063671342 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072006625 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061025129 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078117858 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059754681 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074841894 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060619696 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071249217 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060935434 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069858276 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061296681 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076717923 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.06209969 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060866459 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071240412 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058884819 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068658638 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059333636 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064586072 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066658007 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069361178 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062121986 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.06986544 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.202924801 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071771453 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06712085 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070817956 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071232879 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066374877 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061850647 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070141787 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07250409 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.07037099 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063079756 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063679246 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062264269 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071285841 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063473639 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062692971 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06997918 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066576487 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067177838 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063357813 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063605109 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063331134 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069903852 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071337633 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079204472 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070368698 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069533157 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071003257 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.06108558 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077373388 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061673406 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.072099161 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060251459 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066898694 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070345262 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061615951 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080275643 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.06292831 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069487003 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073581381 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070220634 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065147573 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079863893 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065061803 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070121627 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.072259757 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066307111 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.06796238 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063643078 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070463726 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070603601 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072007757 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062916281 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068997145 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070691984 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062945649 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069048011 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.06310347 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069766607 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063434915 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060778443 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066431924 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073257614 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065909545 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.0668562 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061992893 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.06054743 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.06167491 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068023167 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065924758 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070298637 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077270265 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.06057336 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062561158 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061155171 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065312073 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079772216 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071129249 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069611151 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066316067 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060614546 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062506896 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063836575 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061474859 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064912592 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060446404 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060830195 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071878574 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063338652 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066042426 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061655802 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061987463 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070879988 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065886199 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061828982 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.06825159 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061019506 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066698889 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060745149 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062898958 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065533788 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060440222 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064674195 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071756094 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077191616 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067925655 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070008495 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062218235 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069340848 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076861601 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068096541 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061840438 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.069999864 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060161985 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078761429 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070060197 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069773455 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070305414 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.06168383 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077066012 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065167522 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070504414 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075362255 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061660313 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066435471 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059815229 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075585734 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064624352 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059793245 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067986693 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06856112 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066072472 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071622454 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.208928006 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071222915 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068018795 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066744748 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064114107 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.06380318 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.071448117 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078337814 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063228765 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066485724 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.06973159 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070726534 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066437888 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073414102 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070384257 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062835079 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063707608 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.0654253 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062621913 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07429943 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062630801 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066399202 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066036129 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061861489 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068819924 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077917381 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.07152656 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070868102 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061172022 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060720241 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079091858 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064932993 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065489816 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.06975684 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071372459 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073977372 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071704673 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078072737 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062353464 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067099477 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074028395 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062760392 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061828594 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065883431 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.06316935 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070686255 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071491256 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069288991 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063904306 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068238327 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074941034 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062830529 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066094343 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066523636 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062385615 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071626165 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069588375 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072928265 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062674449 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061312947 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065149231 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070323228 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.06934665 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070726336 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062592697 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067973614 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075343199 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069011292 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064785627 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061354646 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064639249 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.07073644 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065943089 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061023397 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066250671 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064881502 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068594356 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071010605 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.06583706 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.06130211 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078204149 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.06989012 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071029779 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063591289 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063501918 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06174184 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061178989 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072344132 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061255337 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063183423 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065858421 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062861629 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078422567 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069893764 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07721511 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062810829 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066229957 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061589746 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071121244 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.06636116 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061603635 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072126249 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060804477 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07642463 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072627846 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066219144 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.061113922 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.086713556 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.06879128 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076098354 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07076043 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070236382 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064557357 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070592962 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062915451 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071994932 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060852831 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059479578 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070215938 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069655874 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072388427 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060299026 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070239152 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062305333 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068798301 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067704566 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06177088 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061259348 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062109109 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068930879 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064568774 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069036771 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.209199019 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079479478 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063205761 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073860388 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071702562 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073320555 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076133606 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073940872 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069544687 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062381888 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069721665 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069870045 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063491014 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06649587 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065495649 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083426411 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063191348 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063443193 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075428932 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067770425 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061625721 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068138632 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066223553 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071940021 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06305161 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072910952 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065754432 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062555837 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065882501 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066545615 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060500838 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061264261 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061243598 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070997626 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066232912 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.06205237 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080398689 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063259904 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.0711405 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072621281 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.06915324 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063453318 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060666342 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.06250097 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074772381 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077384522 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065323289 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070321104 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062845199 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070909444 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060607635 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070432254 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069483373 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07022696 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.06096464 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0619135 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.075914513 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076714334 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066341638 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070508654 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070858697 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062997419 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082973398 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070511967 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063119358 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072571183 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063873871 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.06086502 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060852885 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.06286031 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.072916693 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061212965 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063726769 seconds)
  done (took 42.256903319 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099909481 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062480051 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061668831 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061636105 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07214403 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063068587 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06128142 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061944517 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062635463 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063890802 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061211943 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063860609 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071773128 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074498114 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071454926 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065365391 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061259273 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062371253 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061297794 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062664155 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071476943 seconds)
  done (took 2.87307295 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.0652233 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065432642 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065581227 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065418585 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064725651 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06128873 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065322995 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061784637 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065710047 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062312466 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065547437 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061444838 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061980571 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.06193472 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061602893 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063062087 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065817324 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064610071 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061404122 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065122585 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063415338 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064899281 seconds)
  done (took 2.852767532 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063070127 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061939 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070635761 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061183315 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060901525 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064821696 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060674402 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06542358 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065689748 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065233168 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069872876 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.0627783 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060867305 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066811239 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061132348 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062060794 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103648508 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062088538 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062048712 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060945635 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063881301 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070311627 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060941962 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060736364 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065528869 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064683873 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060821999 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063504548 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06163223 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065342605 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062305822 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060602574 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070209546 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.06964218 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065858511 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065614417 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062903738 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06206086 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061741575 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.06123835 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069951305 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062929856 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061296445 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062760709 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070279277 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060862312 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060530878 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070330075 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060956781 seconds)
  done (took 4.624016793 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071534885 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113531267 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067266229 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095006081 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.07396835 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.06668554 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066652614 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095902797 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062312048 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063344819 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075041278 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074782795 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06407794 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065206023 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066981926 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063829591 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06479302 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063142633 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066468973 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063599142 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066167105 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068109058 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073365931 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073724439 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065006178 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062836708 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063127361 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065200362 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074177955 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066591064 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065299583 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065577258 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074093743 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068516574 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063390815 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.06337533 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075672217 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064114153 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063865697 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062271149 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063659648 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064995001 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068359589 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075005824 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064349613 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.0689167 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063926182 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061906845 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074037207 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063333535 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067888791 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075004869 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065038026 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064615732 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065363387 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074161039 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064367753 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062546434 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064151607 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073626403 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062197426 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064818054 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077064132 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062925217 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067295088 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074902331 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068454485 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065271834 seconds)
  done (took 6.273465041 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070410215 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096183421 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072235703 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072246269 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072091692 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071468207 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072048527 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071812083 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071291275 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071659017 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071554988 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.111584615 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068521564 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076144393 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071860443 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071965397 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071601256 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071456209 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071759354 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071132344 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071937375 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07191348 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071596203 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07217405 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074062503 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068209384 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071190206 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07187802 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071670058 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07106081 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073836132 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071514395 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071674005 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072004706 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074471326 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.07122787 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062341514 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071103581 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071781104 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071472538 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068156241 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072432887 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071949685 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068100692 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071727489 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071533623 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072402924 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.07436723 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078676776 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072398946 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.0717365 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072543035 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071801879 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071892187 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072067539 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078601539 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072611305 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072290711 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071562037 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072124896 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072044663 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078136915 seconds)
  done (took 6.017909927 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074319731 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06849017 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.081042753 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061370594 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061512985 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070863813 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061495723 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061380798 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067937909 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067718818 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069676769 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070244487 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072151889 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070020819 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069930922 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0725357 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070307733 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070328576 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067941513 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069992402 seconds)
  done (took 2.865851476 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076411734 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079753819 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.0670228 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070610235 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066775135 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070318974 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066190357 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067254749 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06704401 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066878065 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071470066 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071716882 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067645054 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071538922 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071615742 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070760984 seconds)
  done (took 2.599355896 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064745362 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068989617 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067733175 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062746122 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064708497 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061810013 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063271058 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061097061 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064031245 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.07583276 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062881203 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064953343 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062677321 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061479491 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.064529376 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.06444512 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064060153 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062176885 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062679558 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066553915 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070912964 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.06312449 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065069696 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062474028 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064350224 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070490212 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063583842 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064408437 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061972215 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064963615 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064441247 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068918535 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064203884 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062435623 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061370161 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062019371 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062896698 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064758729 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065053828 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.06311882 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061448827 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.06776979 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062427194 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063121537 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064002718 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.06491313 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064302581 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.06853701 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06273489 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064957709 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062915132 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064191671 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062871937 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069831373 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064365721 seconds)
  done (took 5.027966421 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07903915 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066887508 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.06139086 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061589562 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066587558 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066887883 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066785146 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066595158 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066718704 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060927839 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067226659 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.06565403 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066957358 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066770526 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066701385 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066840552 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061140393 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066508413 seconds)
  done (took 2.683952709 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067924582 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067171765 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065895801 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063233428 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063247314 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067723559 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061379672 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062474788 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062837824 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062889176 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062983519 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.063131322 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062275977 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063240445 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066742023 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063491713 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062950457 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061652583 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063508636 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061136188 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067134947 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061290554 seconds)
  done (took 2.888439286 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088822621 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.08480679 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127839204 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080279774 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.08932053 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072074755 seconds)
  done (took 2.029049284 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094369872 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104532849 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066316645 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065806759 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074754097 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069102321 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069372274 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069419928 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074812708 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072787066 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069672612 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074299195 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074712394 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070585786 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074299009 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076416664 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06906519 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069351302 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066642808 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076989345 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06918128 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074944927 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069479706 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068666387 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069157979 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070862484 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076916266 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072829032 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069156992 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074691723 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07697841 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069000018 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074558468 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073206168 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06627961 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074627362 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06934426 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076976194 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074883415 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070723175 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066425583 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074520619 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074501287 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07089046 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077157101 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069690935 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071227079 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069528835 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069790122 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078863912 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074891753 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071125876 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074804885 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077265315 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077195261 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079094768 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07273663 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070857292 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074539012 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0736002 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071075124 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075328612 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07105493 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07388321 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077062107 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071323205 seconds)
  done (took 6.322135816 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100905643 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066877555 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069581289 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073703818 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071200678 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069456324 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070133949 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069773175 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069217052 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067056309 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10457386 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070102065 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071152151 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073996796 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069807872 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069767588 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069547951 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071511554 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067023905 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079088442 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069630859 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071230092 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071396043 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071118975 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07294463 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076588114 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069529064 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069260426 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070080076 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069579766 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070742434 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069815417 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070732459 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06666356 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071227443 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069445292 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069670118 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071021965 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069524837 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07486665 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070927892 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076897968 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069343198 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069606163 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073203176 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069600008 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069333058 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066905308 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069743864 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066841837 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073232604 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073365388 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073201544 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07157206 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069725881 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070344567 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070084327 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069670805 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070026826 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077172102 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070682071 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069533327 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078942007 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069641698 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069759958 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071673953 seconds)
  done (took 6.251158389 seconds)
done (took 130.044115746 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218892857 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.190204521 seconds)
  done (took 1.879674858 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075674342 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166889108 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075541719 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075142953 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109389064 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107818899 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076468915 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073113101 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075239912 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072686658 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140311327 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076323639 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073119789 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072953886 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073020871 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073231487 seconds)
  done (took 2.910412344 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.109036308 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185395077 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.08277624 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070609557 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115054917 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.07720361 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072702853 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076028327 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077528211 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.071157719 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107636338 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082620775 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.07506533 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.07721999 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.0729138 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074445735 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.07579956 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077500353 seconds)
  done (took 3.078756766 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098610737 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086843897 seconds)
  done (took 1.688347835 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155713352 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105807445 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145270306 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.329367542 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.129522724 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127067853 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.129868363 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125962181 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110860637 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122294653 seconds)
  done (took 2.97934748 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107099765 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.106132011 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.30991964 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102751319 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082462187 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078042228 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075967455 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080541634 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075969786 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077265498 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122755486 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075790605 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073308707 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124427634 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.0988499 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.10697175 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071991067 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078448576 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080130217 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071387172 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076420844 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080238312 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178698086 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078517942 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099918414 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07578158 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077796282 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075328985 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074992145 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078977892 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079534048 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099450606 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079067549 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083024951 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077272248 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.09693334 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072109819 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099388878 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075136733 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073325188 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075673957 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079343636 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072292908 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078672608 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075697123 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077564088 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080486867 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071248346 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075865709 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074933906 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073178369 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076950989 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.07648142 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077985632 seconds)
  done (took 6.312270981 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108221094 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109225475 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07098862 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.114077135 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106405077 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070910878 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.10505561 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100488289 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.10919708 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070764199 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070291328 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07022862 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076866535 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079848569 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.115888977 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108535779 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071945585 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070991195 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108246144 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107195806 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069265853 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102142905 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100748098 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106981286 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069198602 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070692682 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069225809 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069774973 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074668964 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075095608 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069431879 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075834783 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081319258 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076107905 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069041995 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069262611 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069130065 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07605808 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077225595 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077198211 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075117162 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068479914 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06879888 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070070599 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069868049 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068647717 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075182259 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076187004 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075491928 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068938242 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070194469 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069208815 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069925897 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075971551 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075212678 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076952006 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076532431 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069367033 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069526084 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071038166 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077566116 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077084835 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076513929 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070335473 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077295807 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.0695953 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078129265 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081487826 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069235212 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069358509 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069051452 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069797304 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070018769 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074631066 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.07515272 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069862962 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069064632 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068967049 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077271435 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074971933 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068616109 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073955659 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068903929 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069101546 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069980636 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06996941 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074377751 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076037709 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069595563 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068772868 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069104785 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069534441 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068197309 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.073982075 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074853425 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075089107 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074231809 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068796114 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.073842021 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073501983 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068846734 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074008431 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06844933 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068160023 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068229785 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07336109 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073308909 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075519262 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067740795 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067541903 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073435936 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075625591 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.209273553 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076909124 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078656371 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076915227 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070089952 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078971687 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070651931 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078040241 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070251116 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078199298 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070254507 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076395974 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069900535 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068954599 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069788392 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075623243 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070636748 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069926501 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070749081 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070288818 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075970638 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079469769 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070335877 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075869392 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075023237 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070169387 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075559847 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069706934 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076920604 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069649085 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070311133 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06922595 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078437902 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069432872 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06962939 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069865905 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07791354 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069895746 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077362409 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075247522 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06949201 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.0791657 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077437447 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074950861 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077630055 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070139229 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069496081 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069763377 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072499371 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07478242 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076335657 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070213911 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069395587 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074830843 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077312797 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.06908282 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075242321 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074919442 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075344597 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06959246 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069239481 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078518637 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07728252 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074793476 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.306735421 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075896622 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069327235 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075047423 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074864455 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068852515 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08132205 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069655333 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07975753 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075728492 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074440377 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07637076 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077050875 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.07748416 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077981099 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079718185 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06927165 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069749076 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.0753965 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069146705 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069089567 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07548623 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069792165 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070227363 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079739951 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069216147 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07710575 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068717094 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075721994 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068468493 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069214316 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079752717 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069097747 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069058938 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074137506 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068806636 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074575562 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076801491 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073908052 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068214159 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068587599 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073888459 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.07443724 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067535809 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068174054 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068838319 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072570639 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.07300699 seconds)
  done (took 18.690382663 seconds)
done (took 39.053046514 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.171333763 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116447774 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.208263607 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199121767 seconds)
  done (took 2.304153814 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101469383 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066038016 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081714001 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.089783389 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065731274 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076805212 seconds)
  done (took 2.034135656 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200217794 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173218508 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.238784263 seconds)
  done (took 2.156736025 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366145196 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.148847963 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215700422 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.500348428 seconds)
  done (took 2.878051953 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110602091 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.10065012 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077876065 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.110596924 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.084777438 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063221352 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133116169 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070131008 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099348533 seconds)
  done (took 2.460485132 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.129773679 seconds)
done (took 13.544022833 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.239491749 seconds)
    (2/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.10434221 seconds)
    (3/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.079523031 seconds)
    (4/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.238250763 seconds)
    (5/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.237954843 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.122325134 seconds)
    (7/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.218717723 seconds)
    (8/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.228936958 seconds)
    (9/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.203415115 seconds)
    (10/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.176632286 seconds)
    (11/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.234316819 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.094547283 seconds)
    (13/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.140352791 seconds)
    (14/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.091445746 seconds)
    (15/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.079656275 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076847807 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.13507005 seconds)
    (18/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.06590854 seconds)
    (19/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.077197991 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.0786085 seconds)
    (21/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074708368 seconds)
    (22/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.075944839 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078680366 seconds)
    (24/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077290441 seconds)
    (25/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.124564132 seconds)
    (26/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.092398846 seconds)
    (27/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.075589789 seconds)
    (28/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.143524456 seconds)
    (29/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.09547583 seconds)
    (30/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074711365 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087868837 seconds)
    (32/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.176602749 seconds)
    (33/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.078088514 seconds)
    (34/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.214611922 seconds)
    (35/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.078032079 seconds)
    (36/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.118001063 seconds)
    (37/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.25975346 seconds)
    (38/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.238144839 seconds)
    (39/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.170584512 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074773603 seconds)
    (41/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.067417761 seconds)
    (42/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067688517 seconds)
    (43/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.172075293 seconds)
    (44/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.189634515 seconds)
    (45/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074967238 seconds)
    (46/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.142991455 seconds)
    (47/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.165890425 seconds)
    (48/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074865995 seconds)
    (49/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.22161712 seconds)
    (50/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.183641033 seconds)
    (51/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076315988 seconds)
    (52/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.076803715 seconds)
    (53/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.177597472 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.088321769 seconds)
    (55/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.0784617 seconds)
    (56/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073161968 seconds)
    (57/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.065835468 seconds)
    (58/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.087836872 seconds)
    (59/341) benchmarking ("sort", Float64, false)...
    done (took 0.137013485 seconds)
    (60/341) benchmarking ("sort", BigInt, false)...
    done (took 0.264107064 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078762435 seconds)
    (62/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.094292151 seconds)
    (63/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.222222201 seconds)
    (64/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.142814276 seconds)
    (65/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.251598596 seconds)
    (66/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.177188992 seconds)
    (67/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.086316154 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085311096 seconds)
    (69/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.081232027 seconds)
    (70/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.10725511 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086659483 seconds)
    (72/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.226464357 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.126585581 seconds)
    (74/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.07585794 seconds)
    (75/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.07527407 seconds)
    (76/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.234141772 seconds)
    (77/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.069073246 seconds)
    (78/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.073039266 seconds)
    (79/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.066573099 seconds)
    (80/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.193146245 seconds)
    (81/341) benchmarking ("sort", Int8, false)...
    done (took 0.153679056 seconds)
    (82/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.068687068 seconds)
    (83/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.070475665 seconds)
    (84/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.149066497 seconds)
    (85/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.154229225 seconds)
    (86/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075015179 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.133047919 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.156294956 seconds)
    (89/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.074150184 seconds)
    (90/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074693871 seconds)
    (91/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.145160444 seconds)
    (92/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.191038889 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.124074397 seconds)
    (94/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.06709886 seconds)
    (95/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.072236761 seconds)
    (96/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.163528263 seconds)
    (97/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068815666 seconds)
    (98/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.144282004 seconds)
    (99/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.199034223 seconds)
    (100/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.157053856 seconds)
    (101/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.06841667 seconds)
    (102/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.172632975 seconds)
    (103/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.198121799 seconds)
    (104/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.162895273 seconds)
    (105/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073308278 seconds)
    (106/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.074048459 seconds)
    (107/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073840925 seconds)
    (108/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.156435292 seconds)
    (109/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.210306617 seconds)
    (110/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.194273143 seconds)
    (111/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.085590132 seconds)
    (112/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067107019 seconds)
    (113/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069967443 seconds)
    (114/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.068205249 seconds)
    (115/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.1979617 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074774303 seconds)
    (117/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.065213645 seconds)
    (118/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068027878 seconds)
    (119/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190645556 seconds)
    (120/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067976638 seconds)
    (121/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.077570127 seconds)
    (122/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.068501704 seconds)
    (123/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.218313405 seconds)
    (124/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066673948 seconds)
    (125/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.082373354 seconds)
    (126/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.145402078 seconds)
    (127/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066861135 seconds)
    (128/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073557298 seconds)
    (129/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.083370955 seconds)
    (130/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069679857 seconds)
    (131/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074875581 seconds)
    (132/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.06672367 seconds)
    (133/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.066901454 seconds)
    (134/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066703723 seconds)
    (135/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.07080354 seconds)
    (136/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.141426115 seconds)
    (137/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095198632 seconds)
    (138/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.098790928 seconds)
    (139/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.067270763 seconds)
    (140/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.125244068 seconds)
    (141/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.087117619 seconds)
    (142/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075467713 seconds)
    (143/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.220219219 seconds)
    (144/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066547913 seconds)
    (145/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.084762061 seconds)
    (146/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.069957118 seconds)
    (147/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073884153 seconds)
    (148/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.066372355 seconds)
    (149/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075764672 seconds)
    (150/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.164397893 seconds)
    (151/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.163806472 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076515304 seconds)
    (153/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075054339 seconds)
    (154/341) benchmarking ("sort", Bool, false)...
    done (took 0.142588732 seconds)
    (155/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.084424101 seconds)
    (156/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.066394934 seconds)
    (157/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.093506932 seconds)
    (158/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123558106 seconds)
    (159/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077822315 seconds)
    (160/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066471214 seconds)
    (161/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.137513644 seconds)
    (162/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.068956484 seconds)
    (163/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.066604432 seconds)
    (164/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.065978842 seconds)
    (165/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072565653 seconds)
    (166/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074713646 seconds)
    (167/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084966156 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 0.067176937 seconds)
    (169/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.139201758 seconds)
    (170/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.067716268 seconds)
    (171/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.161283644 seconds)
    (172/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.071088307 seconds)
    (173/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.083412771 seconds)
    (174/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.066286809 seconds)
    (175/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.151389018 seconds)
    (176/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.154317676 seconds)
    (177/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066150177 seconds)
    (178/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065574861 seconds)
    (179/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.064288264 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.252550959 seconds)
    (181/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.081112428 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.092976879 seconds)
    (183/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.06833626 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.088109422 seconds)
    (185/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.167722821 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077779012 seconds)
    (187/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.068272992 seconds)
    (188/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.079968498 seconds)
    (189/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.066200301 seconds)
    (190/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.067383811 seconds)
    (191/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134481797 seconds)
    (192/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.074224336 seconds)
    (193/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067935532 seconds)
    (194/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067110817 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092512781 seconds)
    (196/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.140492607 seconds)
    (197/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067609842 seconds)
    (198/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.1333992 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.149823772 seconds)
    (200/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.229643637 seconds)
    (201/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075113684 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066783512 seconds)
    (203/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.082176205 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.131574794 seconds)
    (205/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073756753 seconds)
    (206/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.082759119 seconds)
    (207/341) benchmarking ("sort", Float32, false)...
    done (took 0.140010731 seconds)
    (208/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.067167426 seconds)
    (209/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.118359954 seconds)
    (210/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.06702683 seconds)
    (211/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065419037 seconds)
    (212/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082039261 seconds)
    (213/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066564463 seconds)
    (214/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.077576588 seconds)
    (215/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.180383407 seconds)
    (216/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.073313936 seconds)
    (217/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067428391 seconds)
    (218/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.07496659 seconds)
    (219/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.067224236 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074682476 seconds)
    (221/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.074078441 seconds)
    (222/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.17377039 seconds)
    (223/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.202341803 seconds)
    (224/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069305318 seconds)
    (225/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.069460431 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066693324 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.112081745 seconds)
    (228/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067376509 seconds)
    (229/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.08327807 seconds)
    (230/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07531518 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090213862 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092689534 seconds)
    (233/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067857886 seconds)
    (234/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067225985 seconds)
    (235/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066560254 seconds)
    (236/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078128117 seconds)
    (237/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077080847 seconds)
    (238/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.066855536 seconds)
    (239/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066910375 seconds)
    (240/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.093762373 seconds)
    (241/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066949331 seconds)
    (242/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.180915833 seconds)
    (243/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066821419 seconds)
    (244/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073930217 seconds)
    (245/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066500991 seconds)
    (246/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066394927 seconds)
    (247/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.07779101 seconds)
    (248/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067038446 seconds)
    (249/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.083914424 seconds)
    (250/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.194699962 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.147798836 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069470646 seconds)
    (253/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073349937 seconds)
    (254/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.07137066 seconds)
    (255/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.068567451 seconds)
    (256/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.066610878 seconds)
    (257/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.07386015 seconds)
    (258/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.069087237 seconds)
    (259/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.079156637 seconds)
    (260/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065537725 seconds)
    (261/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067658999 seconds)
    (262/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080089744 seconds)
    (263/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.06563539 seconds)
    (264/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.066581533 seconds)
    (265/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152414759 seconds)
    (266/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.06844098 seconds)
    (267/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066930245 seconds)
    (268/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094026107 seconds)
    (269/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066225342 seconds)
    (270/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.065323527 seconds)
    (271/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.075083115 seconds)
    (272/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066631073 seconds)
    (273/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.079437169 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066594458 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066246951 seconds)
    (276/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.070236982 seconds)
    (277/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066835037 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065183306 seconds)
    (279/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069428649 seconds)
    (280/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.067036475 seconds)
    (281/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067693577 seconds)
    (282/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.068009353 seconds)
    (283/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.068006063 seconds)
    (284/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.066154332 seconds)
    (285/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068815784 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141206677 seconds)
    (287/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066324634 seconds)
    (288/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074649429 seconds)
    (289/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.065551504 seconds)
    (290/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068326499 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150328121 seconds)
    (292/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.073486149 seconds)
    (293/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067294814 seconds)
    (294/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.074989568 seconds)
    (295/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088286338 seconds)
    (296/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.066040298 seconds)
    (297/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.066640766 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.146461836 seconds)
    (299/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.065873862 seconds)
    (300/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067416528 seconds)
    (301/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.066477048 seconds)
    (302/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.150647089 seconds)
    (303/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.065945233 seconds)
    (304/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.173985863 seconds)
    (305/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.065178429 seconds)
    (306/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.065130007 seconds)
    (307/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.068665218 seconds)
    (308/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.248909684 seconds)
    (309/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067951928 seconds)
    (310/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.149702189 seconds)
    (311/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.09346075 seconds)
    (312/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.067468728 seconds)
    (313/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.067558937 seconds)
    (314/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.067364666 seconds)
    (315/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.06786647 seconds)
    (316/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.066785134 seconds)
    (317/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.082718256 seconds)
    (318/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.06747964 seconds)
    (319/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067845019 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079411795 seconds)
    (321/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.086099235 seconds)
    (322/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.071135687 seconds)
    (323/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.067065113 seconds)
    (324/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.067084136 seconds)
    (325/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074776009 seconds)
    (326/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.067251845 seconds)
    (327/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066876902 seconds)
    (328/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091912333 seconds)
    (329/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066756859 seconds)
    (330/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.069231384 seconds)
    (331/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.153532342 seconds)
    (332/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.065994836 seconds)
    (333/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066748754 seconds)
    (334/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.152804206 seconds)
    (335/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070276027 seconds)
    (336/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.07085443 seconds)
    (337/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.0688552 seconds)
    (338/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.067581798 seconds)
    (339/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066701172 seconds)
    (340/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069578286 seconds)
    (341/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.067109488 seconds)
  done (took 36.989437571 seconds)
done (took 38.556692258 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092512381 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.081337821 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.079568934 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076110454 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079445461 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.07771754 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.079492333 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076987681 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.07826514 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077698469 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077818891 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066570202 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074848107 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081566176 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075792043 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.082078971 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.07884729 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082352355 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067342707 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081120639 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093087261 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078420959 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075400422 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080468086 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067037223 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075662504 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089957471 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.086842013 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073917388 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075535364 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073958694 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084649337 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074483385 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072387423 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076352188 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072666979 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.075838703 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073393069 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089161427 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072409706 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.06702873 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078678745 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074427663 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.0742291 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075328669 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.0779761 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071843821 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079325409 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.06656636 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077749431 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089109194 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071612008 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073246918 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074560687 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071888183 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075989975 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073384467 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077745842 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071438825 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077634029 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077770748 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074845501 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.065983549 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074776275 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073707265 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073835944 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.06529905 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071624959 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.0664456 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06649992 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.066121166 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075387254 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072619545 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071274348 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065503847 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.065770016 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065800977 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078092078 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072753767 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075625642 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066579248 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071245955 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071451771 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067066898 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07157845 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.07728681 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065757297 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066760506 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065687687 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080319524 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072895881 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06576104 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077862798 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071215157 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070964305 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066197528 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065728414 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071058527 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074374315 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066350651 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065644401 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071393055 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071126681 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075420094 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066822268 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071684255 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071146172 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065412184 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075030471 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073740503 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075129433 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079086718 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075157015 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078259405 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066479212 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065517533 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075787254 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066445968 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071040351 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.073946006 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071702514 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.07433379 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066444991 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065531539 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071209932 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072508048 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066458899 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066367317 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066185894 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075528892 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.072812554 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065115018 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065613169 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074154251 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074360899 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.06441993 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064251623 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073996917 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065737492 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071029747 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070820974 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073273794 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.064857201 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065707861 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.215078588 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067006292 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066961546 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072098895 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072411952 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067230656 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075072752 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073059644 seconds)
done (took 12.946750572 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067708289 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106450673 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.0740668 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.08307186 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079185119 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068161413 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070979488 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083257654 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070792949 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086517068 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094743734 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088965113 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093537414 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066104401 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067988362 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068448272 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065667745 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074462933 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081775049 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089858759 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095255213 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066980289 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.076104335 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083571752 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077257352 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082775024 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.06849263 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067746814 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069824529 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.12286155 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092954551 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066822179 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067884296 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080306972 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081037901 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073727146 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068459533 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071594183 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070320662 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067144358 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068903132 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.080906393 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070728262 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070474067 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068256199 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068450285 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067657432 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070080869 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.079924213 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070488336 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074453146 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078274234 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068546092 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067260898 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065363367 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070820681 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.06689717 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067795673 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067256681 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067218023 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067263523 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069896495 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067818513 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067580843 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070666831 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069496843 seconds)
  done (took 6.59151581 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.08307572 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093012117 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081835076 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082238241 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067033318 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067632895 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067837419 seconds)
  done (took 2.232667744 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068455033 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075350437 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079261087 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07977555 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088741684 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077012856 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068234818 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099705914 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066614007 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.075578887 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.08280962 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.08012365 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070572875 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079753232 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067622114 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079007878 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068045066 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074180934 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074691688 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080603702 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071553176 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097410579 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080713823 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068012352 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.08087227 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074530408 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069668043 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068353805 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068443411 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067292307 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066943277 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089085787 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073854945 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079184258 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068060999 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067063029 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071694206 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067861594 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071197837 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.07634227 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071465401 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066996676 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067596561 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067391953 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068297597 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071713585 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.069188062 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067650077 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066863325 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075217392 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066459039 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073776583 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069761574 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072463307 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072546431 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071614966 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07423327 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067495547 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074557798 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073789288 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066934575 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079818088 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079081389 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071155624 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078963565 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075455784 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073805336 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070964127 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066721928 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066703884 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068084026 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079168481 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070850382 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069417911 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068010528 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072249131 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.070957436 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082144476 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082362024 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079976644 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069556368 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.06765383 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071458013 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082389198 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071947326 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067849376 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068040124 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067173566 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072181071 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067800294 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071961877 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067669243 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074116029 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069724961 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069819626 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075036007 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067616933 seconds)
  done (took 8.770548404 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070440781 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.070251487 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.069056935 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068886864 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069061036 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.069165842 seconds)
  done (took 2.144164271 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090597406 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068476781 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079710306 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068657777 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.09030081 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074027497 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074368109 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069476917 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.08391314 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078481287 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074367531 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076682632 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074128002 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069306294 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074251843 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.068738037 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073864977 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070414207 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077726583 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069891393 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083914969 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069748704 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069750115 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080098168 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070809918 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068646598 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068753451 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078256652 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077555169 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069334643 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069302472 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070569034 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07615594 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069338517 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074052475 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076479314 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06773313 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072839535 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069852291 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070213176 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076247635 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069386393 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.06979281 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073573961 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069679177 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075909156 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073593445 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071353368 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073556286 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072940228 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073287769 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068123512 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070390777 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073606672 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076546675 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069391712 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073131639 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073531076 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069204311 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076119973 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067981935 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071216228 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069263527 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070350658 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.07280855 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073147714 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075788085 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069336604 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069553328 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067846345 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.072635011 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068069846 seconds)
  done (took 6.945974646 seconds)
done (took 28.358788229 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.547716299 seconds)
  done (took 2.214997909 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.586724628 seconds)
  done (took 2.29749879 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.48638818 seconds)
  done (took 10.1927196 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.30720332 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.327146187 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.732702307 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.13351684 seconds)
  done (took 3.244667335 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.757461576 seconds)
  done (took 2.473900763 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231080038 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.220027472 seconds)
  done (took 2.180011745 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.33717756 seconds)
  done (took 2.045051388 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.141068818 seconds)
  done (took 2.847055585 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.228998405 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160766234 seconds)
  done (took 2.111777046 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.542209325 seconds)
  done (took 2.255510871 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.290568316 seconds)
  done (took 6.009649605 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.234252836 seconds)
  done (took 1.991959695 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230184797 seconds)
  done (took 1.949227739 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.046178668 seconds)
  done (took 3.758947026 seconds)
done (took 47.291903318 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084667733 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087158144 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087177353 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082624209 seconds)
  done (took 2.027347714 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075156911 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071566478 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075108611 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.0761191 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.07275169 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073928405 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074524421 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071128732 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072736432 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071459976 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069696412 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.070977671 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073649926 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071465083 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073608986 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074487457 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071085118 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.07111236 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073564748 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071603516 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073510979 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.070897736 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069578472 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071184399 seconds)
  done (took 3.454839557 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079152173 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073322296 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076298286 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071831913 seconds)
  done (took 2.023818108 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077825907 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077875498 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087901374 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091764804 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.079278902 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078305024 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085080066 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086413375 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.067106191 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087636502 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068923118 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068050579 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067894672 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086253461 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084012357 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063469899 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064784077 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077950106 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077213014 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080366598 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069893149 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066624214 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078281005 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077943303 seconds)
  done (took 3.573117702 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080151904 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066549391 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079869259 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091735307 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093579462 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066449121 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080047055 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.094161634 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.127663983 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066503414 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072772035 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066247268 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.106030749 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066461979 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081508421 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109161495 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112201012 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070292797 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.0992489 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066313162 seconds)
  done (took 3.429669383 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076732953 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070325962 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071288134 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066464915 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078290111 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073973933 seconds)
  done (took 2.171841213 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069237427 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068767762 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.071071801 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073426125 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068949884 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069121694 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067970121 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.06702685 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067467925 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067845712 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068076247 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068262194 seconds)
  done (took 2.554908615 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.155605191 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069895918 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070943112 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066664357 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072201929 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067482898 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082437762 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069116609 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085587754 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068161464 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068359219 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.06947462 seconds)
  done (took 2.674549817 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100567721 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102247188 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145957676 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117227371 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116713441 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097376401 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119323951 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095143253 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160877522 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137102639 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117103613 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094289303 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087483684 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070340726 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099790832 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102176315 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13603444 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073763799 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113402733 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.164017737 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114752503 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.112475314 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122178533 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116897145 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081825972 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121689849 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094750768 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102330541 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125047858 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110051824 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119828074 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098654551 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072669933 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072100311 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149815946 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100716408 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107362752 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093929119 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100530761 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088864823 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10758478 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070318545 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.086950316 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.10637673 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085610897 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116748387 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088479709 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103216803 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081348075 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130770641 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106202039 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099080142 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086036189 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103718594 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13017765 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095302956 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110281943 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10573813 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08221559 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116768762 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.099725454 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.256008062 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095296504 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081818661 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161169346 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09027303 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113219074 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113147343 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.082791521 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090470555 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103242513 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131953161 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107196088 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.107608628 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114847124 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095590033 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111069377 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.091923819 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129082909 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093926599 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073841261 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105285638 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12934348 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085724778 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101323909 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130501732 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092810307 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078095864 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.092931101 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118511618 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081869235 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.096585437 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070222328 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098061486 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107923483 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097429766 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112112456 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107847253 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07938517 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12446618 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109219202 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073306226 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117846144 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099685343 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152418989 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09592285 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.076823025 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099981038 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094189721 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149048634 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08563072 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0810328 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098856416 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140602922 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094873759 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.169572695 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096770965 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129035489 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097536369 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088817637 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075215329 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089760447 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101609892 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10633224 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101069598 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088204498 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077407066 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086441684 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094419374 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.254513592 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082940128 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115760492 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103570687 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.077282222 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089704185 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080773256 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125975903 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.07931001 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10954266 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125317373 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080007836 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105846037 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098268 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108883509 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098862816 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107696377 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140554036 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116560606 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080587554 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.084861763 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108197198 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.142419836 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114862415 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086249162 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077678793 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100551827 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111532875 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098669116 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10787626 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100549117 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109435138 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098213922 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141482992 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118510085 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092003657 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096183519 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0973362 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123026605 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077397184 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155475858 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095052353 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118542968 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085294859 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140724651 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115005205 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089962838 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085328588 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09590908 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104901321 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106539087 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143012617 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096781681 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.074103708 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094653803 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132020467 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076856962 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100350796 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091036747 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093987447 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117903258 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.083561875 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081469034 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068553291 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101021161 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133517084 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069614403 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111674946 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.280816912 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103999807 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.10594405 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070728239 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100663419 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138628871 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106285946 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14167493 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117175071 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101143136 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119525138 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.09959883 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106860975 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080635861 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125590252 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.134768804 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096958178 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091881646 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135181646 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118626176 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134883236 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097198783 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116089415 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105565626 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101906507 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104425872 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101062021 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144035079 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121470924 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125170119 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086609127 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106407671 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109406092 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136279694 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082920624 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117316656 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.075875482 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112083318 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078676956 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108150348 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080082443 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112340008 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080675334 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101001779 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070920475 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.076067683 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141889111 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113180279 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089760414 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087126443 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.136820153 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131365402 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081555888 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102340063 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103899384 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099990898 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100125548 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107747057 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085644267 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09346655 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.274498699 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080684304 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083559809 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100542238 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095283922 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108174137 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085459189 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07665274 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136446482 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10538297 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096459592 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079344943 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095677569 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122794238 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090893089 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088395846 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105782159 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104819096 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14098892 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090834903 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098912391 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.11848174 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081717798 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093309066 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.07021147 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085899306 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077463394 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110018571 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07741743 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108758682 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069451036 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130884041 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087500362 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093595704 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10292964 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100958125 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128530328 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093226208 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128950722 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090927017 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102437005 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108815805 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094899523 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081024861 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10486366 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097151381 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110248854 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096816185 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1061612 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110819173 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095454976 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142385093 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09078555 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120842738 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105998698 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107917947 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103915347 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116992692 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137397655 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112400134 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1128192 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075812269 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083280665 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105027495 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099308398 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144068221 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101769417 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072688607 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086304418 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090393653 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095154071 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.268218603 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084606305 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143240812 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088852574 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088866684 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114077986 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090679475 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098905893 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077653473 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096445356 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102414376 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095905194 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09534236 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108713095 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117859952 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114789257 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133159956 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100224523 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.094078855 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119819322 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111489526 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111718923 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086759747 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087687516 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124057911 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103377661 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128486874 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.100782588 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095138697 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103204749 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091418578 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101110851 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097293825 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110662054 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081644787 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.07681975 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069638229 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073525337 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118894461 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109962449 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099688068 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09919033 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073388001 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104366398 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100529947 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073081726 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088681704 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095253157 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100193961 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084677255 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09279471 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114884316 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092612139 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10399612 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100248506 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129252782 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101036959 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089799119 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143645961 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128935216 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088768734 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093501508 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072623193 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080062408 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101267906 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142640488 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117032536 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.076829319 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083680842 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.241769599 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088523267 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073465844 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089302756 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090690384 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104658399 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094086622 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113648203 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104519415 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077036299 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104087511 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098752228 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093772711 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097140367 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102575359 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106514315 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.124063107 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10186796 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09869266 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077505947 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081293432 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076719092 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080701818 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103804543 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079014874 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07721283 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130851596 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092247116 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105585607 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110247112 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085962516 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077208996 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133819247 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070402415 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134678218 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072401135 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083867636 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082151506 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080332705 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094586103 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105945548 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097517909 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113745001 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106806428 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105594555 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111946901 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156340141 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072412156 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144906966 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076933884 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077247478 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077230692 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115180319 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090532327 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105449328 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140688548 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090138372 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093601039 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077894887 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128782197 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099615768 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103744894 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083573395 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079877612 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128794158 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080823193 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072135616 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08738429 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110957319 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072336561 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103022252 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.249534957 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081626507 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115069904 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632342665 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092000411 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077163665 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090686846 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143676375 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129484278 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084528996 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109406197 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120329862 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091546236 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085044856 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108835476 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.184476779 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075711238 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095305472 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105431448 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099418698 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094026623 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.09296854 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087849267 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093929068 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087564864 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081332243 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109374351 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088769375 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09293884 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099266473 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084315966 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.08160626 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132119886 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104771652 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083679713 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089993424 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102363084 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088552835 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091679012 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070557681 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114833088 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092245554 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101929941 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092306607 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108430978 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121223727 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089827171 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113105689 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089177606 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110248615 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085769516 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079334805 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102397705 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.0789788 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078723804 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117484529 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.084902532 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093651059 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105247193 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096134994 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114477719 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118655771 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11196147 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098690716 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080224456 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086540906 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.087538732 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076114933 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07869339 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075142328 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076922056 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105938611 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084401614 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083163229 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113119665 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081936921 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10192697 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.098025264 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107392073 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081984298 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099438246 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107260215 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089279766 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101866559 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098716955 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125669394 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142134932 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096619997 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.118768953 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126295182 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.07505125 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.07315629 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068232081 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111672048 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077803225 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.080214894 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080291983 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125746536 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.079937062 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091963618 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.226656641 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079552525 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.080465014 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092143836 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069339362 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081903127 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103242659 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084698543 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078237237 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095845026 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082065664 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113336545 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105453284 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086619089 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081826113 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078309193 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090834834 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103350512 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.124501257 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088377826 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.073867018 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101438081 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100208897 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118758378 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.072146084 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078871685 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.123090892 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089541438 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100676558 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078945544 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115523409 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.128244773 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087850201 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125736189 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071159126 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082163156 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086314315 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.121198328 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073388407 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086738523 seconds)
  done (took 64.774916223 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.160699779 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.147290115 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.085324272 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101085423 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.192080141 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.20280434 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.124251908 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.099887093 seconds)
  done (took 3.180176702 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.071171282 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.086314862 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.084461424 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.212369588 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.111974519 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.070338538 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.075836576 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.085159082 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.070519198 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06977254 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.105727171 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.070102437 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.07041839 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.374685525 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.069041706 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.074739673 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.070139645 seconds)
  done (took 3.684239288 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.328321681 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.404112486 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.219269651 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.634183534 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138443556 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.48654518 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078511762 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084026091 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.631457223 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.370777108 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131834458 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088496326 seconds)
  done (took 18.517220704 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078439595 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.081380863 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.081115208 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.077671612 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.077114251 seconds)
  done (took 2.389470563 seconds)
done (took 116.19151344 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.086000497 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.175943316 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.069986636 seconds)
  done (took 2.203630749 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.085151959 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.083051263 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.083468983 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080651215 seconds)
  done (took 2.262473751 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07746821 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.07899532 seconds)
  done (took 2.078990986 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.226001148 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.178904545 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.09280443 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.08448996 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082170743 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082479497 seconds)
  done (took 2.18654512 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.074422356 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.078644256 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073886365 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074810562 seconds)
  done (took 2.224734087 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.069982962 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.068427313 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.071054567 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.073168771 seconds)
  done (took 2.209091031 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087203568 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085040753 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114904846 seconds)
  done (took 2.213682342 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085720665 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085761111 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.080678289 seconds)
  done (took 2.182040229 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111601981 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.099642681 seconds)
  done (took 2.135936667 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.082716707 seconds)
  done (took 2.014193312 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091910686 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.100394752 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.141672347 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.109493499 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.14270322 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.128218921 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079362166 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.080126366 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075954656 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.075174374 seconds)
  done (took 2.952685912 seconds)
done (took 27.169794245 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.081526187 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.375837475 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.36225058 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089692004 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674304117 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.359432651 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.002722195 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093884859 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102377103 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070600229 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08751125 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.653414758 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.993871645 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.334163535 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.974804556 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.331045232 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.654515219 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071474953 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070411448 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071225369 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.983946708 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070322733 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070896473 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070856441 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.653658177 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.376545288 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071968175 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.331661302 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070159734 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073179919 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.359121691 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071889324 seconds)
  done (took 16.55783158 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.072771978 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125788203 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075085705 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086870683 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072884525 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072341522 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.07354156 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.071244037 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113877749 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.07088119 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.088134082 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070148442 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.074372775 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.072264009 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090602414 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070537604 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071979121 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.074452975 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070891415 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071456281 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089471668 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070266495 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071068286 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071318396 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070814871 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083248225 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071526896 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070081313 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071056173 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072668544 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073993431 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071978411 seconds)
  done (took 4.420681899 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.124240511 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129604544 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075584912 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.112217738 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.121638602 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072202161 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.154220818 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.094226635 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116931309 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070977933 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08813165 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070509405 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.106758649 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071884742 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09157546 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.07126042 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071987245 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071656263 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070766151 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071170649 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.09000983 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070555416 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071662321 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07140913 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071089798 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085377271 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071424896 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070807675 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070645871 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072775215 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075082374 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072122875 seconds)
  done (took 4.696946284 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071785466 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073509846 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081878316 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083153381 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068721955 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071442839 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072507329 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.06978526 seconds)
  done (took 2.546165919 seconds)
done (took 30.16579006 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.081666802 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.0701324 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073371942 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090399339 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076532649 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072595709 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067575101 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.077157138 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.074020215 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073745307 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075446939 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06898034 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072539245 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067258359 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074507398 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068689534 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.075469936 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072748475 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.07390589 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.074795675 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.071555108 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074384692 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.077701256 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.073547442 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.073473431 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072965259 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.078039936 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074773537 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06906041 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.072019323 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070797599 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082783411 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074496807 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074674138 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068222936 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068149643 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.073027172 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070357287 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074547644 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077745934 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070327822 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077591016 seconds)
  done (took 5.012909362 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.090143035 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.097258429 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088107289 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.08489289 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.110014357 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.084505515 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.093074683 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081971322 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.080364545 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.092407315 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.076484738 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081312147 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083862522 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.078457819 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.081449144 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.077353449 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082646293 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.076358457 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.081649357 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080674825 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092794538 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073933942 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080782246 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081825433 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.076282363 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.082030173 seconds)
  done (took 4.150631737 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075066117 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090345037 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.09499148 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.145106903 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112303356 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.085655294 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084491379 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.1002723 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.10452179 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070765563 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.074378486 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096328153 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099428863 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077905167 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.109802859 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.089314908 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.083397283 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.072660058 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.077108139 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105446856 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.093378666 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.08920672 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.103475623 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090118018 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069865211 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079671256 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07731768 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.085750794 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077887232 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082639814 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074396009 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.074362164 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.071092612 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.083219123 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.077411774 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.068420244 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092905699 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082513016 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.086363449 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.108777 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080974031 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071877988 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.101078746 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.137051689 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069864407 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.073037074 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073959041 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082672025 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071552914 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.10035365 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.0886462 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069825765 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.089725719 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071906365 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.07169582 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08738182 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071665073 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071983663 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082565624 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.076591172 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091012872 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07562622 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091473465 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.070015246 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.08170528 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.072077462 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071779153 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068959592 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.106656049 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077521532 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.122705504 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071747332 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068364365 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082924309 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081534109 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076774667 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069779745 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08933961 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.08200663 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073873952 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.08183608 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.07311789 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.07325812 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.106159255 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06883589 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.068038537 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067831024 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.072109902 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.073182217 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070110112 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.083801729 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069248548 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072799729 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085518171 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069992621 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070645722 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072626671 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.07115706 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069701671 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080565106 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.074255701 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071572483 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.082141659 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071047132 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073046983 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084864159 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079504383 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069265857 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.071253301 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072255711 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071747662 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074201733 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073206816 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071950916 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.077302011 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077315347 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075239572 seconds)
  done (took 11.520426034 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.165962377 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.156687601 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071529035 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.151787595 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078600546 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.07477858 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.15367404 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.090085534 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.071022429 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.072786643 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.070644716 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.098970811 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.09446209 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.106173444 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074962946 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071304195 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.097357056 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.104299744 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.155293575 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.149087449 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094671121 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078979548 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073031391 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.072095333 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071792277 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079713054 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.087813023 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078647433 seconds)
  done (took 4.748028454 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077823251 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.0860046 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074715204 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094979089 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088672031 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070666482 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072581532 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071495524 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087941769 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.077334836 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070843948 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074496777 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074611632 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071741912 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071593689 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077638995 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076929539 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069800792 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074602668 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075463286 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.081403438 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.096256772 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.075304134 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.071006585 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.07348632 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.071032893 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076778718 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079802835 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069999406 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101318435 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067972618 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.0749515 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084561482 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071690095 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070504951 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070982305 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070892298 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.071117807 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071055896 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068943865 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068790263 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075939407 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069694623 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076554068 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.085023836 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.078263497 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.072126817 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.076228421 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073403529 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067101502 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073869517 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073132904 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072796691 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078728659 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074086597 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073113961 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071572095 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100553849 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076528871 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.070107655 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069659775 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.069096644 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072427584 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077974776 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087580427 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072177684 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068970926 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070809844 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075210008 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084923976 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.070104224 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075749433 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067619049 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070598212 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.073408416 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073603149 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.072135266 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068877035 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069978782 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070406714 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.07068221 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070016469 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069898149 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072978702 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068413635 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068999774 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.071241443 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071743602 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076402528 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069660513 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073899012 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072049345 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069593186 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072993204 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075689261 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.07342112 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090164369 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079034687 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.071214796 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068318997 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.08534705 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072681511 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069976541 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.076422691 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074920849 seconds)
  done (took 9.862853277 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.093751741 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.073147355 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090594192 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097618546 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081796904 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.076241181 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.085354478 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.072198018 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08737581 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.070205682 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079581303 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.06931683 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084364599 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.080148019 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072056359 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080896484 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073264551 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091530441 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085582829 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069874057 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.080063479 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.083501915 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083638495 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088812712 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088502549 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089592123 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.083591629 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073341056 seconds)
  done (took 4.305352332 seconds)
done (took 41.546744023 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.030383574 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.206014595 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.034834226 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.252743043 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.092847035 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.14111868 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.151767718 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.02610101 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.223374372 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.051834581 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.304971902 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.429713295 seconds)
done (took 69.973222647 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.114439968 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.172244138 seconds)
    (2/2) benchmarking "String"...
    done (took 2.240656068 seconds)
  done (took 6.370475343 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.631759188 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.032396562 seconds)
    (3/3) benchmarking "different"...
    done (took 2.078812191 seconds)
  done (took 8.69712972 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.102624502 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.756955603 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.285295323 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.029673225 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.03241182 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.414926201 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.843064786 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.488863655 seconds)
  done (took 33.807907696 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.278535451 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.249754119 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.786438018 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.812703673 seconds)
  done (took 17.133020674 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.640221836 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.261233675 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.296240638 seconds)
    (4/4) benchmarking "different"...
    done (took 2.286884835 seconds)
  done (took 11.503776251 seconds)
done (took 89.783812754 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.031036717 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.155723009 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.039192475 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.185356311 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.060792615 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.058242877 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.040173757 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.070143015 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.032523945 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.033098704 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.468323202 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.033361513 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.033845415 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.067922701 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.033150114 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.048305626 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.046010294 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.037973594 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.072374518 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.580525741 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.50753288 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.036507927 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.045922183 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.258296636 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.143981001 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.070429851 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.684067974 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.046430832 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.740079415 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.041241865 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.035077506 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.035789292 seconds)
  done (took 212.72945561 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.03077985 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.251901104 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.266111411 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.034571987 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.550507165 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.224602712 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.197704773 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.606555787 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.035269862 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.033869068 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.282180086 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.033739664 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.287539017 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.027959198 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.027843881 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.081572492 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.191515171 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.286226798 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.029016877 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.222249234 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.045568877 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.10126759 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.042403856 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.23157213 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.068588398 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.036954399 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.034384966 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.06275763 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.21934184 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.185749304 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.046022172 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.058282238 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.237799711 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.907082583 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.05497538 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.04483778 seconds)
  done (took 180.040438883 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.209504824 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.043798209 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.096991369 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.169290228 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.79824812 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.774871554 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.036202847 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.034933514 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.034670742 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.041560255 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.036600359 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.101487072 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.431189931 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.051331183 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.035965516 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.021056992 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.597309643 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.038536706 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.034661822 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.035613235 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.099671371 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.409221632 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.170639357 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.036632235 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.045229695 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.170626041 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.043670011 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.035636116 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.170340721 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.037872455 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.113093921 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.170038231 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.044600344 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.116794163 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.043379342 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.534912088 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.037112913 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.035414138 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.037767607 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.097750319 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.036046039 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.10620233 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.127888949 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.037288194 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.033730148 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.233334646 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.714462846 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.212150797 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.036580588 seconds)
    (49/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.021782537 seconds)
    (50/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.037344868 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.036656756 seconds)
    (52/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.036504625 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.024738705 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.038152546 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.043647712 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.037283286 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.063520995 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.777515573 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.039810433 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.038042658 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.03884955 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.03787211 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.038716086 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.039608367 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.075852078 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.854960071 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.566472503 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.413268273 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.845919824 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.040872378 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.981287082 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.094441986 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.038512942 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.117277954 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.025039941 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.037859606 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.023294319 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.037364726 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.191194617 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.133637495 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.040513494 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.173938485 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.041379041 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.038520465 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.143388463 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.463480956 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.040266624 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.051808317 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.095787562 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.039275042 seconds)
    (91/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.038724103 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.040035603 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.045795172 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.138928572 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.042246021 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.039866755 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.039423247 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.142130715 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.041687947 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.12015342 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.265292645 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.104943136 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.290901528 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.282093945 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.043230113 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.039277213 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.05592675 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.04105583 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.038968677 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.050602894 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.040141408 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.040801503 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.042664609 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.042537384 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.041978337 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.04401782 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.05302681 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.040931362 seconds)
  done (took 440.587989902 seconds)
done (took 837.577131359 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.627718095 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.718339051 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.612595382 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.633557957 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.606471061 seconds)
  done (took 15.168095842 seconds)
done (took 17.138902991 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.07254851 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.057683876 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.046348649 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.111543979 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.067486396 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.054964756 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.087870497 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.088305098 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.073174273 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.054076517 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.103192385 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.058414208 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.074795707 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.078097292 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.130407938 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.082957805 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.058736773 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.051600642 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.109182975 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.059459159 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.058034854 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.056060515 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.055498928 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.112285119 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.136004117 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.06646241 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.055309723 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.101977461 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.066759615 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.101556545 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.11495503 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.079239368 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.090008959 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.129771261 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.112259017 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.137501745 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.06492269 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.121599311 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.064006617 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.141324437 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.112860783 seconds)
  done (took 87.469929963 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.05562147 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.18629831 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.26385513 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.087057498 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.053486775 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.261145125 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.109882757 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.181537507 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.186110459 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.267260884 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.276749687 seconds)
  done (took 25.906352167 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.053173675 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.206805861 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.278887634 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.090165409 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.075270047 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.271935171 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.117812446 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.184405982 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.188456881 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.272523692 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.282436753 seconds)
  done (took 26.003572723 seconds)
done (took 141.351553152 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.427241429 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.076937981 seconds)
  done (took 6.478298742 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.048450113 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.065547231 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.202741912 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.048065414 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.048758906 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.049790898 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.048956127 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.048146822 seconds)
  done (took 18.534990058 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.051128062 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.050994267 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.050190721 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.050231146 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.049965926 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.050355609 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.050298343 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.05065321 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.050660662 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.050132253 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.051218899 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.051682735 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.051414055 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.051309175 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.052018714 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.052125186 seconds)
  done (took 34.788896654 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.05269042 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.051971234 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.052660832 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.052325289 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.051834248 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.052443487 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.053761095 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.05300931 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.051938887 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.052049277 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.053202216 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.051989261 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.05153379 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.052132009 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.052375114 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.053438285 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.052287921 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.052853459 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.052622905 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.052450883 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.051319439 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.052612676 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.057343432 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.053785896 seconds)
  done (took 51.240396511 seconds)
done (took 113.027638524 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.264343617 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.627237624 seconds)
  done (took 8.868565372 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.055615147 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.053062256 seconds)
  done (took 6.148839197 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.052377042 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.05316783 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.052378476 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.053276208 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.052221897 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.052414349 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.054412152 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.054416252 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.053193838 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.053271994 seconds)
  done (took 22.507337097 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.053401308 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.053662788 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.053863525 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.053931489 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.053021107 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.053716389 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.053000655 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.053394409 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.054515988 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.053747392 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.054064932 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.054739124 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.054531422 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.053487218 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.055129874 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.055144483 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.05564883 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.054614752 seconds)
  done (took 38.951700968 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.054904583 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.055182684 seconds)
  done (took 6.087480227 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.055012237 seconds)
    (2/7) benchmarking "second"...
    done (took 2.054849812 seconds)
    (3/7) benchmarking "month"...
    done (took 2.054510736 seconds)
    (4/7) benchmarking "year"...
    done (took 2.054723973 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.054921041 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.055398249 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.055248809 seconds)
  done (took 16.361869599 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.055079054 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.205076963 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.254510493 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.673188937 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.056949074 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.057610042 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.937319751 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.057042355 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.059429335 seconds)
  done (took 22.335194949 seconds)
done (took 123.239441276 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.890883597 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.054039769 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.321751752 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.201191967 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.07401838 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.391508115 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.090515722 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.605098347 seconds)
done (took 44.610000278 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.117972103 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.051211998 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.086236288 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.084690352 seconds)
  done (took 23.202499944 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.057422649 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.38126844 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.077026675 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.997561157 seconds)
  done (took 23.510376682 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.434367552 seconds)
    (2/2) benchmarking "read"...
    done (took 2.40807364 seconds)
  done (took 6.828033644 seconds)
done (took 62.642146558 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.05795863 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.057432027 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.058303881 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.057650388 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 2.058459394 seconds)
    (6/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.059083155 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.058571801 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 2.058019203 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.059063785 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.05848976 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.058520257 seconds)
    (12/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.045672035 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 2.059074083 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 2.058063506 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.059072605 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.059867275 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.058567889 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.059213778 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.059039444 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.058377447 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.058573448 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.057920533 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.058040614 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.058509919 seconds)
  done (took 51.373210925 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.058905405 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.058510811 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.059275741 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.060051968 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.059248502 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.058964409 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.059676769 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.058966529 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.058539462 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.060030832 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.060925872 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.05977948 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.059402202 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.059862258 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.061224607 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.060311137 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.060025513 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.059473926 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.05992316 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.046683018 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.060303442 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.0602907 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.061517025 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.059768125 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.061747273 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.060689831 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.059309566 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.060402967 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.060360509 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.060986724 seconds)
  done (took 63.768435054 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.045525248 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.060558633 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.045473108 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.061024628 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.061186825 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.061401249 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.06148272 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.060685066 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.048926573 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.057388146 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.051445056 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.05362035 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.054633731 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.063326482 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.063588908 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.061658296 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.062239604 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.060696 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.061914246 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.062921986 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.062866594 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.061175354 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.062552329 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.062600513 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.06206929 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.062064223 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.062353335 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.062384463 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.06279728 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.062979603 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.063211786 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.049537925 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.061799307 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.063093496 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.064368262 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.0637004 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.062956491 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.062834721 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.062698585 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.062617456 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.062443285 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.063424857 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.063240239 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.062920009 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.063556822 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.05487831 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.037303644 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.063167468 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.063980799 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.049407384 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.041222833 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.064048047 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.062333182 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.062930236 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.063720797 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.042323488 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.051212842 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.064377762 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.065084145 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.06388247 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.063474008 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.064602089 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.049070388 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.064931525 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.06397337 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.06450685 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.06327587 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.064482603 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.064426853 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.068134238 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.064048581 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.064787665 seconds)
  done (took 150.311328334 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.065737213 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.064419589 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.065252295 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.065380878 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.065278796 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.064787731 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.064719147 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.065295881 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.065569768 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.065511943 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.05018557 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.065641598 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.05093706 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.064786461 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.050274671 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.065054224 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.065360072 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.065140838 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.065368704 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.065709488 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.066895838 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.065763244 seconds)
  done (took 47.381730231 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.033946496 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.065807783 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.0652351 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.052088894 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.066658059 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.066592403 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.066923263 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.066287248 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.06585268 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.066496103 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.066226553 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.065913577 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.067075949 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.065944087 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.065944861 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.067162475 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.067096987 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.066406452 seconds)
  done (took 39.136952369 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.067734991 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.066206473 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.066790595 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.066890389 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.067508747 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.067475949 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.067825488 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.067984099 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.06662414 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.068167428 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.067443058 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.067788603 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.067529546 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.067118753 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.067802339 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.068161206 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.030860443 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.066902603 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.067550672 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.067239523 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.069512527 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.067766096 seconds)
  done (took 47.440273924 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.067332889 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.067733593 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.068644906 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.068185276 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.06824828 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.069098692 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.068557413 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.068249469 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.068079814 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.06841656 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.067743072 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.067938594 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.068813577 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.0691996 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.069648279 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.068100989 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.068251927 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.069672732 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.069826892 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.06838818 seconds)
  done (took 43.362321823 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.066744667 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.066551055 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.067422762 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.067393162 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.067421906 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.067367285 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.067845026 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.067891336 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.06724906 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.067948678 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.068206575 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.06765527 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.068298177 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.067444333 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.068123999 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.068254607 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.058532608 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.056509105 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.067866624 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.069267836 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.068079671 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.068181284 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.068177134 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.068115709 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.068920447 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.068718615 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.067744033 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.068924436 seconds)
  done (took 59.874456601 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.070954005 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.071223874 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.070933851 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.071513672 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.071289315 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.072412394 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.07245008 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.071095109 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.071547685 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.069918781 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.072518107 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.071668361 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.071877555 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.07239195 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.071195488 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.071368162 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.0729416 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.071908466 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.071719525 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.07204444 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.072578309 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.071593754 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.071676638 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.07314263 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.071773833 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.073217412 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.072200979 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.072711443 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.073375272 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.072623342 seconds)
  done (took 64.152858204 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.092999986 seconds)
    (2/2) benchmarking "in"...
    done (took 2.092319819 seconds)
  done (took 6.181421036 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.073455551 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.073299786 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.072712208 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.073158247 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.073873788 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.072669172 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.073819856 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.074766932 seconds)
  done (took 18.582736977 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.073711416 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.073903314 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.07378981 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.07423374 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.070854387 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.078657461 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.072449692 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.072955349 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.074145941 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.073374584 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.076573035 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.07552766 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.081467402 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.077048816 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.075248303 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.073110663 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.07372198 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.074502996 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.073849228 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.073994557 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.075029664 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.071828874 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.075466091 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.073358782 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.074642788 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.07453168 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.082726287 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.074327211 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.07321413 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.075850364 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.079569536 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.076099705 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.073278081 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.075227836 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.074269038 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.075884704 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.080735886 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.074055314 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.073548398 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.076158832 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.076644462 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.076514799 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.078452441 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.082294788 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.074333037 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.076804784 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.07672228 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.074132494 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.074718226 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.078332257 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.085422636 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.075862466 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.077195549 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.077339606 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.076816993 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.076449464 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.074676116 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.077053019 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.081931597 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.081613595 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.078823929 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.095801038 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.085058891 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.076563316 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.075677956 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.085633082 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.100062491 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.077032279 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.077504642 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.079251949 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.082221325 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.079047455 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.077510823 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.078393962 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.089693985 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.085485941 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.076424916 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.079098273 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.078358852 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.075725471 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.078227846 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.076875089 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.076875756 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.077619877 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.086905808 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.102698203 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.077604633 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.078215641 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.07959532 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.078830229 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.081882467 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.079544167 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.077717855 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.080228853 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.078994034 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.079646411 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.077235351 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.077963159 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.077158623 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.08661262 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.079901498 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.080323263 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.080860424 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.086708065 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.08017796 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.077323216 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.078686435 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.078971271 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.085429218 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.078360838 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.07912731 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.080894717 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.079834025 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.083083359 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.080974746 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.082115696 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.087242178 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.087343583 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.079729083 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.082130554 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.082309747 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.081274484 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.088785624 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.103305117 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.080836175 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.082425221 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.084294991 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.092645297 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.082673963 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.081538365 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.082720387 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.082144184 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.08266985 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.08184829 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.082539843 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.079310814 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.082159239 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.078917844 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.081903452 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.080801505 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.082944927 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.081053684 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.082504096 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.080192778 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.084018706 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.080119794 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.082026855 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.085683254 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.080330583 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.079882015 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.081573296 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.082233886 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.080970451 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.080679577 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.082832809 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.080700575 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.080321293 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.079766476 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.081630528 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.078995059 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.082935189 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.082907469 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.087419592 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.080794722 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.082166317 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.081945997 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.080130658 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.081395186 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.081649714 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.081888269 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.082171086 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.082320189 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.085028354 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.082661103 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.083448441 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.080418916 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.083219209 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.08078727 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.084528744 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.094187292 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.084522958 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.092424441 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.083127648 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.069298144 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.072294159 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.084148377 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.082934878 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.082138531 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.081611297 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.084675324 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.084552614 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.087435084 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.105256053 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.095263194 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.084928921 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.083887137 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.088495747 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.088235749 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.08667553 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.084237243 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.083579131 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.08550592 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.084569431 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.083044742 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.086241534 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.085029252 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.083320647 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.086899797 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.086154498 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.082852675 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.084783762 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.083580042 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.086211441 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.085008495 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.085661044 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.083753007 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.082878232 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.089293385 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.092135934 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.086985983 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.086380586 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.086343046 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.086408516 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.083398453 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.086864559 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.083971664 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.08655873 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.08364876 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.085803888 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.089870922 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.087922473 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.084803837 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.082094165 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.084660458 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.086528292 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.085451838 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.083830971 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.098614478 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.088363576 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.087532867 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.090488019 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.087967197 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.088270018 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.084081727 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.084619245 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.084213172 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.087606118 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.085179278 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.088869097 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.092754728 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.087689284 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.087197706 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.08750095 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.089448822 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.087499816 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.088365058 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.085347666 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.089443478 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.096093105 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.092434776 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.087211893 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.088856947 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.088656873 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.086910159 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.092341219 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.087125316 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.100378945 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.096802 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.089540201 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.089020166 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.085688901 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.08951801 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.089746104 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.084877458 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.094874715 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.089069629 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.089766831 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.094690329 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.090103527 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.086905464 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.092426591 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.090698157 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.090758186 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.089722936 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.089236928 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.089073208 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.089977738 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.089409882 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.087228457 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.090716941 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.09242233 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.087681744 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.089832358 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.08857451 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.087090966 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.091674376 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.089834927 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.095595329 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.089862324 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.088056914 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.088884228 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.091531323 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.088442309 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.089339988 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.087983853 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.089146791 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.088521111 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.094427244 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.101186525 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.094404463 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.098523574 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.091552138 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.100083004 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.084219951 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.067307126 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.088661116 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.094538521 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.09982983 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.090506835 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.090085155 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.096433358 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.090607915 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.089412141 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.096457838 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.091711515 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.086824125 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.089890016 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.092803437 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.094516821 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.091305653 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.0914943 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.090290548 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.091707857 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.090291102 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.093730854 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.092046676 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.09121804 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.091104932 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.093635342 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.089536742 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.090081713 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.09084005 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.089273138 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.092082079 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.093507767 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.095862526 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.091457382 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.0920261 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.096353618 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.094570725 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.100414187 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.089614057 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.093414713 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.078373228 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.092091812 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.093701124 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.09493513 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.091748808 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.093977147 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.092987327 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.093080487 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.106577872 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.099951748 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.094744604 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.093870373 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.092620682 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.093979686 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.103108142 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.125012183 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.09238439 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.095120891 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.098488366 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.098327044 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.09661156 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.100101903 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.096925915 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.106043708 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.094321281 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.092470899 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.097051607 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.108014868 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.095353488 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.078015203 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.079063693 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.098054577 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.097372456 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.094590106 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.078588771 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.095989327 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.093687403 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.107005591 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.09785911 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.093670606 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.095163617 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.09549303 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.096775767 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.096642228 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.096471955 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.08964797 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.086893709 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.092953762 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.095102812 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.103278521 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.092384594 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.099879612 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.10490108 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.093430828 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.096674971 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.082127611 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.094138287 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.082541881 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.093987318 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.080233206 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.097926924 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.094919315 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.093594096 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.098113263 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.105507984 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.096944443 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.096025455 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.097988125 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.099277759 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.094927804 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.095053745 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.095339963 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.106505315 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.099235498 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.111791125 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.109593922 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.096440009 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.097493607 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.10480221 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.106977005 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.097603793 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.096332579 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.095787608 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.100001684 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.099662314 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.094417699 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.084761424 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.096640782 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.10491325 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.099187758 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.095363833 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.095584629 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.079679433 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.082703021 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.09977023 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.103934697 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.098046761 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.100172321 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.095678916 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.098643029 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.097429926 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.100173649 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.095779985 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.099472809 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.100406958 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.100235706 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.106581183 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.095094184 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.075728169 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.10013783 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.100332504 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.099616165 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.098755871 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.09735413 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.098792804 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.101199103 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.110354401 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.100689171 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.09977564 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.098627812 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.10080984 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.099313108 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.10012709 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.098986158 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.099405714 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.106726445 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.10070499 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.098736428 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.098229166 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.101296233 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.103558093 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.101494437 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.086207757 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.081114665 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.100340109 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.102146167 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.105061669 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.110411757 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.104566147 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.101661934 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.109228592 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.104877872 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.064279227 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.102383551 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.101443181 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.098336548 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.09995902 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.101964059 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.092439681 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.09426652 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.099355785 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.101280163 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.097527067 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.103376372 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.10202627 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.102484432 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.103054055 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.109928603 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.106769417 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.103367565 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.102176001 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.1001339 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.103845321 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.116277866 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.09892951 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.10174742 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.100542741 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.102124984 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.10110939 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.109538334 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.112063419 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.105923697 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.097865008 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.107290699 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.120754705 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.103848314 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.111400632 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.13528923 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.103076659 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.101545501 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.101816907 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.10248681 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.10207648 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.104488279 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.100404645 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.108836022 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.10252293 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.102850481 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.108701366 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.103933931 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.104405415 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.100924764 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.101559048 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.110129069 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.10191804 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.108374878 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.103763335 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.103781587 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.1036617 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.104747614 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.106184922 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.103303775 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.105437307 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.104514778 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.10564313 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.102289538 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.109455102 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.103687298 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.103862908 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.11502482 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.114528188 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.101354086 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.595973098 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.101629154 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.107288327 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.106611462 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.102066896 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.10486776 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.113274793 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.103420962 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.113508129 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.102869451 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.101723616 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.101237929 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.101530302 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.100771801 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.112789464 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.112701521 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.101396525 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.103423469 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.110215328 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.103203042 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.107527792 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.106284359 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.10497633 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.103573404 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.104103493 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.10375211 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.103815999 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.102216285 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.105688263 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.113446586 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.102499214 seconds)
  done (took 1248.62585722 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.102645059 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.104010723 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.104634022 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.10426787 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.103673722 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.102726817 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.103642492 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.103526787 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.103677274 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.10505615 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.103882084 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.105270282 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.105132349 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.105457276 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.103171106 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.094094526 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.081432887 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.104557033 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.10626801 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.105378161 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.104193838 seconds)
  done (took 46.180837513 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.10455173 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.103452362 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.104932462 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.105033256 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.104309554 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.10466867 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.104943333 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.103795221 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.105134787 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.104012019 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.10342065 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.106108088 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.104500199 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.106167684 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.106118624 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.104998334 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.104776078 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.105821531 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.105758803 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.106367328 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.106027231 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.106271949 seconds)
  done (took 48.336009387 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.105592068 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.102606948 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.105606203 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.106611425 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.107848421 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.105107733 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.106291475 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.105907571 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.10531626 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.105585569 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.116296798 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.117146053 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.108765508 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.107669473 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.107543633 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.092658809 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.253923917 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.106830064 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.107991022 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.10819411 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.106904128 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.113587557 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.109033373 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.109960446 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.10532171 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.106371875 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.108131453 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.108474737 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.108804797 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.107117722 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.112959838 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.108447038 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.108333591 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.110885343 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.107352629 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.107950873 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.111667218 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.105925668 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.108740224 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.108984529 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.117665471 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.136046068 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.110681987 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.108022913 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.115352962 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.110760282 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.1083864 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.110536486 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.120705309 seconds)
  done (took 105.521357672 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.11015856 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.109244914 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.110079457 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.111389636 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.111306828 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.109982648 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.110710272 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.110255615 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.110920346 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.110368897 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.112192715 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.10934329 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.111077573 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.109836075 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.111396357 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.110394107 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.110713862 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.111172833 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.109867389 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.111218218 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.112284148 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.109778918 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.112121316 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.113685238 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.110968774 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.110985658 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.11074286 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.112251401 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.111402451 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.111762636 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.113217101 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.110465449 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.112447685 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.11176928 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.110845674 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.112115128 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.112693568 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.113503079 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.112181913 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.113443345 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.112726533 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.113329616 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.112154661 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.111885779 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.11236322 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.112302142 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.111439636 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.112974244 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.113293863 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.112705138 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.111508756 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.112009085 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.114666939 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.113245316 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.116329778 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.111793031 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.113325236 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.111974759 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.11114215 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.113059831 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.11388813 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.115068101 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.113691081 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.114624876 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.110819307 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.114772491 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.112146652 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.113450786 seconds)
  done (took 145.641136629 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.111362912 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.111877005 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.108441531 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.113529657 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.109808983 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.11328313 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.111306369 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.110848611 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.109814839 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.109710259 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.110642644 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.115672109 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.110127544 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.114149779 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.111794276 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.113559272 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.112574909 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.112794517 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.11214448 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.110976971 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.11175556 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.112305965 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.112426575 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.111399021 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.111068526 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.11497666 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.112484384 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.112461971 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.114950744 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.112816245 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.113325554 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.109681521 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.111305757 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.114253808 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.112155575 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.112545982 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.113721471 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.112397142 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.11352062 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.113150623 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.113587957 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.11194298 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.097323953 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.115829287 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.113721279 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.1135453 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.114602619 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.114248402 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.11616816 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.112270036 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.111655991 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.085634522 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.112732099 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.112955982 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.114336174 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.114925654 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.114416477 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.114033327 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.115144124 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.114099203 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.113482963 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.116521207 seconds)
  done (took 132.979764028 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.117703065 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.116546128 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.11617711 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.115216325 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.116492095 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.118396667 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.112709282 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.089936712 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.11759499 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.117508663 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.118112671 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.116418578 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.117684603 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.117177231 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.118187997 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.118915257 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.116191481 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.118897244 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.116870209 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.118389157 seconds)
  done (took 44.351833616 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.11602819 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.117947297 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.120144464 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.120488627 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.117690463 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.117193879 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.120740892 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.119263638 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.115415636 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.121271063 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.116689781 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.117587877 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.116333688 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.120811794 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.117348756 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.116394739 seconds)
  done (took 35.925631045 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.119121355 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.116883141 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.115559068 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.117346135 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.119586421 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.122445461 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.117431426 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.119881118 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.120219507 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.120122076 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.120941335 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.119269387 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.118462514 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.116287847 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.120855381 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.119491717 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.119105967 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.120388529 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.119038956 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.115700995 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.119357427 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.121611991 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.121210486 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.120439598 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.119609917 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.121659519 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.119293715 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.120042517 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.12033756 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.120537312 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.12143983 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.12178227 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.11950975 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.120279836 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.117033777 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.119760403 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.120617995 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.120274611 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.120782682 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.121447477 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.12237104 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.122544883 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.119955432 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.120468468 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.121220373 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.123528267 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.121455012 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.121217143 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.12108567 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.122846725 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.122607736 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.117470812 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.120269684 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.124934035 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.120259517 seconds)
  done (took 118.644057979 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.122550002 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.121150835 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.120699806 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.122007504 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.12080427 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.122413056 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.122976994 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.122253293 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.124741534 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.122769277 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.125719415 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.084605376 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.122294112 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.122068605 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.120117513 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.085309865 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.123761924 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.122531717 seconds)
  done (took 40.167817449 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.124356545 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.120611611 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.120921556 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.125929786 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.122032329 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.124928765 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.122299686 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.122619138 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.124852483 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.123495941 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.121520718 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.125511858 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.123959507 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.122593485 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.123104858 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.123476123 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.126231458 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.1229507 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.125780557 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.121898349 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.122488117 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.123970881 seconds)
  done (took 48.755590593 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.122737671 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.119794649 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.13745169 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.148096171 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.144837061 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.162178226 seconds)
  done (took 14.873296503 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.123246553 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124800938 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.128853621 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124035093 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.124065959 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122652217 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125500289 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.126030816 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125459718 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121323754 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.124844189 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.124626875 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125438269 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.116292997 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124332382 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122348617 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.123613429 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.112997732 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.11916397 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.113151343 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.122162316 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125297629 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.125922356 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.124036271 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125356208 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.124179169 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126796134 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.126445188 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125986022 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.124467403 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.12670272 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.125182959 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126733553 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.127608448 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.123830575 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125728333 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.110959674 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.127831681 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125682167 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.125429674 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.127296657 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125760306 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.12896623 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125734818 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125696563 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088652874 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.128669829 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128121623 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.123835426 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.09594628 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.12485613 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125320536 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127708313 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.12728416 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.128668177 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124948092 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.126910798 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.114594787 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128144623 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130450333 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.127992638 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.126981041 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125760863 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.127352139 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122159361 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.116272649 seconds)
  done (took 142.196961838 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129322908 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.127003498 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127297187 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.128425381 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126766607 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126592055 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12632 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.128075392 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.12577408 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128258454 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.126881769 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126882343 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126642855 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128070693 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12741574 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.128082934 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.114597319 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125834196 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.127275683 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.126228475 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128876669 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125849348 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129364867 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127245039 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.114464161 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.126256591 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.127446042 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129070077 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.12704303 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.126768055 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127245393 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127180056 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.127370668 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.127854646 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129573401 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127586751 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130019178 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130113985 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129289033 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128080299 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.128427167 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128860579 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129728668 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127035022 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128004885 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129740171 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.129371461 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.120870057 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.098963227 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.128098034 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130994435 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.132320421 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.116858331 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.129419205 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.115387637 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131320375 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131518707 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.12956748 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.130747714 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.127876846 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128924446 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132242597 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132668911 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130258228 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132135889 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.129357757 seconds)
  done (took 142.434294245 seconds)
done (took 2908.191233205 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.200117998 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.149827831 seconds)
  done (took 16.395351441 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.292432771 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.167241643 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.319856954 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.242930127 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.141087002 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.137340785 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.125953208 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.12876097 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.218967714 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.131967688 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.187348468 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.12892407 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.128069693 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.128494145 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.126167375 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.128758727 seconds)
  done (took 56.794560896 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.124233365 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.126082236 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.121989972 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.124630264 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.141718696 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.199835736 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.146232355 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.128517519 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.137789038 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.156428964 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.137980184 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.125076956 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.128310509 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.124790267 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.211743023 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.167394375 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.178640047 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.196611943 seconds)
  done (took 40.727086276 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.200330615 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.129538657 seconds)
  done (took 11.378598815 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.133209021 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.129119674 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.123471602 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.12078484 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.138865383 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.119422147 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.120904703 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.127115796 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.113472184 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.143027208 seconds)
  done (took 73.3423811 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.119734731 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.12353257 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.381227042 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.128893991 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.126526611 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.143938593 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.123194789 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.150987611 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.126544072 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.116039968 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.130827864 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.382443532 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.131145219 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.122519478 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.546024022 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.131619223 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.126669598 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.154448228 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.156279387 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.124499436 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.127708358 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.123221723 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.284084835 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.817471013 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.12385378 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.123798605 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.12999624 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.12183101 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.124017319 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.124612816 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.111441712 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.122924525 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.125274826 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.12335323 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.130004821 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.128141422 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.613580275 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.141950223 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.130682722 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.212825404 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.16732094 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.131846736 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.915538078 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.121746802 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.125130561 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.130072467 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.815699612 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.212986027 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.128029655 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.302140078 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.470102227 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.139284175 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.286850554 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.279825502 seconds)
  done (took 146.751558463 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.122914259 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.360371336 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.277481529 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.123284501 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.378401223 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.334821391 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.123969705 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.170133319 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.125225416 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.32067858 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.377937136 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.227995474 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.12359072 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.122876615 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.123534185 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.122239054 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.267978397 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.192996174 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.122952868 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.122959765 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.147953582 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.32706294 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.245850641 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.126039374 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.147806504 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.331412952 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.245359556 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.226639524 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 5.072871324 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.120770383 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.187333585 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.122316172 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.122316558 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.12001248 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.275505702 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.220163689 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.210860398 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.121565821 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.122711746 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.123006505 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.801159557 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.325726321 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.222584107 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.247476836 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.376708199 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.341556132 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.816770876 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.125782029 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.76021317 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.288510092 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.331992549 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.337713931 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.244974026 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.128722831 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.431665088 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.121946303 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.122407187 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.345196631 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.345341211 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.226733063 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.128917564 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.124689173 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.120910011 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.358783153 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.125439377 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.218492955 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.128025533 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.124801695 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.219121885 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.2282278 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.353153637 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.349295694 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.158989708 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.451521348 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.657112766 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.312847341 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.18896203 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.344682382 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.129029049 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.125122476 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.207819908 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.96475799 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.379034066 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.36849999 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.325681538 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.154629462 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.784761401 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.126169839 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.312368751 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.315804089 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.364103031 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.372252865 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.360390935 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.735843785 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.125698663 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.129020388 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.483725822 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.244137771 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.131102347 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.481047376 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.357085234 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.626327164 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.156246676 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.419138397 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.257450697 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.128842496 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.776651194 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.128688073 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.33491775 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.167531114 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.130238425 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.128712225 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.304732714 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.040000243 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.129709649 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.850849726 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.1887078 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.134864217 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.332249178 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.130517989 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.37209171 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.130888674 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.362240862 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.7433398 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.157244133 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.304209905 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.37417047 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.791120253 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.42314132 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.374083031 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.243476258 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.351389077 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.978028923 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.125692629 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.38984944 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.128347028 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.129893675 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.29973892 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.134360064 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.276239163 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.132966431 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.398636859 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.153995074 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.339542374 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.132994135 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.368795637 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.162067409 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.179532046 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.136255495 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.252884782 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.130540528 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.057455952 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.287363914 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.134121342 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.12894572 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.730247366 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.130882318 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.285711182 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.358602678 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.150812341 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.200671265 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.697195688 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.133416456 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.221496021 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.151244574 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.401494941 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.130845499 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.38041263 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.118379215 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.597000418 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.129775828 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.36524608 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.318319932 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.133763808 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.132096663 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.975799784 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.131562263 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.133343854 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.288517869 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.11593683 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.072644493 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.331502752 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.134375647 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.259565836 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.138558532 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.463416961 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.478469914 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.135574517 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.131941274 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.134832677 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.13502203 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.138184081 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.345350593 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.160703258 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.573096011 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.269638177 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.390432995 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.440084122 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.334498223 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.1715843 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.140062853 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.358427096 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.138062538 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.196406178 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.135556435 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.155619645 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.363519596 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.135114088 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.342192707 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.374135008 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.197565846 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.182396557 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.135267362 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.130787051 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.044384065 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.28089337 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.221993772 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.136229288 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.13474223 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.250649419 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.256105912 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.316994296 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.981860506 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.312948585 seconds)
  done (took 960.355740284 seconds)
done (took 1307.7966356 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.133954116 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.136551004 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.134004132 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.143014803 seconds)
  done (took 30.599094614 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.137092173 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.138380761 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.138163554 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.139059125 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.135533489 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.14255736 seconds)
  done (took 14.883308778 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.136514643 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.136832641 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.137029183 seconds)
  done (took 23.464240821 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.57745858 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.551007701 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.192310132 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.287343619 seconds)
  done (took 11.662650405 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.143499791 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.137475915 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.137994388 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.135915282 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.139157443 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.140328981 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.138542566 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.136233148 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.136290985 seconds)
  done (took 21.310329348 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.324608426 seconds)
done (took 108.301845445 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.236515856 seconds)
    (2/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.231674249 seconds)
    (3/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.24836682 seconds)
    (4/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.356510902 seconds)
    (5/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.547469539 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.998317526 seconds)
    (7/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.240429579 seconds)
    (8/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.360332895 seconds)
    (9/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.140930147 seconds)
    (10/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.274185437 seconds)
    (11/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.445561651 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.523448319 seconds)
    (13/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.220416066 seconds)
    (14/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.839148583 seconds)
    (15/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.137494041 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.22164884 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.242232814 seconds)
    (18/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.349409864 seconds)
    (19/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.350258427 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.160103029 seconds)
    (21/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.152822177 seconds)
    (22/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.146788555 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.159105357 seconds)
    (24/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.140047008 seconds)
    (25/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.19867578 seconds)
    (26/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.238151303 seconds)
    (27/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.273265133 seconds)
    (28/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.413911943 seconds)
    (29/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.14042829 seconds)
    (30/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.157408155 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.358183867 seconds)
    (32/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.226329173 seconds)
    (33/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.827702987 seconds)
    (34/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.865076239 seconds)
    (35/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.274729433 seconds)
    (36/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.149824634 seconds)
    (37/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.14359813 seconds)
    (38/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.638330872 seconds)
    (39/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.137785137 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.1597578 seconds)
    (41/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.167289199 seconds)
    (42/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.449710872 seconds)
    (43/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.59326926 seconds)
    (44/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.630197394 seconds)
    (45/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.157431144 seconds)
    (46/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.248734523 seconds)
    (47/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.261344032 seconds)
    (48/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.156700964 seconds)
    (49/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.147899368 seconds)
    (50/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.290820626 seconds)
    (51/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.225789225 seconds)
    (52/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.379347972 seconds)
    (53/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.379477124 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.534397468 seconds)
    (55/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.913846906 seconds)
    (56/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.406203276 seconds)
    (57/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.468896357 seconds)
    (58/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.468606754 seconds)
    (59/341) benchmarking ("sort", Float64, false)...
    done (took 5.859024135 seconds)
    (60/341) benchmarking ("sort", BigInt, false)...
    done (took 7.140893317 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.563178605 seconds)
    (62/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.842662916 seconds)
    (63/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.95468499 seconds)
    (64/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.261452597 seconds)
    (65/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.145071969 seconds)
    (66/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.710222784 seconds)
    (67/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.445997276 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.041123014 seconds)
    (69/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.40551661 seconds)
    (70/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.81182218 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.364249855 seconds)
    (72/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.54584015 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.976508595 seconds)
    (74/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.248275004 seconds)
    (75/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.212076196 seconds)
    (76/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.160258749 seconds)
    (77/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.336450318 seconds)
    (78/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.280333339 seconds)
    (79/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.221860161 seconds)
    (80/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.039410214 seconds)
    (81/341) benchmarking ("sort", Int8, false)...
    done (took 5.173237847 seconds)
    (82/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.851306612 seconds)
    (83/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.370847939 seconds)
    (84/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.144132064 seconds)
    (85/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.075179272 seconds)
    (86/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.165336381 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.266672518 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.155038564 seconds)
    (89/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.43049878 seconds)
    (90/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.156686324 seconds)
    (91/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.253206751 seconds)
    (92/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.148437099 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.292365227 seconds)
    (94/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.882201022 seconds)
    (95/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.257497843 seconds)
    (96/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.269311738 seconds)
    (97/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.148506439 seconds)
    (98/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.344902725 seconds)
    (99/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.563987794 seconds)
    (100/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.908251628 seconds)
    (101/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.108437909 seconds)
    (102/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.371673582 seconds)
    (103/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.344351266 seconds)
    (104/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.304794151 seconds)
    (105/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.151710297 seconds)
    (106/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.271912666 seconds)
    (107/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.149387409 seconds)
    (108/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.841434984 seconds)
    (109/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.566181765 seconds)
    (110/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.133655533 seconds)
    (111/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.400204955 seconds)
    (112/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.468308037 seconds)
    (113/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.204986595 seconds)
    (114/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.1566677 seconds)
    (115/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.481912476 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.154724428 seconds)
    (117/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.213618253 seconds)
    (118/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.137527858 seconds)
    (119/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.148828116 seconds)
    (120/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.068379377 seconds)
    (121/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.029988296 seconds)
    (122/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.323943949 seconds)
    (123/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.471741946 seconds)
    (124/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.439940714 seconds)
    (125/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.246462734 seconds)
    (126/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.137474914 seconds)
    (127/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 4.499785365 seconds)
    (128/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.261682942 seconds)
    (129/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.446544776 seconds)
    (130/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.409847146 seconds)
    (131/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.142114143 seconds)
    (132/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.247437435 seconds)
    (133/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.399214417 seconds)
    (134/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.339672717 seconds)
    (135/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.268436606 seconds)
    (136/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.234833534 seconds)
    (137/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.172403912 seconds)
    (138/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.213316943 seconds)
    (139/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.404902716 seconds)
    (140/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.133193493 seconds)
    (141/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.977814412 seconds)
    (142/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.159115595 seconds)
    (143/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.132455735 seconds)
    (144/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 4.385840015 seconds)
    (145/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.609179207 seconds)
    (146/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.520031854 seconds)
    (147/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.220649852 seconds)
    (148/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.340554206 seconds)
    (149/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.381112223 seconds)
    (150/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.218615131 seconds)
    (151/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.258770248 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.427005677 seconds)
    (153/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.131942673 seconds)
    (154/341) benchmarking ("sort", Bool, false)...
    done (took 2.342895437 seconds)
    (155/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.369709501 seconds)
    (156/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.458262968 seconds)
    (157/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.131195768 seconds)
    (158/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 9.70307746 seconds)
    (159/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.025282966 seconds)
    (160/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.838519594 seconds)
    (161/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.217149204 seconds)
    (162/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.192173386 seconds)
    (163/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.467414524 seconds)
    (164/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.528740613 seconds)
    (165/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.147608539 seconds)
    (166/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.141731455 seconds)
    (167/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.004120727 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 5.794101635 seconds)
    (169/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.625272893 seconds)
    (170/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.205067513 seconds)
    (171/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.258658138 seconds)
    (172/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.210258222 seconds)
    (173/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.45843123 seconds)
    (174/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.392980523 seconds)
    (175/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.02519282 seconds)
    (176/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.025047171 seconds)
    (177/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.375024657 seconds)
    (178/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.338425747 seconds)
    (179/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.267162737 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.262376436 seconds)
    (181/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.137904608 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.009238536 seconds)
    (183/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.698500132 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.123611084 seconds)
    (185/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.294711754 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.146305562 seconds)
    (187/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.553195064 seconds)
    (188/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.253772613 seconds)
    (189/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.261870593 seconds)
    (190/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.287126118 seconds)
    (191/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.23283474 seconds)
    (192/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.234409646 seconds)
    (193/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.130296405 seconds)
    (194/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.469301163 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.890292642 seconds)
    (196/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.278158525 seconds)
    (197/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.563621697 seconds)
    (198/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.124387599 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.123051075 seconds)
    (200/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.454061956 seconds)
    (201/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.142609251 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.520993994 seconds)
    (203/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.469303816 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.252702718 seconds)
    (205/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.126791783 seconds)
    (206/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.257334894 seconds)
    (207/341) benchmarking ("sort", Float32, false)...
    done (took 5.790652114 seconds)
    (208/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.549895547 seconds)
    (209/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.253672239 seconds)
    (210/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.12282828 seconds)
    (211/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.192446483 seconds)
    (212/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.932533006 seconds)
    (213/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.775355906 seconds)
    (214/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.236468062 seconds)
    (215/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.121380421 seconds)
    (216/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.523585577 seconds)
    (217/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.548930336 seconds)
    (218/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.285929264 seconds)
    (219/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.516448219 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.137393606 seconds)
    (221/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.306113883 seconds)
    (222/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.081888005 seconds)
    (223/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.479768452 seconds)
    (224/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.422178424 seconds)
    (225/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.07793915 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.520461852 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.24872312 seconds)
    (228/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.318494106 seconds)
    (229/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.233671273 seconds)
    (230/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.136864838 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.996949405 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.836449561 seconds)
    (233/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.125141815 seconds)
    (234/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 3.91904466 seconds)
    (235/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.254279492 seconds)
    (236/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.813216721 seconds)
    (237/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.423272068 seconds)
    (238/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.286009323 seconds)
    (239/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.416123003 seconds)
    (240/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.135361543 seconds)
    (241/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.31739093 seconds)
    (242/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.292872964 seconds)
    (243/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.313385398 seconds)
    (244/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.144493057 seconds)
    (245/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.119335896 seconds)
    (246/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.370361208 seconds)
    (247/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.72974026 seconds)
    (248/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.551853099 seconds)
    (249/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.326392733 seconds)
    (250/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.048123454 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.161744917 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.213010578 seconds)
    (253/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.140876515 seconds)
    (254/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.207457017 seconds)
    (255/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.438870551 seconds)
    (256/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.649046837 seconds)
    (257/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.132421483 seconds)
    (258/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.909673435 seconds)
    (259/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.270398324 seconds)
    (260/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.272684899 seconds)
    (261/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.201867326 seconds)
    (262/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.722902017 seconds)
    (263/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.211922457 seconds)
    (264/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.429638522 seconds)
    (265/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.121419436 seconds)
    (266/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.496679695 seconds)
    (267/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.589920124 seconds)
    (268/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.123713888 seconds)
    (269/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.26107941 seconds)
    (270/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.207985181 seconds)
    (271/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.956142513 seconds)
    (272/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.447151999 seconds)
    (273/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.132900185 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.364417773 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.240790446 seconds)
    (276/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.234681256 seconds)
    (277/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.912334233 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.136004147 seconds)
    (279/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.182053594 seconds)
    (280/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.398513434 seconds)
    (281/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.189998716 seconds)
    (282/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.892248072 seconds)
    (283/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.86894722 seconds)
    (284/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.352620846 seconds)
    (285/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.204199577 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.248153453 seconds)
    (287/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.439455022 seconds)
    (288/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.137928907 seconds)
    (289/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.126071537 seconds)
    (290/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.125075762 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 8.480002147 seconds)
    (292/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.430259607 seconds)
    (293/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.126264502 seconds)
    (294/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.050419899 seconds)
    (295/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.240340525 seconds)
    (296/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.20294616 seconds)
    (297/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.014666836 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.261340138 seconds)
    (299/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.420128874 seconds)
    (300/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.119688015 seconds)
    (301/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 4.067034616 seconds)
    (302/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.125817347 seconds)
    (303/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.123989887 seconds)
    (304/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.160354245 seconds)
    (305/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.342752668 seconds)
    (306/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.282299913 seconds)
    (307/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.256733945 seconds)
    (308/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.129124816 seconds)
    (309/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 4.060674358 seconds)
    (310/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.120444836 seconds)
    (311/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.126665118 seconds)
    (312/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.369859317 seconds)
    (313/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.048768282 seconds)
    (314/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.310804528 seconds)
    (315/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.421010204 seconds)
    (316/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.259341131 seconds)
    (317/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.619508477 seconds)
    (318/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.427777118 seconds)
    (319/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.350911324 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.081964044 seconds)
    (321/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.097001776 seconds)
    (322/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.222324216 seconds)
    (323/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.409396131 seconds)
    (324/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.444245746 seconds)
    (325/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.144416096 seconds)
    (326/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.328867483 seconds)
    (327/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.434762265 seconds)
    (328/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.998321035 seconds)
    (329/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.388133989 seconds)
    (330/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.58252966 seconds)
    (331/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.121827782 seconds)
    (332/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.52231878 seconds)
    (333/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.122447332 seconds)
    (334/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.165329761 seconds)
    (335/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.188091836 seconds)
    (336/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.520565296 seconds)
    (337/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.464576615 seconds)
    (338/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.604337747 seconds)
    (339/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.417873401 seconds)
    (340/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.208749054 seconds)
    (341/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.116037029 seconds)
  done (took 1184.651797964 seconds)
done (took 1186.810855607 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.142127865 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.12523562 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.627651811 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.135833653 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.126269615 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.128712479 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.6407863 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.153918858 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.14272913 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.639540216 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.13470584 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.125737086 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.140755283 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.159151485 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.136385343 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.140272897 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.130772351 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.149874011 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.160389861 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.130520684 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.177833895 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.132236657 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.127249539 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.176668183 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.125334881 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.14058463 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.146214371 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.179396578 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.178121529 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.129597466 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.132148152 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.485864137 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.167754387 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.131358333 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.138466885 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.141893875 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.130990386 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.141620173 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.1449519 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.143364631 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.12706986 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.138920323 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.131964582 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.115046545 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.127591521 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.127093545 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.129367539 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.253059331 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.141147115 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.468975094 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.18737978 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.146948711 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.179741095 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.131009033 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.130994652 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.13122298 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.179068971 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.135551938 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.133064336 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.469777344 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.222425249 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.142195897 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.470485723 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.193643427 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.138025287 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.138559182 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.126247265 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.147748986 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.487635831 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.684066608 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.159690085 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.148320437 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.129291189 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.130387278 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.141623212 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.644659129 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.143195954 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.710091094 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.154687747 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.144243127 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.13690656 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.130752797 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.131077068 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.14744339 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.147850022 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.127559051 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.135661439 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.135265613 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.145389623 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.489863725 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.173554948 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.631332672 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.138305732 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.149637347 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.149341486 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.710581177 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.156993532 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.147256461 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.131426425 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.489883515 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.173582672 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.149326674 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.13245198 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.142685833 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.246780894 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.152017961 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.150034032 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.129125642 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.153822424 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.137330805 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.129805057 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.143640763 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.152524797 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.164235965 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.149589257 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.130800179 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.139087123 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.137302216 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.148324793 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.14050599 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.137834807 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.14204201 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.131626988 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.180979928 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.150140974 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.146582391 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.247707143 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.13709826 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.256765666 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.146316495 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.138640056 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.13265056 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.473387415 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.171929633 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.147065637 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.138111532 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.156119507 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.153141141 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.147564469 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.134810289 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.147537312 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.135144315 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.183257459 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.131520837 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.158869731 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.183998286 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.145495809 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.13969525 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.15100141 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.167447125 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.15509089 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.138064329 seconds)
done (took 335.398378193 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.179464087 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.13159032 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.20644419 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.131794216 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.200396421 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.183775964 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.136564749 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.136061804 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.133996741 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.514805397 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.108452305 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.140605632 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.131506267 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.135131444 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.18112055 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.136073319 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.136805628 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.365518653 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.134289177 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.192309361 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.134396754 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.134565046 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.136238901 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.520772686 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.135379616 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.132407454 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.194008113 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.135752029 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.377064806 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.133317085 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.132243876 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.374739545 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.193482411 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.148525767 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.146205247 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.127162204 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.202153378 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.146518111 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.18110374 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.167958624 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.208245749 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.166795695 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.133174187 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.134423764 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.141943821 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.135688266 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.136875103 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.168140962 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.135488333 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.143381353 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.366868712 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.142718987 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.146562219 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.138956763 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.138662027 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.149236881 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.139349462 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.137423961 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.190813696 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.137930464 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.182168979 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.523497092 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.518270805 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.139178208 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.133709545 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.138463628 seconds)
  done (took 201.350834893 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.204083708 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.225489694 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.205596535 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.128857073 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.187881116 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.203666732 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.142244219 seconds)
  done (took 17.351236222 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.144884611 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.137162321 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.1273862 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.151160765 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.115019342 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.275171737 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.149274948 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.14491754 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.16367864 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.138441714 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.472600819 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.160655652 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.147999572 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.138523055 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.149987182 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.166511038 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.139178591 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.138859355 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.234931359 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.217137217 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.145502908 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.149181036 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.168305853 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.152517308 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.140962518 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.137771985 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.139604877 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.147023241 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.140321088 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.143400015 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.140575119 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.15309302 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.141089604 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.136737351 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.141870714 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.140743099 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.139712639 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.141283701 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.142117115 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.139918489 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.143923106 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.142952837 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.142587632 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.143588146 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.144712255 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.163262672 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.142251275 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.142946018 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.141546912 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.144311586 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.170051858 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.144107714 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.14427133 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.147264183 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.183327473 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.151658283 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.142445201 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.143984175 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.144169599 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.144637701 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.141758188 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.223473557 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.163582813 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.144077887 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.167565043 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.177863366 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.144245325 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.144144904 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.142482527 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.166241549 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.145522229 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.164942624 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.145319779 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.239963834 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.14399606 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.282526245 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.164729322 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.145278183 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.144954889 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.142968132 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.149917295 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.142992066 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.144354713 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.150129817 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.14831497 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.143852685 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.144705354 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.14301029 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.151337237 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.144410598 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.188080151 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.146203696 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.142589234 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.238551578 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.146295561 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.240255467 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.16929404 seconds)
  done (took 231.490747012 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.150373455 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.143724713 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.15761656 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.143205791 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.14348657 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.1468478 seconds)
  done (took 14.944938973 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.147307116 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.148846498 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.145894954 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.146211099 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.143724503 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.143244157 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.145552201 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.146043697 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.146575886 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.144906498 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.143938615 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.145738913 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.144068495 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.144466826 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.146076546 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.148145797 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.147268328 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.146120825 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.147966811 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.144046152 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.348437204 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.144543695 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.14335287 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.149036213 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.148977978 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.147373551 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.153915584 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.148054522 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.146956129 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.149783037 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.149066618 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.14607616 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.147958322 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.150347922 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.151918989 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.147697338 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.152078448 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.146375723 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.149120592 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.145886797 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.144791603 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.145526202 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.148393328 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.146290932 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.149831996 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.154296234 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.151236976 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.153691894 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.148745868 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.146089722 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.146578093 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.148455705 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.146499889 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.148566511 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.151517275 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.153841337 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.151330813 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.148556046 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.144667867 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.152401378 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.153044034 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.146352589 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.149714901 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.155040783 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.15658298 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.147348166 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.150410067 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.151526841 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.148004726 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.149449922 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.147312882 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.151994848 seconds)
  done (took 157.933728642 seconds)
done (took 625.124339559 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.230387105 seconds)
  done (took 9.293984021 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.206843446 seconds)
  done (took 9.367512452 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.638942504 seconds)
  done (took 12.710265895 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.179451043 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.187080445 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.161146407 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.15521201 seconds)
  done (took 30.760613783 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.374057942 seconds)
  done (took 9.438887151 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.160167573 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.146275202 seconds)
  done (took 16.435055624 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.186673978 seconds)
  done (took 9.252878126 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.158796859 seconds)
  done (took 9.256487211 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.155350116 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.158389351 seconds)
  done (took 16.397506227 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.150416319 seconds)
  done (took 9.21763446 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.009689905 seconds)
  done (took 10.163191341 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.168811873 seconds)
  done (took 9.251795717 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.228424275 seconds)
  done (took 9.296773171 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.147136717 seconds)
  done (took 10.214653678 seconds)
done (took 173.123480849 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.156931598 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.149808318 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.151659572 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.149935507 seconds)
  done (took 30.672088329 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.186619555 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.187343355 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.19507942 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.187961783 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.178700773 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.178052739 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.189422828 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.188905449 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.176973156 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.185782754 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.188950731 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.185542253 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.1869992 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.195114242 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.196323782 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.185043732 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.186971778 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.19128514 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.179204908 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.197261087 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.187048956 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.187866466 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.154780718 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.153076867 seconds)
  done (took 54.497906281 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.344163925 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.218459563 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.30480583 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.197703464 seconds)
  done (took 11.131055876 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.150998681 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.220346535 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.205327488 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.200808953 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.241579912 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.257311485 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.207398526 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.363822176 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.268626307 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.283656729 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.162317152 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.174883848 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.180686944 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.199730939 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.261165499 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.154546548 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.153541336 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.269290985 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.215835928 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.368308955 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.155200857 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.209155193 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.238856007 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.207817015 seconds)
  done (took 55.419266576 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.154587152 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.163031389 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.161045488 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.157618898 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.156224625 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.156589326 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.161721972 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.159023459 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.178004712 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.155521436 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.15588225 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.155737729 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.163905967 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.155341591 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.156030401 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.169643074 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.171334845 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.155993168 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.160979785 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.162649932 seconds)
  done (took 45.279724963 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.151801331 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.998702456 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.498277809 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.40465383 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.154022558 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.151554296 seconds)
  done (took 33.428979904 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.165886616 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.170665856 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.160098376 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.179313965 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.200931116 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.158465554 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.214322488 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.314500553 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.162053522 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.213527478 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.173553843 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.159745943 seconds)
  done (took 28.343141593 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.15309097 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.153161498 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.153166422 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.16289607 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.16295377 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.160756203 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.161261862 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.152488741 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.164744156 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.17253535 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.162763078 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.165797525 seconds)
  done (took 47.996535243 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.369703581 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.383107815 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.371874368 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.772978818 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.468404399 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.133962546 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.441876558 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.367023228 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.802431955 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.822298399 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.440546533 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.131249169 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.103672821 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.080549865 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.05183648 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.398900107 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.155898643 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.013127405 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.408890083 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.196548575 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.157728886 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.158805671 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.157444128 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.440710367 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.479088898 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.155583807 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.371015709 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173278209 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.157515311 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.422879053 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.626422946 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.211352522 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.360667644 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.415041235 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.500798271 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.218662167 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.160977074 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.358557471 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.199819179 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.191449756 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.167446441 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.169790312 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.696718497 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.168878925 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.431272153 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.159773536 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.171589199 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.169800494 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.083812509 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.445988017 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.258431502 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.157312962 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.193972563 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.590087573 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.277506222 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.402723047 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.164631624 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.360847828 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.213842927 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.387928761 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.236835811 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.16101659 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.375338012 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.082207777 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.475450296 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.268910466 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.162815928 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.165391174 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.859006367 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.404565026 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.240855938 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.46034483 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.249200353 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.162520053 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.162704532 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.208547902 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.255226722 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.158810097 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.451665688 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.155713184 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.086489065 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.325238442 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.557837034 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.165528187 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.155712611 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.165508925 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.004597676 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.086197822 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.257997627 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.407583307 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.470278134 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.161917615 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.161892099 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.183795332 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.163659996 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.106217513 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.747659689 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.226303932 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.088804983 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.726803257 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.634086156 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.126169252 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.629828618 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.201959808 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.439484005 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.314017477 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.566924992 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.369987996 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.408154738 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.692280816 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.167565957 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.776107183 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.244147431 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241251588 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.163021737 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.717442968 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.371628888 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.451215071 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.262752098 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.161219958 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.08828637 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.173728056 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.366881762 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.635071914 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.218431685 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.162244663 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.168355009 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.162523998 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.165391141 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.271335442 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180112362 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.449740286 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.228742778 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.163609677 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.1001006 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.167029863 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.446360234 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.844081103 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222168973 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.415037745 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.424195512 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.862668456 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.762035678 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.113389468 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.429803371 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.233322129 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.238770842 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.732810858 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.35628135 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.261150088 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.163896765 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.300011434 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.169342183 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.167218472 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.593077751 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.578540638 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.592039631 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.208574384 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.166266099 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.120090478 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.375403359 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.408438948 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.195665489 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.185662415 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.171969234 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.252294174 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.396295198 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.165573964 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.094551766 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.419281836 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.407529366 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.452988408 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.5749182 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.193949104 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.234352722 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.179103126 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.381717005 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.251911389 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.82390159 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.711530175 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.38761399 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.750287277 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.132182611 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.806303079 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.405437103 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.536160355 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.1860832 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.621167492 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.377327345 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.870616554 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.19537754 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.692469357 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.095649534 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.174260156 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.510276818 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.123414437 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.47837958 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.23039118 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.229984447 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.170725979 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.170989001 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180513253 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.049659486 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.273415189 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.239771266 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.243608837 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.098614409 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.838422752 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.209849525 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.174954013 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.172458506 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.44620434 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.941522089 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.12213988 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.172343291 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.249142791 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.916332057 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.719653054 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.174224726 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.175771387 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.774712062 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.17716772 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.760084304 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.206327018 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.890385915 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192787112 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.404443851 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.860638802 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.459607717 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.242971564 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.248317644 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.173039925 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.180574763 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.875820538 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.181121829 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.873697838 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.460952239 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.442078723 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.608907861 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.228235179 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.379630233 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.187217705 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.175010006 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.630668902 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.195774952 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.174909314 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.37774928 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.6927068 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.48795982 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.120038973 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.2604932 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.174171699 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.438615375 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.167897559 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.693948854 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.85791424 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.16617822 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.172926006 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.417812879 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.858894496 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.175684232 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.151414808 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.181555416 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.387106183 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.378644268 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.442409754 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.462096669 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.617848901 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.101212371 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.178928599 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.20288776 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.418914723 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.173305938 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.21207108 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.619243138 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.211101759 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.600846418 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.455966664 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.527699462 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.794473579 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.433976821 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.234852982 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.185602207 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.826048429 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.294259388 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.109079589 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.293043207 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.101825203 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.888982651 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.46376521 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.192877221 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.440328056 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.148922171 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.51681871 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.466755416 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.410023579 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.207978413 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.20285534 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.177307928 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.223698418 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.176570186 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.401089514 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.290430318 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.181221323 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.731920756 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215148811 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.22421856 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.183133335 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.631501252 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.194695076 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.177335945 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.871218491 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.2028975 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.297179393 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.248992118 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.901498689 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.675403451 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.18917776 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.131007482 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.175997959 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.443097796 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.229063884 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.63621573 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212013311 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.583588821 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.177904363 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.392123227 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.18481744 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.777583425 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.222002443 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.448569905 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.129022277 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.389611314 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.377818634 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.202007181 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.183153815 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.105180962 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.285519757 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.054355404 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.162199074 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.184131519 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.865220342 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.577679001 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.415892465 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.612935998 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.994927835 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.181336429 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.497693884 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.542983951 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.82385753 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.211414494 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182575762 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.477195577 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.299766506 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.484472641 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.439437262 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.187399439 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.205026467 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.391360725 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.303525621 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.12821444 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.672265297 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.636695487 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.879136099 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.18981956 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.381450143 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.503319654 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.486695783 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.213158469 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.25195168 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.58692004 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.442869769 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.245944183 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.105790777 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.181690837 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.577637552 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.593004678 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.277675345 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.421129852 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.487584988 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.840608384 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.785915456 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.626908599 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.536411616 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.615867276 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.593272575 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.400701923 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.540127091 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.501592468 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.064819457 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.594733249 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.394841867 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.278311189 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.457714733 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.049521744 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.892617192 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.428561456 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.186655727 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.111001655 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.38989403 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.303638981 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.529950259 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.754856305 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.431833108 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.411925608 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.632519152 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.722601321 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.409168494 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.192264466 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.147833415 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.208223876 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.206613782 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.185514113 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.663298995 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.474897804 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.187812325 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.104316613 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.853120455 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.110215906 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.394778726 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.389520849 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.218626896 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.72795276 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.4117953 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.272817867 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.470311392 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.44791699 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.217862439 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.11299745 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.900806301 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.129925468 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.232031254 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.607479918 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.200365626 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.157861472 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.388491138 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.112605167 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.231540698 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.189841583 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.382802545 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.761570123 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.44696232 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.306042932 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.434381749 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.483577004 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.977110863 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.197446288 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.459343205 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.112451895 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.823859925 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.888323574 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.226947715 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.256194463 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.186011539 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.189996536 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.458677733 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.482170788 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.373288813 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.672347399 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.218758552 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.210120531 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.513726487 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.263634237 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.189993795 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.191744107 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.669282563 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.415976649 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.187923434 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.158686257 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.400304771 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.260276654 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.383465108 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.263452513 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.702357731 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.192075195 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.021054894 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.273879086 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.139139525 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.187096196 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.919864189 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.24409648 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.189059634 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.455394395 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.844103032 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.391449383 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.580673229 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.086190236 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.408222703 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.228198127 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.192091349 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.288240018 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.482566109 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.484664507 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.187048886 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.453430927 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228350322 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.194803212 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.85205705 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.15588108 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.187783308 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.844710539 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.08486878 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.915304047 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.582639578 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.191067874 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.223420697 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.191795832 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.114263217 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.18812953 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.35936275 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.185938667 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.290193852 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.450891273 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.46726914 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.265518532 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.195981147 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.191409241 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.196076649 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.402763187 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.701739462 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.204987746 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.892323843 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.39245628 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.200045887 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.683147097 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.631831689 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.473789355 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.228369563 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.415758177 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.430382961 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.721289394 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.402914319 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.166157174 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.413474818 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.190334102 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.464088752 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.463043186 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.190768589 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.405306164 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.679674874 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.476647228 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.548608134 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.500740193 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.250133158 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.422133095 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.090096783 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.19368716 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.188779029 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.450977136 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.236844222 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.190707403 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.195544057 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.742632181 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.92087824 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.653576846 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.343455957 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.483889255 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.986306314 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.942367852 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.194729292 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.118214972 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.188083151 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.21655048 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.193889627 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.117779322 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.842004865 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.909862872 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.40393781 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.501861063 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.119582697 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.395544032 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.774698136 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.118892251 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.161175347 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.190145626 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.450599346 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.117899977 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.195442542 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.144513429 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.45885401 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.914425038 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.460486739 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.193533373 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.135784263 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.197860268 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.193586698 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.187787271 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.279269958 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.190616152 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.310852651 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.454928111 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.543480146 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.285665331 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.83425228 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.858179731 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.128058608 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.237059451 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.752124813 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.763590246 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.44787904 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.312335767 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.846026091 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.136100182 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.194289735 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.2111715 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.457203304 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.19693894 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.195375502 seconds)
  done (took 2264.331954695 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.20001228 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.242323767 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.223041664 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.244818973 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.304022159 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.271908866 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.225266321 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.246636163 seconds)
  done (took 60.065019354 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.194458945 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.122409899 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.199873436 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.195115896 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.196997799 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.227169466 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.383955307 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.220929081 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.203388191 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.227039153 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.191825788 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.195241005 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.194303649 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.193202447 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.1970415 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.506973022 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.216681812 seconds)
  done (took 81.993751836 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.259551854 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.004697155 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.194869021 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.908484819 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.244196322 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.54632373 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.193770107 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.196953085 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.318727088 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.491761884 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.243759213 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.212694811 seconds)
  done (took 93.949057963 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.194030716 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.194978935 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.192965983 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.19385841 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.195995859 seconds)
  done (took 13.081653398 seconds)
done (took 2822.317334366 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.57985051 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.292350145 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.271438193 seconds)
  done (took 6.673400581 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.33910993 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.387603219 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.553315294 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.508178047 seconds)
  done (took 11.902831403 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.479443633 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.570498811 seconds)
  done (took 7.159340582 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.564241937 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.212910391 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.581938403 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.198826485 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.199447414 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.197437537 seconds)
  done (took 23.710360983 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.198274169 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.197453338 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.20131517 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.196835985 seconds)
  done (took 10.902802177 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.202782783 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.92891805 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.20177276 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.213201036 seconds)
  done (took 22.65585328 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.40860566 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.190592023 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.969845819 seconds)
  done (took 10.680334776 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.821680276 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.654094408 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.805888626 seconds)
  done (took 10.392799279 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.344011945 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.182636918 seconds)
  done (took 8.639051164 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.336277964 seconds)
  done (took 4.445674214 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.030946771 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.509970446 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.661776162 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.696981741 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.763870773 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.405339738 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.513674965 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.467515373 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.587391172 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.588001315 seconds)
  done (took 28.336503594 seconds)
done (took 162.549158051 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.626378281 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.220011928 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.406336953 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.573428406 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.435772611 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.404704257 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.493302187 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.56370125 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.246095457 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.232154308 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.574199724 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.43645803 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.421441771 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.216290543 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.446508584 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.217489786 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.434017979 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.651719792 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.247587358 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.492170195 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.503755436 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.215659378 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.417187614 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.220461677 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.427705742 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.353620348 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.821382332 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.198118967 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.397756733 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.834165097 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.352666804 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.645590701 seconds)
  done (took 179.840066088 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.058856239 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.198598917 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.199400538 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.196701293 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.510454402 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.199885205 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.199604069 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.19753521 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.495297876 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.485284446 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.196606798 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.507361274 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.20165987 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.196516368 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.200532646 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.198315929 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.619373539 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.106355643 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.198759562 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.200801012 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.198788075 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.390931634 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.197252299 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.411657214 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.597732033 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.198094775 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.199003999 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.199920089 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.199072019 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.199222128 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.199101832 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.198649341 seconds)
  done (took 218.672296523 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.200878776 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.199576822 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.19896129 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.198689441 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.196861415 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.199790099 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.202127986 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.197528385 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.066200109 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.065826097 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.199696061 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.206410272 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.207220087 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.199175935 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.211717206 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.199359687 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.201283157 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.200852883 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.201760133 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.20198214 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.202008868 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.921136114 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.200555975 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.957966219 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.202213907 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.199589222 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.199605916 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.199384406 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.199537491 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.20117742 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.201737635 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.201066172 seconds)
  done (took 231.757397466 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.444142877 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.2032576 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.206544608 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.216549043 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.205603321 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.203837065 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.215291552 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.456630435 seconds)
  done (took 22.265672565 seconds)
done (took 654.660744893 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.56836646 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.921175819 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.335859094 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.224642438 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.444270425 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.264470904 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.221822251 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.281091545 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.874044896 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.298824768 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.629906691 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.226731273 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.959794226 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.247536854 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.337767171 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.273852472 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.564720039 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.824073315 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.355825253 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.891575271 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.422858223 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.137871863 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.296290238 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.916820119 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.639141055 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.166101377 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.240286263 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.566669998 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.227426053 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.457282062 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.880132218 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.477899856 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.23544403 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.224027476 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.272682336 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.264997521 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.415799632 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.234437118 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.337193679 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.943767225 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.860128672 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.744606165 seconds)
  done (took 113.823143032 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.210711027 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.209493313 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.209048596 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.211123974 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.216342727 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.207667417 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.209663791 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.211439655 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.209455288 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.206827171 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.209878833 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.219528565 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.210838955 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.218280884 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.211139901 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.209947293 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.213020031 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.217339881 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.196375668 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.211641273 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.194512102 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.214272347 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.208883268 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.211120961 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.210219128 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.209722136 seconds)
  done (took 59.593860154 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.208311497 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.383022357 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.490351572 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.236566136 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.205565007 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.209266456 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.232682849 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.213914112 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.209471194 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.205342951 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.317173259 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.214983454 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.220723453 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.487290319 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.235343413 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.206295235 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.209743335 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.207974348 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.391456597 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.219753493 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.234088032 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.213478904 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.238238748 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.222569577 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.212887762 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.20780768 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.209163533 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.642364046 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.220634064 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.320322484 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.24747492 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.240173888 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.561609365 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.496907583 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.271849869 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.219824925 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.210487569 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.3693893 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.221446007 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.205677392 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.234990755 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.216403752 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.491849556 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.720299547 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.220787015 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.20820267 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.633117376 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.377580256 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.251934168 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.220057803 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.499910989 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.236271867 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.210605419 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.209212919 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.245158798 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.207063904 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.19252851 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.456046742 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.226401466 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.239764102 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.217237552 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.209910788 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.403471729 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.219842119 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.388307735 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.217615085 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.216664647 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.211342158 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.497529139 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.238565088 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.718994845 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.226580659 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.212714752 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.324008418 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.394066273 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.65695422 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.223693596 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.401413817 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.582479727 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.247669293 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.221550004 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.623616409 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.250419337 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.220066482 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.210797676 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.214240325 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.213391328 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.25796442 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.236568773 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.63231363 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.712393735 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.474089532 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.249028828 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.223898837 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.210859348 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.455752521 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.21943886 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.215271365 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.491541931 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.739032113 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.224767604 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.216671058 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.70355523 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.224410048 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.238586364 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.222752764 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.508527998 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.238942893 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.255758066 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.212446577 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.216637354 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.214496765 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.24050736 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.219006815 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.211569731 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.690128111 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.383465729 seconds)
  done (took 272.593146426 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.213198461 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.208503265 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.212894626 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.209700347 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.211145678 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.20996513 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.211596256 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.210520818 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.210739335 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.21312056 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.213197893 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.213632855 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.213560518 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.218716092 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.246859462 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.21511564 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.701207393 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.211042179 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.213481734 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.213360789 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.785768063 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.218559286 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.210414777 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.21168496 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.214220671 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.216683868 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.218517495 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.245678922 seconds)
  done (took 177.223138932 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.216756899 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.259986267 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.228205637 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.263081993 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.229940429 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.218638614 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.235936916 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.228562261 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.218874681 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.216715241 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.215777816 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.240346225 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.222626261 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.289818382 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.243450728 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.245314632 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.289763521 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.219820661 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.216924079 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.215674268 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.259410125 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.2293219 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.241954337 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.266131508 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.229194735 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.263187587 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.231487519 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.21793277 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.214736054 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.302293007 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.233039289 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.245341536 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.247886521 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.231670047 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.307468429 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.302598537 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.29468384 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.246061468 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.221586842 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.218394005 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.217401599 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.22170349 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.263091983 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.229026599 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.214711404 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.312150665 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.23304115 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.216608312 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.240779946 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.218624385 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.230555522 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.232573306 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.244282295 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.313176882 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.262128175 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.243314894 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.240493464 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.233557125 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.21495894 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.270642982 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.212455791 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.309351842 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.237761616 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.221512501 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.21864392 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.223104361 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.266526122 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.251180694 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.291098117 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.223325881 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.288145095 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.273093137 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.229208052 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.222001089 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.220710442 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.266300621 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.302419365 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.270853117 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.279444498 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.250591636 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.230711628 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.216581708 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.225401077 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.244878786 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.225804574 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.305683028 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.30182999 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.224440356 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.21939837 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.219336908 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.220970918 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.241511357 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.272969496 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.255677587 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.305880639 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.25080081 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.250415 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.227466421 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.231995311 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.224278875 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.247296988 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.227626744 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.231988504 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.553981128 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.252837154 seconds)
  done (took 238.170267863 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.547298667 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.256343039 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.284330467 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.498844201 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.572599865 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.087281415 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.255734709 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.264471256 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.277841041 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.382123518 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.331355836 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.313376349 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.254887373 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.23894967 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.260927639 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.27921828 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.300870381 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.551520879 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.369453265 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.796856868 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.256511227 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.515177247 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.570558299 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.605800795 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.305428689 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.635652917 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.873616753 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.358941833 seconds)
  done (took 72.380557039 seconds)
done (took 935.901429519 seconds)
SAVING RESULT...
DONE!
