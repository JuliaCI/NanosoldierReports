cset: moving following pidspec: 30178
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.867677688 seconds)
loading group "shootout"... done (took 1.244235819 seconds)
loading group "string"... done (took 0.667341737 seconds)
loading group "linalg"... done (took 8.582874407 seconds)
loading group "parallel"... done (took 0.167899177 seconds)
loading group "find"... done (took 3.01610187 seconds)
loading group "tuple"... done (took 2.142833605 seconds)
loading group "union"... done (took 14.962546616 seconds)
loading group "dates"... done (took 1.452168707 seconds)
loading group "micro"... done (took 0.220510614 seconds)
loading group "simd"... done (took 4.798918886 seconds)
loading group "io"... done (took 1.077471541 seconds)
loading group "random"... done (took 9.54996345 seconds)
loading group "problem"... done (took 1.508682783 seconds)
loading group "array"... done (took 25.185067542 seconds)
loading group "misc"... done (took 1.886589235 seconds)
loading group "scalar"... done (took 43.368241692 seconds)
loading group "sort"... done (took 3.29005341 seconds)
loading group "sparse"... done (took 12.979711162 seconds)
loading group "collection"... done (took 18.89760017 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.426099015 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124592286 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129147164 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.122141522 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.180424765 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122166272 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.131659204 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085753121 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.852862543 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138885059 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116017073 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.437003386 seconds)
done (took 5.340281927 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.172251782 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093401024 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083827001 seconds)
  done (took 1.425743678 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072041175 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061135959 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067877078 seconds)
  done (took 1.450191013 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065409597 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.13524047 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066933623 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067468225 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.070453349 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067331531 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067195348 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066971989 seconds)
  done (took 1.794393184 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072531374 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068471791 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065691626 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067727445 seconds)
  done (took 1.527375948 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065682824 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122287449 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065517102 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065586766 seconds)
  done (took 1.568793974 seconds)
done (took 9.27820869 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.14014749 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.827048117 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.760403501 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123623625 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.246753196 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450386668 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124892133 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.184570619 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089366762 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075569117 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121919896 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078270393 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.399975716 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.400540549 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072265373 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.169059485 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.65043992 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088716733 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133454335 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.442931625 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074043656 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087657448 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084938943 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.07153998 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.345582875 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.155231497 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.661533244 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097769095 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068685326 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094998926 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070755683 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078427309 seconds)
  done (took 10.757516469 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093917797 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090781364 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069528436 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124575159 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093997429 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070701946 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.076023051 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068357123 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088902926 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124121817 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091101578 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099127446 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067103561 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069864255 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.080123764 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197273906 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.08100257 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081549815 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068080914 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081659572 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105934802 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079214059 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078970317 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078342575 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130010347 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169648811 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096919295 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098519639 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066539619 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078928409 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118081701 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125343576 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.06707971 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065481648 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119793311 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095698581 seconds)
  done (took 4.695156566 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.889968138 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096748872 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083190713 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074627526 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106894176 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114033216 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121602726 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123120536 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.099900422 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07004628 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152385565 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.64435912 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.168960941 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071714429 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120405062 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.36214719 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.084888288 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070520675 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068720328 seconds)
    (19/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.115221672 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071125987 seconds)
    (21/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065111412 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069476192 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.111828586 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065857002 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175298761 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.586419868 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07146262 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070024547 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096483032 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.069950855 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141659551 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093727141 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070863388 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.550820123 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066095315 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064229638 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088942418 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.092754469 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.180096921 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068622923 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079565969 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066923884 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109384901 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079519054 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.492603814 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069932478 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.5649137 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.226137753 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073363976 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072092822 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102290687 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064843965 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068338007 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.049281837 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.12046206 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067978661 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.273370723 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068081281 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068587729 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069460831 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099899016 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067775379 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.06889282 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07375361 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097129297 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.866569331 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.092073223 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096389264 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067418448 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.402871617 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074134878 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069112591 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069606378 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.08399167 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111244739 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066726173 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066914304 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.106956212 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.088982489 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.08977339 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07018822 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067830294 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066769118 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.351445683 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.165701555 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068478136 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067796499 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.482416388 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.06501036 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06708303 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068409309 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089658465 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066986862 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064503217 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065556369 seconds)
    (96/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.064447605 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099290145 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067451051 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.47835248 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067989541 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.46121156 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068972152 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103439017 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122101498 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.0687651 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.096048755 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068494869 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065527187 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073967832 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066334888 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065046311 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065013478 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070135899 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066345054 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066626126 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070073847 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068535989 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067484944 seconds)
  done (took 23.009148912 seconds)
done (took 40.607533706 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.314079331 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079459971 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078554353 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078726062 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078707609 seconds)
  done (took 1.933253195 seconds)
done (took 3.328947978 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133736157 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075219954 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064691011 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100802008 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068586886 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.101887573 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108626739 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104216791 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068961516 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.06960904 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069438203 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102684724 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105033018 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068891128 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098259058 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.104103756 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069152585 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.068122475 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069428782 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069696278 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068995587 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064869475 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069262567 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069253733 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099832005 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069496706 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064469561 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.098653479 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069298672 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098670555 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.06914566 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069187732 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.068960948 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100057761 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069370112 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099787114 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065342499 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069250209 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.06905955 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069474415 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069321171 seconds)
  done (took 4.661827507 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07174048 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082580605 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083979424 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062744021 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071845409 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082715458 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.0625617 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08226239 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088922936 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082673914 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082553001 seconds)
  done (took 2.204139846 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071155874 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083604404 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087278981 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062523214 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073950429 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083703047 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062439593 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082918 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085708965 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083680369 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083600711 seconds)
  done (took 2.187201408 seconds)
done (took 10.376279393 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.098387671 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066724024 seconds)
  done (took 1.47722929 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.224789745 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.624277751 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.267996465 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093309815 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072188773 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085381616 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.201481096 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067864469 seconds)
  done (took 8.137861059 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.103547974 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068490796 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069557166 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068600551 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069846322 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068692498 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070148795 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.06822112 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.06919176 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067872105 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070128323 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068444151 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069570887 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067765913 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068290474 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.068158453 seconds)
  done (took 2.561908665 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103558925 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069975995 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.100461719 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062820111 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072475348 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062691729 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071112967 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073379977 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070546292 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071249969 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072386931 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071394788 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071421891 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071860073 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072818617 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073581658 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073128472 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070769095 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073309294 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073227683 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.07240992 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.07311199 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073987457 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071629188 seconds)
  done (took 3.215942898 seconds)
done (took 16.724223074 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175868909 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074824242 seconds)
  done (took 1.571991544 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068699652 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069145727 seconds)
  done (took 1.478657624 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073746506 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061144745 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078918524 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070354237 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062154162 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061444828 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077222003 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06212249 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061658045 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061981593 seconds)
  done (took 2.010592056 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06345806 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069204783 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066800956 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.06502852 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067650842 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.06317877 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065527423 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063328189 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070174217 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062308304 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066638836 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08403698 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066097865 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084260628 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065647275 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066731241 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068335328 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065501215 seconds)
  done (took 2.570170021 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061528175 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062837845 seconds)
  done (took 1.471871117 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064913366 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062276253 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065087021 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06460441 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062565899 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061864063 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.0626194 seconds)
  done (took 1.785570081 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.423484113 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122333808 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341315478 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069208472 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076927186 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254986746 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064366353 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068485959 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068477969 seconds)
  done (took 2.875078952 seconds)
done (took 15.117289901 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082479263 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181674439 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088105248 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.404982668 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091603564 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067242691 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113077019 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.173543323 seconds)
done (took 2.574493481 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.215296138 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.240210153 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.390835139 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125281916 seconds)
  done (took 3.109690212 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.338390775 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.07861377 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077175106 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067396717 seconds)
  done (took 1.92720776 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065247351 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071689668 seconds)
  done (took 1.496723923 seconds)
done (took 8.11702091 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072925354 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062123801 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.092185174 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.068439315 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063588018 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064732223 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.063990284 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.074159623 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064336416 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.06187252 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064388564 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064320804 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064288947 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063832872 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064211473 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064161734 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063313265 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063869234 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065783052 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063729037 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062153074 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064397176 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063567991 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063786453 seconds)
  done (took 2.973089386 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079357153 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065885108 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066977437 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066888798 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067944675 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067058566 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.06756096 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065929569 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067310538 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065853304 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067763933 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067106172 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065719186 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067826439 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065786647 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067866796 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067214546 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065963428 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065419426 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067456133 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066811744 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066348324 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068061932 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067431774 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067485764 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067553379 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065616758 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066084183 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067236378 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067841661 seconds)
  done (took 3.39238266 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06722265 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060816039 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060834475 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070448838 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060664811 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060870306 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061116262 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060267273 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061067178 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061945765 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061202922 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060440929 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061095995 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060361763 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060563506 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060992631 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065332364 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079388205 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061015475 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060812386 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065490197 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061003951 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060541672 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060365929 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061312198 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060669026 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060466753 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.06079056 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.06065059 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061234618 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060534253 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064778849 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065765218 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060338006 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070934101 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065150288 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060010724 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065128824 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061467155 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059760917 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060106527 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.059968302 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060194778 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060604284 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070872332 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060798833 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061258633 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061299207 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061164407 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060168721 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.06062558 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062561607 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068987691 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061610029 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.0599529 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061439937 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059887949 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.06107414 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.06027255 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060271196 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059960894 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063780672 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061666239 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060890092 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080239336 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061852017 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070096561 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060184285 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060756566 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064376044 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061260929 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078283681 seconds)
  done (took 5.888563208 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072137422 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072518001 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079252491 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070439119 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064615094 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061928864 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065217475 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061673542 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070975252 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065734745 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061912219 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065429326 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070630748 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065545759 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.0627344 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070644194 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065545718 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06512629 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061330706 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065528207 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062645891 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065249906 seconds)
  done (took 2.852963608 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136919083 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066576562 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106360818 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.075195067 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068593667 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.075055178 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066674404 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066174816 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066817691 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066990401 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067361685 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066628015 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068926565 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066887509 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067447368 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066967755 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066349407 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066668501 seconds)
  done (took 2.708628137 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.0767456 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066121591 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089877972 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066294934 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066541829 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066350768 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070077269 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070363043 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065683942 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066462659 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070126161 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066261923 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065875744 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066577474 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06596085 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066290013 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066024587 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066402427 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070004888 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069709639 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069801264 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070100484 seconds)
  done (took 2.897124765 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077057631 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065048703 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081061395 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066651925 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060976551 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060764996 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066554978 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066011378 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066193145 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065567514 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065105299 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061006807 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066896868 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066065361 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067119202 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065479774 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065383132 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065460361 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065106667 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060850859 seconds)
  done (took 2.704719592 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086411028 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06291722 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063486769 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.08250146 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063668806 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063276444 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.083013499 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063858551 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063490896 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08485141 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063615781 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063209936 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082699278 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.083111004 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063601404 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.082621125 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.082621782 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.083039383 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063287185 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063304441 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084644136 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063971906 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.083246183 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063709296 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063688512 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063384315 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063813174 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082717418 seconds)
  done (took 3.399458046 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065155293 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063714004 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064382317 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064644102 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065321233 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064401732 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065017553 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064982744 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064156949 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064842521 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063982568 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064839858 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067097221 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064702997 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064286897 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064494134 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064190746 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064759527 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065241146 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064733121 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064272243 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064655324 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064134498 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064622196 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064373416 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06381767 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064545638 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.0645377 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064271284 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064798727 seconds)
  done (took 3.326464493 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073434772 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072145004 seconds)
  done (took 1.532851699 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062557902 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07847641 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060821808 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073243086 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069227958 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06440679 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069829547 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069434415 seconds)
  done (took 1.931249071 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067243285 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091876254 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062839156 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063690732 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065429665 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.132064564 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.07553701 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074422016 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076792812 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064908239 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063351723 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074540844 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062137025 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076002948 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064290981 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071058195 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06980872 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079391687 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075091058 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060834429 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074290197 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063138537 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061407495 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.0632566 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062541252 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069453123 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078220103 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075438576 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071395984 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060066586 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081410555 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061285045 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062150723 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070881078 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065165511 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061771894 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097902625 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061801941 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066414406 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060528443 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073493728 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082352253 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076053985 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079358161 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063351421 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063495815 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061323403 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063142064 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064783174 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071065215 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061336153 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068709698 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060394327 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062610654 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071841993 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061900173 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066393386 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070713749 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075043673 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07196652 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070029485 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077017494 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070042757 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068975074 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062161593 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080772708 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063453619 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074343777 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075988798 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062841148 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074531402 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060814466 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060119512 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060689963 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094572461 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062912524 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062725229 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061015092 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061208678 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062715032 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070667711 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066520938 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068585643 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064930157 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077180583 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071102154 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061879592 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068218011 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079416395 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065010573 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061679129 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077684608 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064296962 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060322836 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078414591 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.07086518 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062700918 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061979301 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064928938 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07462252 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062060987 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059764552 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069415916 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062668339 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063235254 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065347559 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06878844 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060643694 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070804957 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065688079 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062818707 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060147162 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065523738 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.06238474 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059639943 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070386852 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.06104507 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075401749 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067530407 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07558837 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076109524 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070830954 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076105529 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060482625 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059480532 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.07791139 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069455165 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.200563146 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081061751 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062620885 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.076521977 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.062603543 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063729342 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071455681 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061096027 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063406009 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.06194019 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066729653 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062910735 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06331421 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06712143 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070474767 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073935661 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062857994 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071228268 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061983049 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077267566 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072202032 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066345777 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065078663 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062458043 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073957599 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068750921 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070833487 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061389477 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062358227 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061642177 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072509217 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071942588 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063524696 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068741266 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066421419 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062282069 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061648097 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062522355 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.06527121 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065281884 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062647806 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069299839 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070870412 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07563543 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068852632 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070781486 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060213225 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060861266 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063220471 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.06089008 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066334304 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070899866 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076715271 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.07334759 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082676699 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061806414 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071942055 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062859637 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078349349 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075177245 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062445871 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066113147 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060429539 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063776075 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.071253706 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072939308 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075564874 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076594257 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066162737 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066325303 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060920203 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076255567 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062069894 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069866434 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071647142 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066121874 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061928424 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063090044 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070903786 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06592127 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061569563 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077182446 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067236388 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061461352 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076275936 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061949433 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072068984 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061289096 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065086823 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066740829 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063054159 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070944495 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07685605 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060310173 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061756949 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077049627 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063385219 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063335599 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.06960208 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076683407 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065908289 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069576362 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072430873 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071376918 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065084821 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071479786 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061882348 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070822223 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.06389327 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072565288 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060622538 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078074999 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060057188 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076419705 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061282778 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072008301 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061645305 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070282899 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06170934 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077785713 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062764507 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061541671 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072753109 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059638362 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069903464 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060363408 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065509426 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067082052 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070184178 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062230875 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069526213 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062005152 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.212751515 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067659109 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070935927 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071572144 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066831135 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.06161375 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070421196 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072758333 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.07032567 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063806111 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063275245 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062434593 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071143814 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.06328254 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062987517 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069961038 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067014902 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067451739 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063661313 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064011347 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063484638 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070595614 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071693364 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079582456 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070231646 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069073518 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071116628 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061176986 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077180494 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061636434 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071958006 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061109792 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067315082 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071373142 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061809352 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080635364 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062967004 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069760285 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074317271 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07043031 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065093032 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.080148403 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066199974 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070512867 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070016912 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066508155 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068441231 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.06351439 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069987138 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070831275 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072339356 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062723154 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069438694 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071096633 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063460637 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069336881 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063640367 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069869002 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063146132 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060670445 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066379814 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072858039 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065959525 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066444262 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061962755 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060588332 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061943571 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068126209 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066656448 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070093866 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077119414 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060504366 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062616533 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.0612073 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064983877 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079174051 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071267552 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069488915 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066537635 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060495967 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062956475 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063400801 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.06185237 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065033279 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060428863 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061120064 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072594144 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063358682 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065691262 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061727268 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.063020309 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.07121845 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066067613 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061933605 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068185883 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.06213375 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066771397 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060417687 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063326784 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065986518 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.0613921 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06583749 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072259888 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078435475 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068101105 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070359699 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062600654 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069676495 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076623029 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068487558 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062377348 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070641098 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061230351 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07892889 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070829158 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070011077 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070539713 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061697465 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077261687 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064971715 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070869901 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075823326 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062234959 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066667498 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.06061344 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076076967 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064814014 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060205111 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067796918 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068265133 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065495584 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071641939 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.208647463 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070630721 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067673553 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065475406 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063655856 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063756946 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070735972 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078060776 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062440727 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066226551 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069870046 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070496737 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066439965 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073972231 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.07054061 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063363706 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063802527 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065135378 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062597425 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073611888 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06219545 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066282858 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066175052 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060771 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068251378 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078240135 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070721035 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071227756 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061237187 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061126382 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079398838 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065461202 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065254764 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069529219 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071251259 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074300857 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071489207 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078193523 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062736489 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067258887 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074323914 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062457542 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061567588 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065450707 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063468729 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071033779 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071313356 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069464652 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063616027 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068063262 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074689324 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062474995 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.0661664 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066158931 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062133885 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072146202 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070031438 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073201813 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062995385 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061312942 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064924865 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070449132 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069401204 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070867081 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062157601 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067674239 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075291328 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068868644 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064500746 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061550263 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065082905 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.0704194 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06640572 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.06112004 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066029776 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065586619 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068396554 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071332475 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066183823 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061689377 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078323133 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070256886 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071058708 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063490491 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063485345 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061917315 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061326371 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072929629 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.06097403 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063256439 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065966258 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063482006 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078825702 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069577144 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077205944 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063148473 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066498531 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.06165568 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07124315 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.06606202 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061944971 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072002504 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.0610628 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076832991 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073565914 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066962939 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060985388 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.08704789 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069324575 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076094271 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070707857 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070237668 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.065425606 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070808047 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063276642 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072354772 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060957832 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060065247 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071748228 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069748849 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073252129 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060264701 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070748746 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062509509 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068849067 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068772409 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062395519 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062265647 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062174573 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069185342 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064539812 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068916233 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064695128 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.224060781 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064008811 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.072980465 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071443429 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072956533 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07612869 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073950544 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069946401 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062598314 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069047741 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069418831 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063084975 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066625648 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065421666 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08322717 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063863514 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.06344521 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076469993 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068290091 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062231698 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067974246 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066650667 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072313767 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063208677 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072445478 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065681816 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.06281278 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066353887 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066300708 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061186501 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.06180624 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061695154 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071625365 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066462398 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061587902 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080728754 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063543448 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070933875 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073192547 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068238335 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.06387106 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060746452 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062968658 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075458619 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077075532 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065353278 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070444674 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063257289 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070931207 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060765915 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070515389 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069793348 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070391493 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061408685 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061743361 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076122095 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076785766 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066027441 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071131973 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070986882 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063581308 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082797812 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070072055 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063045279 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072794998 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063947806 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060878076 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060544397 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063340301 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073351566 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061228925 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064239496 seconds)
  done (took 42.430325867 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099211104 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062402737 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061597216 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061134398 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072666878 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062519642 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061311971 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062295511 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062226537 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064135566 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061238558 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063981839 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072755646 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075110026 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071375328 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065198516 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061467581 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06216854 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.0613103 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062574951 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071421439 seconds)
  done (took 2.901827339 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065086685 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065309518 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06521132 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065431706 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064713249 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061572115 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065297126 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061566106 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065925651 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062059359 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065656284 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061530375 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062257469 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.062383846 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061987846 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063374044 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06608926 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065302183 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061657656 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065469642 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062722841 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065353767 seconds)
  done (took 2.885668609 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062995715 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061962002 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.07055426 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061596771 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061257937 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064689449 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061085926 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065443135 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065392049 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065455641 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070640055 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.061908965 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060367647 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066677265 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061240887 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061951213 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103754156 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062717861 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062362722 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.06071456 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063969603 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070509345 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060743138 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060847777 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065615086 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064686475 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060927739 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064035085 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062237466 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065494105 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062190517 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060640668 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070314353 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069712391 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065576455 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065827408 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063080276 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062246078 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.06105572 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061593546 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.06962669 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.06274035 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061588028 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062292711 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070092665 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060790682 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061256585 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070386424 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061136594 seconds)
  done (took 4.657101838 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071870373 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113758521 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067022132 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094807059 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073807279 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067019342 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066748954 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095459896 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062072631 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.062868795 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075149449 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074892797 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063911013 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.06552398 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068273074 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063628242 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064650048 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063036781 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066893128 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063802829 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066747141 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067784531 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073184194 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074124869 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064592004 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063217906 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063531952 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065574357 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073561786 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067288504 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065072639 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065880052 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074035011 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068785917 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063652104 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063026615 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074863437 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064142942 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063731563 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.06249435 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063464759 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065215695 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068110645 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074991483 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064223823 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069131801 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064074935 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062109875 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074515003 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063547312 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067707678 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.074912709 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064774979 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064253638 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06549076 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074315805 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063811296 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062773535 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064178214 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074153618 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062542231 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064992299 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077120506 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063107232 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066625112 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075053607 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068695705 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064614233 seconds)
  done (took 6.305953359 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070713784 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096029543 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07235008 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072182357 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07186292 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072198007 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071823219 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071443406 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07219878 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072161545 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072274838 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.111115349 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067963405 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075766463 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071609745 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.0721514 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071888426 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071874897 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071783481 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071700854 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071840165 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07249069 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.07122502 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071726891 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074042344 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067918557 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071060324 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071301737 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071883276 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071749425 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073760294 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071368235 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071685047 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072485467 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073781788 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071510231 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062432929 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071744901 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071338065 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071561536 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068093958 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072187395 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071533448 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068155182 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071814645 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071703521 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072390428 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074764685 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078419288 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072318347 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071993215 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072025243 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072080152 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071528117 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071704958 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078770162 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072114485 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072155895 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072281518 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072006113 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072155973 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078138991 seconds)
  done (took 6.049324695 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075509724 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067710874 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080131973 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061255396 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06117884 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070467089 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061526045 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061303359 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068322629 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067820976 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069953913 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070349275 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073010661 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069877932 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070766104 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07264902 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070464901 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070387047 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06785983 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070125606 seconds)
  done (took 2.888381623 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076755119 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080426346 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067114141 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070965809 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066738087 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070812519 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066075842 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067054683 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067453207 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067089775 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071698206 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072243545 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067467489 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070765629 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071845071 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070488748 seconds)
  done (took 2.628658087 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06491101 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069741781 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068170682 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063471808 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065207932 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.06220385 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063126262 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061215431 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06427455 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.076028642 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062539687 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.065130922 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.06312164 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.06218972 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062235781 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065141726 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064341308 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062526491 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062904675 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066884007 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070887059 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063366559 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065029478 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062062556 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065062538 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070929532 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064094401 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064924153 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062550014 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.06518237 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064822725 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068893421 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064864725 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063695162 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061572674 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.06301498 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062614323 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.06491884 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065014365 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062694093 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061411787 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067616924 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062760187 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063478114 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064523348 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065259334 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064054689 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067875385 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062853935 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064889166 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062542054 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.067083738 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063155142 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069231084 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065048611 seconds)
  done (took 5.067103488 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07895918 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06680965 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061555513 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061362756 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066466603 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067377335 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066798961 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067094776 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067437721 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061412282 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067376878 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066504652 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067152345 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066754885 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067316303 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066807536 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061362215 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067177784 seconds)
  done (took 2.716558724 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068072101 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067317241 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065977308 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063774788 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063868064 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068572944 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06249102 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063368822 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063570173 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06393953 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064275855 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064111429 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063044562 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062975513 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067827816 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063143132 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.06258085 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061596392 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063635771 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061901917 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06799992 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061456838 seconds)
  done (took 2.927941814 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088692697 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084934265 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.129028301 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080709175 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089299746 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072519857 seconds)
  done (took 2.056122044 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095097078 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104846349 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067436534 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067204236 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07486743 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069757597 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069845082 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069260148 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075097171 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073575612 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069712199 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07467607 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07478363 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07119722 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074818279 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077176266 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070382189 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069508975 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0667776 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077080245 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069498803 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075129521 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069796529 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069735646 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069952609 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071249629 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077522089 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073738883 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069561109 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075171756 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078010032 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069528538 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074592176 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072879787 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066657422 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074688953 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0697955 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077475802 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074473517 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070991594 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066635614 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074707488 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075031493 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071304884 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077260906 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069541798 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071732561 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069694931 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069357767 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079383816 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074967388 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071014864 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074848751 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077554994 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077655072 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079274349 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073686878 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071071528 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075250481 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07342463 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071329278 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075297322 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071721711 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073304667 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077440854 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071083954 seconds)
  done (took 6.358530351 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100998906 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066863121 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069738488 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073552965 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071358637 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070057363 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070066969 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069893984 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069871774 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067292652 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105231801 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069970817 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071760812 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073687419 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069876301 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069795399 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069920847 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071693833 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067628352 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079410648 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069273867 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071600306 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071420723 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071474867 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073181178 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078023251 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06985085 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070053026 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069308943 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069339941 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071233239 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069850397 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07147092 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066834743 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071388948 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069412229 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069295891 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071378891 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069286514 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074954095 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071347952 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077450818 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069401296 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069816596 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073394076 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069749064 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069576948 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06693829 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070005193 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06709748 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073556263 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073367553 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073735584 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071464925 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070059852 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069728192 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069480501 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069543078 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069337092 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077210857 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071126954 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069560157 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078994547 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06957913 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069509658 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071587512 seconds)
  done (took 6.290453302 seconds)
done (took 131.136362692 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218663828 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.190672147 seconds)
  done (took 1.91139608 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075637799 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166544442 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075927789 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075272725 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109485041 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108277396 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076117738 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072883846 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075168828 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073292282 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.13984809 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076395095 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072829061 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073051297 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.07319877 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073022087 seconds)
  done (took 2.941294397 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108640529 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185167199 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082995184 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070676754 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114795768 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077049877 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072725384 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075754804 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077459459 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070945225 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107580641 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082402182 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.0742932 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077595344 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072926666 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074739419 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075639026 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077440993 seconds)
  done (took 3.105881306 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.099147661 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086867084 seconds)
  done (took 1.719420842 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156385145 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105850329 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145013069 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.329438864 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130448261 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.126749193 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.129612283 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125796445 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111194535 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.121881077 seconds)
  done (took 3.009896747 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106343915 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105637491 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.30887677 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102526251 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082059178 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078211417 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075421508 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080221057 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075731536 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077096519 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121572193 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.07582945 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073417332 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124007503 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099051957 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.10686122 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071226092 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078888168 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080200444 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071699413 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076144259 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079777091 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178101927 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079084862 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100229222 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075118449 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077614647 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074900855 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074724784 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078281686 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079093493 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099434307 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078496113 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083386687 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077403001 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096838106 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072005968 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098748101 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074743173 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.07303154 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075374102 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.07954696 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072186898 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078478174 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075960307 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077798454 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080357827 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.07118342 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075658961 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074920314 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073511031 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077056093 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076385136 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.078473317 seconds)
  done (took 6.334569091 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108157217 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109531834 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070916379 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113846198 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105277625 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070829469 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105039399 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100911204 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109164774 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070577389 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069993661 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069924604 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076809072 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079853646 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.115738088 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109033219 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.0717709 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070143585 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108071295 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107146253 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069519797 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102477159 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.101383601 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107021872 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069137458 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070578721 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06953547 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069164143 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074848467 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074984061 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069624489 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076386187 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081367708 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075447645 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068757133 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068849628 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068611345 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075975823 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076707587 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076736528 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075212518 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068347855 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068822924 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069568882 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.07011811 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06842477 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074946171 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076152268 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074767555 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069196177 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069773958 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069047246 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06946822 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075055353 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075119558 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076698071 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076551192 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069395681 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069332423 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071072823 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077721293 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077082585 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076923929 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070446961 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077171511 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069185051 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077790862 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.08148946 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06928512 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069974429 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068999681 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069499494 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069852791 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074981966 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074939895 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070025516 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069063595 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068880267 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077377217 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075112024 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069273379 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075081647 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068659343 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069312981 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069880071 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069940045 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.075155463 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076432328 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069919293 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069039039 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069154042 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068921467 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069179283 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074354766 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076140882 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075982112 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075299894 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070042449 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075305265 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075081067 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069605292 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074484288 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069198681 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069227767 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068995954 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074656216 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073729628 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075560237 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068538765 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068475693 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074375608 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076374208 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.210855729 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076873964 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079187971 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076916635 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.07034071 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079318905 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070078676 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077700927 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070177273 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077819898 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070188423 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075729572 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069885729 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069474284 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069562222 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075834854 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069908907 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06942376 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070320171 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06943185 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076044717 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078984929 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070537098 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076029211 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.076232922 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070048906 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075702734 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069758768 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076978379 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070113929 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070064998 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068798755 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078245526 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069469666 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069673877 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070033166 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077977746 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069652505 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078123897 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075283546 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06928342 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079729206 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078017953 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074572544 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078083098 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070465356 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06997884 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070087006 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072217611 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07513872 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075938558 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070382557 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06933134 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075179271 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077925032 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069382852 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075088338 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075039408 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.076032803 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070018215 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069742392 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078287135 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077905696 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.306059874 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075279198 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075836355 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069208721 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075163777 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075255646 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069443389 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081677986 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069265976 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079680587 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075533223 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074238648 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075647146 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076771936 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077404581 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077605887 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079734975 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069175214 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069529425 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.07517384 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069599321 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069187517 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075161565 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069823474 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069650838 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080229109 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069531759 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077475526 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069319502 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076237266 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068261339 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069576535 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079923638 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069201422 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069304049 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074563454 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069507125 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074615183 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077270865 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075006999 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068965648 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069361921 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075396364 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075578968 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068606129 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068296768 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069152785 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07350647 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072674014 seconds)
  done (took 18.749786096 seconds)
done (took 39.317271051 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.171499865 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117358124 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207935316 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199047732 seconds)
  done (took 2.334178305 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101194675 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066495904 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081715369 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090753981 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065939496 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076830615 seconds)
  done (took 2.06455387 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202976049 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174356582 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240360579 seconds)
  done (took 2.189938006 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367130012 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149492719 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215976863 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.503062495 seconds)
  done (took 2.914381903 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110255506 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101891243 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078486144 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111557955 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085590848 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063355397 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134075344 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070510895 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099822297 seconds)
  done (took 2.496737046 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.130622401 seconds)
done (took 13.736707732 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.299456222 seconds)
    (2/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.189933683 seconds)
    (3/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.214027843 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.221076136 seconds)
    (5/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.091910147 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.165449632 seconds)
    (7/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.109417214 seconds)
    (8/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.074004271 seconds)
    (9/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.239320298 seconds)
    (10/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.075095267 seconds)
    (11/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.121764833 seconds)
    (12/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.15905012 seconds)
    (13/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.283844319 seconds)
    (14/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.123583575 seconds)
    (15/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.108383793 seconds)
    (16/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.188083897 seconds)
    (17/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.188323202 seconds)
    (18/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.070980307 seconds)
    (19/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071522019 seconds)
    (20/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.17835853 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077081636 seconds)
    (22/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.197274789 seconds)
    (23/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.081151294 seconds)
    (24/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.085319578 seconds)
    (25/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.121145517 seconds)
    (26/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.091936224 seconds)
    (27/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.077978011 seconds)
    (28/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071211577 seconds)
    (29/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.177357395 seconds)
    (30/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066708024 seconds)
    (31/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078731863 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.087857498 seconds)
    (33/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.094992519 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.154261994 seconds)
    (35/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153498906 seconds)
    (36/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.093359418 seconds)
    (37/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.207313839 seconds)
    (38/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.23753953 seconds)
    (39/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069514887 seconds)
    (40/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.172260862 seconds)
    (41/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075141837 seconds)
    (42/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.075652527 seconds)
    (43/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.142836039 seconds)
    (44/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.217025681 seconds)
    (45/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.147762932 seconds)
    (46/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.183053361 seconds)
    (47/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066498581 seconds)
    (48/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.095463635 seconds)
    (49/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090667669 seconds)
    (50/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.143215449 seconds)
    (51/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.201001105 seconds)
    (52/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076989677 seconds)
    (53/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073442204 seconds)
    (54/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.066348565 seconds)
    (55/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.15081413 seconds)
    (56/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.149473796 seconds)
    (57/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.068813468 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.079552661 seconds)
    (59/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.198012336 seconds)
    (60/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.192216971 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143958799 seconds)
    (62/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.180774149 seconds)
    (63/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075595002 seconds)
    (64/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082711939 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.076178056 seconds)
    (66/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.15278816 seconds)
    (67/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08755248 seconds)
    (68/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.08234423 seconds)
    (69/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.140642327 seconds)
    (70/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073280456 seconds)
    (71/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.150084736 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066970534 seconds)
    (73/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.080941166 seconds)
    (74/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.077709858 seconds)
    (75/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.073332895 seconds)
    (76/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074742019 seconds)
    (77/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.065784097 seconds)
    (78/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.066684187 seconds)
    (79/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.073289358 seconds)
    (80/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.247259822 seconds)
    (81/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076644574 seconds)
    (82/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.066829103 seconds)
    (83/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.262933276 seconds)
    (84/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.07722016 seconds)
    (85/341) benchmarking ("sort", BigInt, false)...
    done (took 0.274227118 seconds)
    (86/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068692929 seconds)
    (87/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.067096392 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.089277421 seconds)
    (89/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.222102351 seconds)
    (90/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.181040043 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.09305116 seconds)
    (92/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067583304 seconds)
    (93/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.067922686 seconds)
    (94/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.166599277 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085975259 seconds)
    (96/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.074565038 seconds)
    (97/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.086886583 seconds)
    (98/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.075166772 seconds)
    (99/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.143995611 seconds)
    (100/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.079356185 seconds)
    (101/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074390076 seconds)
    (102/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.06711144 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.092694358 seconds)
    (104/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.074016073 seconds)
    (105/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.074431223 seconds)
    (106/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074204305 seconds)
    (107/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.139438808 seconds)
    (108/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.09209816 seconds)
    (109/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.085279356 seconds)
    (110/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06752955 seconds)
    (111/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.188049889 seconds)
    (112/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134384 seconds)
    (113/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.093666663 seconds)
    (114/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.153741544 seconds)
    (115/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.140872739 seconds)
    (116/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.164982438 seconds)
    (117/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.191113963 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.084013372 seconds)
    (119/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.06985946 seconds)
    (120/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.086749561 seconds)
    (121/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071515623 seconds)
    (122/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066357608 seconds)
    (123/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.067496422 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.087453925 seconds)
    (125/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.17206536 seconds)
    (126/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.068216301 seconds)
    (127/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066487553 seconds)
    (128/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075943415 seconds)
    (129/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.065988638 seconds)
    (130/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.066884568 seconds)
    (131/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066558235 seconds)
    (132/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067554055 seconds)
    (133/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.076873915 seconds)
    (134/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.093343469 seconds)
    (135/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.069134782 seconds)
    (136/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.070355718 seconds)
    (137/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.220860858 seconds)
    (138/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074584425 seconds)
    (139/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.06737927 seconds)
    (140/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.077391729 seconds)
    (141/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076809727 seconds)
    (142/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076453971 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066137578 seconds)
    (144/341) benchmarking ("sort", Bool, false)...
    done (took 0.146451525 seconds)
    (145/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.194899285 seconds)
    (146/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.137673301 seconds)
    (147/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.162399902 seconds)
    (148/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066935386 seconds)
    (149/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070970515 seconds)
    (150/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.067069844 seconds)
    (151/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071601736 seconds)
    (152/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.081380018 seconds)
    (153/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073658822 seconds)
    (154/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075972287 seconds)
    (155/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.132930169 seconds)
    (156/341) benchmarking ("sort", Int8, false)...
    done (took 0.153515746 seconds)
    (157/341) benchmarking ("sort", Int64, false)...
    done (took 0.068020757 seconds)
    (158/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.15590542 seconds)
    (159/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.077584808 seconds)
    (160/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092124536 seconds)
    (161/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066465488 seconds)
    (162/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094838451 seconds)
    (163/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075023094 seconds)
    (164/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.179859855 seconds)
    (165/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.220695886 seconds)
    (166/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067985123 seconds)
    (167/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.124158322 seconds)
    (168/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074970287 seconds)
    (169/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.165938865 seconds)
    (170/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.154705539 seconds)
    (171/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.078873398 seconds)
    (172/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067841928 seconds)
    (173/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06576166 seconds)
    (174/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074688717 seconds)
    (175/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082635974 seconds)
    (176/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.160113884 seconds)
    (177/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.076959113 seconds)
    (178/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.068392144 seconds)
    (179/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074634398 seconds)
    (180/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091550458 seconds)
    (181/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068515544 seconds)
    (182/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.197371011 seconds)
    (183/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.240709649 seconds)
    (184/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.070374068 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.093805576 seconds)
    (186/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.199644624 seconds)
    (187/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.067836151 seconds)
    (188/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068652103 seconds)
    (189/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.15039348 seconds)
    (190/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.070635109 seconds)
    (191/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.068748424 seconds)
    (192/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.068885139 seconds)
    (193/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.086982496 seconds)
    (194/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.068203322 seconds)
    (195/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148581896 seconds)
    (196/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.067350721 seconds)
    (197/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.067281876 seconds)
    (198/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.066595531 seconds)
    (199/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075242175 seconds)
    (200/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.06736578 seconds)
    (201/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.075741425 seconds)
    (202/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.202539811 seconds)
    (203/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.173250753 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123741034 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.153470953 seconds)
    (206/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065782954 seconds)
    (207/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078350348 seconds)
    (208/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.067131163 seconds)
    (209/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.068048108 seconds)
    (210/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067811425 seconds)
    (211/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.066061584 seconds)
    (212/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.075114865 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132936529 seconds)
    (214/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.073298173 seconds)
    (215/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074087501 seconds)
    (216/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.117028214 seconds)
    (217/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.070721631 seconds)
    (218/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.076011664 seconds)
    (219/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.2299621 seconds)
    (220/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.066193634 seconds)
    (221/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078463564 seconds)
    (222/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075260248 seconds)
    (223/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.198337183 seconds)
    (224/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.06774013 seconds)
    (225/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069065245 seconds)
    (226/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.06931467 seconds)
    (227/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070321297 seconds)
    (228/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.084801412 seconds)
    (229/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.06645283 seconds)
    (230/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.23619971 seconds)
    (231/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.200549183 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090180488 seconds)
    (233/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.079270519 seconds)
    (234/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.06769729 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077186907 seconds)
    (236/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.067249635 seconds)
    (237/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111831384 seconds)
    (238/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.143802351 seconds)
    (239/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066935855 seconds)
    (240/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075648169 seconds)
    (241/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.075302498 seconds)
    (242/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067598429 seconds)
    (243/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074001697 seconds)
    (244/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066791315 seconds)
    (245/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.066658118 seconds)
    (246/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.067223964 seconds)
    (247/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074453185 seconds)
    (248/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073732099 seconds)
    (249/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.067507042 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.07420437 seconds)
    (251/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.066980302 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069979464 seconds)
    (253/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141159152 seconds)
    (254/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.067436654 seconds)
    (255/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078751128 seconds)
    (256/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067359858 seconds)
    (257/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.170242294 seconds)
    (258/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.067090492 seconds)
    (259/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065689319 seconds)
    (260/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.066452773 seconds)
    (261/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067349316 seconds)
    (262/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.066939885 seconds)
    (263/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067105796 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.06698615 seconds)
    (265/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068924919 seconds)
    (266/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.147524024 seconds)
    (267/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067552221 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066952217 seconds)
    (269/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.06555272 seconds)
    (270/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066638517 seconds)
    (271/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.073040475 seconds)
    (272/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067695572 seconds)
    (273/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067830086 seconds)
    (274/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.073813446 seconds)
    (275/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.163950559 seconds)
    (276/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067610717 seconds)
    (277/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.06628951 seconds)
    (278/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.067211951 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091960568 seconds)
    (280/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.06750252 seconds)
    (281/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.067165969 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066680061 seconds)
    (283/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065292375 seconds)
    (284/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.152480105 seconds)
    (285/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.069328831 seconds)
    (286/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.082774769 seconds)
    (287/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.076367383 seconds)
    (288/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067706137 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090505867 seconds)
    (290/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067727404 seconds)
    (291/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.170844963 seconds)
    (292/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151679796 seconds)
    (293/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.132839203 seconds)
    (294/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.066573785 seconds)
    (295/341) benchmarking ("sort", Float32, false)...
    done (took 0.138014887 seconds)
    (296/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.066948703 seconds)
    (297/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069651713 seconds)
    (298/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.06687352 seconds)
    (299/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.171467819 seconds)
    (300/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.068483823 seconds)
    (301/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072766087 seconds)
    (302/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072553974 seconds)
    (303/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.06656043 seconds)
    (304/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067091199 seconds)
    (305/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.07248923 seconds)
    (306/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.065512642 seconds)
    (307/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.064353074 seconds)
    (308/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.149104672 seconds)
    (309/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.065435919 seconds)
    (310/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.064742657 seconds)
    (311/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065767597 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.084434047 seconds)
    (313/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.077084153 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.084313082 seconds)
    (315/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092163013 seconds)
    (316/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.123783615 seconds)
    (317/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076589682 seconds)
    (318/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.06600825 seconds)
    (319/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.064987608 seconds)
    (320/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.0655545 seconds)
    (321/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.072608279 seconds)
    (322/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.065214942 seconds)
    (323/341) benchmarking ("sort", Float64, false)...
    done (took 0.135296813 seconds)
    (324/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069027106 seconds)
    (325/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.065305689 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.065230701 seconds)
    (327/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.06731853 seconds)
    (328/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065883537 seconds)
    (329/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.063992604 seconds)
    (330/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073146305 seconds)
    (331/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067521351 seconds)
    (332/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.065988449 seconds)
    (333/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.065641567 seconds)
    (334/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.068394699 seconds)
    (335/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.068723482 seconds)
    (336/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.065285265 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.120281311 seconds)
    (338/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065969793 seconds)
    (339/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065285837 seconds)
    (340/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067187457 seconds)
    (341/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066925342 seconds)
  done (took 36.873093449 seconds)
done (took 38.47233757 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.099444765 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.082174718 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.081696604 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.077836654 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081609736 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.079695111 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.080376703 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.078772897 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.079929999 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079550071 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.079673342 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.067533184 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.075741809 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.082899277 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.076268006 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.083081963 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.07998078 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082767807 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067659575 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.082319669 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.094434362 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.079235811 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075884296 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.081331966 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066904381 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075903561 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090151724 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087871448 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.074121391 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076403169 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074227649 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084799835 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074762169 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073513108 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076019579 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072955411 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076467789 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074025007 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089448331 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072786352 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067195197 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079258765 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074351482 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.075534823 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.07545092 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.079122143 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072182477 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080420747 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.067552672 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.078440345 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090201689 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072042468 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073966054 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.075111754 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.072263901 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.076365872 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073449593 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078397269 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.072565663 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078124037 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077879636 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.075298383 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.067030954 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075714434 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.074404873 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074678519 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.066158741 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071888451 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066703258 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066947926 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.06646631 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075925505 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073776212 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071978129 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066284879 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066914119 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066232593 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.079082866 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072789585 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076544881 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.067562564 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.072406893 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071844587 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066592257 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07214074 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078174024 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065860562 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.067133036 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.066247114 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080748431 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073011453 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06633976 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078146362 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071366216 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071426857 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066359924 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066003362 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071191153 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073976467 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066360296 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065667044 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071462637 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071863539 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075445321 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067378839 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071334927 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071606204 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065608256 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075743581 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073925716 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075205319 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.07976904 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07509826 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078907769 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066800497 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065877777 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075836864 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066965348 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071808466 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074375122 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071708693 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074580975 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066538431 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065933125 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072087647 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073156672 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067110326 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067031407 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066912232 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.076025519 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.074249354 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065824315 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066392649 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075227011 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074933564 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065569693 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065467464 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075560271 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066540692 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072224646 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071765458 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.07474376 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065819564 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.06652766 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.215985509 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067072069 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066840789 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072369976 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071701983 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067161743 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075711744 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072794498 seconds)
done (took 13.166906175 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067852832 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106778966 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.073977505 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083110155 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078840422 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068560145 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070964012 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.08334007 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071072696 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086716178 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095371053 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088807068 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093664808 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.06614935 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067173029 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.067999739 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065780375 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074708845 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.08212431 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090746389 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095662069 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.06675353 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.076248169 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083465979 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077699173 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.08347012 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067993009 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068155942 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070127295 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.123619767 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092916205 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.067017042 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067751525 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080647193 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.08134612 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073890438 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067714735 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071176242 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070865506 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066985679 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.06963557 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081584329 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071223849 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071225214 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068539888 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068400439 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067806119 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070530241 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080759463 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070673709 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075351148 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.07901713 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068635682 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.06804908 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065525097 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070948416 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067270744 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068097156 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.06795425 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066886122 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067469776 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069808479 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068281497 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067724127 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070277795 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069741055 seconds)
  done (took 6.636065616 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083864482 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093082349 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.082426432 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082216563 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.06705608 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067648796 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.068131563 seconds)
  done (took 2.266444524 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068375876 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075743311 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.08013042 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07983245 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089950931 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077438256 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.06829083 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099381328 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.06677338 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076607003 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083322081 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080689459 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.07044743 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079417738 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067837394 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079193444 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068119873 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07434564 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075191722 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080431545 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071835905 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097618193 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080821854 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068001047 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080840285 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075803904 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070121524 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068003889 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068235091 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067342067 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067077687 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089857323 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.074060226 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080007172 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06815261 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.06651041 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071923013 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068649584 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071744744 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076274867 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.07133292 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067387736 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068086596 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067303379 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068527313 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071624933 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.06866235 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067135743 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066856564 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075095486 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.06730527 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073739333 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069646947 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072484611 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072639172 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07186461 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074620416 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068130456 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075335396 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07317635 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067398813 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080275542 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079349851 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.0710837 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078767077 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076039655 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074108801 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071070016 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066851325 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066623765 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068198773 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079149364 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.07119197 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069619718 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068522006 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072619783 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071293712 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082572488 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082499356 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080551836 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069653019 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067499061 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071785394 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.08228616 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072350574 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067301916 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068250461 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066780006 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072613574 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067723796 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.07243004 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067496927 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074478828 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069912477 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069505636 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075312581 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067578247 seconds)
  done (took 8.822498864 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070627919 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069886058 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.069064016 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.06890997 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069556494 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06898099 seconds)
  done (took 2.175227788 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091317137 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068282664 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079863454 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068803805 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090642021 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074957306 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074449322 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070090189 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084169722 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078200764 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.07483932 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076800191 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074175518 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069863052 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074107023 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06923057 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.074045597 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071070288 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077824036 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070351249 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.08424283 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069989221 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070300711 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.07984469 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070841382 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068807775 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068989041 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078288669 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.07758733 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069376848 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069193535 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071177577 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07630899 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069334024 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.07422447 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07623453 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067669909 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073591773 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070136783 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070719688 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075721554 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07014214 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070262782 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073382545 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069269482 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076865166 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073585189 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07118038 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074269253 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073191501 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073155951 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068575976 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070742823 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073182716 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076451694 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069722503 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073602475 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074447326 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069116258 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076321834 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068191107 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070848108 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069609106 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070291107 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072404367 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073284686 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076555827 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070313645 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069967058 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.06841686 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073415737 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.06814906 seconds)
  done (took 6.993080236 seconds)
done (took 28.599360109 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.547109766 seconds)
  done (took 2.244592797 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.589434568 seconds)
  done (took 2.328009658 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.858297284 seconds)
  done (took 10.594433435 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.308249218 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.330497497 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.733911794 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133615695 seconds)
  done (took 3.282933321 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.756243162 seconds)
  done (took 2.506898348 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229491148 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.221115963 seconds)
  done (took 2.211800597 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.338084719 seconds)
  done (took 2.080064938 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.14618101 seconds)
  done (took 2.883585176 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.229479714 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160783156 seconds)
  done (took 2.139480381 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.541208381 seconds)
  done (took 2.285913728 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.268994303 seconds)
  done (took 6.019904228 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.235350779 seconds)
  done (took 2.019254728 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231268433 seconds)
  done (took 1.981425771 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.052710545 seconds)
  done (took 3.794006096 seconds)
done (took 48.120951681 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.08605181 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.088217346 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087662595 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082893827 seconds)
  done (took 2.06129284 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075687777 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071662647 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.07505565 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075092998 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072655281 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073986062 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074670401 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071264828 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072685893 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071445055 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070043995 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071382167 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.074245661 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071552401 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.074356385 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074964237 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071179082 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071249929 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073445788 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071214611 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074323222 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071539037 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069770699 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070959537 seconds)
  done (took 3.489078865 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079485017 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073723837 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076427842 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072438302 seconds)
  done (took 2.055037061 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078544633 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077997654 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087117058 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091569925 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078105436 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077953519 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085316898 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085751778 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066838613 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.089099753 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069251135 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067922124 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068084906 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086464503 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084131821 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063978483 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064936518 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07830019 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077635506 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080824458 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.070027325 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067047045 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078265565 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077792368 seconds)
  done (took 3.605065201 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080604094 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067088845 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079727406 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.09200154 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093254144 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066789634 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080219817 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.094144152 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128468236 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06663357 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072910612 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066946789 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.106604032 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.067049736 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081631542 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109381485 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112303337 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070493471 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099349568 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066483258 seconds)
  done (took 3.46241096 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077189334 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070638594 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.07151987 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066707632 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078080328 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073951649 seconds)
  done (took 2.201881276 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069604166 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068980378 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070954448 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073256484 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068748953 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069004028 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068399235 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067192024 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067430389 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068132858 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068103856 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068560587 seconds)
  done (took 2.584066954 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.156366849 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070148225 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071373356 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067604642 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.0724073 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068202881 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.0830011 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069883924 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085929126 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067782134 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068200002 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070167604 seconds)
  done (took 2.708814151 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102224353 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102152161 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146790919 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118259835 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117289799 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097989634 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119775046 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.0954153 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160955032 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138282274 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118049392 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094172167 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087750752 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.07069788 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100296601 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10225122 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136634085 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073701483 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113959144 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.164773577 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115440538 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.114135944 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122940739 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1179877 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08163973 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123021465 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095157105 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102944333 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124928197 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110043049 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119755229 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098343745 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072978154 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072325256 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1501447 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101292526 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107756284 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094313608 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101348894 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089440603 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108209458 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070583938 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087765122 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.108016976 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085337164 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118067024 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089088499 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104265745 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082511256 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132753562 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10825959 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100003108 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087018342 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105125595 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130714775 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096122478 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111830255 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108011646 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083191842 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.118960909 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101473131 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.256899309 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095931688 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082709625 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.162314126 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09116144 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113822586 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114568689 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083549779 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091418365 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104354992 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132028761 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107874439 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108405182 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115776556 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096319394 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111423074 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093162668 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129891035 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094006835 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074219747 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105929961 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129929147 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086613176 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101882677 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130561437 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092998765 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077957247 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.09332631 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119555039 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081985421 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.096939535 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070831596 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098387194 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107901283 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098224986 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113453308 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107486712 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079262792 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125350774 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109834484 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073640883 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117992672 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099718943 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153279829 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096287357 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077131237 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100663934 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09384994 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150115006 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086048589 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081034443 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099362881 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141936742 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095417656 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171215935 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097254697 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129834512 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098193522 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088428903 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076811882 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.09077414 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103044228 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108798881 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102364582 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088809995 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077426409 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087536151 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096147774 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.255329837 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083469565 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116120527 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103571878 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076909272 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089927865 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080642983 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126182638 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079395802 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109946299 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12550471 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080195624 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106624314 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099216338 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109001859 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098453259 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109357392 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140885194 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116707523 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081812373 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085991232 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109709589 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143448596 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.115584187 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086589123 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077773611 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10054254 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11206986 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098832869 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108148277 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100458705 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109518518 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099579654 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141941216 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118473519 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092313708 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096333937 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097454256 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124718195 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077901339 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156673284 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095239132 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119159094 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085932953 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141860828 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114541144 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090804327 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085625643 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096857206 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105735118 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106084521 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144192491 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096848346 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073365261 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094132679 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133062411 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077581371 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10079688 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091230997 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094467267 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120072083 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084590319 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082059897 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069308128 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102028201 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135567364 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070415842 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113374388 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.281734996 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105026776 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.106560633 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.072482968 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101176789 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139723733 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106711522 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140947551 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117601256 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101884548 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119500821 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.09998531 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106137446 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081151324 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.127111227 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136555786 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097933972 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091458009 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135695795 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118684693 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135350244 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097619542 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115751475 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106063347 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101948847 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104640396 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101220873 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145415027 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121694576 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125634263 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086831659 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107283015 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110199284 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137259216 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08362902 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117509132 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076394203 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112562653 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.07868868 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108275406 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080762013 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112545174 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080338292 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101067827 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070737598 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075265068 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142432448 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113431363 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090355618 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087258502 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137294634 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132456159 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.08173158 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102662998 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104911008 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101564633 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10136318 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108345579 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085593103 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094791518 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.275342966 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08113438 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083384285 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100375408 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095423412 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108380285 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085701733 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076270408 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137165087 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106045664 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096286158 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078864913 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095374146 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.12257564 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090944401 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089943527 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106509075 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104851999 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141588459 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091393143 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098828335 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119015391 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081756611 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093661882 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070730685 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085944933 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077443813 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.11034526 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077571323 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109550985 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070063251 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131578256 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088029368 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093700919 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104126745 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101006298 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128842175 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092701097 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129454137 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09083893 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103084413 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109405467 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095400655 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081284862 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104700066 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096735714 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110474551 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096959143 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106467209 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110887713 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09502629 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142104813 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091407773 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121162159 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106708739 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10857128 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105159492 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11843859 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138744282 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113190947 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112805891 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075987399 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083839752 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107055359 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101303942 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145921714 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102183903 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.07294326 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086257301 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091186713 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096058923 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.269962392 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084137294 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143859805 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089116663 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088857725 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114588839 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091005608 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099645068 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077677437 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097125438 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102632361 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095279144 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096517321 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109108953 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118149351 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11534016 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.134065621 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100187642 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.094200082 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120235338 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112106333 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112425811 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087334503 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088220681 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125160375 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103861069 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129726825 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101564132 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095837072 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103642124 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091897298 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100629699 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097398402 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110438033 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081601748 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077778125 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069401655 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.074108984 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118728775 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109403562 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099728823 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099987627 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073588775 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104603058 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100907895 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072802286 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089114807 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095047313 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100334503 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.08478762 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093588884 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115640133 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092741608 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104679784 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101460321 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129313945 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101215253 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090132243 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144489703 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128638218 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089401073 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094402664 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073075852 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080351947 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102936205 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14570673 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11863451 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078187784 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084139513 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.242653968 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088858313 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073837864 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088826104 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.09130564 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105475451 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094057537 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113882245 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105205482 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07740155 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104659259 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099031248 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093871464 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098124278 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103417437 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106075451 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.125026961 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10176057 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098955937 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077545763 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081682127 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076867022 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080648122 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103552889 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078382021 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077345518 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130739976 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.09239294 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106049971 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109691016 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086543267 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077108129 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134113721 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.071161322 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135475031 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072882968 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083782945 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082109023 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080565378 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094979666 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10664733 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097509687 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114600961 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106421562 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106055917 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112126595 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156465856 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07203289 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144673609 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076906779 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076516907 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077444379 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115636025 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090689268 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105846503 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141275465 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090682607 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094143297 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078174007 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130023906 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099177445 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104553011 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084061707 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080038931 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129118721 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080788302 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.073034666 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088064248 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112820723 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073681421 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105050862 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.250487539 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081777699 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114954253 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631957312 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09206096 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077632176 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090510754 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143984926 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129952522 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0847694 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110160711 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120451023 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091014995 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085593666 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109376409 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185010572 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075511718 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096443452 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105264768 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099834441 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093489941 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093062489 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087681068 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.092940228 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087606877 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080992536 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108921137 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089358494 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093024499 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098933659 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084654134 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081500302 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132509263 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105493709 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083651901 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089734034 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102216059 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089192483 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092039309 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070733053 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11485862 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092775947 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10234654 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092578846 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108837244 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121213795 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090260025 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112962758 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089730793 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109857326 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085909572 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.07928099 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102918623 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079237207 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079121201 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11832029 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085376544 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094032361 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104792104 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096395914 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115409447 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118879314 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112366025 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099146884 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0800901 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087444319 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.089333255 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076614665 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078716165 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074996194 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.07706358 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.273399456 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088202399 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085770728 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116805834 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084113591 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105196632 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.10238034 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111151215 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084941273 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102904387 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110259004 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09190076 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10500824 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101887706 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129375976 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146493119 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100318613 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124726227 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134937021 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078209104 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076990134 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070289086 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115636218 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080892969 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082199508 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082539729 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134731232 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.08342081 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095955371 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.231889146 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081602132 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083849013 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098012574 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071580608 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084558444 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109482379 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086357103 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081924338 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099819141 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08473813 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118895073 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112625853 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090760031 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084298978 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082206231 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095083687 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105835643 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129789309 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091033843 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076517158 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107925214 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104800735 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12485829 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074561097 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082593773 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131369254 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09316422 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104812796 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081529861 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121397668 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133831337 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091126525 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13531214 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072636478 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084433965 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090503657 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126630987 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076083834 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089305336 seconds)
  done (took 65.495849676 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.152765224 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143711581 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.08422852 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.099386781 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188456407 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.19880995 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120601681 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097358681 seconds)
  done (took 3.034259797 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.06972187 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084643893 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082496455 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.208899422 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109538832 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.069014439 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074867967 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083453358 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068835779 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068535265 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.102540481 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068938143 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068966936 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.368540361 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067516668 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072649661 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068648063 seconds)
  done (took 3.636772856 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.327464686 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.39564314 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.22273248 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.632017559 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.140857473 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.488040279 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078296278 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083651561 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.632220503 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.378187463 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.132301321 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.089037256 seconds)
  done (took 18.510199149 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076781062 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.080308525 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079873143 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076193483 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.07611769 seconds)
  done (took 2.316095571 seconds)
done (took 116.92791205 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084839832 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.17320758 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068741682 seconds)
  done (took 2.186756201 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083717065 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.081922114 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.081898245 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079796789 seconds)
  done (took 2.244496442 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076275646 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077547567 seconds)
  done (took 2.061327125 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.224998231 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176761677 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091590525 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083602038 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.08122009 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081703261 seconds)
  done (took 2.164765002 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073456914 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073264295 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073416823 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073734657 seconds)
  done (took 2.199221852 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.069307632 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067919527 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069694066 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072641834 seconds)
  done (took 2.186772587 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087051798 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084252299 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113569874 seconds)
  done (took 2.191491904 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084359053 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084758319 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079740963 seconds)
  done (took 2.164054413 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110460263 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098348904 seconds)
  done (took 2.121330787 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081605165 seconds)
  done (took 1.996881199 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091126042 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098714232 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.142676633 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.10840254 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140888105 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127225352 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078174571 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078846077 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074883011 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073799212 seconds)
  done (took 2.925337388 seconds)
done (took 26.929166187 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080160574 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.368615914 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361511345 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088062188 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672591093 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.35845013 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.002125631 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092211652 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101395438 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069861546 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087154864 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650370187 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.993179989 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.336220507 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.977517124 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.325121145 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651328567 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069999943 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069487653 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06998552 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.986197772 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069082778 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069233113 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069593685 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650676714 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374854189 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070715752 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.3254738 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069900932 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072077101 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357626387 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070758542 seconds)
  done (took 16.492315499 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.072304307 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123962487 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07392844 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086266131 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072121981 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071415206 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072689561 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070328178 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.111789559 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069991106 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087236991 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069027759 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073434521 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071152159 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088958548 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069690548 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07114925 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073814914 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070320133 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070415016 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08817144 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06946919 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.07033028 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070607486 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070020646 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082766859 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070370363 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069474823 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069773335 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071887124 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073199466 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071272809 seconds)
  done (took 4.373906298 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123591772 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127737461 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075393049 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110520624 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120029566 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071563865 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152467365 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093260991 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115892866 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070456472 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087446201 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069994414 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105318845 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071365704 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089839334 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.0700412 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071104651 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070951048 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069514656 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070196234 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088403459 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069384899 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070058583 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070181825 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069914177 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084793418 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070656817 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070109389 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069393865 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072217171 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074072605 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071026271 seconds)
  done (took 4.643015832 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.07176768 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073309732 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081734905 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082526971 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068209457 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070896716 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071995905 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068285215 seconds)
  done (took 2.520399897 seconds)
done (took 29.955387476 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080735815 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070107562 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073086062 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089162553 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076377155 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071951255 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066241791 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076052489 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072907862 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072712792 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074777216 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06868432 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072023697 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066446053 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073505126 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067749075 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.074316326 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071357059 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071892181 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073064779 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069978515 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073241325 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.07610223 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072227272 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072163843 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072138973 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076781751 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073246404 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068148389 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070318963 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069711933 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081935101 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074403515 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073831616 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067329818 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067757004 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071356044 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069430638 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073936922 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076422778 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069615442 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076260064 seconds)
  done (took 4.952403667 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.090342443 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095390707 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.08824949 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083821276 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.109042312 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083727318 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091452148 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080823087 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.07932681 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091639941 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075356379 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080963394 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082522423 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076854923 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079988605 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07613662 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081518077 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075787207 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080312929 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080071087 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.09204438 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072947024 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080390076 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081318094 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.07510538 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081254565 seconds)
  done (took 4.106357263 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074626044 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090386398 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093980823 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143564435 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112038654 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083920861 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084333092 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098763141 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102281133 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069977267 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073369698 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095422994 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098189782 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076737738 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107823113 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087904293 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081917751 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071534876 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075998346 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.10397844 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092226416 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087727468 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102418162 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089150559 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069130016 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078655948 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076261778 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084601194 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077575939 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081833386 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073402209 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073297941 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069922742 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.08221014 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076426886 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.068306712 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091515786 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081795705 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084891197 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107679598 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078697366 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.07095262 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099734736 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134764774 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068803548 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071837509 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.0731532 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081803226 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070603037 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099207571 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088037479 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068777106 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088034443 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070478715 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070916231 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086334168 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.07115127 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071565727 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081695672 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075270255 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090086057 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07449892 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090855298 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068922644 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.0801213 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071148942 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071311181 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067863498 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105594285 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076661381 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.122216666 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070376969 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.06752049 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081555699 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.0808295 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076536387 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069054144 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088821665 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.08110755 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07305604 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080784446 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072197628 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072491288 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104698592 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.067985902 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067825628 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067544487 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071699867 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072686436 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069929125 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082645267 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068709064 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.07215731 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085097359 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069263282 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069695941 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071685287 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070331993 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069059777 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080106354 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072781242 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070920685 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081804737 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070819341 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072387042 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084098145 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078982736 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068757541 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070473433 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072199867 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.07087504 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073498419 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072790421 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071240344 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076006648 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076877001 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074701437 seconds)
  done (took 11.396508227 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.165810029 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155809534 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070446717 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.151296285 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077983347 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073820299 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.151939335 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.089057595 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070335394 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071235181 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069298206 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097807316 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093108201 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104571404 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.07425061 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070350284 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095030237 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103380098 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.153759816 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.148202861 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093469751 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077392937 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071778234 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071130357 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070980337 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078940455 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086584636 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077841421 seconds)
  done (took 4.697286618 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077764707 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085514402 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074170704 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094159158 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088668139 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070266044 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072352326 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071185958 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087050024 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076631864 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070055783 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074158352 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073625955 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.07058206 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.07044495 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076629578 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076767644 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069163325 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073721103 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075037806 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080259076 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095592734 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074022378 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069824069 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072663766 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.06951489 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076049978 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079089772 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069913369 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100045273 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067261028 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074217791 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083922069 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070852133 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069439253 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070330765 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070016742 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070177444 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070430972 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068726838 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068183253 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075064899 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068557367 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075726049 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084228681 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077654014 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070965415 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.07552098 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072675399 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066813285 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073552988 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073112275 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072428531 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07798727 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073311067 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072783093 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070728637 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099963499 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076131021 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069511048 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068748808 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06805975 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071509731 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077597102 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086407315 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071498325 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068627411 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069821526 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074835722 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083713813 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069234824 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.07471333 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067108775 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070443093 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071896213 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072348238 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071681214 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068499869 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069529314 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.07022332 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070349491 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069819712 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069013583 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072457744 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067851909 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068020884 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070167981 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071791694 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07644723 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069057316 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072546902 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070921105 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068393348 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073176667 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075052954 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072577559 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089411934 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078203908 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070428019 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067831919 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083844503 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071907643 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069278635 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075656229 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074060556 seconds)
  done (took 9.76153474 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092686981 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071563437 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090154946 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096251442 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080795198 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075641283 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084372535 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070720682 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086130997 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069377693 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078692689 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068493834 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083050674 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078813374 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071083986 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.08039307 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072981153 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089951435 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.08477757 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068429455 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078992441 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082002602 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082406526 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087796801 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087208562 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087910909 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081502022 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072340781 seconds)
  done (took 4.248167157 seconds)
done (took 41.089000137 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.026785072 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.187599961 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.012919251 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.229667897 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.070499237 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.241159422 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.143533782 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.013970683 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.152517542 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.035002225 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.322362481 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.44684215 seconds)
done (took 69.888146017 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.015841473 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.15069433 seconds)
    (2/2) benchmarking "String"...
    done (took 2.224423905 seconds)
  done (took 6.31231391 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.60636487 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.007017709 seconds)
    (3/3) benchmarking "different"...
    done (took 2.058310764 seconds)
  done (took 8.607250892 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.10425178 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.665649824 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.267211813 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.007010794 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.011771477 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.406068589 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.81790208 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.475295121 seconds)
  done (took 33.588737246 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.199619518 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.227851169 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.749245703 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.780380474 seconds)
  done (took 16.945274177 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.608020131 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.269842754 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.268950265 seconds)
    (4/4) benchmarking "different"...
    done (took 2.267225751 seconds)
  done (took 11.41325917 seconds)
done (took 89.01615583 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.009542847 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.112538778 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.012746557 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.153285809 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.030015073 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.042170089 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.01427442 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.045834792 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.009290427 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.013587408 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.430842072 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.013085049 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.007976235 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.045553952 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.010504304 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.029065192 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.574080862 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.016241786 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.039453593 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.498156092 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.482341396 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.014778413 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.020997218 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.058687706 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.197700393 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.051633932 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.139276436 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.018354539 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.623539833 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.0251429 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.190390963 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.015500634 seconds)
  done (took 211.885803389 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.013536148 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.967911803 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.049598933 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.050730056 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.643929494 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.207641768 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.167806007 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.683786275 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.016913707 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.029195265 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.189558535 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.017340987 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.210996126 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.96665159 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.009429081 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.116463158 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.153791516 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.208084019 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.013063673 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.203714177 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.019943395 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.047872971 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.011951001 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.164900335 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.016490669 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.034689246 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.014737069 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.026275336 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.201945599 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.129735195 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.043934982 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.022577702 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.218271304 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.884934898 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.015702058 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.042372496 seconds)
  done (took 178.761390745 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.197070654 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.023611616 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.079112686 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.151304642 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.76186821 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.748429266 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.016545614 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.014340981 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.015937596 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.02296805 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.017170134 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.083442699 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.28007747 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.028704036 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.016424946 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.016770152 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.394430376 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.021684668 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.016359634 seconds)
    (19/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.016914911 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.016516456 seconds)
    (21/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.016702336 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.077978924 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.390816745 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.151850422 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.019664001 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.034264916 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.153142568 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.025216457 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.018450822 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.152638206 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.019664802 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.096726822 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.154614986 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.033631225 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.098585784 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.023856171 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.508999591 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.017772468 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.017318955 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.020066173 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.080671142 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.017459469 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.110411944 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.104052048 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.013972234 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.032556515 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.20662627 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.695695775 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.022110489 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.016838705 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.017835348 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.0174652 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.017819211 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.563241503 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.020714124 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.042254174 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.644003016 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.024082405 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.019505189 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.019315776 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.018765624 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.019656252 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.026376625 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.062890925 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.833840765 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.714812809 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.408620184 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.827290866 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.020786803 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.654846161 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.082698546 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.020993426 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.099125536 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.019973443 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.019711538 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.020352572 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.019984664 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.11640945 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.108243447 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.020905995 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.155952504 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.024605761 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.020246149 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.158906438 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.35468512 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.022650351 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.006477374 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.081871805 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.018216817 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.02171589 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.024435244 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.113725109 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.018808661 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.021208802 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.016751727 seconds)
    (96/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.018083084 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.124473298 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.017896275 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.530546208 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.240119361 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.091865264 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.265455199 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.261684139 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.022922642 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.01987837 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.033783077 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.018648263 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.021556993 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.036522835 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.019295779 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.021447632 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.018334119 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.02347162 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.023475802 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.021994205 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.022174434 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.036254202 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.019792634 seconds)
  done (took 437.512495513 seconds)
done (took 832.349868001 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.633523254 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.71321266 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.61202891 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.641768334 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.623407865 seconds)
  done (took 15.170390208 seconds)
done (took 17.117856067 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.053492246 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.038203828 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.025283421 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.083713969 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.047536168 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.033593092 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.070899468 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.069122221 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.052755195 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.033428504 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.08053544 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.037602145 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.055096977 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.055074142 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.108768607 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.061564166 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.040784695 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.032403898 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.09079143 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.036635036 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.036126096 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.038421107 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.037826595 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.081683472 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.115297323 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.04843304 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.034885447 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.083467327 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.046224108 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.078853921 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.092461918 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.054936843 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.071033981 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.106638577 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.091258805 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.116017142 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.04389696 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.110479545 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.043602928 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.119643133 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.091365188 seconds)
  done (took 86.595506643 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.033688354 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.168245487 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.238055799 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.06314597 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.03383834 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.247574481 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.089085647 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.171931896 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.162333003 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.258590583 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.248591327 seconds)
  done (took 25.672054742 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.031131511 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.167052757 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.248672139 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.065441849 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.054152964 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.243077058 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.093221402 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.161422794 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.167703147 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.245324929 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.252737643 seconds)
  done (took 25.690560734 seconds)
done (took 139.906518843 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.402340892 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.053838154 seconds)
  done (took 6.402193927 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.02673752 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.043256879 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.184660542 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.029661991 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.030411092 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.027499997 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.029278029 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.030705007 seconds)
  done (took 18.34852078 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.028075973 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.023433411 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.023307028 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.027450246 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.027630379 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.025396649 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.027644927 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.029175548 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.028637236 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.026698304 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.027347817 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.029560843 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.028950383 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.027504986 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.026411647 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.030240674 seconds)
  done (took 34.389588564 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.029690866 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.030925568 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.016866377 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.026389997 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.014907552 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.031422706 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.032829491 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.030081164 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.028377853 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.029826707 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.029507404 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.029836201 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.029831338 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.032404654 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.031015481 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.02991696 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.029030817 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.03103546 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.031445612 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.03093288 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.030608109 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.033240101 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.036133122 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.030877995 seconds)
  done (took 50.660394576 seconds)
done (took 111.76140422 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.208206011 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.809129539 seconds)
  done (took 8.972966356 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.034113726 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.032974863 seconds)
  done (took 6.091481211 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.032169629 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.032858906 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.03305172 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.029520781 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.029743182 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.033386971 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.032759152 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.030518147 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.033302803 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.029177935 seconds)
  done (took 22.273120874 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.032740152 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.032913351 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.031457406 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.031864293 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.031305054 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.033913235 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.033789639 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.033028675 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.028221019 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.033009789 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.031378817 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.024523518 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.030361514 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.02617188 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.032410372 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.032956896 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.035438444 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.033016237 seconds)
  done (took 38.528776986 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.032549994 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.035826458 seconds)
  done (took 6.024806782 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.034616306 seconds)
    (2/7) benchmarking "second"...
    done (took 2.033085822 seconds)
    (3/7) benchmarking "month"...
    done (took 2.034206587 seconds)
    (4/7) benchmarking "year"...
    done (took 2.031767527 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.033521179 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.035718023 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.033381508 seconds)
  done (took 16.192514756 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.034219423 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.175452497 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.229965699 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.654309554 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.035171123 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.033977346 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.887517423 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.036236992 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.040542818 seconds)
  done (took 22.085644771 seconds)
done (took 122.124918597 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.873109873 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.036189554 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.259172804 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.105336173 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.1079805 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.379142303 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.060961261 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.570734876 seconds)
done (took 44.352950436 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.102943221 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.032154456 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.060997548 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.064427027 seconds)
  done (took 23.11690036 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.036480399 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.358873536 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.052368446 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.034958493 seconds)
  done (took 23.458179177 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.411994825 seconds)
    (2/2) benchmarking "read"...
    done (took 2.376523146 seconds)
  done (took 6.754059091 seconds)
done (took 62.396371749 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.037406118 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.035991553 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.036585409 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.036919733 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.037101824 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.034686048 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.035056032 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.03735938 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.036568307 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.035291834 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.036904956 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.036146724 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.039019279 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.038128543 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.034468799 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.036672449 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.038825024 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.039255087 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.037912557 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.034652287 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.035553734 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.039562504 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.035725455 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.038132889 seconds)
  done (took 50.845491934 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.039550857 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.037211938 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.036655506 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.039641913 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.039685863 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.038454346 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.038653816 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.035482383 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.038701558 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.038158814 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.038371395 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.038738222 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.036976791 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.036382131 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.038884489 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.037953242 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.036445923 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.040018252 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.039814378 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.02761114 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.038316539 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.040026125 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.040678274 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.040416294 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.039255079 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.042134877 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.039418158 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.040357442 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.041375996 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.039871319 seconds)
  done (took 63.116965863 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.040727166 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.040975164 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.040525548 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.040474216 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.037523257 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.039997796 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.039738178 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.04036707 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.041164911 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.039124003 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.037927226 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.040348784 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.035625473 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.041284486 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.041957646 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.041695589 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.04039403 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.039049069 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.041165291 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.042591708 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.039620623 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.040860005 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.04307904 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.041026205 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.041654096 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.043163228 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.040967496 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.042850074 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.038616837 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.038773697 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.043433775 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.042268012 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.042229453 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.040875732 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.042199079 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.043307855 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.044513605 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.043849716 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.04099412 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.043398397 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.018684489 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.032323104 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.043657941 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.03973047 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.043306 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.041282352 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.044144631 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.041755953 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.042269939 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.041539148 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.042770044 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.044320013 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.041038783 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.044815698 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.043299154 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.044967291 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.044193783 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.044439404 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.04199634 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.044545534 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.04473063 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.042938249 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.043582556 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.041072454 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.040486069 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.044210804 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.043564055 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.044054656 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.042287595 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.046896131 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.042462842 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.04397476 seconds)
  done (took 148.954005536 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.046272422 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.046281615 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.04445292 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.044923693 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.043802693 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.044674464 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.031841652 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.024670631 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.045140226 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.044935755 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.045481785 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.04552696 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.045053523 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.044008487 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.045101269 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.043998068 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.045938524 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.046124532 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.044585138 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.044053629 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.046965276 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.044676531 seconds)
  done (took 46.929677618 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.034165611 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.046003245 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.034227468 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.044398395 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.045477589 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.045699215 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.046556527 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.046386844 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.047816262 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.04752114 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.042722751 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.047265963 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.047440221 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.046323175 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.048994263 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.046933807 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.048138481 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.047126337 seconds)
  done (took 38.784381888 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.045379614 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.046776787 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.047303146 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.047453093 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.049089097 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.045568471 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.047743064 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.047963235 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.047791388 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.046350737 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.047820876 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.043711227 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.046911004 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.045194943 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.047896605 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.04868122 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.047923237 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.043175368 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.049066158 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.045487592 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.046980923 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.046530508 seconds)
  done (took 47.001377979 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.04757784 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.048091915 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.044804731 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.049573806 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.047156216 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.048957721 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.047913172 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.049329231 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.048071515 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.04596813 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.050891347 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.043828588 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.048036586 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.051518989 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.049781722 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.046395781 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.04952418 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.048012034 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.050366418 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.046223529 seconds)
  done (took 42.935875886 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.050465144 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.047686353 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.048509805 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.051922541 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.048465203 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.049746584 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.051092363 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.048575415 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.047692955 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.049627694 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.049592674 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.05022283 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.050179147 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.04825654 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.048220332 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.047563482 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.051434426 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.052175172 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.051345573 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.049319869 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.052030478 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.049595512 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.052502878 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.052227425 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.052158766 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.050219469 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.051719725 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.053272699 seconds)
  done (took 59.379042793 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.050275604 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.051532041 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.049908913 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.049477921 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.052741343 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.051057825 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.052448325 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.052523072 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.051651271 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.05189328 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.052120064 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.049804731 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.051902987 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.051395712 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.050714569 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.052679457 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.05076731 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.050083778 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.047672985 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.051404509 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.050451348 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.05315033 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.050587322 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.049450937 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.049989806 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.052228865 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.049208893 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.053096954 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.053370404 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.051398198 seconds)
  done (took 63.510863316 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.072144366 seconds)
    (2/2) benchmarking "in"...
    done (took 2.07070342 seconds)
  done (took 6.118833854 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.053991564 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.054029386 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.05441079 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.053834325 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.053885969 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.053889965 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.05420998 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.054446996 seconds)
  done (took 18.408453983 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.053510134 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.058234454 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.053974506 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.052539145 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.05460625 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.062338024 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.05393728 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.053832547 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.057109691 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.05597286 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.059675691 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.057135388 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.06486647 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.046416338 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.05465189 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.052671055 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.04957643 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.057471307 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.05226743 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.053348327 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.059399751 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.053575485 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.056962254 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.054840586 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.050845302 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.057279379 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.062614775 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.054570657 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.055851096 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.056378487 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.06204678 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.05155972 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.056522086 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.058636268 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.05772394 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.056146643 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.060744947 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.054860789 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.057826919 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.054124774 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.056160758 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.058389778 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.059824454 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.064431776 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.056131416 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.055358301 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.055535787 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.057517003 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.055311363 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.059856138 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.064204453 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.060188341 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.057313533 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.057051583 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.059185421 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.052368129 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.056397233 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.059948346 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.062971732 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.064290375 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.05928362 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.081026862 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.069005173 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.056857064 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.058050023 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.06685639 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.083763225 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.054796954 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.060315455 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.057853605 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.065392305 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.055205964 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.054935483 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.054661386 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.074123151 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.066336642 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.057900587 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.05831765 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.057432571 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.057691881 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.057283876 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.060400213 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.055716605 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.058392214 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.070948056 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.087985941 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.054699122 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.057746406 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.059079097 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.059490972 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.065702141 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.059471534 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.060595655 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.059350907 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.053768613 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.061419588 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.058480771 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.055049781 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.056245398 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.067196156 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.05746822 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.058353838 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.060033887 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.068006812 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.058047253 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.057789126 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.058629294 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.057977007 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.066320532 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.056814322 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.052749473 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.057444124 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.060251182 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.06247416 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.053236366 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.060763154 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.067904667 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.0667737 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.058667739 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.063504379 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.064310891 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.056527601 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.061579193 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.073861301 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.049337885 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.054910677 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.05629839 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.063229855 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.054853879 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.049708895 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.057369421 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.049262759 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.052517338 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.053022116 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.056501871 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.05442738 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.048125213 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.047958128 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.051633787 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.04765027 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.052657109 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.050266851 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.051623443 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.044765551 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.053307907 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.051694894 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.054126396 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.059862448 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.04889957 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.050523669 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.054787354 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.054837058 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.053091548 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.053544569 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.052000691 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.045928305 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.04767794 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.049788763 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.051392721 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.04285428 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.047601455 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.04544275 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.048797066 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.045071206 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.044505749 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.045010084 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.046705805 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.045693338 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.048926527 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.050813035 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.049646948 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.048164196 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.050526755 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.044435494 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.045716225 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.0449366 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.04595275 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.046006178 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.052450715 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.06214672 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.049809445 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.057824512 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.048277554 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.052361798 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.046506018 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.0452344 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.048222096 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.045760032 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.048896156 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.046016764 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.047290149 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.051225007 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.068914099 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.060487402 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.050509312 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.045410548 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.053249924 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.04930569 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.051221848 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.047613018 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.043992866 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.045348411 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.044498366 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.044969178 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.043257772 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.046369677 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.043568623 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.043367602 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.049648125 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.0307233 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.027406514 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.030707974 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.030779249 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.037332441 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.032225863 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.036998281 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.038251276 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.038503549 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.042119886 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.004386653 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.030262898 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.034533696 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.041320965 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.036599453 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.032782113 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.016464396 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.041334896 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.03951824 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.040397372 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.044745337 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.037480728 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.032082974 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.035657211 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.031797129 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.037314602 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.033739617 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.038190734 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.041994545 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.039430534 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.036098619 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.041788335 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.038174806 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.036797796 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.038627808 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.039231949 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.035258871 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.041009895 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.037708481 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.03732739 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.043436767 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.039055209 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.036061718 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.035633005 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.041334033 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.038331954 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.037780959 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.038665134 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.041063714 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.04586652 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.044208909 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.037810336 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.041861735 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.041289395 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.035665049 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.045456868 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.039027956 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.051882377 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.049231204 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.023201696 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.037263658 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.039399555 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.042429399 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.034831397 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.042048474 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.048397454 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.039917094 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.045022697 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.046007151 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.037594085 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.039949978 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.043513896 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.040435686 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.040566003 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.043831538 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.036475991 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.039690092 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.037522796 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.042529799 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.042157617 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.036587218 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.045735089 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.036844987 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.041879956 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.040721343 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.046134759 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.036089626 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.040323516 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.043620819 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.032671119 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.036015469 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.038770834 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.039133591 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.035536978 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.037535477 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.035297415 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.037397731 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.036298568 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.038408626 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.044163308 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.037288637 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.043786881 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.035515851 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.041410648 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.032965287 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.03521331 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.03263526 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.036534159 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.040433388 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.033627943 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.033566314 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.041167404 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.035086198 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.030624729 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.037652935 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.031808614 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.033209695 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.033654335 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.032778873 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.039726548 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.034018875 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.030431993 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.033732916 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.028274218 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.032686413 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.033074283 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.031297819 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.034851856 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.033450463 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.028617491 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.033658824 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.032742117 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.031531127 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.030934801 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.029197457 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.028918732 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.038673526 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.029808938 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.033448586 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.036111975 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.996225686 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.039702607 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.033141087 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.031629586 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.033073116 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.030492902 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.032659101 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.032436427 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.033239404 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.031260648 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.029647162 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.033109646 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.04031112 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.040179853 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.035630298 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.032279396 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.036517437 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.031457054 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.040404617 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.058742009 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.029276374 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.032950891 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.03261332 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.035019157 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.033199068 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.036283103 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.034473241 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.039763599 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.031819541 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.032962991 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.034695513 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.045858055 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.029300446 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.03020671 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.033311043 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.035808192 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.033059593 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.015979641 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.033955314 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.035491816 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.034649297 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.045232649 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.02850935 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.032465284 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.029220544 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.030393273 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.029946591 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.028350897 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.030106537 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.031971574 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.028530798 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.032242588 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.03083281 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.033404184 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.03260935 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.034089304 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.039548002 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.032180679 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.02732828 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.03146112 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.030549046 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.026403639 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.029299199 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.026911416 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.032486796 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.029666173 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.030246122 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.031619614 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.040366119 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.029189662 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.032222836 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.030744416 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.034673113 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.027734316 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.028029794 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.030297459 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.037440909 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.029303027 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.04155445 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.03921701 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.03089761 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.028002307 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.036296746 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.036195389 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.026543731 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.031638291 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.028752975 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.033893017 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.031673572 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.031307884 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.030709014 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.026969449 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.035282337 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.028232045 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.031728255 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.028821672 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.028757174 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.030840943 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.032680751 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.035180025 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.030865454 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.027550856 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.029254032 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.031506068 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.032024903 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.030953946 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.027663741 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.030914375 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.002417801 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.029230255 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.033547029 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.025744668 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.028709091 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.031874345 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.028051656 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.030138842 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.028788358 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.029466689 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.028910089 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.030344462 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.036783877 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.028455272 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.030939205 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.0315062 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.031667553 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.028961225 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.026589344 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.022097512 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.027286082 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.033200414 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.029785334 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.02768376 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.028610038 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.026077168 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.032794721 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.03060876 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.031585262 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.026523953 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.029990303 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.027973513 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.0319219 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.037522352 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.034448004 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.030309725 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.037002372 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.031421096 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.030681146 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.029345122 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.029307278 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.029818986 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.029105592 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.033281542 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.031531342 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.031953373 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.030397656 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.031349169 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.031284666 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.030281542 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.027446006 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.031354601 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.032603657 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.03966795 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.038656456 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.027584271 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.033132246 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.029538289 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.035220409 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.039832743 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.030332401 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.03137718 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.029071184 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.029596514 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.030999514 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.038234639 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.040898404 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.034780374 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.029708832 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.032600643 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.047769763 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.034148891 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.037223011 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.060387161 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.03063673 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.029815464 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.033441547 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.031197987 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.030979838 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.031118666 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.031528854 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.036763375 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.031805181 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.030980752 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.038922834 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.032601377 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.03295065 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.033132493 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.033688812 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.037869339 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.032010203 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.041181419 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.032438307 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.030650495 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.033651978 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.035436127 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.032028377 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.034052987 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.033476137 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.035355252 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.035719973 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.032658695 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.038462972 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.03010999 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.032084859 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.046622696 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.039975106 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.462454575 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.033219093 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.019967411 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.039209437 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.035955457 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.0328125 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.035027244 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.040331441 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.034135718 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.040746805 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.03671179 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.033766607 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.033125618 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.035445918 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.034269007 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.046437257 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.043743956 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.034357596 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.034526117 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.039382279 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.033382197 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.039319163 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.037036365 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.037666612 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.034524504 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.033324572 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.034611507 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.034818864 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.0382782 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.035443509 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.040329806 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.035214731 seconds)
  done (took 1219.289803447 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.036314898 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.032528103 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.033544075 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.035059155 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.035545306 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.034338701 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.034689994 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.033881985 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.035012593 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.036066431 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.03336053 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.034130447 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.034394049 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.03513317 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.038175009 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.034372662 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.036644117 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.035833138 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.035762242 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.038671003 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.035544408 seconds)
  done (took 44.698587229 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.034144568 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.033774844 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.038606891 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.034903091 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.037552085 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.036001107 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.033438387 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.036326333 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.035797213 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.036432943 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.034584004 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.037132763 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.037351019 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.035046662 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036469795 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.036499273 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.036566215 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.038006738 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.034319621 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.035041631 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.036763594 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.036914674 seconds)
  done (took 46.748481446 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.035583477 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.038272797 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.03900108 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.037294829 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.038204756 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.036638059 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.036534279 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.036767067 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.038671866 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.040711372 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.044994224 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.043426713 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.036789489 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.037302439 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.037518398 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.037693275 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.18831621 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.036879659 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.039300504 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.038965558 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.036972833 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.043176907 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.035956854 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.039345465 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.024874946 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.037971956 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.039343082 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.039626992 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.04309101 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.036962066 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.04402749 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.037759249 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.041743876 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.042796386 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.037100454 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.040393716 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.043455369 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.039199573 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.041084633 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.037308322 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.047511465 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.061222816 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.040678001 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.041895786 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.044769729 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.039935867 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.040100943 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.04078405 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.047673458 seconds)
  done (took 102.069968429 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.038908961 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.03885737 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.040163694 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.042664987 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.041760497 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.041742057 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.040840608 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.039339711 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.04167696 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.040419788 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.041416919 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.039977557 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.040706718 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.043008522 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.040922455 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.041295856 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.04134121 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.0417447 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.039931935 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.038314897 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.039585277 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.040732161 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.04347347 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.039189626 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.039352589 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.039472612 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.038702853 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.045244334 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.039035705 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.042581167 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.041100464 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.04276719 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.043020757 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.039571743 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.039035226 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.042508126 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.041950907 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.043987676 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.040644916 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.042129193 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.042638168 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.042529138 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.045899113 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.043493763 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.04337288 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.03375053 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.040792122 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.043186137 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.039421371 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.042717811 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.040944179 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.044024863 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.043491675 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.043008791 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.043344496 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.042345767 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.038960472 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.042369117 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.043199165 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.044945862 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.044752559 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.043667482 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.044092769 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.043781299 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.043167759 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.042348408 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.043831932 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.043970594 seconds)
  done (took 140.796581645 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.043463061 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.043577187 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.042593244 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.044496556 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.043141111 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.044089285 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.044420171 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.047661 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.043943498 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.04492799 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.043584012 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.045863066 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.042355993 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.043057208 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.041440339 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.040252918 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.042500946 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.047019805 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.045320868 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.044241327 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.044429567 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.041602326 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.045501822 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.044928201 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.045336807 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.043796338 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.04636486 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.044776079 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.044571848 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.044575011 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.044424709 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.043691434 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.044331177 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.045136596 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.045016687 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.0458562 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.04432807 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.04756902 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.04626441 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.047448589 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.046114176 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.048749924 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.042238993 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.045582415 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.044841938 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.045089876 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.049311889 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.045812018 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.043059623 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.046359242 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.045387185 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.048700265 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.046107358 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.046330693 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.045962941 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.046639023 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.047796734 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.046644383 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.045735425 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.045475425 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.047654663 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.043955667 seconds)
  done (took 128.762807963 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.04716582 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.044032339 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.044810665 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.050509243 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.046233663 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.047823428 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.045685106 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.046286549 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.047902575 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.045917094 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.046687567 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.046896708 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.048248184 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.047157983 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.047185485 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.046013697 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.045249334 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.047567425 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.048742822 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.046146723 seconds)
  done (took 42.906893041 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.046942305 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.047113954 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.04667173 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.048154933 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.044103402 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.046716042 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.048344319 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.048773835 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.044092705 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.047580693 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.048099495 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.048894631 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.046529955 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.046844356 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.047165161 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.04770579 seconds)
  done (took 34.723743499 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.04873527 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.047169689 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.047666324 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.048052213 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.048966903 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.045939729 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.047866171 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.046792853 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.047330592 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.051553369 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.048616724 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.049534555 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.046944536 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.04534815 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.049584389 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.047477679 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.048588614 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.047352471 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.048292471 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.051414985 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.047355005 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.047477017 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.047776128 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.046783243 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.051698007 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.048868325 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.048519809 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.049546655 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.047815382 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.050786977 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.048444829 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.048779573 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.047981149 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.051771376 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.049172254 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.046830524 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.047754302 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.049826729 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.052196812 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.037823623 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.048449261 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.037078161 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.050474538 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.05088239 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.049445715 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.04889751 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.049132658 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.051732676 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.050094599 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.049765523 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.048581281 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.046771289 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.050039012 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.050829846 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.046933985 seconds)
  done (took 114.637592457 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.046514849 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.049757145 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.047654065 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.046062804 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.048209144 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.05081578 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.047787837 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.051353684 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.048455601 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.047135591 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.049258117 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.047295765 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.0535409 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.047831618 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.043862519 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.047794687 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.045590803 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.046273145 seconds)
  done (took 38.836990497 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.047111242 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.049862803 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.049669226 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.04838158 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.049475867 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.046433861 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.0461158 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.047637653 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.051299038 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.049170201 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.04796367 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.049501717 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.051722143 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.051630512 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.044258234 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.049097162 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.045556915 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.045847297 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.045217871 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.049102176 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.046281826 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.048267198 seconds)
  done (took 47.030789633 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.046009153 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.045614742 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.063354765 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.068655561 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.067971193 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.079184719 seconds)
  done (took 14.34403663 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046936517 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048846892 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.055329394 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04593677 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.0466832 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036751773 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.02734118 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.050788121 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049293342 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046773139 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046669511 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049937029 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049590014 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04670704 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.04792734 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047717008 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049341411 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046775418 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.045723314 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048605176 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049058337 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049933369 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.045794849 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04728811 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048193212 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048904047 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051379874 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.052167988 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047031872 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04952672 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048623878 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050594296 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048295731 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047586249 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037042145 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049982872 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.053185542 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048162801 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049134611 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049061775 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.050013553 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048570778 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048219697 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049081504 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048602916 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049597637 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050440732 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049347322 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048876664 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049598443 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051200386 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049161301 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049539463 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048675209 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047768172 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050363371 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047283072 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048035385 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048451506 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049678384 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049000344 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049129899 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049241172 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047273816 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.05050921 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.053583376 seconds)
  done (took 137.159910825 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049028677 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.050521527 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047812517 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.053534048 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048276847 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048063225 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049027647 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048980502 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051147954 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049889285 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04834789 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049246285 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049567907 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.055118116 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050270181 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049063628 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048146194 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042403535 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04519105 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.047751232 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049144145 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050240521 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049309336 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052739447 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049165749 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035418069 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.047310059 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047344805 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051194343 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048462672 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048107953 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049090807 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.052543939 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.048304121 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047458603 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047891053 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048681822 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.0461522 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049150129 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049998397 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047993345 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05121933 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.05304168 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048636439 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050736783 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049887133 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04822512 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050982723 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048857437 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050126736 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050561929 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049004966 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.056652797 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050821303 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048864461 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048964829 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051116851 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.052647899 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050464424 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.055408752 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050240856 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049193845 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05402729 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051924257 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050869161 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049920805 seconds)
  done (took 137.243702969 seconds)
done (took 2837.20455618 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.057873069 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.094963206 seconds)
  done (took 16.131795163 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.210586088 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.119293672 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.240906378 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.172074907 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.060501159 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.069986565 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.057368433 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.058881101 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.151272642 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.059470065 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.075554971 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.057752456 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.062796862 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.058019478 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.062586612 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.061111132 seconds)
  done (took 55.574048821 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.062989632 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.05812972 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.060758647 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.053162678 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.074926867 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.131218562 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.080947056 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.068121744 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.073625701 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.089842819 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.076588231 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.063266471 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.069538772 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.065269527 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.14505496 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.105183294 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.114836295 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.131413261 seconds)
  done (took 39.500067768 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.139456851 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.069187859 seconds)
  done (took 11.191565527 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.085499525 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.081138168 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.087365386 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.051146061 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.074982704 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.060814213 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.058643707 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.062154883 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.055196357 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.063805322 seconds)
  done (took 72.658288188 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.060795859 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.057820374 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.314739754 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.065953678 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.06549221 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.081871002 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.05575641 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.096504031 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.05809354 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.049440928 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.056490602 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.312531665 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.063253543 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.054891299 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.406418898 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.060612509 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.053574761 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.078826998 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.080631525 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.048721687 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.057075461 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.058314871 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.221181003 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.740693832 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.056905832 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.04677853 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.05967382 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.049639006 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.048272111 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.057521532 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.054974892 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.048503502 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.069228996 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.061549107 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.066828016 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.063831515 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.548532355 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.085883562 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.063296473 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.145181767 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.100297838 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.062857614 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.84281813 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.030788946 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.05724802 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.061811664 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.744062661 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.111470555 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.059629589 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.22145862 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.406398445 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.073094446 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.220499097 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.212085284 seconds)
  done (took 142.912167586 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.057812619 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.289715448 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.203263278 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.043829882 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.309548367 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.257869753 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.049261364 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.097453504 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.049631447 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.24723096 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.299180675 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.148424519 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.052859786 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.048470665 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.042192525 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.042335889 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.19359794 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.078734701 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.058013369 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.043765518 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.075563422 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.245874279 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.14692138 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.05312568 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.061210003 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.252262343 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.163285463 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.145914482 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.864363513 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.050448562 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.112847933 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.05333437 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.052244193 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.048735756 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.203540607 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.141043768 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.129249073 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.055231951 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.058436677 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.048204462 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.726450041 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.248589532 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.140452256 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.167064839 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.295616578 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.260696097 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.658919205 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.045604986 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.679786333 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.211143057 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.252258967 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.251256419 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.162950493 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.047402301 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.344575693 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.047737691 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.048355427 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.268506527 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.264643239 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.141875593 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.047253512 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.048838346 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.04676566 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.284322853 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.050537787 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.137962563 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.049839948 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.047717621 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.139450483 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.148837257 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.275013609 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.265280961 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.079781147 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.38457977 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.544210138 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.248306441 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.110181337 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.265558829 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.057149911 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.050585816 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.128911446 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.889892917 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.304015308 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.288391656 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.246306148 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.076673483 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.702229537 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.047695751 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.233755199 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.234636895 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.280149234 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.291413206 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.282171957 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.423122562 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.049040152 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.05071857 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.354637629 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.165178631 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.050217125 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.398941859 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.280442183 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.543006266 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.075244969 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.331129081 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.176742969 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.051625235 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.700353218 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.049965626 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.254028667 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.091068792 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.050872818 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.051132171 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.240449048 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.952435573 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.054422726 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.74853767 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.111316436 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.052285371 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.253692676 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.055641467 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.296417567 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.054563628 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.281522984 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.681692435 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.081029199 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.223726393 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.296766687 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.686711978 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.342693712 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.292789629 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.16337465 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.27201166 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.892736273 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.052003839 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.311853563 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.05274047 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.052763915 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.220952079 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.054716981 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.19406318 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.05473897 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.315776891 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.071769419 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.279918595 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.054559118 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.291866447 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.084459741 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.10012918 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.056706758 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.174851106 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.053806371 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.886972395 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.211011422 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.055618635 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.05350571 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.644421129 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.05310405 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.208699753 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.276645603 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.072908072 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.121761586 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.618500031 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.045893313 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.1451906 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.071530736 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.330702014 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.05282404 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.30789955 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.014605346 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.536650084 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.053731926 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.28772958 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.237736096 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.058645938 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.05790139 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.900353488 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.053174355 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.055307735 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.21276128 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.042381279 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.960154549 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.251452943 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.056536697 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.181630594 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.055283869 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.137163032 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.399052518 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.056681719 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.057066818 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.046911547 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.05410626 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.054827325 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.263751961 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.08080928 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.486419313 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.19065769 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.315302065 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.362890892 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.250953917 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.092861523 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.058448467 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.278855528 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.055915557 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.119784126 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.058524204 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.074176775 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.282714058 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.059613173 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.259830726 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.290250279 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.116483606 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.102854494 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.060020572 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.060950934 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.025673035 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.203429308 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.143342773 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.056219149 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.058601379 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.171260033 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.174864147 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.239791227 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.877090533 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.215138895 seconds)
  done (took 941.843114892 seconds)
done (took 1281.788476341 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.06115946 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.067196491 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.060268425 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.060311678 seconds)
  done (took 30.22941765 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.063930866 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.064511995 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.062046351 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.066970447 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.061923324 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.060084776 seconds)
  done (took 14.362344131 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.06263762 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.065858334 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.06207207 seconds)
  done (took 23.178053355 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.48612613 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.461206232 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.13812654 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.210238806 seconds)
  done (took 11.281054686 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.075258893 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.058093152 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.060962745 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.065020622 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.060665431 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.060148261 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.068082012 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.061801004 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.072796773 seconds)
  done (took 20.575421089 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.23720123 seconds)
done (took 105.851485995 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.462463714 seconds)
    (2/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.059985459 seconds)
    (3/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.317023785 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.128136091 seconds)
    (5/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.39457499 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.18985348 seconds)
    (7/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.137420525 seconds)
    (8/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.194487433 seconds)
    (9/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.368469587 seconds)
    (10/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.143818851 seconds)
    (11/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.075622324 seconds)
    (12/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.212892368 seconds)
    (13/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.469445974 seconds)
    (14/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.19167574 seconds)
    (15/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.79628665 seconds)
    (16/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.26078236 seconds)
    (17/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.200315804 seconds)
    (18/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.121735436 seconds)
    (19/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.077901972 seconds)
    (20/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.066989043 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.080701527 seconds)
    (22/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.374269097 seconds)
    (23/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.064915228 seconds)
    (24/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.07231344 seconds)
    (25/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.911444788 seconds)
    (26/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.023763553 seconds)
    (27/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.086213716 seconds)
    (28/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.159511704 seconds)
    (29/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.177024339 seconds)
    (30/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.453952884 seconds)
    (31/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.082435121 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.296016078 seconds)
    (33/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.105878495 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.089916868 seconds)
    (35/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.092130691 seconds)
    (36/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.060376335 seconds)
    (37/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 3.920618096 seconds)
    (38/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.384069937 seconds)
    (39/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.128240893 seconds)
    (40/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.141183492 seconds)
    (41/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.074600956 seconds)
    (42/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.820217894 seconds)
    (43/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.251303174 seconds)
    (44/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.064827494 seconds)
    (45/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.564669527 seconds)
    (46/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.169754053 seconds)
    (47/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.375493767 seconds)
    (48/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.758098349 seconds)
    (49/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.928008779 seconds)
    (50/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.465484858 seconds)
    (51/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.470710639 seconds)
    (52/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.148433294 seconds)
    (53/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.287331463 seconds)
    (54/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.367049215 seconds)
    (55/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.06520177 seconds)
    (56/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.139757862 seconds)
    (57/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.050007387 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.483226014 seconds)
    (59/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.358330421 seconds)
    (60/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.068171152 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.170216557 seconds)
    (62/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.279227477 seconds)
    (63/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.081033957 seconds)
    (64/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.834545358 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.308197616 seconds)
    (66/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.147734227 seconds)
    (67/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.208443549 seconds)
    (68/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.193813063 seconds)
    (69/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.14769414 seconds)
    (70/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.145641462 seconds)
    (71/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.027972526 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.742942752 seconds)
    (73/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.16767314 seconds)
    (74/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.203426416 seconds)
    (75/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.073748626 seconds)
    (76/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.082810696 seconds)
    (77/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.859414411 seconds)
    (78/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.90786588 seconds)
    (79/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.331196306 seconds)
    (80/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.078115523 seconds)
    (81/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.074235297 seconds)
    (82/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.174990833 seconds)
    (83/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.149952142 seconds)
    (84/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.264607746 seconds)
    (85/341) benchmarking ("sort", BigInt, false)...
    done (took 7.063603489 seconds)
    (86/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.067401425 seconds)
    (87/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.086633735 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.345455022 seconds)
    (89/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.842569212 seconds)
    (90/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.066597297 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.460603383 seconds)
    (92/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.286382114 seconds)
    (93/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.822299294 seconds)
    (94/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.43243161 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.061589726 seconds)
    (96/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.318373644 seconds)
    (97/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.291470112 seconds)
    (98/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.150600682 seconds)
    (99/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.33735734 seconds)
    (100/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.068128551 seconds)
    (101/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.153920313 seconds)
    (102/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.141016261 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.068401273 seconds)
    (104/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.464264709 seconds)
    (105/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.2751202 seconds)
    (106/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.085745913 seconds)
    (107/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.143157311 seconds)
    (108/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.922710319 seconds)
    (109/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.276612271 seconds)
    (110/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.073131801 seconds)
    (111/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.26682749 seconds)
    (112/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.208011883 seconds)
    (113/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.077929167 seconds)
    (114/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.071743231 seconds)
    (115/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.170651063 seconds)
    (116/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.268916614 seconds)
    (117/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.159694351 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.446195853 seconds)
    (119/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.304594798 seconds)
    (120/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.844047288 seconds)
    (121/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.156417097 seconds)
    (122/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.200654219 seconds)
    (123/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.070997607 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.929377052 seconds)
    (125/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.517265931 seconds)
    (126/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.072418393 seconds)
    (127/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 3.965031206 seconds)
    (128/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.088596001 seconds)
    (129/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.457791538 seconds)
    (130/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.559537122 seconds)
    (131/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.761226446 seconds)
    (132/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.449992566 seconds)
    (133/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.876417277 seconds)
    (134/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.089538074 seconds)
    (135/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.164996683 seconds)
    (136/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 3.953717062 seconds)
    (137/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.069581015 seconds)
    (138/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.175599149 seconds)
    (139/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.323360794 seconds)
    (140/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.071868996 seconds)
    (141/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.364917221 seconds)
    (142/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.360938112 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.374196221 seconds)
    (144/341) benchmarking ("sort", Bool, false)...
    done (took 2.290739279 seconds)
    (145/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.968408968 seconds)
    (146/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.210688282 seconds)
    (147/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.190366179 seconds)
    (148/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.35488158 seconds)
    (149/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.196531457 seconds)
    (150/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.342391555 seconds)
    (151/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.219685924 seconds)
    (152/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.414287579 seconds)
    (153/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.090557253 seconds)
    (154/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.082521764 seconds)
    (155/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.068615458 seconds)
    (156/341) benchmarking ("sort", Int8, false)...
    done (took 5.014854788 seconds)
    (157/341) benchmarking ("sort", Int64, false)...
    done (took 5.739278067 seconds)
    (158/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.54156612 seconds)
    (159/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.766907466 seconds)
    (160/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.896708113 seconds)
    (161/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.261369603 seconds)
    (162/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.072887453 seconds)
    (163/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.128893513 seconds)
    (164/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.229042466 seconds)
    (165/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.071374689 seconds)
    (166/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 10.0875855 seconds)
    (167/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.136548913 seconds)
    (168/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.119859 seconds)
    (169/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.491266354 seconds)
    (170/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.937427054 seconds)
    (171/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.074277593 seconds)
    (172/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.13023591 seconds)
    (173/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 3.804521717 seconds)
    (174/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.075118691 seconds)
    (175/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.197623844 seconds)
    (176/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.187943618 seconds)
    (177/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.074631559 seconds)
    (178/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.179545874 seconds)
    (179/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.092769576 seconds)
    (180/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.826375751 seconds)
    (181/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.166213217 seconds)
    (182/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.253811622 seconds)
    (183/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.372685149 seconds)
    (184/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.183956019 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.944017872 seconds)
    (186/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.074337048 seconds)
    (187/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.217772636 seconds)
    (188/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.42113209 seconds)
    (189/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.073470652 seconds)
    (190/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 4.859181343 seconds)
    (191/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.955918759 seconds)
    (192/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.531020235 seconds)
    (193/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.580521024 seconds)
    (194/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.288027293 seconds)
    (195/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.071834777 seconds)
    (196/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.205200774 seconds)
    (197/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.071872876 seconds)
    (198/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.285389168 seconds)
    (199/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.086853179 seconds)
    (200/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.390294458 seconds)
    (201/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.157942552 seconds)
    (202/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.470965097 seconds)
    (203/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.289658069 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.013784166 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.18138457 seconds)
    (206/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.089426524 seconds)
    (207/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.67291952 seconds)
    (208/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.078734123 seconds)
    (209/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.435027622 seconds)
    (210/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.298983994 seconds)
    (211/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.189169521 seconds)
    (212/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.218936848 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.177737931 seconds)
    (214/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.200079687 seconds)
    (215/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.093483279 seconds)
    (216/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.202662153 seconds)
    (217/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.173692465 seconds)
    (218/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.088383586 seconds)
    (219/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.37121469 seconds)
    (220/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.20192912 seconds)
    (221/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.853558497 seconds)
    (222/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.096525859 seconds)
    (223/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.281517403 seconds)
    (224/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.563646736 seconds)
    (225/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.350610582 seconds)
    (226/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.916175349 seconds)
    (227/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.268403783 seconds)
    (228/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.284211089 seconds)
    (229/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.378406283 seconds)
    (230/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.075112872 seconds)
    (231/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.283266002 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.469022254 seconds)
    (233/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.733175989 seconds)
    (234/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.14996777 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.370317811 seconds)
    (236/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.073447834 seconds)
    (237/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.272984511 seconds)
    (238/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.166101569 seconds)
    (239/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.727271112 seconds)
    (240/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.975016647 seconds)
    (241/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.182109085 seconds)
    (242/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.394568074 seconds)
    (243/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.101753779 seconds)
    (244/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.261838847 seconds)
    (245/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.309409468 seconds)
    (246/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.159624715 seconds)
    (247/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.08191709 seconds)
    (248/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.086355459 seconds)
    (249/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.334006031 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.095525712 seconds)
    (251/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.164061783 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.159322694 seconds)
    (253/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.20595036 seconds)
    (254/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.851721986 seconds)
    (255/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.674577392 seconds)
    (256/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.322214925 seconds)
    (257/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.079556815 seconds)
    (258/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.081134972 seconds)
    (259/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.2068309 seconds)
    (260/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.223090231 seconds)
    (261/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.230414038 seconds)
    (262/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.194705166 seconds)
    (263/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.495350471 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.476085782 seconds)
    (265/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.213616764 seconds)
    (266/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.075242688 seconds)
    (267/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.474366683 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.36447171 seconds)
    (269/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.174813892 seconds)
    (270/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.493602307 seconds)
    (271/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.155235608 seconds)
    (272/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.077590275 seconds)
    (273/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.410134209 seconds)
    (274/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.199875636 seconds)
    (275/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.363989906 seconds)
    (276/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.471867501 seconds)
    (277/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.299269775 seconds)
    (278/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.341683905 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.776899097 seconds)
    (280/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.402012836 seconds)
    (281/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.203940238 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.41779977 seconds)
    (283/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.095791936 seconds)
    (284/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.026629124 seconds)
    (285/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.02722479 seconds)
    (286/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.1917779 seconds)
    (287/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.086098492 seconds)
    (288/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.076293128 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.963217476 seconds)
    (290/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.530540179 seconds)
    (291/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.040428138 seconds)
    (292/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.081388738 seconds)
    (293/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.211370893 seconds)
    (294/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.24248533 seconds)
    (295/341) benchmarking ("sort", Float32, false)...
    done (took 5.747621994 seconds)
    (296/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.564326127 seconds)
    (297/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.277679445 seconds)
    (298/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.435246048 seconds)
    (299/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.082079894 seconds)
    (300/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.429304833 seconds)
    (301/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.101640156 seconds)
    (302/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.083103005 seconds)
    (303/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.492050568 seconds)
    (304/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.164613418 seconds)
    (305/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.088379584 seconds)
    (306/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.610660632 seconds)
    (307/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.083149061 seconds)
    (308/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.074346786 seconds)
    (309/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.302569992 seconds)
    (310/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.390519501 seconds)
    (311/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.502953405 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.191886793 seconds)
    (313/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.755522921 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.261351392 seconds)
    (315/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.117067922 seconds)
    (316/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.131885625 seconds)
    (317/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.0741588 seconds)
    (318/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.00423876 seconds)
    (319/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.511283776 seconds)
    (320/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.274860074 seconds)
    (321/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.114066535 seconds)
    (322/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.166477048 seconds)
    (323/341) benchmarking ("sort", Float64, false)...
    done (took 5.776234735 seconds)
    (324/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.342373963 seconds)
    (325/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.362547031 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.390901217 seconds)
    (327/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.967082164 seconds)
    (328/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.224619177 seconds)
    (329/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.226881585 seconds)
    (330/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.095550785 seconds)
    (331/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.086243456 seconds)
    (332/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 3.765964119 seconds)
    (333/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.357250208 seconds)
    (334/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.282090724 seconds)
    (335/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.143655076 seconds)
    (336/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.466162846 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.082436928 seconds)
    (338/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.360300896 seconds)
    (339/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.486675222 seconds)
    (340/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.805095714 seconds)
    (341/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.241404075 seconds)
  done (took 1162.315243442 seconds)
done (took 1164.40625608 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.111321123 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.085856927 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.574891203 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.096412282 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.088019789 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.090056351 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.585192375 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.113948673 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.104001352 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.58311208 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.094160366 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.087459192 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.103125597 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.122521532 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.099755928 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.100105508 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.097552545 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.116889646 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.119707596 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.094090506 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.142436205 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.0941598 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.091066444 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.140176704 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.088960763 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.100578341 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.113167547 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.141225534 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.142327594 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.091211201 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.095834944 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.440510848 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.136015372 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.091327507 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.1022465 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.104937053 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.095827746 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.103568712 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.104168843 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.101736181 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.088468871 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.098823067 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.091727044 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.098273998 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.08812524 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.089364183 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.091056378 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.211399498 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.10608884 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.433496076 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.145800488 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.109656132 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.150320292 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.092409326 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.09591424 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.092600101 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.144377024 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.100296147 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.09462792 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.423266388 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.186315859 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.111253088 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.428845804 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.154045199 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.107500096 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.097898631 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.092917495 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.112314667 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.450368304 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.629617886 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.124759498 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.117358822 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.096425312 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.094717521 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.108360497 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.590134959 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.104144692 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.644664319 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.11365018 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.109960352 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.097709944 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.091618129 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.088948583 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.111366032 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.113074134 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.095091073 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.09998917 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.095326353 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.105950441 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.449062896 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.121395355 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.578261319 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.103012994 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.118458143 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.121026907 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.655441533 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.11508728 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.114163079 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.096497825 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.451508486 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.130045189 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.116969816 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.096263029 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.105599849 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.214210234 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.112435615 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.113375672 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.0924832 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.121987112 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.100873448 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.091669955 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.105603949 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.113284596 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.132563513 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.113889664 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.09815978 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.093396607 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.100995719 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.111778337 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.10469921 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.099307988 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.10114271 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.097577987 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.132275662 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.108524418 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.115857278 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.204111367 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.098825426 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.223438728 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.109226049 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.10044262 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.091955214 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.426466621 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.13708514 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.11689962 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.101874573 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.121807421 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.119680298 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.113644334 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.096869929 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.109621913 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.099017181 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.147387184 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.095451593 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.121058109 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.145966403 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.113980721 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.102927356 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.116770366 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.134182126 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.116816042 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.098737192 seconds)
done (took 329.619646799 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.140198125 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.09943909 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.165360455 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.091851079 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.157160659 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.158408062 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.09644959 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.098786028 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.091493357 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.480728747 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.100373691 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.103293501 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.0921888 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.096253841 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.14968253 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.097036791 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.094385776 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.326341015 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.094576718 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.155471867 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.093537785 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.097797324 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.103681812 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.48827795 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.099061782 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.094314442 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.156601187 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.0969966 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.340608967 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.097465824 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.0986105 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.338433397 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.160063694 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.108679647 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.104404262 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.102219695 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.175683863 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.109099285 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.140423525 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.14594856 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.158284021 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.121958132 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.094737245 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.101889466 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.102957454 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.094704035 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.09297231 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.126401555 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.097586202 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.103342169 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.325656356 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.103826209 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.10482354 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.098024061 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.096568452 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.11105357 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.099111931 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.097991866 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.164955665 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.106191593 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.148706981 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.488511669 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.475673386 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.096309316 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.105609783 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.105331846 seconds)
  done (took 198.885531648 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.163490106 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.181555898 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.169610344 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.102798678 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.148728915 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.170111001 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.095043016 seconds)
  done (took 17.05140627 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.104708125 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.098092178 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.121768332 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.118825322 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.097164135 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.229016644 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.11305038 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.100436049 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.126402459 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.10049497 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.407957326 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.121309635 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.105283421 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.102285704 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.117078991 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.130929402 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.104694001 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.103850587 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.205251017 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.179669752 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.109190173 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.110168088 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.129036071 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.119325473 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.102693156 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.098681399 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.103631231 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.106187861 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.104967285 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.09583372 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.097092078 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.109240007 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.096807156 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.104603326 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.102605646 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.100597451 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.105848774 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.106553806 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.106026538 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.102390837 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.102776872 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.100036573 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.100907637 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.104016334 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.104470588 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.131214912 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.103630633 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.104277044 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.110312167 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.107133934 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.108596486 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.101942886 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.109832182 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.109683387 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.148904669 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.114923077 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.104650104 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.101272124 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.098900161 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.107770706 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.108688987 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.18669466 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.124931382 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.105522586 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.133669107 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.141372545 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.104675027 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.105661312 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.098112299 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.13294851 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.10718305 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.133997011 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.108544059 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.207016188 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.103388279 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.244208874 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.130944421 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.105624116 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.104572172 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.11036456 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.110729438 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.11052488 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.106709979 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.109671901 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.115499154 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.110420192 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.106952826 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.108362674 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.1161043 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.100312124 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.153936627 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.10421033 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.107464396 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.205967061 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.107847576 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.203627489 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.136022916 seconds)
  done (took 227.812382254 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.111866821 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.11268656 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.120440014 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.112333548 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.110252699 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.11832802 seconds)
  done (took 14.717305694 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.112059175 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.108972562 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.103320974 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.101060044 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.104704354 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.10411374 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.107136682 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.109910313 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.107902252 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.104231604 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.109099422 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.10738416 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.108458108 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.103915036 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.10397148 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.104772499 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.103103497 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.104443049 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.109726058 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.103324904 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.309841544 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.102070687 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.111494774 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.112339805 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.108415803 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.104147944 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.11010011 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.105119096 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.10130508 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.112474429 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.109352507 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.104091344 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.117831987 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.116187986 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.107803986 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.122796287 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.110482102 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.108143507 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.106775228 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.107084391 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.110396324 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.105830261 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.107237229 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.107866778 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.11223238 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.117942607 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.106150518 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.115959574 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.105536287 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.108745732 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.109396546 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.110859004 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.106234257 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.104878003 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.118941198 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.112419642 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.109579729 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.112620672 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.107551323 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.123593572 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.112073308 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.10748443 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.111351544 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.110514029 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.114962074 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.105721781 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.116496109 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.108768766 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.103686894 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.105892662 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.106514179 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.105173429 seconds)
  done (took 155.0603144 seconds)
done (took 615.545123387 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.177282485 seconds)
  done (took 9.202818594 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.115386248 seconds)
  done (took 9.233651007 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.376593331 seconds)
  done (took 12.413440895 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.140707109 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.089156011 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.103953085 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.11781736 seconds)
  done (took 30.486972104 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.332733698 seconds)
  done (took 9.360716979 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.118712904 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.100222833 seconds)
  done (took 16.320710436 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.180840103 seconds)
  done (took 9.207336659 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.532411544 seconds)
  done (took 9.581606967 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.122781385 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.119949585 seconds)
  done (took 16.291114026 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.107060416 seconds)
  done (took 9.140431891 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.849132807 seconds)
  done (took 9.966277245 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.113409082 seconds)
  done (took 9.155705496 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.142336862 seconds)
  done (took 9.170857393 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.973288192 seconds)
  done (took 9.997993702 seconds)
done (took 171.562247603 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.114989598 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.108218473 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.115139723 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.115720548 seconds)
  done (took 30.487963206 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.145111039 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.140778253 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.148351963 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.141534411 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.135222522 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.133391397 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.146042576 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.144595763 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.136526082 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.142740835 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.140964555 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.139433727 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.144540799 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.153855794 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.149577622 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.142896294 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.139805725 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.142791133 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.135592441 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.150029363 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.139517669 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.146365964 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.111630008 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.111859481 seconds)
  done (took 53.396690649 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.300677871 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.177258548 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.264159598 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.16802096 seconds)
  done (took 10.944026919 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.108120163 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.178694707 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.162247608 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.153216692 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.194672941 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.212574645 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.164280782 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.320878981 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.225345381 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.233896931 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.119229517 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.129238771 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.132182108 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.154235792 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.210682019 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.108398703 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.110222012 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.227402436 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.175119425 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.320245621 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.114643204 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.160904372 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.196921781 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.162061537 seconds)
  done (took 54.308449479 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.110517883 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.122126216 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.124646692 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.111161491 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.110889928 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.110050588 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.117781475 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.117880553 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.136786571 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.112895128 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.114509373 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.115350049 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.115428537 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.109824094 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.117448639 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.121137194 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.130362087 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.114851437 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.119965191 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.120342081 seconds)
  done (took 44.389606268 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.115145596 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.958365426 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.461591453 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.369417341 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.116899905 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.112162848 seconds)
  done (took 33.162386021 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.130510167 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.13259036 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.124013354 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.14128322 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.161274626 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.118178756 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.17537759 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.271769498 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.119826714 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.170130444 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.132580969 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.12310291 seconds)
  done (took 27.825792756 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.10725247 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.109854288 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.117758027 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.126868524 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.125163362 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.123113968 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.125293591 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.114998126 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.122948914 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.127993532 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.124810366 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.121785528 seconds)
  done (took 47.479344779 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.325979769 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.347335933 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.330950518 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.57408626 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.420426581 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.090961566 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.400312765 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.327766656 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.847909877 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.876819703 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.404042304 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.093931046 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.061190972 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.040852731 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.027362003 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.362701564 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115138333 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.97004053 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.367559996 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.157471197 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114127246 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.116667147 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.122587856 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.402947615 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.439420037 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.113904874 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.324622532 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137721684 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.114574362 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.344928657 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.456794737 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.165863682 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.321807131 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.379988633 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.458542716 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.257270824 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.118496624 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.158759852 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.15372353 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.148706566 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.126978125 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.129585956 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.657193591 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.126833348 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.388268729 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117884247 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.204770335 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.122438217 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043060446 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.431231321 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226329068 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.119651702 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.151678973 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.551084724 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.23263727 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.363630704 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.121751091 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.1551243 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.174647969 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.371141645 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.311443637 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.11696692 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.3253999 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.046928753 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.465073595 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.236344435 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.119290211 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.123384458 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.817742901 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.357426337 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.196238429 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.442475452 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.877324233 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.121073211 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.124629389 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.163425006 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.215361275 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.121440313 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.421990858 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.130694114 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.044962503 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.245002779 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.520997599 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126690757 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.122580406 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.128966812 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.963095713 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.047315376 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.219239165 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.371019159 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.437446769 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.119479558 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.118937998 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.140387155 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.125971362 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.076173522 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.544285539 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.155029088 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.046455943 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.688336497 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.459757182 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.079256987 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.466329336 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.152504957 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40031095 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.265847157 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.526636271 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.326702559 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.361016337 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.650605507 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.124129875 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.681894779 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.205248363 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199787399 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125485222 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.682102132 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.173251058 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.417438343 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.233592477 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.119578193 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.049621865 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.136549751 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.320046925 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.456302582 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.171962217 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.120073418 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.135597263 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.123426695 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.127823701 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.284461818 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.142446453 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.412715224 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.191652929 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.129516676 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.061752648 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.129673599 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.406036609 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.565167786 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.180365132 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.375059795 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.388091424 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.822592749 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.719071194 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.162224283 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.384775164 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.193733515 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.200137734 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.70664392 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.286074321 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.218682034 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.045925459 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.256467022 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.12621382 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.124783799 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.294784806 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.538621732 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.544522062 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.16086048 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.111835599 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.070692453 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.170119795 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.351985292 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.18277961 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.149636712 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.130513149 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.207836694 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.352468858 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.122418832 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.054985677 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.380976547 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.368542382 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.417350517 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.528913072 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.177052368 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.194072807 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.13618903 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.344692128 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.205041268 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.773804284 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.674395228 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.351765041 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.552908852 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.084323939 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.763564125 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.382967804 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.498428563 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.137504621 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.577402075 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.169965519 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.679732589 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.145688859 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.652450319 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.049128553 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127557582 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.468619795 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.079377441 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.431845745 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.193592783 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.150752335 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.127912056 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.1290281 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.132523179 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.03502313 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.233554507 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192536095 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.198342726 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.055357162 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.651968458 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.164267539 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.135847736 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.127344146 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.460281259 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.973922756 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08366417 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.131774143 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207120185 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.866204911 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.676766977 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.13028691 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.130784222 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.725890097 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.136522905 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.037158354 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.254063215 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.874246425 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151187262 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.385556162 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.819985267 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.417971914 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.203460762 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204995512 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.127310595 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.134053295 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.827482658 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.136011664 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.828085399 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.406553144 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.398111167 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.572999917 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.189217369 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.338028719 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.109174327 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.128552962 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.637010161 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.153423915 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130599275 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.332101695 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.6479918 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.453195112 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.77030162 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.215837234 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.127503522 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.394338954 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.131760962 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.472436822 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.806783047 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.136953098 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.127704476 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.401748915 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.816666071 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.133722493 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.106436738 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138826705 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.347943999 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.333235444 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.399668564 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.420749305 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.580139059 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.062044852 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.131699846 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.151201889 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.376332234 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.125562939 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.169309348 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.572065665 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.192134631 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.563127476 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.409074845 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.516706325 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.756969733 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.39197371 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.196915847 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.144114222 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.786412924 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.261361339 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.064295961 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246042279 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.055732252 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.805083808 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.422017438 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.141980099 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.374563193 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.105642624 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.466579627 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.428385788 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.397281961 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.168866797 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.158878054 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.080261093 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.18270575 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.127584886 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.205156409 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.243181916 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.135797405 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.54854464 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.159556221 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174768826 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.135315714 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.632881391 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.153259658 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134870055 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.821958548 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.153006495 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.255327351 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201968565 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.877116365 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.493527107 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.151914192 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.006285811 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.782952459 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.403143141 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.186745488 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.585918707 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.174662432 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.539886356 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.136646711 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.345908727 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.141485762 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.573598378 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.16923353 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.401453095 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087522363 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.346169998 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.341692191 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.155870205 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.137517249 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.05796591 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.238343125 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.001087714 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.111635285 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.140233378 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.814276937 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.565729785 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.216485486 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.58612247 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.952048354 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.13378474 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.433884953 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.518839373 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.620279772 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156755499 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13813842 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.454982799 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.265162113 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.446573859 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.398095718 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.144868653 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.158192194 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.346843797 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.262248772 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.055509372 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.621586579 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.713146183 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.838698892 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.143060173 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.341588735 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.457583879 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.288300748 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.162843573 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.210425481 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.543168174 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.402742133 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.200397441 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.06306652 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133900823 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.529761667 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.532301917 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.230959381 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.378763488 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.461716142 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.548316809 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.482907248 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.436050482 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.512465393 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.534600112 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.533086827 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.35649584 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.508495206 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.462906669 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.724532962 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.549260516 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.345330591 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.228548492 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.417314716 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.012756303 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.843411569 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.381511417 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.142752634 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.063947242 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.345013462 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.141018306 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.363269844 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.702610784 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.384624089 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.393167168 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.602567029 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.677843352 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.205218448 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.155813917 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.10215014 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.162204398 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.157120848 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.138566412 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.628995587 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.426425387 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.149149655 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.082843205 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.808118751 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.066883472 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.352781319 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.198421162 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.166945077 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.679587309 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.395067337 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.230179475 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.427189415 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.246215945 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.165946489 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068083806 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.853320611 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.081499155 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.196544144 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.562070131 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151587869 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.14575605 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.342247012 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.067334747 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188444135 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.144999614 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.341863934 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.718224188 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.406852807 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.261848192 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.382423694 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.442683395 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.968971696 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.159488699 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.409908335 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.067102295 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.635055633 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.811256458 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.183425695 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.210670954 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.13678994 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.141486279 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.4141868 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.468325702 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.233967055 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.59523025 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.162286834 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.164290575 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.467019936 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.22388849 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.142244312 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.147131544 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.490314703 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.362544736 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.143442002 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.128497518 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.355711261 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213633266 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.335595962 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.213085661 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.655082799 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.146235471 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.973673629 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.232047305 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.091528591 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.066633792 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.840533576 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.200209955 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.142886387 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.408897412 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.75706009 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.341985271 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.537666657 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.996994855 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.203329288 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.174747176 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.145193496 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.146668047 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.528793746 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.440776102 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.14149156 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.407474838 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.188614099 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.147355 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.80545223 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.109798666 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.14149107 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.872339999 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.021017776 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.871264714 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.537543968 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.148678938 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.14436497 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.150091243 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.067599955 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.139465684 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.320769551 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.124067399 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.142893506 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.515979967 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.471147146 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.226749517 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.147159907 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.131914924 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.147685714 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.355303455 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.656606493 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.16008035 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.848513648 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.344908117 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.153533502 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.632031532 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.595496525 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.271899916 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.174878464 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.2090644 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.380655128 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.684151652 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.20975677 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.113680044 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.368378219 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.142827882 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.417429618 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.417486075 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.144339848 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.356328771 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.500793398 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.420539267 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.497632835 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.457574002 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.20647727 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.219088063 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.025218423 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.14550036 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.146808545 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.407750447 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.198764795 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.146290568 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.15133586 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.701871403 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.836081173 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.615245452 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.300641011 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.482660115 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.892054948 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.901067859 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.151658399 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.075782825 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.145805281 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.168635108 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.147830181 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.072641872 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.877071857 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.87639608 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.361629551 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.455018627 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.07568546 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.347224605 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.743230529 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.071077878 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.119953824 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.096055261 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.409896535 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.076461018 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.14720562 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.101820796 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.435805962 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.734590901 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.410396061 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.144975009 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09110159 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.149197438 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.152729163 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.147643921 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.229728978 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.15037537 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.26427643 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.416449121 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.527397971 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.247949554 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.785304373 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.890021982 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.085279546 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.191986303 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.763202049 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.716956147 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.433549893 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.270660967 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.862250759 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.090818487 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.1507378 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162987234 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.390447353 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.156909157 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.151406846 seconds)
  done (took 2231.527135419 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.186676639 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.200408225 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.199140172 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.335221153 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.153350772 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.280504915 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.198804866 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.220372045 seconds)
  done (took 59.838574315 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.14994033 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.123214556 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.1584465 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.149925583 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.149608302 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.190127842 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.343037931 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.175949934 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.149296365 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.151878579 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.153594297 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.152440652 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.151783916 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.14925432 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.156101287 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.459060754 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.168051365 seconds)
  done (took 81.229041726 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.204381953 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.924293698 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.150264587 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.800759538 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.170144128 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.482638194 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.15558087 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.156560908 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.251628786 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.452248052 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.175902743 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.152144228 seconds)
  done (took 93.149350073 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.151717227 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.153990852 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.152794431 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.148918824 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.152269614 seconds)
  done (took 12.828176333 seconds)
done (took 2782.654657707 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.401264159 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.247749834 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.225030935 seconds)
  done (took 6.543759137 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.297359315 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.344957555 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.460854707 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.484956751 seconds)
  done (took 11.6592844 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.436439023 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.528976617 seconds)
  done (took 7.033931003 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.514847143 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.170577024 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.537072907 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.153152137 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.153983437 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.156808185 seconds)
  done (took 23.539244356 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.157145525 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.154991044 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.157792127 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.154932992 seconds)
  done (took 10.694523104 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.152175697 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.88326351 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.159760808 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.162615029 seconds)
  done (took 22.425701048 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.363948915 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.309604404 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.920316826 seconds)
  done (took 13.664261076 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.822062227 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.612327597 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.77077821 seconds)
  done (took 10.273826297 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.98932913 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.973883794 seconds)
  done (took 8.034405012 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.296063531 seconds)
  done (took 4.368088983 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.978527388 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.473082475 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.634661897 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.15336292 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.810308427 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.572554634 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.660350951 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.461475591 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.577152406 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.611582528 seconds)
  done (took 29.00685545 seconds)
done (took 163.945845714 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.806023805 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.208344122 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.388545511 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.584447914 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.419934866 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.386440094 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.465977255 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.577993132 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.217224427 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.210566221 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.583324086 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.416401142 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.405306072 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.189663297 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.420544302 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.204731422 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.412271981 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.664466983 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.233249961 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.474721198 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.472384543 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.204019179 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.402856743 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.220854109 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.423920285 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.340795742 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.806392276 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.196643589 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.389276479 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.850259951 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.338057086 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.652470474 seconds)
  done (took 179.656826508 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.173390442 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.173479059 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.181898403 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.208699682 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.600378591 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.174855405 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.183255234 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.176601678 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.424970751 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.394826662 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.174626798 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.524774689 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.173776536 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.174175336 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.167560824 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.173678895 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.513281215 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.175178549 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.175500308 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.173294394 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.173619971 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.401921528 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.172576054 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.438266058 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.486416614 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.176460193 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.181023069 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.17600524 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.175420474 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.174405367 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.181695493 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.174004185 seconds)
  done (took 218.123034743 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.175794523 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.176616412 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.185948366 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.176070073 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.17793585 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.175567762 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.175073136 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.175978674 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.851710191 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.854288006 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.186101807 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.186704056 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.1900441 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.187142082 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.181861645 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.181805258 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.186266308 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.182683241 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.182555523 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.178225665 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.181175892 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.043648851 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.181362242 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.075752529 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.180571799 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.187109166 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.183592227 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.18323821 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.182045185 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.186045536 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.185883736 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.181580404 seconds)
  done (took 231.015762749 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.429243464 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.181624221 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.185212851 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.187774182 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.183566991 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.181227602 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.195512623 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.430466277 seconds)
  done (took 22.074795117 seconds)
done (took 652.979584327 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.56485723 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.925367114 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.318842009 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.213486434 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.439352832 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.256793731 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.203810266 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.275733528 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.859281989 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.282625552 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.616406016 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.221229654 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.939713505 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.233214443 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.31660161 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.265470738 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.549473619 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.807610052 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.339703477 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.872453082 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.417502856 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.134659018 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.282896367 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.918993714 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.630204434 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.149929417 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.226604122 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.552443659 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.209167425 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.455512828 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.879831386 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.471105888 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.22666696 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.213250951 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.267870747 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.246627125 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.408218794 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.217491376 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.325986143 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.921962346 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.858041631 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.743784062 seconds)
  done (took 113.359683334 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.193180194 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.194340728 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.195573951 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.195870054 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.198895543 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.194970826 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.194731291 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.202763747 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.193025833 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.194488816 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.19470742 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.203485475 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.210309276 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.204532368 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.196248187 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.194862477 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.192004529 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.21204487 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.197836076 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.193799698 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.194955481 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.201691052 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.18930741 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.196804246 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.198509579 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.197235492 seconds)
  done (took 59.254271737 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.190987874 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.370893164 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.480400846 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.230401203 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.187962868 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.195825628 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.216595489 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.194994563 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.1977602 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.188148499 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.30523299 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.193634869 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.209495839 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.47670153 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.223900224 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.192448411 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.188621664 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.196847978 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.378546 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.205222195 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.224851639 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.206813889 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.220631099 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.206669092 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.189402032 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.192825663 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.208514809 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.653517933 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.20687247 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.30676902 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.266313373 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.229276754 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.58379655 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.491742949 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.266091355 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.203230632 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.196317782 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.353146502 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.208241085 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.194259602 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.22451511 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.200399819 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.483760643 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.713953959 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.214208108 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.197261 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.650614576 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.363436985 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.244180791 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.199930769 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.49037386 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.22749334 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.19127468 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.196950539 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.233616294 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.207688759 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.197917981 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.475640455 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.212449462 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.227145831 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.215197338 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.193486216 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.388289612 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.20720602 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.377286615 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.209000397 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.195632157 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.197383786 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.484986721 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.231968834 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.709008151 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.213288088 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.195576836 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.31053641 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.37904812 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.672204539 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.210178139 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.398047734 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.601668804 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.235955376 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.20571239 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.637061061 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.238349095 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.196965153 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.192900301 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.197433256 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.195901802 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.238939873 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.190105645 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.623148842 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.704615776 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.490846157 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.238802478 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.205267407 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.197746136 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.473467415 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.20817974 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.195557678 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.479763517 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.738221616 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.212208471 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.202509434 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.685301368 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.21621539 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.228971195 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.20968839 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.4985103 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.232280073 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.237886209 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.197654748 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.204579722 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.200928524 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.227822284 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.203962625 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.195516957 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.672684838 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.368996464 seconds)
  done (took 271.37958659 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.20055714 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.196920302 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.196181327 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.194816378 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.194658625 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.193966851 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.19382886 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.195637276 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.194410768 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.193524151 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.200223973 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.198652122 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.196386805 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.19924881 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.236676846 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.196639122 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.688692337 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.198872525 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.196263126 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.198431117 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.772853159 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.208013721 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.196097712 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.198724503 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.199167058 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.201502331 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.196914854 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.234073454 seconds)
  done (took 176.793038015 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.199625857 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.249981913 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.211023394 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.243289358 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.211123204 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.197375266 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.218328585 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.212242757 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.20635302 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.195267318 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.200597111 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.226527798 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.205309717 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.273727784 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.23073782 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.231302806 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.280822322 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.206756388 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.198749244 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.192303431 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.246197238 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.209216213 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.224327852 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.252621102 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.214405804 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.250748607 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.214588385 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.202387132 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.200735386 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.293204612 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.221880198 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.226045569 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.235955496 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.217917974 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.295437166 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.291881803 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.278061717 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.217633553 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.204886159 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.199331674 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.202203496 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.199076647 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.248793988 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.214965766 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.202639473 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.2950954 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.221102393 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.204799404 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.222201719 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.200972864 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.212614603 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.215133635 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.233849881 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.303470718 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.247488852 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.226012271 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.224237638 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.222250565 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.206061165 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.276902516 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.212195273 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.295653503 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.225408988 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.203850213 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.205085558 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.208689644 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.253502565 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.239224581 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.283954542 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.213596141 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.27793505 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.2612234 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.218615494 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.20096892 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.203353107 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.253638459 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.294049739 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.263301518 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.264598252 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.241380672 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.215731795 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.200886636 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.209073547 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.227924429 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.209093626 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.295007311 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.294270966 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.212538767 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.204157902 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.200936978 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.204136595 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.227539606 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.264206477 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.241303268 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.289468908 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.240228393 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.237946332 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.21173866 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.214777207 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.211777475 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.233314572 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.214055411 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.217674086 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.536454487 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.245987242 seconds)
  done (took 236.671845992 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.539775925 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.251523644 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.274221287 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.48537583 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.565757933 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.1854757 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.246438534 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.254379781 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.264756561 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.376605638 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.315118985 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.300733816 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.240764005 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.227178923 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.246579478 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.250772508 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.281340839 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.537659154 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.354007265 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.787509358 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.2469093 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.508620924 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.561103602 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.589976081 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.292217318 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.620287547 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.857698605 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.350554636 seconds)
  done (took 72.140103564 seconds)
done (took 931.699474189 seconds)
SAVING RESULT...
DONE!
