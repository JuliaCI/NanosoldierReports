cset: moving following pidspec: 12559
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 2.007867082 seconds)
loading group "shootout"... done (took 1.144308697 seconds)
loading group "string"... done (took 0.671625886 seconds)
loading group "linalg"... done (took 8.651340994 seconds)
loading group "parallel"... done (took 0.168077518 seconds)
loading group "find"... done (took 2.866313553 seconds)
loading group "tuple"... done (took 2.075927136 seconds)
loading group "union"... done (took 15.40959752 seconds)
loading group "dates"... done (took 1.486983926 seconds)
loading group "micro"... done (took 0.221121825 seconds)
loading group "simd"... done (took 4.830337213 seconds)
loading group "io"... done (took 1.08176867 seconds)
loading group "random"... done (took 9.635987623 seconds)
loading group "problem"... done (took 1.534687764 seconds)
loading group "array"... done (took 25.259889564 seconds)
loading group "misc"... done (took 1.920409161 seconds)
loading group "scalar"... done (took 44.110873448 seconds)
loading group "sort"... done (took 3.356598933 seconds)
loading group "sparse"... done (took 12.908477806 seconds)
loading group "collection"... done (took 18.928865599 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.537607093 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.127256753 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.131375675 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.124281701 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.185665976 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.125426061 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.134225402 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087828697 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.866329863 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140752494 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.118015099 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.439604481 seconds)
done (took 5.477359065 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.16970494 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.095412486 seconds)
    (2/2) benchmarking "String"...
    done (took 0.085456417 seconds)
  done (took 1.424376214 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.073871892 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062219998 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069183771 seconds)
  done (took 1.456595763 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.067289002 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138553582 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067977134 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068614049 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.071554923 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068455062 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068205576 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068122368 seconds)
  done (took 1.806441891 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072667558 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069469042 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067489884 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069185409 seconds)
  done (took 1.53267951 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067505613 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.125461457 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06671138 seconds)
    (4/4) benchmarking "different"...
    done (took 0.06653318 seconds)
  done (took 1.578614105 seconds)
done (took 9.299815124 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.143152841 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.825738114 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.761186689 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.127108795 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250955137 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.45171962 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124948986 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.18734488 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.091394327 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.076945483 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.124340818 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079820347 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.454128251 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.405802886 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072123667 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.171376442 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.64307863 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087609011 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133796407 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.493636852 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074334338 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.089658553 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.087115405 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071523865 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.333269319 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154704177 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.679832354 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097312278 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068999191 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.09617571 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071106239 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079224559 seconds)
  done (took 10.89510372 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.096190786 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.09317528 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.071117612 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126561963 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.097469629 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072093045 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077482441 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069603611 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091891027 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125839275 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.092588235 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.101197992 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068747375 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071560464 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.081989062 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.200040304 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.083189024 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083706563 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069596208 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083177072 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108146301 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078943209 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080682768 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080674029 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.13191155 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.171128209 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097826767 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098597659 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068715962 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.081351515 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.120950902 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.127995324 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.068964949 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067014268 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121999219 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096991664 seconds)
  done (took 4.766983025 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.893319499 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.098144156 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085618496 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074780561 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106425687 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113694767 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.122015834 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123044448 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100317685 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069156781 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152427039 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.647758823 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.146239665 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071753252 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120483942 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.363634802 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.061895099 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070446544 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068798854 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071255865 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069720908 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.11186247 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066000691 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.17933306 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.584674414 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071111949 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069625302 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097155483 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065606312 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140804158 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.096112216 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069984221 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.553000371 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.06582209 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063741103 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088457723 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093033232 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066105249 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067690578 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078381311 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.181038355 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110255983 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081913548 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.495112618 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070059399 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.569041564 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.229897696 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.076312824 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072855227 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10209085 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064566102 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067995023 seconds)
    (52/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.11468343 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.869342717 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.122420538 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067110369 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272443854 seconds)
    (57/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065518207 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06727156 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068467771 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068856838 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099509696 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067775459 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068927571 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073118998 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096622615 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.875163619 seconds)
    (67/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.070380471 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.087446277 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097742518 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068424567 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.404483568 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.075555213 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069358333 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069837649 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.083994385 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111678625 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066647812 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066130267 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107566709 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.088936432 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089030824 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070173997 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067911149 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068320555 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.324584073 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.16404574 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06725501 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067674583 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.478372355 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064565496 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066045305 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.06796518 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.088961105 seconds)
    (94/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.06457994 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065453306 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063918763 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064526547 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099812886 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067168259 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.453904629 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.069858781 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.469928607 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071633149 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.109106385 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.124302563 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070071543 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.098904897 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.070711194 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.067436274 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.076109869 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067596205 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066805466 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071491396 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.068049505 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068392323 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071052481 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070327985 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069222447 seconds)
  done (took 22.808016977 seconds)
done (took 40.620554277 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.320673233 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080585738 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080839612 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080796263 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.081485675 seconds)
  done (took 1.941116102 seconds)
done (took 3.340849788 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.135393121 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.07721028 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066373795 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103813457 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070864105 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104061597 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111494395 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.107208491 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070590672 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.071233611 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070910203 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.104702856 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107640855 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070952591 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.10148263 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.10668424 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070767022 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06944472 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070915284 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.07098602 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070517974 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066133962 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070679887 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070643234 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.102251606 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070674782 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065389213 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.100312101 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.071142285 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100317765 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070721487 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.071067058 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070888985 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.102511161 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.071314888 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.101822721 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066321559 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.071312914 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.071019616 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.070874561 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070695721 seconds)
  done (took 4.731525108 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072879738 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083495086 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085791127 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063655894 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073510881 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084177841 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063799212 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084160409 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089993634 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084523188 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084232378 seconds)
  done (took 2.220578785 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071418565 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08511994 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089868444 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063722801 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075398662 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085117499 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063981372 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084566584 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087771762 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.0857872 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085294717 seconds)
  done (took 2.204939295 seconds)
done (took 10.476981792 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.098440534 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.068551971 seconds)
  done (took 1.475084632 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.227640378 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.631801471 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.308000998 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092740292 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.07202358 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085688881 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.201198483 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067751163 seconds)
  done (took 8.190455763 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.101481845 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.073064535 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069846333 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070610822 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.070010905 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071160238 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069864375 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.072030919 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.069695283 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070918003 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071484951 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070329668 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069785295 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071793896 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.072129299 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069192833 seconds)
  done (took 2.59202439 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.106330475 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.07120242 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101915829 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063784864 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.074021006 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064404135 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072370004 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.074694964 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.071835436 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.07297946 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074029825 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.072726639 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072575999 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073853201 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075353271 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074760572 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.074949919 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072527305 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07493331 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075510601 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073774466 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.074989278 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075814936 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073833978 seconds)
  done (took 3.260278586 seconds)
done (took 16.843667759 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175673509 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076589816 seconds)
  done (took 1.570369429 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068837775 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.06956727 seconds)
  done (took 1.472371058 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073915847 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062732962 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080821764 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072093081 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063486824 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062759246 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079427083 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063386504 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063140015 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063739589 seconds)
  done (took 2.023897705 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.064454604 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071087485 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.069605286 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066447107 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069028819 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064068057 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.06723755 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064683904 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071594282 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.06402136 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068307882 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085870155 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067921734 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086658014 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067699285 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068278661 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069722644 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067532211 seconds)
  done (took 2.599387896 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061459991 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062304131 seconds)
  done (took 1.460551518 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065049508 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062593396 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064878224 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064717333 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063051917 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061711911 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062804012 seconds)
  done (took 1.776588309 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.42193087 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124378903 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.34782458 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070928476 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.079051236 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259720824 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065317311 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070602063 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070395194 seconds)
  done (took 2.885505119 seconds)
done (took 15.140532992 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083416098 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.184781244 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.09031023 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.40911731 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094246846 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069306905 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114712865 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.177060486 seconds)
done (took 2.584108335 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.215786204 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.250641031 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.394574005 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.127548739 seconds)
  done (took 3.122139998 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336263711 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.080073459 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078934659 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.069109571 seconds)
  done (took 1.923152021 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066200342 seconds)
    (2/2) benchmarking "read"...
    done (took 0.07288437 seconds)
  done (took 1.489352792 seconds)
done (took 8.110270754 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07409878 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.094234587 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064790153 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.069626931 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065483989 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.064329388 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.064127179 seconds)
    (8/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.073079775 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064806991 seconds)
    (10/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.06314894 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062009646 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.064713806 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.064384022 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064373914 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064242329 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064001354 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066012411 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065567401 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065663862 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065739465 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066241922 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.064930536 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065810319 seconds)
    (24/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065175496 seconds)
  done (took 2.981113333 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.082354434 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067459434 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068817964 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068746037 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069281407 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068437684 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068672943 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067613708 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068530087 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.06686491 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06921077 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.06872279 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.06700223 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069418274 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067499396 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069720362 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068954486 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068041187 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066794252 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069019859 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068924432 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067848171 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069123734 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069289946 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069337197 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069116749 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067587811 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067859333 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069146795 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068850362 seconds)
  done (took 3.444009631 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.068118721 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061532064 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062479024 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071185576 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061611522 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061867369 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062329316 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060307203 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060911588 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061814033 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060944018 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060525904 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061391623 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060199518 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060680466 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060989387 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065353196 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080582813 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062745937 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062153482 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066249353 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061838462 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061688032 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062005583 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.063005762 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062154468 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061767071 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.06253991 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061735797 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062710535 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062025611 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065878469 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067260126 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061598585 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071801696 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066543686 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061901448 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065587936 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063096826 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06148189 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.06171702 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061727298 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061786932 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061707317 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072279959 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062074309 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062964553 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063072579 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062323301 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062056607 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061984546 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064228947 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070747851 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063144427 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061870037 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062708499 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061510644 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062741424 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062094096 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061554087 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061339946 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065060825 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063722558 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062364611 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081574976 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063522552 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071716075 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061893739 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062547712 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065619354 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062762905 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080284924 seconds)
  done (took 5.972546153 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072282336 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074468886 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.081394455 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072122407 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066609174 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063538391 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06678808 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063212894 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073283216 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067512226 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063443668 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066896173 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072812692 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06755678 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064878393 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072604011 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067587664 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066285587 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063359461 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067441166 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06444079 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06687401 seconds)
  done (took 2.880245342 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.137331127 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06823596 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108114914 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076018976 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070359775 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077054118 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067777754 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068134369 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068141044 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068517567 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068759839 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068660564 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.07068801 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068907534 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068552554 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068497748 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068279969 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068814906 seconds)
  done (took 2.737353645 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.07723728 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.068354682 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091467315 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067379443 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068017983 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06766871 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071177055 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071811864 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066808414 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06718438 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071274248 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066711635 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066833896 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066952539 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067390888 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067857076 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067296965 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068129699 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071393648 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070912848 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.07137774 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071765523 seconds)
  done (took 2.923545566 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07831715 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066863931 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081682745 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06790061 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.0622227 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06146404 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066961725 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067219577 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067942666 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066525666 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066957242 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061872809 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068832307 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067191677 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068661248 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066882533 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066618241 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067264882 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067107066 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062242334 seconds)
  done (took 2.736805398 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.087353899 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06408854 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064168388 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084284671 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064888546 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064766952 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084502324 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064759421 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066165077 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08716967 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065365354 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064994322 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.083950421 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.085059992 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065426358 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084472269 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.085137992 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084786088 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065041333 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06510654 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087206817 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065072286 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084859175 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065268483 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06481501 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063898037 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063538061 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082669196 seconds)
  done (took 3.444611012 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065734727 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064832878 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065310163 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064752465 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.066133025 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065757869 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065715715 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065950487 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065631157 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065786996 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066085765 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065392407 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068934204 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065252833 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065576826 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065565472 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065387567 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066054099 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066064647 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065779356 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065333599 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065509323 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065936446 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065695881 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065420257 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065287344 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065572799 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065393766 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065091489 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065525597 seconds)
  done (took 3.357943629 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.075183095 seconds)
    (2/2) benchmarking "in"...
    done (took 0.073986122 seconds)
  done (took 1.5368413 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062846446 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079539302 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061563731 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.07458001 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071006365 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066134085 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07060324 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070366333 seconds)
  done (took 1.939950115 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.06728715 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091798729 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064416411 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064145398 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066786509 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.132365036 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.0766813 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076007183 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078089086 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066154664 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063981768 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076293124 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063466047 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077393003 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065806687 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073125837 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071194744 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081211279 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077353356 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062379573 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076573012 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064932189 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.06276853 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064222601 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063445782 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070601223 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080413584 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076705615 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072139343 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061446729 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082008895 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061799333 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062255144 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070483288 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065624768 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062158791 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098743117 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063241828 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067957681 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062212124 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074889875 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083376468 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077773166 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081121125 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.065291079 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.065189433 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.06230529 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065037989 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066498739 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.073097994 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.06319925 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070714722 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.061776107 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064512734 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073518117 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063400145 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067680558 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.07219909 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076897501 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073344475 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071298064 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.079154971 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071780983 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070906243 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063343475 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081702755 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.065054726 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076572608 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077944966 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064632095 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.075994284 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061675763 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061866226 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.063076494 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.095455821 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064466045 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064131167 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062866551 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062797074 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.06342011 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071518824 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066683915 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069305181 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06416649 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077039887 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070652557 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061750758 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067197001 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078442816 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06421795 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060878013 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.076878583 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064145404 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060675868 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078486824 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070472677 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06234063 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061995136 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064634836 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073881524 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06185572 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059494846 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069291771 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06209563 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062497864 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064859769 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068509441 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060743437 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070641112 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064949463 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061394778 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058779322 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064746089 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062063132 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060607595 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07088912 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.06152209 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076394571 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066763621 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074740592 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075045058 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070685839 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077869799 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061152025 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058814586 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077578736 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069029542 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.202448495 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.08304903 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.064008151 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.077177484 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063038537 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063795273 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071470004 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060897249 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063818605 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.06175974 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066363418 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062896628 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063240975 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067039564 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070402529 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073890573 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062801529 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070470467 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061714435 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077248839 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071613676 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066633986 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065127525 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062140705 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073449826 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068329184 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071178382 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.06076023 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062383411 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062224958 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072075644 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071483011 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063388795 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068414385 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065744482 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062126187 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061981481 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062541556 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065156645 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064727355 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062083371 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06937715 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.07070147 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075345094 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.069029186 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070827539 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060689463 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061385767 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063300373 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061186783 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065516392 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070934205 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077268626 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073487777 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.08306898 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063078681 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.072121066 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.0641268 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078577195 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075616001 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064178217 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06649333 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060732638 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063275438 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.07104794 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07264811 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074966162 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076183971 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065835697 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066811895 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062473967 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078476654 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063142933 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07108837 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071405761 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067629125 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063010061 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.0643024 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.071938109 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067411699 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.0628942 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078865098 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069215665 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062743929 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077135734 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063166068 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073515363 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062684472 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066073967 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068522025 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064917631 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072115746 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078285528 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.062150471 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063298021 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078499606 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.064591804 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064000226 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070803555 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078474276 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067221577 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070869863 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074160076 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072920107 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066745804 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072126612 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063501079 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072035855 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065795618 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074467389 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062828282 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080449211 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061374034 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077928476 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.063049296 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.074010268 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063027327 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071965536 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.063033688 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079672015 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.064201248 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062251152 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072789324 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.061123054 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071258929 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061722282 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066867442 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068686159 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071576226 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.064594971 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07212082 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.063510944 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.07076312 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.065938446 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.069696884 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.070823612 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066101268 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.06116122 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.069115321 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072978388 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.0698796 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063448138 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063201319 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062595358 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070767692 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062875173 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063170186 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070382657 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.065647646 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066622749 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063363794 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.062858934 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062524778 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068578546 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069665718 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077763317 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069491719 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068066505 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.07134834 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061557202 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077214044 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061698471 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071616552 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060663227 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067321229 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069640891 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060388526 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077653806 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060501068 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067768432 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071146375 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068166245 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064374135 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.076998832 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06223522 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068633809 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068273842 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064511111 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066457737 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062288038 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068702522 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069742419 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071144018 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061575464 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069012002 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07029878 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063259992 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.067238697 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.061169398 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.067969964 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.060642576 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058545702 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.064166053 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070774885 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.064563957 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064461989 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060110858 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.058507633 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060148995 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.065131357 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063729988 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068119591 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074800841 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059209593 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060468943 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.05851631 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063607853 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.07722245 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.06979164 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068057842 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065369679 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.06103862 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.06249391 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.06160282 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060187668 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.062463801 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.058521231 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.059048145 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069884318 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.060683629 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063705511 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060019746 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061076475 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.069037363 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063854763 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060681453 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066204871 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.059002506 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.06422634 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058824625 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060858569 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063856091 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058991531 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.063619666 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.070232715 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075309722 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.066308504 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.0687987 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.06075293 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067269962 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074399231 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065333065 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060936737 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068867777 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058886068 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077091153 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.06926746 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068662232 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069194298 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061323773 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075626307 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063883502 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069641857 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074992898 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061118095 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.064566757 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059095585 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074661383 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064049639 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.05974404 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067454832 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068084896 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065472595 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070800522 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060345528 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067212248 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064448167 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063560682 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061228469 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.06066334 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068309169 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074986194 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060342331 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063587756 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067091038 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068421248 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06421314 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071467257 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067284014 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060781908 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.060584518 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063023038 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.061124384 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.070494855 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060327849 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064110925 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.063900367 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.05947352 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066107936 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076395549 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069591783 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070400788 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060815586 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061388075 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078360462 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065001156 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064233042 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069149843 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070956711 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073607323 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070179267 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077054088 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060601553 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.06482524 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071716853 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.060496653 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.059641698 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.063154832 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.06043175 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.068433895 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069030147 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.066910007 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06148116 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066097171 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.073487696 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060876715 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.064856022 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.063522447 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.060554737 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.069743497 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067857253 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071212808 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.060949172 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059211426 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.063204208 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.06808572 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067242914 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.067974726 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060648198 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.064480796 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.071904548 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.067030478 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062715507 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059173924 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062452891 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.069178859 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063559247 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058967129 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.064957311 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.06368599 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065559343 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068821275 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.06406486 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.059986632 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.076274534 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.068243525 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.069591325 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.06201214 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06239171 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060521092 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059563067 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070489069 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.059551365 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.061097326 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.064972403 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060458129 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.075743092 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067304931 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074051795 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061231146 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.064107508 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058669872 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069241357 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063760002 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059909212 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069535927 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.058920065 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074530238 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070508302 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.063758372 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058799972 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.085294106 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.066571353 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074144933 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.06973304 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069042361 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.061898648 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068872368 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060716615 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070035498 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.059497513 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058616515 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069144929 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067708098 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071259171 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058478024 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069839297 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.060955207 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067422125 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.066718265 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060880247 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060504406 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061663366 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068697936 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064120584 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068795694 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.424865459 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.083574747 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.067071005 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.078088779 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.075669933 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.077698932 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.080892289 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078901741 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.074400721 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.067311782 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07445614 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.075142469 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06729745 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.070616901 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.069574858 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.089866997 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.068785424 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.068342505 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.081847378 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.073652711 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.067188288 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.073489656 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.072235439 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.077709904 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.067910454 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.07796643 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.071034992 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.06744806 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.071752742 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.071877491 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.065692223 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.06593176 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.065880332 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075812374 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.070379905 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.066357947 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085188735 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.067723881 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.075360407 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078039223 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.072721516 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.067328408 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.064356007 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.066969408 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.079242421 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081272982 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.06939425 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073886534 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.066764639 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.07528807 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.064198233 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.074420078 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.074358927 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07466036 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.064891696 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06659113 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.081125863 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081479371 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.07061052 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074798739 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.074689461 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.066725809 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088108228 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.074568575 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066757237 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.077484846 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.068099892 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.064956279 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.064032754 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.06687912 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.077081443 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.064490736 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.067438867 seconds)
  done (took 42.402733176 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.104176873 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066706552 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065215793 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065309182 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07678194 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066062112 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065528523 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.066029945 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065613944 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.067834298 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.064540721 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066958571 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075495751 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.078210325 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075066424 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.068709718 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064511399 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065358135 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064288361 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065512418 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.075051753 seconds)
  done (took 3.067288236 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066169248 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066181583 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067032127 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066979098 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066530317 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062594096 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066853204 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063827748 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067708866 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063817271 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067119442 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062962394 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063076725 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063369805 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063109267 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064349387 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067273005 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066434862 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.064329291 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068965047 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066122103 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.068879104 seconds)
  done (took 3.007229962 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.064096861 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063748694 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.07231206 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.063676918 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.063201396 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.06660806 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.063330791 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.068675463 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.069251083 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.069299096 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.074625405 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.065554365 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.06445059 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.070586873 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.06386513 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.065332207 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.109306698 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.065743566 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.066131163 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.064175704 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.066973007 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.073876642 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.064542218 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.06412138 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.068772292 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.06830357 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.06388596 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.06654568 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063632309 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066845391 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063655698 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062827606 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072092052 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.072733446 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.068761776 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.068486286 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.065981079 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06504636 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.064351727 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.064086994 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.073229347 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.065465564 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.064160883 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.065716572 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.073178725 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.064172271 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.063945253 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.07407276 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.064196978 seconds)
  done (took 4.886684776 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073312981 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.118564201 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.069958111 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.098858763 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.077712239 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.071109715 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.070218386 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.099941962 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.065070922 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.066521591 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.077999774 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.078696577 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066944529 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.068649283 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.071431083 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.067873637 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.067705336 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06662909 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.069973525 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064911131 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068366394 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.069584875 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075315079 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075808962 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06634771 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064232492 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064773765 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066227633 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.075571327 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068661089 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.066902502 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067096291 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.075567326 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.06878132 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065323321 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.066111553 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.079296617 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.067073813 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06710832 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.065299041 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.066780998 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.06895663 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.071861421 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.078749203 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.067788269 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.072137975 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.067464689 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.065580926 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.077849665 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.066762598 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.072169768 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.079670294 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.068942864 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.068860989 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.068372664 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.077094627 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.067003246 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064858438 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.067780698 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.077839369 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064807542 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067940227 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.081122178 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.067124749 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.070730115 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.078827989 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.072548777 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067345169 seconds)
  done (took 6.599407407 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072414962 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098735578 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.0754041 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07554213 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075561248 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.075893322 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.075810407 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.075381517 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07521269 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075804064 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075306374 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.116386175 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.071726863 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.080482199 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.075694152 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.075776058 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.075733459 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075585091 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.075039193 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075272452 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.074541752 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073471035 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073351642 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07361553 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075090043 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069135452 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072491334 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073044323 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073941691 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073876216 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076640376 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.074088369 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073964799 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074238419 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.0760688 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073671891 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064328748 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073550713 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073976169 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.074524759 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.070070774 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07388858 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073437135 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.070105449 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073819913 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07312849 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073840391 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.075620425 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.080379753 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073467203 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073540724 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073657211 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073909348 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073983017 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074223422 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.08045719 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073994263 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073976033 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073263651 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074048678 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073936261 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080115591 seconds)
  done (took 6.284031242 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076168472 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068712728 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080980803 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062038577 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061972811 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071892337 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062361396 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062009455 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069055719 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.069334458 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070528443 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071293403 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073671661 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070457261 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071111024 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073607676 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071619833 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.071659772 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070645389 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.074291539 seconds)
  done (took 3.004436855 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.07771463 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.081464706 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068133422 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071558193 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068244559 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072001393 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.069211534 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070294684 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070428445 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069993328 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.074705894 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.074661818 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070817375 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.073720107 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.074546889 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.074047965 seconds)
  done (took 2.750349602 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065957099 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070216602 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.069117065 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063681794 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065747787 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.06286317 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063709848 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.063438172 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.066587611 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077400875 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.065296024 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.068061483 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.063944356 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063003026 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063096589 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.066099226 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064851833 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06398218 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064127457 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.067751417 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072106567 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.067579987 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.067416484 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.065003255 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.067657186 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.074057185 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065699977 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065381939 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062987212 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.066253175 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066248569 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070701197 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065835834 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064306784 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062644722 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063474635 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.063647794 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.066280302 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066295145 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.06429883 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062290858 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.06874486 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064081708 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064209759 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064751558 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.06590304 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064944995 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069439242 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06385636 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.065654741 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063753238 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065133931 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063893924 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.070463898 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065441529 seconds)
  done (took 5.218939887 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080071545 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067449695 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062435644 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063005749 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.069364135 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.069788237 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069414829 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069888285 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069988304 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.064231897 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070087454 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068819229 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070173437 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068603121 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070019426 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069780044 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06370875 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069590532 seconds)
  done (took 2.841170113 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.069424418 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068287871 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.067144326 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064391984 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.065504572 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.070750586 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063936059 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.065294039 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065940358 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065804189 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066021861 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.065693199 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065728286 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.06585618 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070343446 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065615261 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.065221829 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064086427 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.065873331 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064149284 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.070450986 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063943689 seconds)
  done (took 3.056473369 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.090722063 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.087967138 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.132715059 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.083755187 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.092638802 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.075728295 seconds)
  done (took 2.162880903 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096763635 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105878981 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067759326 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06727332 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075619097 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070308853 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070096013 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070088515 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075938933 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074158302 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070122045 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075596 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076266436 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071902898 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075665985 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078103898 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071229927 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072490803 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069075409 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080753327 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072646461 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078130923 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071311888 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070678887 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07032007 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072958776 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079226983 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074783473 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070873957 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079190017 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080600984 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072381461 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077958878 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076717816 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069376014 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077990021 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072447476 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080926548 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078440345 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074533644 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.069302396 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077968582 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077096407 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074001966 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080290111 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072411702 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073631538 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071947026 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072347377 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.082288371 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077829917 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074082276 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077165672 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.08126895 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080749313 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.082559815 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076295234 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074115114 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077865365 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076550853 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07428872 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077380618 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074990265 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077308924 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080730338 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074402196 seconds)
  done (took 6.607678267 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103065228 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069634125 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072605453 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076902734 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074275534 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072640898 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073044839 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072547926 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072566758 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069908023 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.109081428 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073705158 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074359744 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077215942 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072121881 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072194975 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071999441 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073066609 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068343783 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080717533 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070522942 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072675157 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072383361 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073205449 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075539264 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080663629 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073007638 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072287731 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072321763 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071904822 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073034527 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071279129 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072636401 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068929593 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074232419 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072319611 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072332237 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074214837 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072185135 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078012736 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073457766 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078523647 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071143118 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070797797 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073710586 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070278058 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070098291 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067282514 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070655657 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067460628 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073747709 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074017338 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074404609 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07217944 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070795285 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070495349 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070453106 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07104791 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072900157 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080064104 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073205495 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071647497 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.082698626 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072368894 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072773821 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073634588 seconds)
  done (took 6.511328242 seconds)
done (took 133.710608772 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219277286 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.19250867 seconds)
  done (took 1.995669049 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.076189635 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.168619516 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076408185 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.07630702 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109985453 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.109020355 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.077300615 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073572466 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075979817 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073783757 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.141273811 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.07775002 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073241771 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073301089 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073360421 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073984265 seconds)
  done (took 3.038039246 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.110021611 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.19220628 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.08602724 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.073292974 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.118468336 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.080141083 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.075428669 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078541119 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.080087921 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.073381533 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.112025692 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084788617 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076972752 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.081197443 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.076220495 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.077210996 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.079453907 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.08062143 seconds)
  done (took 3.251492579 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.099221037 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.088216388 seconds)
  done (took 1.811904196 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.166786791 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.109540533 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.148483368 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.335429765 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.132868472 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.133274466 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133020108 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.13068284 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.115480417 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.124155186 seconds)
  done (took 3.145722908 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107509237 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.107674134 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.314968145 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.105025425 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.083431778 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078616588 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.076587237 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.081508659 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076511899 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077351057 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.124262805 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077853065 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.075618832 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127497657 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.10131685 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.108039188 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073378941 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.079927443 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.081174443 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.07215885 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07693007 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080890674 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.180919291 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.080134413 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100959782 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.076162197 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.078362709 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.076543916 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.077006275 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.081268086 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.081607852 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.101507955 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079398058 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.084002767 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077963918 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.098146717 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.073355099 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099526423 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075440521 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073661448 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.076503828 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079964215 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.073883922 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.080665524 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.076535345 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078769251 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080867004 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072074472 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076385998 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075693842 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073495749 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.07735248 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.077089214 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.078190318 seconds)
  done (took 6.492776181 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.109550795 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.11051834 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072116797 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.114637643 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.107495852 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071283193 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.106856513 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101541369 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.110017633 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071121475 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070439429 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071161225 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077389799 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080192239 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.12008735 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109144748 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072694153 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070819948 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.109388688 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.108594953 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07028833 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.103663365 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.101226362 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107792822 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069572559 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071019353 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069517721 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070720187 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075180333 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075963491 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070765544 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078234471 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.08340494 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076218483 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069369642 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069837381 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069657146 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076592623 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077575518 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077541871 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075718846 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069297727 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070044107 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070411654 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071155678 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.07071819 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077056397 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076583245 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075623088 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069790644 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070669506 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070110537 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070215585 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076440834 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07564108 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.077810574 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076939001 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069849959 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070083292 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071693354 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077954068 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077198229 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076551538 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.0705988 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077833892 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070194334 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078854987 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.08212496 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070375031 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070385872 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070254009 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070431028 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070553125 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075932958 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075696647 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071026542 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.07025653 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069716084 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079394797 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077194217 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070032886 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075660451 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069769032 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070117697 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070709432 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071947287 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.078154226 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079618265 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072107249 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069955173 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069913571 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069639071 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069783133 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075406744 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076200786 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.077120693 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.076217621 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070922842 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076620575 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077447306 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070827623 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075991728 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070291307 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071737338 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071276844 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076149746 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.075598694 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078259514 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069433829 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069164965 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075750492 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077761275 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.21377505 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.0781678 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079623432 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.077274889 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070220737 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079333209 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070603738 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078093493 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070667333 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078779612 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070769516 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076623772 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069950571 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069709075 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071204566 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.078133401 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072965414 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072274604 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.073027247 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072571967 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.079498059 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.083006495 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.073803023 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079465011 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.08001818 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.073026981 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07614894 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070577288 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077137172 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070419822 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070092678 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069728524 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079034667 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070825543 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070587929 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070107669 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077855943 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070320253 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078692054 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076178048 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070100028 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080482144 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078000243 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075827419 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078483293 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070578376 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070540222 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069674531 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.07285105 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074972937 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077664412 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072877437 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072265078 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.077577923 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.080341907 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069336401 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.076066183 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075413078 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.076999051 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070263597 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069862874 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078644209 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.318429497 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076556496 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075326563 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076324264 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069963394 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075065692 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075691791 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069561591 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081775291 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069994628 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079698291 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075752105 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075140704 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076347397 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077156984 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077376431 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078329442 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.08019823 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069418221 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069685423 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.07598067 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069269454 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070164697 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077296759 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072781654 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072151402 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.084950266 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069993927 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078050188 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069438328 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076242672 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069587751 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070249614 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080275746 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069993742 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070057228 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075746845 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069777245 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075242701 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077996429 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075487666 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069567794 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071938107 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07919453 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.079832802 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.072737732 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.07163908 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072049855 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.077398763 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.077331653 seconds)
  done (took 19.09955938 seconds)
done (took 40.463297342 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172338147 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116793369 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.209643608 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199815416 seconds)
  done (took 2.414598013 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101881769 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066595981 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.082087529 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.091637181 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066226064 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.077236283 seconds)
  done (took 2.143313674 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.203082623 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175142349 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.241531124 seconds)
  done (took 2.2768789 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.370938514 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.152323916 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.220834938 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.508732067 seconds)
  done (took 3.005767176 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.111569613 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101474114 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.079010041 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.112348861 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086557713 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.064182705 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133924295 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070957677 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100581457 seconds)
  done (took 2.590527971 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.130949006 seconds)
done (took 14.245203846 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.240582617 seconds)
    (2/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.11501683 seconds)
    (3/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.124625602 seconds)
    (4/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.07761418 seconds)
    (5/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07654384 seconds)
    (6/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.234444012 seconds)
    (7/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.126586862 seconds)
    (8/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.074559249 seconds)
    (9/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.093277295 seconds)
    (10/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.078422604 seconds)
    (11/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.175400613 seconds)
    (12/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.182694409 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077655281 seconds)
    (14/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.240788223 seconds)
    (15/341) benchmarking ("sort", Float32, false)...
    done (took 0.141612064 seconds)
    (16/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.081986469 seconds)
    (17/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.234201596 seconds)
    (18/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.079670849 seconds)
    (19/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.193710068 seconds)
    (20/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.082020327 seconds)
    (21/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.242629334 seconds)
    (22/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.186966991 seconds)
    (23/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.090233283 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.159267101 seconds)
    (25/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.069772431 seconds)
    (26/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.14817627 seconds)
    (27/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.095455063 seconds)
    (28/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.083358831 seconds)
    (29/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075626603 seconds)
    (30/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.224663265 seconds)
    (31/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.172379511 seconds)
    (32/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.25931281 seconds)
    (33/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.07750513 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.0862897 seconds)
    (35/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.074366175 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.128185809 seconds)
    (37/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.262318288 seconds)
    (38/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.201331097 seconds)
    (39/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.148161417 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.080513486 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.079618358 seconds)
    (42/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.173067754 seconds)
    (43/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087790168 seconds)
    (44/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.117047386 seconds)
    (45/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.097703252 seconds)
    (46/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.082474148 seconds)
    (47/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.18273272 seconds)
    (48/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.07049707 seconds)
    (49/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.068581246 seconds)
    (50/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.190995728 seconds)
    (51/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.130158757 seconds)
    (52/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.100820323 seconds)
    (53/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.086814635 seconds)
    (54/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.162535111 seconds)
    (55/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.17107107 seconds)
    (56/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.150205532 seconds)
    (57/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.070511418 seconds)
    (58/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.069834214 seconds)
    (59/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.072573812 seconds)
    (60/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.077715718 seconds)
    (61/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.078054038 seconds)
    (62/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070738366 seconds)
    (63/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.078392586 seconds)
    (64/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.244086792 seconds)
    (65/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.070998099 seconds)
    (66/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.154215167 seconds)
    (67/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.067691654 seconds)
    (68/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.222316458 seconds)
    (69/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.078632894 seconds)
    (70/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.203509755 seconds)
    (71/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.077462247 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.09628281 seconds)
    (73/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.078498866 seconds)
    (74/341) benchmarking ("sort", Int8, false)...
    done (took 0.153828948 seconds)
    (75/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.084513854 seconds)
    (76/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.1117145 seconds)
    (77/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.091642073 seconds)
    (78/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.077124176 seconds)
    (79/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.079253334 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.265143571 seconds)
    (81/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.079323657 seconds)
    (82/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.154828492 seconds)
    (83/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.082583044 seconds)
    (84/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.070974259 seconds)
    (85/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.17961415 seconds)
    (86/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.141847928 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.091543813 seconds)
    (88/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.081779764 seconds)
    (89/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.089457935 seconds)
    (90/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.074675587 seconds)
    (91/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.094296549 seconds)
    (92/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.213872447 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.146151425 seconds)
    (94/341) benchmarking ("sort", BigInt, false)...
    done (took 0.275266928 seconds)
    (95/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.069591258 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.152908995 seconds)
    (97/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.070591135 seconds)
    (98/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.149326113 seconds)
    (99/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.227083881 seconds)
    (100/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.078345491 seconds)
    (101/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.147276924 seconds)
    (102/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.079119436 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.095737244 seconds)
    (104/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.226566897 seconds)
    (105/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.081729929 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.088546919 seconds)
    (107/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.075572298 seconds)
    (108/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.148965307 seconds)
    (109/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.072532371 seconds)
    (110/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.155586664 seconds)
    (111/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.201751189 seconds)
    (112/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.081916321 seconds)
    (113/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090139212 seconds)
    (114/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.195069891 seconds)
    (115/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.067918613 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075229713 seconds)
    (117/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075135439 seconds)
    (118/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.066444895 seconds)
    (119/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.116173638 seconds)
    (120/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.156552914 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.094251171 seconds)
    (122/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.079158473 seconds)
    (123/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075754235 seconds)
    (124/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.068748492 seconds)
    (125/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.123042142 seconds)
    (126/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.067384588 seconds)
    (127/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069138651 seconds)
    (128/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067511346 seconds)
    (129/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.181315073 seconds)
    (130/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.083047404 seconds)
    (131/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.072032218 seconds)
    (132/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.080287467 seconds)
    (133/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.073268795 seconds)
    (134/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.169067269 seconds)
    (135/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.156191694 seconds)
    (136/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.147564872 seconds)
    (137/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.239727557 seconds)
    (138/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076806713 seconds)
    (139/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.192856274 seconds)
    (140/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.158000614 seconds)
    (141/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.069526487 seconds)
    (142/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.076287246 seconds)
    (143/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.068573206 seconds)
    (144/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.07661026 seconds)
    (145/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.068471698 seconds)
    (146/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.077931461 seconds)
    (147/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.06988451 seconds)
    (148/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.069404659 seconds)
    (149/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.170113762 seconds)
    (150/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.072440864 seconds)
    (151/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06970916 seconds)
    (152/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.07026692 seconds)
    (153/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.077134716 seconds)
    (154/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.085591073 seconds)
    (155/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.083944075 seconds)
    (156/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.067188137 seconds)
    (157/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.067766859 seconds)
    (158/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.067796439 seconds)
    (159/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073931366 seconds)
    (160/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075605099 seconds)
    (161/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.066752889 seconds)
    (162/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.079591657 seconds)
    (163/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.141228137 seconds)
    (164/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.079116435 seconds)
    (165/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.195145982 seconds)
    (166/341) benchmarking ("sort", Bool, false)...
    done (took 0.148948813 seconds)
    (167/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.078340169 seconds)
    (168/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.176781254 seconds)
    (169/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.146309733 seconds)
    (170/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.07117046 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.069774304 seconds)
    (172/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075293106 seconds)
    (173/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.07687137 seconds)
    (174/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.153394298 seconds)
    (175/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.082959273 seconds)
    (176/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.066464275 seconds)
    (177/341) benchmarking ("sort", Int64, false)...
    done (took 0.068343711 seconds)
    (178/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.073665618 seconds)
    (179/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.067828612 seconds)
    (180/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065772011 seconds)
    (181/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.074257815 seconds)
    (182/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.07495999 seconds)
    (183/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.197630673 seconds)
    (184/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.159825209 seconds)
    (185/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.070431457 seconds)
    (186/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.326269787 seconds)
    (187/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.073849132 seconds)
    (188/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.079054891 seconds)
    (189/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.082745194 seconds)
    (190/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.193794558 seconds)
    (191/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.066643765 seconds)
    (192/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.067725181 seconds)
    (193/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.204322046 seconds)
    (194/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.141588179 seconds)
    (195/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.067275784 seconds)
    (196/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.07468207 seconds)
    (197/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068761714 seconds)
    (198/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077155472 seconds)
    (199/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.075267888 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.154195953 seconds)
    (201/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.068202111 seconds)
    (202/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.066000624 seconds)
    (203/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.066058151 seconds)
    (204/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.097356162 seconds)
    (205/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.069898463 seconds)
    (206/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.074931318 seconds)
    (207/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074529771 seconds)
    (208/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.06704517 seconds)
    (209/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.066053266 seconds)
    (210/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.070543164 seconds)
    (211/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.149461051 seconds)
    (212/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.067637417 seconds)
    (213/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.068402595 seconds)
    (214/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.138237524 seconds)
    (215/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.070314001 seconds)
    (216/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.067367624 seconds)
    (217/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.083360818 seconds)
    (218/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.068688679 seconds)
    (219/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.086354428 seconds)
    (220/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.070280707 seconds)
    (221/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095678638 seconds)
    (222/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.069463015 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.092094731 seconds)
    (224/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.068228403 seconds)
    (225/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074544531 seconds)
    (226/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.069785916 seconds)
    (227/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.069670062 seconds)
    (228/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.085364016 seconds)
    (229/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.068966745 seconds)
    (230/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.068100158 seconds)
    (231/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.075975491 seconds)
    (232/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.173398893 seconds)
    (233/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.077032585 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.135520831 seconds)
    (235/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.084063002 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.072742065 seconds)
    (237/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.070056421 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.069357524 seconds)
    (239/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.138089387 seconds)
    (240/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.0696837 seconds)
    (241/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.168816276 seconds)
    (242/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.072293961 seconds)
    (243/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.224558558 seconds)
    (244/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.088508181 seconds)
    (245/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.072626098 seconds)
    (246/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.06999521 seconds)
    (247/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.23075605 seconds)
    (248/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.088590841 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.081859716 seconds)
    (250/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.167350267 seconds)
    (251/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.080236832 seconds)
    (252/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.167213075 seconds)
    (253/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071456411 seconds)
    (254/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.068897379 seconds)
    (255/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.075549232 seconds)
    (256/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.1719852 seconds)
    (257/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.06884484 seconds)
    (258/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.0694646 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.076696948 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.073628241 seconds)
    (261/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.072769324 seconds)
    (262/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.070087056 seconds)
    (263/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.148303833 seconds)
    (264/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.070261243 seconds)
    (265/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.073004281 seconds)
    (266/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.071444483 seconds)
    (267/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.070330615 seconds)
    (268/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.067601865 seconds)
    (269/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.069357834 seconds)
    (270/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073619542 seconds)
    (271/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073848483 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.069108771 seconds)
    (273/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.069234935 seconds)
    (274/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.073586871 seconds)
    (275/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.069807965 seconds)
    (276/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.089493131 seconds)
    (277/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.087375159 seconds)
    (278/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.069535987 seconds)
    (279/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.069849618 seconds)
    (280/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.069269467 seconds)
    (281/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.092363779 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.068652042 seconds)
    (283/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.071990184 seconds)
    (284/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.069943555 seconds)
    (285/341) benchmarking ("sort", Float64, false)...
    done (took 0.140878627 seconds)
    (286/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.069794131 seconds)
    (287/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.06776623 seconds)
    (288/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.087626891 seconds)
    (289/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.068643545 seconds)
    (290/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.068658446 seconds)
    (291/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.068026444 seconds)
    (292/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067301561 seconds)
    (293/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067302516 seconds)
    (294/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150839636 seconds)
    (295/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.205658922 seconds)
    (296/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.07182694 seconds)
    (297/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.067634268 seconds)
    (298/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066732681 seconds)
    (299/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.066959715 seconds)
    (300/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.081889569 seconds)
    (301/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.067001102 seconds)
    (302/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146669132 seconds)
    (303/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.070742949 seconds)
    (304/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091407057 seconds)
    (305/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.068796014 seconds)
    (306/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.090441929 seconds)
    (307/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.071253843 seconds)
    (308/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.069317618 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.303026938 seconds)
    (310/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.072165064 seconds)
    (311/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.068357137 seconds)
    (312/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.133184018 seconds)
    (313/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.071919081 seconds)
    (314/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.185663871 seconds)
    (315/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.071573253 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.099169477 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.136890401 seconds)
    (318/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.073766557 seconds)
    (319/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.069518806 seconds)
    (320/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.069864215 seconds)
    (321/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.073857077 seconds)
    (322/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.070749659 seconds)
    (323/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.077866136 seconds)
    (324/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.07067499 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.08031904 seconds)
    (326/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.07031269 seconds)
    (327/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.097903429 seconds)
    (328/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.069518774 seconds)
    (329/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.070084076 seconds)
    (330/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.068962952 seconds)
    (331/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.077287253 seconds)
    (332/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.070299959 seconds)
    (333/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.070442449 seconds)
    (334/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.070333239 seconds)
    (335/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.07010939 seconds)
    (336/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.072117174 seconds)
    (337/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.070735646 seconds)
    (338/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.071403874 seconds)
    (339/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.157928613 seconds)
    (340/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.068854277 seconds)
    (341/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.156718547 seconds)
  done (took 38.056458543 seconds)
done (took 39.74411218 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.093894724 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.082041674 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.08039476 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076898085 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.08075759 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.080164291 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.080073428 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.078563292 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.081270876 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079899123 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.080142628 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.069278633 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.076855885 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.085040362 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.078676739 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.085340682 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.082277074 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.084412345 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.069709279 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.083611519 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.096399325 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.081613772 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.078061101 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.083005489 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.069092156 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.077174635 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.091300357 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.089695507 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.074004066 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076678014 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074858204 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.086151785 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.076001489 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.07509852 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.079489527 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.076187072 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.079249201 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.077113709 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.093459706 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.075300495 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068850406 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079583945 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074006552 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074951933 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075338511 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078847971 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.07223817 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080206516 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066912859 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.078863385 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090694021 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072211733 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073354082 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.075369865 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.073185545 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077802144 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.075945365 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080122076 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.074677763 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.080555283 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.080892254 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.077490656 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068633562 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.078222104 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.077484034 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.076876155 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.068128872 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074677226 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.069002975 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068893169 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067085733 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075938006 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073585053 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071657511 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065966311 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.06675652 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066349707 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078921819 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.073484169 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075965674 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.067145184 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.072407903 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071699557 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068094767 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07233384 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078319458 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.068357128 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.070115819 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.068452834 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.084191442 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.075315411 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.069151461 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.080723673 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07412964 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073786438 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068706731 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.068448106 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074199732 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.076715001 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.068499776 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.066681817 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071666433 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071737739 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.07585306 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067168251 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071698113 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072016623 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065908118 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075288401 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074083793 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075684889 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.080419168 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.076401828 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.079395269 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067896405 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.067110798 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.078709127 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.069062118 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074610326 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074906849 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071937395 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074715764 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.067048419 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065549199 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071765661 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073339218 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067160086 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067620386 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066804764 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075985812 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.074168289 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.066008165 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.06679645 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.076420852 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07757728 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.06758014 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.067688461 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.07793279 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.068361887 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.073755534 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.073625597 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.077462734 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.06760069 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.067538011 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.218392909 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067004151 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.068162137 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.074058239 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073121096 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067965931 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.077458876 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.074853357 seconds)
done (took 13.331098849 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068519312 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106617946 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077113017 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.085766999 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.08245529 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.071171717 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073555314 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086705416 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071875809 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.087149407 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095247641 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.089834228 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096387707 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.067622878 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.068389817 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068747647 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065889234 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074950882 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081950788 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091251532 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095843239 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067150804 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.076605832 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084058 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077564323 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.08349605 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.06842981 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068663164 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.071040885 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.130137212 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.09489052 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.069917949 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.069952565 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.08275921 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.082491208 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.075083497 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06816209 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071765762 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070890664 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06783192 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069564603 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081969431 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071358852 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071466683 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068934104 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068780835 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.068155677 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070709006 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080587404 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070430963 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074969865 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.080376409 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.071039663 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.07008626 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.068400263 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.07425673 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.069871803 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.071135081 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.070356833 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069136265 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069392228 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.072200603 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.07067331 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.071407781 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.073298289 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072172664 seconds)
  done (took 6.80357622 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084453029 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093928576 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.083344305 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.083158088 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067501748 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068024634 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069179692 seconds)
  done (took 2.362172995 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.069043569 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076324558 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.080901065 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079949975 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089850689 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.078476934 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.070303692 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.102693109 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.069665909 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078648115 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.085562308 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.083534037 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.072498153 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.08116726 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.069006883 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.080061433 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068232177 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075267252 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076456559 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.081839287 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073300719 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.101183002 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.084003571 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.070763858 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.082694444 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.076357934 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.071286371 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.069443179 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068483062 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.068066881 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067682735 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089954986 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.075506984 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082777807 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069220157 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067354986 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072441926 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068852008 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.072782382 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.075878021 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.073303934 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.069958186 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.070931707 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.070440315 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.071998424 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.073438119 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.06897021 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067790637 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067974693 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07521247 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066897635 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.07510064 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.070608642 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072831003 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072634221 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072158597 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074633708 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068024941 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075025978 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07400288 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067645416 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080514694 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07922314 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.07131842 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079590784 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076182766 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074389767 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071636509 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067022494 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066941411 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068295993 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079218575 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.071327835 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.070179263 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068847652 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072485889 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071767953 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082837092 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082700462 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080644417 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069726081 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.06781343 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071163847 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082680257 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07257199 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067613509 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068972376 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067246425 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072806788 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.068466225 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072188342 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067727564 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074246177 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069943721 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069839975 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075397517 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067758026 seconds)
  done (took 8.98761431 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.07064291 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.070247758 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.06948797 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068627919 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069419754 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.069395652 seconds)
  done (took 2.255378762 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091647355 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069040716 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080503474 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.069189907 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.091136554 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.076353533 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07753706 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.073079477 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.087594032 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.081373939 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.077858901 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.079552498 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.077456371 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.07298998 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.07753183 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.070535987 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.07430218 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070944412 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078581781 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070672697 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084270156 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069989271 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070402169 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.08049036 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071767332 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069182235 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069153132 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078398352 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.07824631 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069757389 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.06996064 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071550573 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076441245 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069935282 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074570154 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076601477 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068275091 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073920862 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.0706413 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.071540393 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076879844 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070094736 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.07119622 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.074747435 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.070688719 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076773608 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073830469 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07222519 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074520452 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073428455 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073274275 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.069213446 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.071309934 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.074021036 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.07651463 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069754776 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073598021 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074369648 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069527332 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076586591 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068372164 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071461666 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069979581 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.07098551 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072744992 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073510097 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076632505 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070727387 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070022882 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067872545 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073209705 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068018329 seconds)
  done (took 7.125179516 seconds)
done (took 29.318576334 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.551313676 seconds)
  done (took 2.329674896 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.593255536 seconds)
  done (took 2.421213051 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.476306485 seconds)
  done (took 10.304115833 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.298165651 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.32048751 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.739678011 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133579063 seconds)
  done (took 3.351412711 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.748879266 seconds)
  done (took 2.586915603 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231056658 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.221582687 seconds)
  done (took 2.290736882 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.336273911 seconds)
  done (took 2.166764017 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.158328707 seconds)
  done (took 2.969363945 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.231004278 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162838602 seconds)
  done (took 2.232778458 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.544247882 seconds)
  done (took 2.374596172 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.276052446 seconds)
  done (took 6.107802866 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.236204582 seconds)
  done (took 2.108351409 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.233038586 seconds)
  done (took 2.068839272 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.065501625 seconds)
  done (took 3.88851333 seconds)
done (took 49.033529194 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085427063 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.08769791 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087191552 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082374637 seconds)
  done (took 2.140078663 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076903971 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071837504 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075042871 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075633185 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.07302254 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073542953 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074337163 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071430725 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072782136 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.07140004 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070016207 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071067694 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07397616 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071489748 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.074186092 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.07550644 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071366507 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071762599 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073562631 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071308639 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.07394393 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071150108 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069420129 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071145793 seconds)
  done (took 3.575018591 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.080799959 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.07405833 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077526486 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072844906 seconds)
  done (took 2.145352571 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.079133159 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.079745697 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.088787375 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091938121 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078166467 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078162223 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085431512 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086291591 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066765219 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088300905 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069074028 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067647641 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068346083 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086514256 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084423881 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063359342 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064823195 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077961822 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077376284 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080975613 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069438289 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066632902 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078141083 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077938807 seconds)
  done (took 3.69454706 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082953387 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067621956 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.07996483 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.09287458 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.09427046 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.067248457 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.07944 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093527599 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.129483953 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.068135991 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.07485996 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.068726463 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.106995095 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.069096079 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.082834666 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109604882 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.11302301 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072060909 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.101304657 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068758491 seconds)
  done (took 3.574958025 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077436693 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070570483 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071594756 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066826798 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.07802804 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.07385541 seconds)
  done (took 2.287195306 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070968138 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069210953 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.07203732 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073597207 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068715526 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069337763 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068256057 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067212847 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067000989 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068660384 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067867289 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068764784 seconds)
  done (took 2.683438564 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.157141252 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071706196 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071693201 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067525057 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072620814 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067713746 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082874665 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069689888 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085733865 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068422222 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068544643 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069939646 seconds)
  done (took 2.803944578 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102160811 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103158886 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147770116 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121904263 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11865923 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09844859 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120605992 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096559587 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.162815431 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.140073692 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121470379 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096965862 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089237216 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.073051965 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102955399 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103319795 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137021011 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074489838 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114304386 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.166597013 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119486784 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.115977647 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12616874 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121137398 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084761456 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126243489 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09785652 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106655746 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127411878 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112735515 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121343114 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099785709 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.074184216 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072957647 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151847769 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.10320136 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108730499 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.096103831 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103427986 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091446688 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110983365 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.07355206 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.091836078 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.111377367 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087934597 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119593888 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.092339061 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106821769 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081703838 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131159167 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107954738 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101402059 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088993578 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10724965 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132240327 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0959523 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111001947 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107316074 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083860374 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.118758012 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.10193592 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.258579347 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099003572 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085286951 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.166393416 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093781714 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.114900814 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117559601 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.087290145 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093988102 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107311134 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134032035 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109752204 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.109060966 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116674538 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096413392 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111436884 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093616121 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130737384 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096199949 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.077134782 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108126184 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.132649772 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088582781 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10305282 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132356743 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093848237 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079235798 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093731139 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120917717 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083619863 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.098172945 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071493292 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098363004 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108505237 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099869377 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113174706 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108281547 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080725417 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125953817 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111032482 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076829041 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119731915 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100941937 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154261007 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097342087 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077541238 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100741874 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094774701 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148080014 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087790252 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081241614 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099369756 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142174608 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095095547 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170131013 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09815673 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129523011 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098087012 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088649678 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076520191 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090538451 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102838931 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108747976 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102852512 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090015197 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077834095 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087503042 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096077038 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.257637924 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083474812 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115635689 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103373633 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.077122346 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090234611 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080235843 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126187194 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.07937617 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110261396 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126457605 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.081674881 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108362754 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103135758 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112861222 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.100863377 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112609368 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144734255 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.118953796 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081773602 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.086458581 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110713351 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.144494134 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.116555458 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090016108 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.080823712 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103675008 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113447157 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.099004831 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107685132 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103218696 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11273757 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10053912 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141821087 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118528497 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091962254 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095664575 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097242907 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124438593 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079326992 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157965279 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096196942 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119664442 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0879412 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144627277 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.117527729 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092879148 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088378499 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099684405 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.108833175 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107863695 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144917824 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.098211075 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073716793 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093866009 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132551288 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079068837 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100516331 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091068395 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094197739 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120645214 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084713637 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082470591 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069137483 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102590802 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136099102 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.071411476 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114351807 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.285837059 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107580575 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.107468778 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.073750347 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104160843 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142558874 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109205106 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145993261 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119149827 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103295751 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120084633 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.101094487 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107140416 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081938017 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126304359 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135446273 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098475633 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091757198 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136179154 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119323786 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136518679 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.101079809 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11665969 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106577855 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102183331 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105107733 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101385835 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144965675 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121450672 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125611846 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087780408 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10775129 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10985336 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137411191 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083367665 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118272914 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076520338 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112655148 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078756359 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108304437 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080578136 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112151697 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080597162 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10182272 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.071358482 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075105252 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142490445 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113439205 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090445846 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087328645 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137845237 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13277137 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.084699357 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104171703 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107649909 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103323157 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103986379 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11017614 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085318419 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094418993 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.278169398 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083748712 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.085419331 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103831268 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097899714 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109616097 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085860526 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076394097 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137405642 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106082945 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096892258 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079701385 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096007998 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122855076 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091140074 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089120874 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106172555 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105569186 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141800838 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.092530534 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101060522 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118678374 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081860648 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093358707 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070948822 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085995017 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077646521 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110868203 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078392404 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109750468 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070330294 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131958072 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090212527 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094857467 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103818541 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101380837 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129653214 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092990452 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129678349 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090820754 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102602245 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109492951 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09538588 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081202627 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104560648 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096514638 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110214938 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.09744955 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106664647 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1113947 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095570669 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143656262 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091932268 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121876429 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106637601 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10883732 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105848979 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117815386 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138500391 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113172782 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112455309 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077074336 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084623743 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106302565 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101749553 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147799422 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103375426 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072769643 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086962729 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091217207 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096517615 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.271860076 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085400898 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144650298 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089144364 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088697508 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114616192 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091652823 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09862737 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079677356 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097753206 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102744683 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098392156 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098862496 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112255649 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120812403 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114879401 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133535398 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.101535253 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.0952441 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.124110176 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1137447 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113684074 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0880974 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090846665 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127737588 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106419437 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.131255355 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102705827 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098902513 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107160627 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095120015 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101693767 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097627013 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.111071612 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081791843 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077281395 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069816691 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.074883005 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119085716 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113247836 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101231771 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100915761 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073953492 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106160924 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102388006 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074307082 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089402464 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095136832 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101575503 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085692051 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093725915 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115266862 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.093612848 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106068218 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100547937 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129155159 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.10083764 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089929945 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144331917 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130090209 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089293395 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093562036 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073062412 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080320856 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103271724 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146569135 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118967544 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078369333 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08430033 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.245704656 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088832675 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073554268 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088767052 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091150819 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106968286 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096752013 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.115510935 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105144872 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076933846 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104490443 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098918453 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09384945 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098327552 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103651747 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10685053 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.126814982 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104242169 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100189607 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078346071 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.082302834 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077172024 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081209901 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103353791 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079198086 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077420689 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130985 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092353402 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105970356 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110745039 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089556221 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078033642 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134671068 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.073413893 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13865816 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075738287 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084982287 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082898719 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080682394 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095153975 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106798116 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097419547 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114039806 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107207079 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106228901 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112199162 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158619356 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074503284 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.146990573 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079847132 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079915959 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080346824 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117986076 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093477539 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106641143 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14236057 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090983606 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094034916 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078344148 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12908038 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099754441 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104229637 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084469726 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079986936 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130494758 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081981799 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.075067949 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089426825 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11635567 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.076703811 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108233254 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.25710716 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082045889 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114312264 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631745676 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092734335 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07775414 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090754221 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143287236 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1304905 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084718784 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109941709 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120853146 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091652304 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085329383 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10893942 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.183721575 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075818368 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095748185 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105757039 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099866865 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094082631 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093962138 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087772825 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093713987 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087775675 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081031606 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108772518 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089509697 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093033065 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099336877 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084603285 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081822886 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132546621 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.107297505 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.084143911 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090494159 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.10286628 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089142672 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092722432 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.07071423 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115404333 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092173709 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102180403 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092301915 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108939196 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122610794 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090895257 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113465351 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.090296472 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110231409 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087168107 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.080379073 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104263879 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079565191 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078645488 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118111397 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085127138 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093858565 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105846233 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097302765 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115554025 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118758838 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112160936 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099318284 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080783171 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087366514 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.088981515 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076546199 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079437789 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075515794 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077511137 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.276584333 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088265415 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08535972 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116359995 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083802945 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105641397 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.10233519 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111040426 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085061416 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102941399 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11062215 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091871235 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104693243 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102230531 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130135274 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147150452 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101694637 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125165139 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135080708 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078780655 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.078180298 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.071759737 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117535813 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080978952 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082080439 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082981554 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133791607 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.084257579 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098861489 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.23192713 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082607702 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083653968 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097610845 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071544324 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084226169 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109226234 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085936084 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082166449 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099935903 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084986147 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118365454 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113533484 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090582437 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083979366 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083038536 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094962846 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105392848 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129539009 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092069248 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076654127 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107646891 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104606591 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125041393 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074227807 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08252448 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130918889 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093702041 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104777463 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081801427 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122124941 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138323107 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093218149 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135737524 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073123307 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084761799 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090660826 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126578749 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076060319 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089167636 seconds)
  done (took 66.120118737 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.154785155 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.142770301 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083590036 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098902633 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188776597 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198263813 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.121092379 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097147824 seconds)
  done (took 3.118290321 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.070580756 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083826295 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082517081 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.210064983 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.112055193 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.06859786 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074012324 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083634466 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.06922666 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068425554 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103340259 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.069480791 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069261943 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.373254601 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.069405605 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073055715 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068983816 seconds)
  done (took 3.733006811 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.33067249 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.397742979 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.232769753 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.635191201 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.140255822 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486178524 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077783316 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.08325494 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.632754898 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.37513164 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.13471594 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088744452 seconds)
  done (took 18.61302472 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078444082 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.080561452 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079755225 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076011469 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075574839 seconds)
  done (took 2.399044671 seconds)
done (took 118.733695834 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.086607169 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.176680219 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.071086792 seconds)
  done (took 2.275026732 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.086220551 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.083876459 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082634829 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079999638 seconds)
  done (took 2.330766818 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.077729289 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.079923414 seconds)
  done (took 2.145714434 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.229554861 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.179074636 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091545241 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085874905 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.083925639 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.083847303 seconds)
  done (took 2.250497881 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.075754051 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073171448 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073319419 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073550731 seconds)
  done (took 2.276816478 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.070204885 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.070122198 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.072250659 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.075327374 seconds)
  done (took 2.2711286 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.088586165 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.086776106 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115634349 seconds)
  done (took 2.276195215 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.087442251 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.086486863 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.082925717 seconds)
  done (took 2.251932661 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.11386584 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.101017333 seconds)
  done (took 2.198147709 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.084542473 seconds)
  done (took 2.074058724 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092830675 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099571478 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.14253535 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.107678782 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.141426653 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.129124421 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079406231 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079095553 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074722997 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074167185 seconds)
  done (took 3.008129197 seconds)
done (took 27.929410434 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.082011772 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.373595794 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361034247 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088183124 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.680024451 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358154805 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.998553799 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092394475 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100528225 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06992533 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090980834 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.663625971 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.992143661 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.330629273 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.977963389 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.326253581 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.654137446 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071527251 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.07184814 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071054256 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.982717965 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069213156 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069663056 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070453599 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.651072087 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375185409 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071924574 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.331263449 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069836665 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072232342 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357961077 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071267232 seconds)
  done (took 16.598416803 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.073013425 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124498358 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073762792 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08568475 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072092425 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071226146 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072665439 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069732345 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.111969204 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069859053 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086584586 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.0688911 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073602887 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070772117 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089232875 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069791452 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071897604 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07375309 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069875704 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070843057 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088013995 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070037811 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070155673 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070907053 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070231106 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082582035 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070505478 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069906366 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069880886 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072096313 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072951155 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070836836 seconds)
  done (took 4.451652044 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123985414 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128598086 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075699606 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110370968 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.121116578 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072479974 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152492505 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093265663 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115253325 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069859516 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087108973 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069751737 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105245111 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071032725 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09065357 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069798466 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071371375 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070546996 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069800797 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070757158 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088594435 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069459773 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070452829 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070386569 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070259935 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084731929 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070674059 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06969416 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069931804 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072233027 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073792256 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071300605 seconds)
  done (took 4.728835693 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.073132249 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.076216623 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.085002101 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.084982113 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.070935662 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.072516749 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.074169643 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.070227053 seconds)
  done (took 2.631145776 seconds)
done (took 30.41394512 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.08304009 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.07273997 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.075668028 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.09124101 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076697998 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072661518 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.0668738 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076525092 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073467395 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073777232 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074720202 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068651999 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071833041 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066373631 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074186658 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067546342 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073635273 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071734082 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072233901 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073987744 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.06977695 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073415031 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075747318 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072297987 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072229293 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072414864 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076644207 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073917268 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068111748 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070400506 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069696015 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081960397 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074116692 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074789244 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068261997 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067474011 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072074564 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070026432 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074427765 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076990922 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070009165 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077007785 seconds)
  done (took 5.051056609 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.091579722 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.096316106 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087922653 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084150415 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108386586 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083814307 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.092589461 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080871128 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.078758315 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091379723 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075622182 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080376651 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083088861 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.07689961 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079574918 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076264923 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082194456 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075393453 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080147057 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080242121 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091827631 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072917075 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080419098 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.08132198 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075128 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.082067531 seconds)
  done (took 4.193875511 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075983811 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.08962111 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093941752 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143570274 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110661667 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084396133 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083924971 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098675441 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102292995 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069795953 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073502644 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095970218 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098337972 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076246547 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107565353 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087869147 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082226316 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071132782 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075607275 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104815084 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092631366 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088704706 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102661558 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089154551 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068956562 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078952938 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076356299 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084589899 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076742869 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081717263 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073298802 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073109144 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070057853 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081725808 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076913571 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067288689 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091457116 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082290307 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085579119 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107600912 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079707822 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071199988 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099023933 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135188532 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071271684 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.073481902 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073576803 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081699111 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070531917 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099471195 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088185101 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069096256 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088383135 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.07100781 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070906911 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086296913 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071223574 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071283315 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081403168 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075675348 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090078987 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075039385 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090601816 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069163266 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080722242 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071418807 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070971999 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.0680793 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105382081 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07688861 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.12257362 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071670358 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068393363 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081857422 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.08075502 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076099558 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069712038 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088889659 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.082161929 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073307672 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081349699 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072763305 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072557264 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104896974 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068769098 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067434822 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06768996 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071186157 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072707716 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070244911 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.0827299 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068876009 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072411307 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084740209 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069049349 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.06999474 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071809548 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070637721 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068548686 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080218025 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073316056 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070728168 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081677725 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070037196 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072853745 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083709513 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078659614 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069256374 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070417761 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071415273 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071226492 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073765854 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072932446 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071194292 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076788354 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076601505 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075108933 seconds)
  done (took 11.489643466 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.167454983 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.157089195 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.073617865 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.153423892 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.080025822 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.076351416 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.154436427 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.091197207 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.071383531 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071777136 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069398693 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.098138974 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093284265 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104590023 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074156785 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070549637 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095403221 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103025302 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.154004584 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.148990362 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093724159 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078024915 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072928464 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071205504 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071484112 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.07899732 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085963963 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078105293 seconds)
  done (took 4.799949036 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.079369167 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085394235 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074216685 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094073889 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088847756 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070681925 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071827793 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070736592 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.08718095 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076802981 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069775348 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074526257 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073738836 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070963935 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.07082535 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.07672803 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076367247 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069203555 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074113126 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074625299 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080136483 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095084295 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.07537699 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070260971 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072886799 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070359545 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076805317 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079344196 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070161767 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099987204 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067675936 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074197255 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084152051 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071022853 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069492037 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070377956 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070705751 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069912799 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070542236 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068158009 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.0681508 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074710512 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.06829436 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075719089 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083950622 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07728011 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071719264 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.075707101 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072503144 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066599313 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072702719 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073215637 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072483442 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07781106 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073591743 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072760179 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071170581 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099834305 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075930662 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069487155 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068661669 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068896133 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071888622 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.07791101 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086411664 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071704007 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068057393 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069962183 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074795142 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084471723 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069248261 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075322629 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066933519 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069902102 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072635646 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072962525 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071571113 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06827861 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069196506 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069809079 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070020345 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069812103 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069690108 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072559143 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067808405 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068372401 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070014725 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.07127042 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076093351 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.06913236 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072795876 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071629599 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068442964 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072235406 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074900245 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072946454 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089292028 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078779418 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070225267 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068041573 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084113101 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071917416 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068953429 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075244809 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074173092 seconds)
  done (took 9.84862641 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.094248164 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.073467037 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.0918112 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097573786 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081006103 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075395776 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084035027 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071133077 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086653067 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.070022079 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07923461 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068220501 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083622618 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079558414 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071546901 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080209924 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072604655 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090000632 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085027545 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068452944 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078813358 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082732926 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083016719 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088076677 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087274396 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088587897 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081810303 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072681316 seconds)
  done (took 4.351073218 seconds)
done (took 41.746034491 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.090267552 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.260000536 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.086080535 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.30223018 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.133199915 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.301157734 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.191287115 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.102490434 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.313149771 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.104674426 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.406371227 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.506862273 seconds)
done (took 70.878850086 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.172387573 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.2363205 seconds)
    (2/2) benchmarking "String"...
    done (took 2.311925824 seconds)
  done (took 6.556011364 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.68353514 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.083143686 seconds)
    (3/3) benchmarking "different"...
    done (took 2.133439445 seconds)
  done (took 8.906767769 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.166530792 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.739894909 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.33986382 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.082397055 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.083440006 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.422788002 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.892338314 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.539104374 seconds)
  done (took 34.109310115 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.331291803 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.300502225 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.833799022 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.874151296 seconds)
  done (took 17.400328812 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.688473549 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.347571141 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.350435531 seconds)
    (4/4) benchmarking "different"...
    done (took 2.343042338 seconds)
  done (took 11.80168685 seconds)
done (took 91.224529376 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.083006669 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.191421823 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.132676187 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.235246108 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.088585065 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.110599511 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.057561845 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.108892595 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.084991873 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.085717854 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.512117269 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.082753474 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.086662336 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.120692478 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.053104064 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.13236984 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.119357493 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.103606237 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.104171375 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.705423709 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.559369811 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.095996814 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.103370882 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.13652148 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.249492495 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.145029117 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.698722893 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.096031961 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.707483108 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.089190206 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.272058779 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.097570387 seconds)
  done (took 214.45917943 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.09334385 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.166302034 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.251131547 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.113863485 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.499634413 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.287431951 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.227068743 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.597607662 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.097414903 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.119722433 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.231065434 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.093198226 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.226320944 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.041950133 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.089924951 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.13152908 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.340866964 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.243504343 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.091573927 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.277687265 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.120403795 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.012232898 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.962846177 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.222364024 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.113234796 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.147997123 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.105508135 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.097343852 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.279206424 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.313685728 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.127643473 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.137172599 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.299860072 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.963602789 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.109078388 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.118121243 seconds)
  done (took 181.373888493 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.261171656 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.106830539 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.161255937 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.233356514 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.849692499 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.842050638 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.096514468 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.095823844 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.08842275 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.080086811 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.10047715 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.166428004 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.678732524 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.108072963 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.093561051 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.095404593 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.361991999 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.096718797 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.094680977 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.093239163 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.157752401 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.466059165 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.217685007 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.094090086 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.104648153 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.232150293 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.100770065 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.09333778 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.228767356 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.0929503 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.170654048 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.228772842 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.106015371 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.177650351 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.099755911 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.594006598 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.092037554 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.095234142 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.092797422 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.156123383 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.091020278 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.20615647 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.183237136 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.093882364 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.108306418 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.291290875 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.776561222 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.095913805 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.095372778 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.096967775 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.097005997 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.094807571 seconds)
    (52/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.093902087 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.339955635 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.09534686 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.103636552 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.725534842 seconds)
    (57/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.094586643 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.098441385 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.099045914 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.097577464 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.097981395 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.095763444 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.102027237 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.131637591 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.913354126 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.102534662 seconds)
    (67/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.096447079 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.467122146 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.918138234 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.094454753 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.050673706 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.156238433 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.100138387 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.176271601 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.095218068 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.096096973 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.096633197 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.096040446 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.187613405 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.181794328 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.096307214 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.232059932 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.097385619 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.095611099 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.593441961 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.358753464 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.092888042 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.102817704 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.149093103 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.092224654 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.093095804 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.099096792 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.182129476 seconds)
    (94/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.092778581 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.093153648 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.0923012 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.093938291 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.194679023 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.093160244 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.319063114 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.313302299 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.163860165 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.340539799 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.32630653 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.09630305 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.096080402 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.09159366 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.084821069 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.095909942 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.108773472 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.094577397 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.097278438 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.097347604 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.09672929 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.096864992 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.096565381 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.081165768 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.093069537 seconds)
  done (took 446.058592315 seconds)
done (took 846.215497566 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.705208763 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.78961814 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.685479971 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.713712956 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.684675133 seconds)
  done (took 15.594642198 seconds)
done (took 17.611905777 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.128381282 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.112328569 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.101944705 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.159341203 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.119952001 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.107693962 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.144101515 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.142238595 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.125420484 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.109328435 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.159042551 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.110758197 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.127821157 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.129734141 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.184014912 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.134286284 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.110981344 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.105863873 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.162203221 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.112189821 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.112897201 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.10874975 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.110281789 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.158569386 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.188104327 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.120189899 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.109847484 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.150929356 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.121073234 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.153581828 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.167678835 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.130404631 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.142906838 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.185817408 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.161742051 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.164220483 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.118106462 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.173722011 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.113290652 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.195886707 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.164158092 seconds)
  done (took 89.658077054 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.108749837 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.240728904 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.312361362 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.140349999 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.106926119 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.317920442 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.160627884 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.232116941 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.237011268 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.321289511 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.325406703 seconds)
  done (took 26.529786929 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.104692358 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.241770657 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.319524414 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.141379825 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.108270938 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.319363954 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.168520665 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.237931285 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.241779273 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.324664388 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.361091555 seconds)
  done (took 26.600019614 seconds)
done (took 144.810478626 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.474356835 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.131884511 seconds)
  done (took 6.628646126 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.101921717 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.11859035 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.257886639 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.105403658 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.103301348 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.103178895 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.103803547 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.101662867 seconds)
  done (took 19.017607063 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.10490227 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.104410894 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.104466461 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.104069535 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.104765491 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.103759594 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.106030632 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.103498029 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.104404904 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.105173546 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.104300298 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.105589604 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.104125645 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.105518215 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.105370801 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.104612291 seconds)
  done (took 35.697259636 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.105193491 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.106587111 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.104249763 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.105523316 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.107885875 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.105259818 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.10674327 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.105583484 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.104380362 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.103930946 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.104785447 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.104502679 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.104553344 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.105266413 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.10532745 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.105579003 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.107226477 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.105995508 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.107434813 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.105600895 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.105133468 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.105426519 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.109790526 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.106774797 seconds)
  done (took 52.561609099 seconds)
done (took 115.938335839 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.282749011 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.890304036 seconds)
  done (took 9.195533402 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.10843797 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.107014749 seconds)
  done (took 6.313974672 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.105437684 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.105720306 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.107193293 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.105462822 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.105616482 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.107297314 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.106311897 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.106767822 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.107244305 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.106815051 seconds)
  done (took 23.08821137 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.105676374 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.106597985 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.107688604 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.105504975 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.107259219 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.107474698 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.10860979 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.107477494 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.110239219 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.107498836 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.108096587 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.10822891 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.107267804 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.108992157 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.107906933 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.108618489 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.106166008 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.108162847 seconds)
  done (took 39.965176466 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.107740034 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.108251792 seconds)
  done (took 6.243502942 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.107685408 seconds)
    (2/7) benchmarking "second"...
    done (took 2.106905011 seconds)
    (3/7) benchmarking "month"...
    done (took 2.110090021 seconds)
    (4/7) benchmarking "year"...
    done (took 2.110364118 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.10989009 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.106584249 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.107602819 seconds)
  done (took 16.785930186 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.11043237 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.254202267 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.302556886 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.708431214 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.112136457 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.113349765 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.975959814 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.113287817 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.112512337 seconds)
  done (took 22.829615841 seconds)
done (took 126.448577266 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.972488718 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.108156132 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.324504192 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.174883909 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.178900717 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.401326233 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.109147891 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.643208233 seconds)
done (took 44.942274934 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.186755765 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.10483121 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.136895467 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.137107692 seconds)
  done (took 23.406247277 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.108492446 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.429972594 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.130198214 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.071374565 seconds)
  done (took 23.785932075 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.485542658 seconds)
    (2/2) benchmarking "read"...
    done (took 2.481005978 seconds)
  done (took 7.000469111 seconds)
done (took 63.411757958 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.109174863 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.107839044 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.108364744 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.107687269 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.109538496 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.109505245 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.109285781 seconds)
    (8/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.110376336 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.109624873 seconds)
    (10/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.108580546 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.110536177 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.110303976 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.110173186 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.110793533 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.110008555 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.110391167 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.111263051 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.109835889 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.111384855 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.110742547 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.110204028 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.111110495 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.110324461 seconds)
    (24/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.112528096 seconds)
  done (took 52.667739417 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.113128722 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.112210064 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.112254003 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.110710894 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.112518084 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.112179785 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.111459935 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.110140885 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.111578516 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.111169119 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.112320138 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.110820877 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.112929344 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.111731738 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.112149401 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.110839387 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.112705579 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.111324387 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.11196284 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.112068508 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.112128383 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.112404803 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.112242058 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.113195775 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.112721935 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.111926478 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.114108464 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.111245537 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.110793942 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.112803925 seconds)
  done (took 65.389470428 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.112317073 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.112599978 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.111597673 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.11202945 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.112832627 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.114071205 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.113091041 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.113011653 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.113739413 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.113498387 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.115193682 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.11349368 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.112670557 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.11328157 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.112677031 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.114274267 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.113173938 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.112973469 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.11363388 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.113081641 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.113210804 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.114487882 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.114167864 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.11518249 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.114431945 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.11303238 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.114281457 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.113844632 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.11398842 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.114684239 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.116597092 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.115123356 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.113038283 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.113424188 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.112706905 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.112326787 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.11245491 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.113889127 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.115516553 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.1148152 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.115416098 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.114457759 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.111262076 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.114816791 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.111015714 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.115773958 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.114135668 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.114167348 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.114528988 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.115283223 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.116045345 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.115114583 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.115791119 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.117616338 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.115282605 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.115679163 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.11582637 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.114849824 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.117857423 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.114802335 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.116496 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.11488459 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.116527996 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.115629639 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.115888127 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.115690171 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.115065797 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.11691223 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.116226158 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.121155961 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.115179741 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.11658271 seconds)
  done (took 154.274199774 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.115565904 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.117846791 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.11867474 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.117881326 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.118490596 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.11686145 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.120599124 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.119282069 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.119700776 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.118164398 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.121414602 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.11720861 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.119965175 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.117673534 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.119155701 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.117156697 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.115883947 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.116723595 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.118009597 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.117760551 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.117949776 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.119532751 seconds)
  done (took 48.634817979 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.116944809 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.118385493 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.117119918 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.118984032 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.117823339 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.117589062 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.119501831 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.11765043 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.116842389 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.118462163 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.118027367 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.118287795 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.119260908 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.120322374 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.120045818 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.117736518 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.117734967 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.117880712 seconds)
  done (took 40.164046823 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.117832333 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.10647115 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.116691615 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.106079433 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.119576565 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.121971518 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.117773627 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.118523263 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.120543776 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.121362625 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.119939603 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.11858744 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.119395623 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.106423327 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.11773936 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.119386551 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.119070854 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.117657373 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.119513427 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.120194721 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.121511 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.121171727 seconds)
  done (took 48.624209341 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.117872977 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.119176249 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.118459735 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.119970218 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.119003921 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.118787982 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.119980507 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.11894184 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.120134907 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.120515688 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.120390248 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.119990369 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.121100778 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.120043751 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.122126871 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.119383062 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.121188169 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.121198715 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.120560788 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.120972241 seconds)
  done (took 44.437939683 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.121253253 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.119709789 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.119403087 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.12206323 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.120463888 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.120568519 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.123177284 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.120587526 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.121213086 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.121401391 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.120690041 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.121359648 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.120534407 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.120856367 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.121109404 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.121921766 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.119930522 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.120595071 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.121073672 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.121299446 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.121437349 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.122820386 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.121503133 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.122926571 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.122942176 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.121904424 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.120702375 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.12110277 seconds)
  done (took 61.434225555 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.12166446 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.122091321 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.121145138 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.122141125 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.124041771 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.121441868 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.123161597 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.123435931 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.122403726 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.122896728 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.123284712 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.122406567 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.12378412 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.123416654 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.12358531 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.123508465 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.122765027 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.124119938 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.125858952 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.124151617 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.124143289 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.123397444 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.124791279 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.123225068 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.124346431 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.123958208 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.122317234 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.124545331 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.123572415 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.123345137 seconds)
  done (took 65.739252448 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.144352844 seconds)
    (2/2) benchmarking "in"...
    done (took 2.142344347 seconds)
  done (took 6.326826281 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.122849466 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.124479806 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.12465642 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.124482288 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.12280835 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.124006174 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.125219957 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.126700788 seconds)
  done (took 19.037338631 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.125915802 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.128612796 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.125272569 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.125554592 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.125085691 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.130971518 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.125236579 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.127161306 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.126657997 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.125477235 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.130875985 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.128664341 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.136010495 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.128661055 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.127310028 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.126178432 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.124873322 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.127377476 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.126032584 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.127273137 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.12736795 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.126500085 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.126787296 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.124707139 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.126356815 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.12620625 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.137505184 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.126173776 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.127294092 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.126655513 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.132939145 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.126625189 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.126016818 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.127654821 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.126916838 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.128108487 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.132234547 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.127613319 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.12653357 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.127251532 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.128646253 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.128853942 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.129260579 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.134407164 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.127068445 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.129002683 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.127224957 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.127995715 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.126996672 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.131133108 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.140064881 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.127299285 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.12929358 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.114707257 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.130045263 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.126984539 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.127004046 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.130110369 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.134892875 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.135464699 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.132866777 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.150043922 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.140161503 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.128260816 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.128261191 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.138687776 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.157380078 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.129653365 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.130030452 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.127411363 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.135567911 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.131632681 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.130548379 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.13045762 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.142094938 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.139653306 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.128141394 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.130143096 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.128524547 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.127143746 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.12966387 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.128791058 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.128391967 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.131557624 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.138823235 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.159102846 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.128960736 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.129601473 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.130127305 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.130100494 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.136322449 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.131187451 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.129831269 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.132416604 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.132095414 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.132350315 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.130827258 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.129952276 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.130673257 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.138539774 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.132250471 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.130901084 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.135236844 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.140947257 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.132069005 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.130755645 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.134070376 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.13111459 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.140561567 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.132306191 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.130662755 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.133397349 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.134200694 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.138685597 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.132922811 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.134676867 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.142838908 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.138496845 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.133096592 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.138365727 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.135549625 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.134798171 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.143909903 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.163481956 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.133122551 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.136762967 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.137952733 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.146823996 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.13675571 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.135524547 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.135837582 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.133357574 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.13305937 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.134069194 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.134482968 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.132196227 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.13506144 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.132361029 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.134882032 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.133161702 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.135430551 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.13250794 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.1356831 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.132547519 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.139362494 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.131871274 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.135834016 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.142100587 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.136179304 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.134103265 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.136078218 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.136135069 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.134844824 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.134961945 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.13470114 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.135437118 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.132394104 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.135236749 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.13557524 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.136012062 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.135380312 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.134477566 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.139658111 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.134095387 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.134659385 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.134191867 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.134046026 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.134589177 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.136031397 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.137008505 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.138829552 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.135009769 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.140227675 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.139775911 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.136162201 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.136560024 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.13687243 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.136151782 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.139762932 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.149591815 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.140246909 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.149179978 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.136922931 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.142162109 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.136757142 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.138759103 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.138868742 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.138480917 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.136264869 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.136450593 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.140213468 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.141117107 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.148048339 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.147782294 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.138351336 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.136610331 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.143314663 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.144224934 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.142361765 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.140490169 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.138107095 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.137821372 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.138091257 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.138746684 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.138607385 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.140523867 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.138250147 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.141735279 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.139802438 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.137874299 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.141890304 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.140859462 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.141071254 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.141755314 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.141703828 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.140637677 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.13865184 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.144168948 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.148892842 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.143415407 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.140931796 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.138477196 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.139478226 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.1405284 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.139293187 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.140126719 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.144064489 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.138611786 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.142120547 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.147199803 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.139822509 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.140921696 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.139234232 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.14205478 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.142194374 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.141715786 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.14615892 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.152988004 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.146388152 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.14118228 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.147369186 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.144810364 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.145761784 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.142476551 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.143729299 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.141837857 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.145027133 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.141316191 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.142092171 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.149472958 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.141689881 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.144700564 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.144331036 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.145066521 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.145465209 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.144793591 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.142332065 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.147151937 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.154515745 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.149924093 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.144932111 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.145918513 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.14539709 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.145453552 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.149060751 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.145029061 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.159549184 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.15584027 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.143684572 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.143424603 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.14348895 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.14528537 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.144224438 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.144966249 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.149700121 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.143908199 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.142504831 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.149949164 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.14412304 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.144461035 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.149780324 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.144020573 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.14759003 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.147028818 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.144906353 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.145438836 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.145653564 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.144865782 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.144404136 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.146936603 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.152086129 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.146757349 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.145645556 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.145632961 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.154977914 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.144291151 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.146877149 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.151719063 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.145684975 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.14574203 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.14579013 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.146561259 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.144999268 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.143971499 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.14441708 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.146552511 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.145948073 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.149298953 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.156425071 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.151501957 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.156586113 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.145551698 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.157776886 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.145508824 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.148546368 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.145622521 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.14935159 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.15523637 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.14837437 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.145634252 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.154743278 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.144962977 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.146504835 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.152819223 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.147152483 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.145892058 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.147056408 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.148283003 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.154584929 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.15035454 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.149593542 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.147372391 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.133535379 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.146320139 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.150443383 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.147814642 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.146327475 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.146150117 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.1472958 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.147283144 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.148527173 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.147383861 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.145891973 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.145704106 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.14750152 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.15333512 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.147501189 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.148017852 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.153411207 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.149656454 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.156855506 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.147942381 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.147204121 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.147178251 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.150090443 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.147747752 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.147368065 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.146988454 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.147415224 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.148623892 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.149110398 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.16027478 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.154656085 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.153174389 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.149772331 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.149050938 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.147946747 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.158412064 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.179245883 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.146996636 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.151423312 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.154304041 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.153767189 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.148753963 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.155193073 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.15257454 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.156911824 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.147700154 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.147363449 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.151885251 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.16311005 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.147384841 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.148815475 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.149540567 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.150203739 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.150745723 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.149647879 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.14960434 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.152935296 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.150172117 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.161440446 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.15274704 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.149732246 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.150005373 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.150435548 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.149012939 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.1515444 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.151888789 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.151864565 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.149182754 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.15098096 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.151386734 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.154702565 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.151041011 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.155002515 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.16053658 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.138630381 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.151539247 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.153704591 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.151438063 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.152581643 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.150998057 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.149887439 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.149493007 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.144739838 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.152478987 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.155459683 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.159194774 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.152143321 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.151775534 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.150947022 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.154462811 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.150823363 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.150262416 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.151780934 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.159893992 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.155160823 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.16408184 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.162701694 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.151476932 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.152782379 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.16170727 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.160527595 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.152384512 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.151143365 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.150783658 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.156016801 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.1541793 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.15333726 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.151180977 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.150984927 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.157363706 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.153018877 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.153767926 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.150544202 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.154288365 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.156843503 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.155037969 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.160360509 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.154353794 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.152750802 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.150737268 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.15344953 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.151975039 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.155365603 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.151684428 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.15528038 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.155003975 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.154997971 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.160355521 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.154575164 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.155092722 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.154702331 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.151490518 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.154812346 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.148065187 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.153530142 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.154359238 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.157030302 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.164586143 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.15435733 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.154595441 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.155563622 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.158013563 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.153693848 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.152998199 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.154901903 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.155025876 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.159791368 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.154834372 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.155602052 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.155820629 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.157822066 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.161527938 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.157321008 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.158677546 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.155592253 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.154769513 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.155747553 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.124767983 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.164786241 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.136160442 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.158345642 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.155695147 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.157376616 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.156799606 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.157297117 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.155507514 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.156327867 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.157577419 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.161635473 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.156378935 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.15450046 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.155610135 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.1583417 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.154830859 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.157395759 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.164104666 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.154402623 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.156456475 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.166559718 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.161615325 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.157134611 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.15498958 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.152579697 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.157060355 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.167679063 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.151651737 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.146790933 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.150875725 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.153540688 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.153154725 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.161224277 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.164055716 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.157122035 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.152110661 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.160434408 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.174112279 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.155292901 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.153260657 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.189233331 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.151785273 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.150076172 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.149803984 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.15266788 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.158847012 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.154171028 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.151352244 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.15482356 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.153365573 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.15149576 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.155384081 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.150583613 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.151599236 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.148381004 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.14878583 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.137065248 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.136240882 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.155925786 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.154170214 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.147414152 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.144647057 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.152382081 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.149209359 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.148600021 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.147989242 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.148902882 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.147204482 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.148044533 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.153763913 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.145914616 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.151007088 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.64791928 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.163968441 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.144105867 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.143424166 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.144131847 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.146794726 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.147328113 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.145064918 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.148023418 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.153238375 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.149283645 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.155185389 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.144826199 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.144236672 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.143153064 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.14604622 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.143874831 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.154717674 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.158269248 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.143354901 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.142967918 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.149862433 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.144424841 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.150192861 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.154964846 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.146439829 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.146827491 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.144360762 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.143016776 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.14579496 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.14532565 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.121482045 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.158314518 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.149342241 seconds)
  done (took 1280.734911236 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.146418117 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.145445893 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.145962279 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.153184022 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.145868816 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.144628739 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.143558071 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.146735928 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.14503293 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.145375376 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.146666967 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.145658772 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.146094272 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.145309665 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.146369756 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.146452502 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.146857537 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.145346028 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.146481831 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.147546448 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.144397569 seconds)
  done (took 47.132869579 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.148540928 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.146407187 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.147671589 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.146508331 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.144483462 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.146937098 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.147277617 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.147279401 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.14496204 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.146357394 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.132769427 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.145788758 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.145963257 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.146757642 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.145456049 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.147188585 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.146726541 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.146663464 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.145871376 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.147069741 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.146176404 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.148072314 seconds)
  done (took 49.275351821 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.149516749 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.14385114 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.145126979 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.147018408 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.146017038 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.146603723 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.147995003 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.147097146 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.137184314 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.123829155 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.156910321 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.146084655 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.148251818 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.149911986 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.151127725 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.145911994 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.294091078 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.13204003 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.146435061 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.147757062 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.146290015 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.154757061 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.147503619 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.151800859 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.144025956 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.146547822 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.14756306 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.146907926 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.151803497 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.147916218 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.15057728 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.144640749 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.147345265 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.151252604 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.148738765 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.146308258 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.152066953 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.151111045 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.137880039 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.137394453 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.148610631 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.170991991 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.138290405 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.136031994 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.140886606 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.138163293 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.136799614 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.143377751 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.143507462 seconds)
  done (took 107.364269252 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.136369443 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.13932096 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.132750909 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.132908838 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.132177845 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.135199388 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.140380281 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.133499937 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.135143617 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.132804254 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.13355128 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.135183025 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.133634142 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.134527785 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.134252072 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.131824483 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.132584537 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.13228104 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.133893356 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.13399854 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.132883275 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.1307617 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.130708406 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.133718335 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.132678297 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.138681682 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.128841584 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.128657261 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.106851564 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.11393064 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.131881245 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.130700463 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.130341558 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.11807238 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.131024723 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.129148238 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.128774825 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.118671054 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.130477682 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.129930783 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.128238529 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.128535405 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.12654991 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.12609219 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.132275725 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.12889284 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.127810149 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.129344964 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.132332431 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.126758731 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.128119176 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.126940987 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.12879675 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.128753311 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.127264818 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.115496181 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.125712262 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.126427314 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.129379445 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.125566056 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.127561371 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.125781575 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.125408449 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.126775138 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.124913527 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.12712214 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.126508731 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.130033386 seconds)
  done (took 146.861307677 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.121946022 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.121625497 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.122175149 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.125650172 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.121574204 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.121536579 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.12141035 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.119290749 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.122545032 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.119916625 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.119214827 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.120573432 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.121611697 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.119289499 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.119287458 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.117899135 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.120484865 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.122395303 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.118249593 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.117763672 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.118887895 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.120823981 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.117108545 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.117463553 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.118416907 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.117285012 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.118043882 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.120955101 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.118327648 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.117054083 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.120476899 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.11887506 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.117238066 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.117483349 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.084606718 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.113889974 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.118701665 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.118396558 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.117671588 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.118549962 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.118452538 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.119061844 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.118342866 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.117536883 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.117172291 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.119513367 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.117323162 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.116560822 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.120340239 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.116021079 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.122848144 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.116379311 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.116951946 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.115678547 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.118160771 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.123441854 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.116690983 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.115927198 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.115461364 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.113510507 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.119257574 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.116849221 seconds)
  done (took 133.365016182 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.115948506 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.123526412 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.116444187 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.117321958 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.115826919 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.118674403 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.119772037 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.115658316 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.116027951 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.117708995 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.115882565 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.118753358 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.1167822 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.114485928 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.115211276 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.117164328 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.116419542 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.114855073 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.115888544 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.113366862 seconds)
  done (took 44.372348375 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.114050699 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.115007104 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.113430056 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.115402481 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.115186266 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.113752746 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.114749869 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.113665405 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.114590001 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.115566528 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.112372131 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.114954725 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.114189295 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.11378566 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.114474883 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.114880183 seconds)
  done (took 35.863450028 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.112767138 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.11688847 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.111397771 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.112511828 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.113938361 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.113651642 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.11907346 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.113145489 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.113902218 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.113778033 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.11386184 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.118847428 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.113742272 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.112708857 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.113546551 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.117276409 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.113623919 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.112975993 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.114003204 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.111895548 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.118224678 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.114820581 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.115973514 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.115956126 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.115222396 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.120836762 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.114621965 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.112385636 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.116554989 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.114681889 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.118398221 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.114939105 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.116369722 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.114771261 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.115836533 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.114803125 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.114172715 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.115809848 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.115163086 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.118296491 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.116370912 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.116904605 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.116608079 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.116166355 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.118313585 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.116534346 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.117276375 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.116592945 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.117805131 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.116628245 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.115255678 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.113187874 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.114661666 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.116499014 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.116239143 seconds)
  done (took 118.380231751 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.118045369 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.119428585 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.119172967 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.118896267 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.118830613 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.119828737 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.118802433 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.121917087 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.119467419 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.119232033 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.119810644 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.120519603 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.118131228 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.11940804 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.119497724 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.119430829 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.123353928 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.120295211 seconds)
  done (took 40.187857488 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.120304556 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.120399386 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.122672621 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.119526146 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.12215352 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.119918234 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.120976555 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.122705895 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.11929272 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.119070684 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.121435479 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.1231516 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.120158049 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.121824658 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.121286891 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.122744175 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.122589621 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.119643837 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.121038325 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.120422849 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.119252443 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.122594481 seconds)
  done (took 48.703262691 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.118413476 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.120296734 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.134612655 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.13983719 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.137396821 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.151421642 seconds)
  done (took 14.843440933 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.122901786 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.120798271 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.122089597 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123124905 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.121132234 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.123853683 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.120660298 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.119759578 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122311232 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.119932743 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.124900474 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.120937186 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.120789563 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120624665 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.12372311 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.119129689 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.119909109 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.123551155 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.11887076 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129168144 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120727899 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.120355591 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12171438 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.120566749 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125368273 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.121560232 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.12361253 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.120202243 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.120889704 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.12360161 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.123525254 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.122518135 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.1220958 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12369988 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.120677173 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.120932394 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.119610056 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.122877241 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.124610577 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12132519 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.119424386 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.122582427 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125171181 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.122618397 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.099879983 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122796811 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124728746 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128559503 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.107796785 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.121680419 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.123599637 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.123504517 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127169628 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.121139724 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.121545423 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.12136425 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.11013439 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.123552153 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.119031612 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.12212522 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121708644 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.120395053 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124530684 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.112678414 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122940199 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.123680082 seconds)
  done (took 142.052415083 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.12300343 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.120674581 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122139453 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.120970996 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.123304539 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120393933 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.122590633 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122467768 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.122222626 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.126170501 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.121758119 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.124828247 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.121172536 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12634032 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.121830564 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.123310157 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123523219 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.123139943 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.129975682 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.122672028 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.124090926 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.123493711 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125389962 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129791578 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126107138 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.122427408 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.12471048 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.124429073 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.1255202 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125152906 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.123818 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125077717 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125976947 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.123883638 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.12568987 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.125029685 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.124926595 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.124120071 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.125039165 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125897821 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.125049998 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.124989743 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130915792 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.126115812 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125441116 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124565658 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130640988 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.124941933 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125993344 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.123854347 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125521149 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.128550861 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126689405 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.125183522 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125133683 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.124714917 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125011722 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.124508879 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125751146 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125641791 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.127520527 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125375701 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.128199182 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.128344999 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127429199 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125856462 seconds)
  done (took 142.290254316 seconds)
done (took 2960.194960809 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.190249555 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.203373909 seconds)
  done (took 16.437072719 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.290467235 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.169438078 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.314801218 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.230869241 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.135198177 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.134638707 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.131692393 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.123935536 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.224272526 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.133415172 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.156212493 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.128186812 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.132891952 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.131557518 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.130853532 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.131206771 seconds)
  done (took 56.75271453 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.138050874 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.136891568 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.138137707 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.131019893 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.148062086 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.214146808 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.157345333 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.140922291 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.150635904 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.166370748 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.155301129 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.136433791 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.145272807 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.142060214 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.225115063 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.177674613 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.190969714 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.209475315 seconds)
  done (took 40.95262234 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.216284239 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.144284015 seconds)
  done (took 11.417652721 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.143770445 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.137785334 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.132915311 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.153931857 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.162750004 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.155997205 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.154116827 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.148686633 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.146137209 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.155891576 seconds)
  done (took 73.549476779 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.135123148 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.134932971 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.447179004 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.141789644 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.143032409 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.161322029 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.137852715 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.171071505 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.142998831 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.132438108 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.143565356 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.451373008 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.147450596 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.137442059 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.557724604 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.147357523 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.139572903 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.165088793 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.171883682 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.138021977 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.141946507 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.141267278 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.298863938 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.838495537 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.136964483 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.142589324 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.142216712 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.132047293 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.13274363 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.137354504 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.140809092 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.13647739 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.145857748 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.135452903 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.147432974 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.139989121 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.634730649 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.156788692 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.143249513 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.237568255 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.18116877 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.143439573 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.940015273 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.136514759 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.13372823 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.146197234 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.829646258 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.229106831 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.13868336 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.314292052 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.48716614 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.147509928 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.296356486 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.347151235 seconds)
  done (took 147.735526329 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.132258775 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.371048523 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.287972201 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.133810233 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.391327084 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.340042672 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.134439731 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.180017569 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.137127138 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.334586905 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.387340333 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.239042255 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.140063399 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.136319054 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.134565515 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.134276352 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.282063871 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.203409705 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.134821466 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.141127434 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.158333145 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.3405742 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.252544445 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.134382709 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.15878641 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.341791752 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.25193499 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.239237626 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.920738753 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.132913749 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.195290384 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.139221977 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.136240183 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.132944182 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.287890665 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.226685589 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.218070642 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.134078307 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.137335308 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.13549353 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.810404675 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.33391105 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.230110945 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.259251809 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.382156139 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.347467375 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.748637309 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.135145732 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.757485468 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.299108818 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.339352072 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.345504712 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.253614169 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.139161762 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.427271831 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.133725973 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.135447233 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.358144887 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.352569159 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.233126701 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.137998582 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.13647817 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.135550689 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.3781071 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.137985628 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.222625401 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.138887872 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.137153048 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.228309424 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.236514466 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.362627314 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.358469884 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.164169069 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.459033786 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.627356318 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.342766471 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.200399202 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.360514487 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.141525364 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.135789623 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.219192736 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.975862766 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.387931584 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.380406552 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.336319977 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.164387721 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.782478919 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.13489412 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.326099553 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.328843585 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.372397044 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.382711262 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.372373065 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.491267495 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.138186819 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.138960596 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.449887038 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.252642526 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.081026657 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.494232124 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.370420667 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.666976942 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.16485517 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.424215024 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.265212817 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.140152916 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.787982335 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.139796736 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.341667713 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.177973356 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.140114174 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.144856587 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.332071661 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.04541368 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.145063222 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.843515732 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.200906738 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.145786847 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.346794355 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.14406283 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.388682964 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.145810933 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.37777519 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.786841104 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.171386553 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.315797802 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.389789908 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.771401558 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.437110428 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.385329884 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.254024026 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.364464559 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.952184063 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.141761865 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.404656383 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.144858091 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.141683893 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.313676459 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.144923738 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.289422979 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.142846056 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.411844005 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.164862545 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.371265693 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.141586975 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.381472677 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.173540896 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.191218075 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.144119059 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.264037037 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.147020891 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.974566579 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.300348855 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.144336803 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.142344713 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.740727262 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.141278187 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.298492215 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.369928353 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.164346574 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.216810383 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.709311859 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.139619932 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.228075868 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.164082376 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.418948993 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.145727063 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.391056116 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.102254822 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.623490965 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.144079616 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.380963229 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.331154369 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.148552391 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.142194159 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.984587706 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.146829401 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.146848783 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.300191493 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.550880883 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.067885478 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.327191753 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.139450627 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.268736922 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.148453796 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.217944274 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.48850757 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.143825035 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.142772282 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.148251655 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.14492689 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.145081199 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.356464782 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.169594302 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.573223826 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.279495381 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.399900156 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.449957587 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.347486731 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.184204857 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.14291567 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.364672833 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.129103376 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.207188691 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.149369867 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.163317166 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.374877449 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.14849035 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.350916002 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.386549129 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.029143972 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.191490733 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.149002972 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.145616429 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.061549248 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.291016977 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.235521215 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.148510825 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.145692366 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.262020805 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.262731282 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.33023706 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.977758869 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.278162212 seconds)
  done (took 960.970157697 seconds)
done (took 1309.860772133 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.150806458 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.145481266 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.15147723 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.155424556 seconds)
  done (took 30.670693072 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.152641112 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.14938398 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.153406005 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.150151381 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.151622371 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.152455548 seconds)
  done (took 14.976933899 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.152613553 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.150047465 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.15363933 seconds)
  done (took 23.522522947 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.582884475 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.556419007 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.222644026 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.292898518 seconds)
  done (took 11.72264772 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.155528093 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.148798212 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.151376231 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.152573599 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.150480602 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.151300214 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.154921501 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.153364531 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.153569508 seconds)
  done (took 21.449540495 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.326302925 seconds)
done (took 108.7351241 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.243795609 seconds)
    (2/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.156980191 seconds)
    (3/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.983031194 seconds)
    (4/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.174139959 seconds)
    (5/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.162894419 seconds)
    (6/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.30951818 seconds)
    (7/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.155469862 seconds)
    (8/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 3.739153502 seconds)
    (9/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.115704685 seconds)
    (10/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.156507087 seconds)
    (11/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.288782219 seconds)
    (12/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.246938338 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.169166913 seconds)
    (14/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.465335539 seconds)
    (15/341) benchmarking ("sort", Float32, false)...
    done (took 5.834853024 seconds)
    (16/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.170485567 seconds)
    (17/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.035898328 seconds)
    (18/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.781891871 seconds)
    (19/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.726195639 seconds)
    (20/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.167513107 seconds)
    (21/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.483993619 seconds)
    (22/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.353751672 seconds)
    (23/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.025695758 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.284388944 seconds)
    (25/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.297020432 seconds)
    (26/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.616163378 seconds)
    (27/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.843121961 seconds)
    (28/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.151282788 seconds)
    (29/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.164940511 seconds)
    (30/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.913887535 seconds)
    (31/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.421374723 seconds)
    (32/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.45464215 seconds)
    (33/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.158347179 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.248505567 seconds)
    (35/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.539398118 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.148198653 seconds)
    (37/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.125267597 seconds)
    (38/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.646788813 seconds)
    (39/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.285760191 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.378905207 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.231924818 seconds)
    (42/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.533418821 seconds)
    (43/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.115852108 seconds)
    (44/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.275459814 seconds)
    (45/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.849481235 seconds)
    (46/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.576993629 seconds)
    (47/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.149487929 seconds)
    (48/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.572204259 seconds)
    (49/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.440566321 seconds)
    (50/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.35073169 seconds)
    (51/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.955482128 seconds)
    (52/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.9542723 seconds)
    (53/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.406500333 seconds)
    (54/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.908147714 seconds)
    (55/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.360203063 seconds)
    (56/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.400287894 seconds)
    (57/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.165930069 seconds)
    (58/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.626311328 seconds)
    (59/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.208162515 seconds)
    (60/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.152261004 seconds)
    (61/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.410236716 seconds)
    (62/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.21315786 seconds)
    (63/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.998081815 seconds)
    (64/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.676423223 seconds)
    (65/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.846484013 seconds)
    (66/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.180957655 seconds)
    (67/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.925296385 seconds)
    (68/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.35153406 seconds)
    (69/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.163959283 seconds)
    (70/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.489905072 seconds)
    (71/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.168252519 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.542864118 seconds)
    (73/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.250993421 seconds)
    (74/341) benchmarking ("sort", Int8, false)...
    done (took 5.094712533 seconds)
    (75/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.626601375 seconds)
    (76/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.92270593 seconds)
    (77/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.472207555 seconds)
    (78/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.233638369 seconds)
    (79/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.168268882 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.437961837 seconds)
    (81/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.172233758 seconds)
    (82/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.479178787 seconds)
    (83/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.381543723 seconds)
    (84/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.453319725 seconds)
    (85/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.686007701 seconds)
    (86/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.148821483 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.220751004 seconds)
    (88/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.314064253 seconds)
    (89/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.320669031 seconds)
    (90/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.356136379 seconds)
    (91/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.149768886 seconds)
    (92/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.153629672 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.275136304 seconds)
    (94/341) benchmarking ("sort", BigInt, false)...
    done (took 7.138813888 seconds)
    (95/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.488227767 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.17908524 seconds)
    (97/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.493843974 seconds)
    (98/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.244863297 seconds)
    (99/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.461751796 seconds)
    (100/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.170810634 seconds)
    (101/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.420019228 seconds)
    (102/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.15082488 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.08865954 seconds)
    (104/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.156304562 seconds)
    (105/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 4.527081675 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.344000483 seconds)
    (107/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.301687182 seconds)
    (108/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.612820112 seconds)
    (109/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.225523508 seconds)
    (110/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.147544795 seconds)
    (111/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.553549254 seconds)
    (112/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.813121269 seconds)
    (113/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.580255616 seconds)
    (114/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.149530666 seconds)
    (115/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.386198707 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.164084983 seconds)
    (117/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.163885511 seconds)
    (118/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.262738057 seconds)
    (119/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.288086512 seconds)
    (120/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.108324219 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.021376753 seconds)
    (122/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.156742952 seconds)
    (123/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.217097968 seconds)
    (124/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.487535137 seconds)
    (125/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.280194482 seconds)
    (126/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.350170219 seconds)
    (127/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.89746084 seconds)
    (128/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.471572164 seconds)
    (129/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.373674452 seconds)
    (130/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.750703028 seconds)
    (131/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.808592801 seconds)
    (132/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.59112176 seconds)
    (133/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.421882187 seconds)
    (134/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.443090466 seconds)
    (135/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.050341598 seconds)
    (136/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.365257665 seconds)
    (137/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.160872002 seconds)
    (138/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.174979482 seconds)
    (139/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.151085784 seconds)
    (140/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.860751849 seconds)
    (141/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.159908746 seconds)
    (142/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 10.096159388 seconds)
    (143/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.301563318 seconds)
    (144/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.172740059 seconds)
    (145/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.266870342 seconds)
    (146/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.167513926 seconds)
    (147/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.300330921 seconds)
    (148/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.866065189 seconds)
    (149/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.559657548 seconds)
    (150/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.110652297 seconds)
    (151/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.550610651 seconds)
    (152/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.217784922 seconds)
    (153/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.24970066 seconds)
    (154/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.406195558 seconds)
    (155/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.355420765 seconds)
    (156/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.335234224 seconds)
    (157/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.364676867 seconds)
    (158/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.252486843 seconds)
    (159/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.161717944 seconds)
    (160/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.168924924 seconds)
    (161/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.460345992 seconds)
    (162/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.920729604 seconds)
    (163/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.242071983 seconds)
    (164/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.454662658 seconds)
    (165/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.153652685 seconds)
    (166/341) benchmarking ("sort", Bool, false)...
    done (took 2.371163858 seconds)
    (167/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.172093216 seconds)
    (168/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.155151939 seconds)
    (169/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.306781121 seconds)
    (170/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.246181884 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.49830066 seconds)
    (172/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.17902188 seconds)
    (173/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.170969471 seconds)
    (174/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.154333356 seconds)
    (175/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.233079362 seconds)
    (176/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.239728797 seconds)
    (177/341) benchmarking ("sort", Int64, false)...
    done (took 5.781325997 seconds)
    (178/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.238780517 seconds)
    (179/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.895333648 seconds)
    (180/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.157560216 seconds)
    (181/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.168620699 seconds)
    (182/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.267808706 seconds)
    (183/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.471108136 seconds)
    (184/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.040723189 seconds)
    (185/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.38191642 seconds)
    (186/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.278319702 seconds)
    (187/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.431663009 seconds)
    (188/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.251923748 seconds)
    (189/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.530145162 seconds)
    (190/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.420160113 seconds)
    (191/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.463004271 seconds)
    (192/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.549879018 seconds)
    (193/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.464579332 seconds)
    (194/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.290102052 seconds)
    (195/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.422449461 seconds)
    (196/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.344020452 seconds)
    (197/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.160529866 seconds)
    (198/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.185281039 seconds)
    (199/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.234416342 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.184042242 seconds)
    (201/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.432963384 seconds)
    (202/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.237203608 seconds)
    (203/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.309932754 seconds)
    (204/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.157724187 seconds)
    (205/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.304870148 seconds)
    (206/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.29581621 seconds)
    (207/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.163230387 seconds)
    (208/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.470201789 seconds)
    (209/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.269453019 seconds)
    (210/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.221351237 seconds)
    (211/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.158575108 seconds)
    (212/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.311835969 seconds)
    (213/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.247079716 seconds)
    (214/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.293875687 seconds)
    (215/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.061610609 seconds)
    (216/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.386396318 seconds)
    (217/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.552914449 seconds)
    (218/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.576981184 seconds)
    (219/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.543597405 seconds)
    (220/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.242638321 seconds)
    (221/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.379179223 seconds)
    (222/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.257223776 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 4.753272922 seconds)
    (224/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.187321955 seconds)
    (225/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.247466409 seconds)
    (226/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.471213947 seconds)
    (227/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.400799416 seconds)
    (228/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.975803504 seconds)
    (229/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.807224434 seconds)
    (230/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.470701369 seconds)
    (231/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.31267795 seconds)
    (232/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.103052384 seconds)
    (233/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.180373579 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.283064812 seconds)
    (235/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.968423534 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.440585428 seconds)
    (237/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.387554186 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.498512931 seconds)
    (239/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.252625455 seconds)
    (240/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.31653502 seconds)
    (241/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.284947826 seconds)
    (242/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.398055676 seconds)
    (243/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.161339151 seconds)
    (244/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.413741937 seconds)
    (245/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.633932099 seconds)
    (246/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.160378002 seconds)
    (247/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 3.970096968 seconds)
    (248/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.156292685 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.916956238 seconds)
    (250/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.451340894 seconds)
    (251/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.461828535 seconds)
    (252/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.274413025 seconds)
    (253/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.256889563 seconds)
    (254/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.57461025 seconds)
    (255/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.176809589 seconds)
    (256/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.161106206 seconds)
    (257/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.165307189 seconds)
    (258/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.203464705 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.233497625 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.238592103 seconds)
    (261/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.244671408 seconds)
    (262/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.991970612 seconds)
    (263/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.53613383 seconds)
    (264/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.161603329 seconds)
    (265/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.273431299 seconds)
    (266/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.241423591 seconds)
    (267/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.699007066 seconds)
    (268/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.244655295 seconds)
    (269/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.248464854 seconds)
    (270/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.186874906 seconds)
    (271/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.290279772 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.500875452 seconds)
    (273/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.296019637 seconds)
    (274/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.245732103 seconds)
    (275/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.423479182 seconds)
    (276/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.043704567 seconds)
    (277/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.436856551 seconds)
    (278/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.463249259 seconds)
    (279/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.444811571 seconds)
    (280/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.560797253 seconds)
    (281/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.182858515 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.275023069 seconds)
    (283/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.548590239 seconds)
    (284/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.280723256 seconds)
    (285/341) benchmarking ("sort", Float64, false)...
    done (took 5.897350153 seconds)
    (286/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.26717679 seconds)
    (287/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.181725395 seconds)
    (288/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.447741866 seconds)
    (289/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.423645907 seconds)
    (290/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.385657647 seconds)
    (291/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.578207776 seconds)
    (292/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.370434058 seconds)
    (293/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.166286498 seconds)
    (294/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.164868496 seconds)
    (295/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.415925146 seconds)
    (296/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.345790728 seconds)
    (297/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.346916249 seconds)
    (298/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.302786864 seconds)
    (299/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.545636815 seconds)
    (300/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.241524856 seconds)
    (301/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.35430794 seconds)
    (302/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.163734217 seconds)
    (303/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.165477096 seconds)
    (304/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.047391239 seconds)
    (305/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.309593407 seconds)
    (306/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.183689434 seconds)
    (307/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.167736705 seconds)
    (308/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 8.457543111 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.208920671 seconds)
    (310/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.216003792 seconds)
    (311/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.305845308 seconds)
    (312/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.443572328 seconds)
    (313/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.032601522 seconds)
    (314/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.164516944 seconds)
    (315/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.273448893 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.241130758 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.293490564 seconds)
    (318/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.266407156 seconds)
    (319/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.034962121 seconds)
    (320/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.457502849 seconds)
    (321/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.330031015 seconds)
    (322/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.573773592 seconds)
    (323/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.259738558 seconds)
    (324/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.165539747 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 5.481298358 seconds)
    (326/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.56988464 seconds)
    (327/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.204831187 seconds)
    (328/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.449078677 seconds)
    (329/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.403312372 seconds)
    (330/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.253395775 seconds)
    (331/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.186177434 seconds)
    (332/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.294812612 seconds)
    (333/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.31823464 seconds)
    (334/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.251892385 seconds)
    (335/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.493057074 seconds)
    (336/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.273536738 seconds)
    (337/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.565745843 seconds)
    (338/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.497104296 seconds)
    (339/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.171590247 seconds)
    (340/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.254804206 seconds)
    (341/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.166304369 seconds)
  done (took 1192.736883927 seconds)
done (took 1194.910417946 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.193407909 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.169181038 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.666662879 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.178705272 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.172787434 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.174626987 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.674601875 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.195487255 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.189249597 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.674144842 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.179566811 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.17304214 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.18817448 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.204174964 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.17876044 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.186254489 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.178884837 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.1969795 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.207797017 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.179871364 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.22405791 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.177432975 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.175209391 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.225263333 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.174539221 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.183476734 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.190859983 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.22102363 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.225169993 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.175259428 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.176512043 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.527415171 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.220523572 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.178693942 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.180184868 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.18755329 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.178304217 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.188316484 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.192855638 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.186389819 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.170192473 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.181567109 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.175972119 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.173935654 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.170905639 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.174038114 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.177242661 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.295365306 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.187100571 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.512208979 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.229217347 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.191627922 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.225258972 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.178655773 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.175593165 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.17659578 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.228305604 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.183577882 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.181385379 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.513838703 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.262947806 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.188343639 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.512154634 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.232817325 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.184445305 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.184764072 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.177007983 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.194496227 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.531826796 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.717017429 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.203119117 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.193419568 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.178342402 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.176542972 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.18653296 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.679634894 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.190674386 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.750873604 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.202213593 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.188073533 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.179841054 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.177842788 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.176897321 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.194178413 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.193592721 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.177299726 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.181738472 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.181031169 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.192314979 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.533115911 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.217186184 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.672544498 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.184154529 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.197920887 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.195919862 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.746978113 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.201905263 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.195492297 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.183062122 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.530942727 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.218194084 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.199723862 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.176358511 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.186166592 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.288321993 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.192110055 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.194371264 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.174098886 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.196663128 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.183091183 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.177977893 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.18893935 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.1827596 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.213587918 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.194094859 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.177361263 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.184377733 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.182895382 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.194813641 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.188800915 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.185271792 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.191243042 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.176249315 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.218274486 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.195998738 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.19314313 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.287937888 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.179156374 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.300959066 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.18881002 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.184294596 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.178304139 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.515201131 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.218617619 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.197355728 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.182186839 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.201064655 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.198431103 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.193984329 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.179253538 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.193287577 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.180511479 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.229144701 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.182258711 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.202075942 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.232551137 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.19336992 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.18744634 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.196265982 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.211469575 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.198673844 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.184776989 seconds)
done (took 342.2533306 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.225138953 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.179693752 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.254367157 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.177683737 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.243602038 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.228389756 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.180469338 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.181851992 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.178163488 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.561757485 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.180192832 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.186656255 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.178411672 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.183450619 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.227566515 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.179926256 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.182359763 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.412394051 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.180051944 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.236523526 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.177633421 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.179896988 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.183591098 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.572076012 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.179785533 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.178489157 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.235166156 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.178304493 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.419061407 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.175634263 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.17490198 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.422446367 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.23815828 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.192500506 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.190713336 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.186461408 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.246142603 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.187773369 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.224860763 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.226493601 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.25530808 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.212924675 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.180548966 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.180147589 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.182568336 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.180927644 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.178833505 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.212188355 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.17798372 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.188819539 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.412431055 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.188256838 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.189987105 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.183935517 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.182916839 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.192826704 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.18096825 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.179672931 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.239242112 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.182487843 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.223602411 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.573691563 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.565694701 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.18324017 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.178986879 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.182734501 seconds)
  done (took 204.415184269 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.244984033 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.271790903 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.247354116 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.182828371 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.233684077 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.246885136 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.184474501 seconds)
  done (took 17.709430055 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.187152888 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.183101253 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.202262822 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.205681129 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.182290188 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.321398432 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.192963381 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.19065795 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.206226135 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.181982377 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.515622735 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.203126532 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.189301651 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.179991618 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.19312173 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.20905706 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.184668161 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.181862389 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.278399654 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.257956776 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.187527661 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.189910749 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.210444567 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.195792325 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.182461709 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.182669889 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.180949771 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.18804659 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.184696511 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.184108914 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.182980328 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.194575063 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.184894062 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.181179349 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.18409145 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.18562822 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.18195443 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.187322849 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.183110097 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.182484528 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.18530678 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.184817053 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.182988304 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.184752567 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.183391303 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.20611318 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.18547496 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.184838806 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.184008034 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.18584831 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.213336813 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.185002722 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.186780401 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.190748703 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.224880529 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.19326889 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.184834499 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.187424938 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.18439361 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.187117192 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.186633957 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.263776237 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.208257113 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.187183498 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.208884276 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.223224325 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.186846571 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.186375681 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.186666223 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.210751467 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.186106522 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.205374331 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.186908444 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.281187131 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.185504047 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.325204402 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.206837346 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.186325436 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.187337657 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.184530578 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.190346831 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.187155871 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.186713502 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.19066171 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.192495215 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.18766681 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.188491413 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.18552154 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.193054126 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.188206581 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.229397014 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.187931185 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.186243012 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.286740738 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.18862824 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.283865503 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.211567665 seconds)
  done (took 235.738164975 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.191051831 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.188376441 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.201542847 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.190068609 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.187666388 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.191789412 seconds)
  done (took 15.251491436 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.189173489 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.191575056 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.188650807 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.187995295 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.189056388 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.186200889 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.189770042 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.187184654 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.190234883 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.189937201 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.189658905 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.189465002 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.186777123 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.185660974 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.188100545 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.186893179 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.187863448 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.188870376 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.187511284 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.184291267 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.387323039 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.186051366 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.186174873 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.189250221 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.190984381 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.18986525 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.19466877 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.190303856 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.188144147 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.193600345 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.191593214 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.188045128 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.193356469 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.193032824 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.19279403 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.191617948 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.194575276 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.189289643 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.191884217 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.187859355 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.190310871 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.188726372 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.190216598 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.188978254 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.1917165 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.197205629 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.193800154 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.197402184 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.192034047 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.18960494 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.190965927 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.191018258 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.187411554 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.188291139 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.194597639 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.195255766 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.194463799 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.190754978 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.189331498 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.194238028 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.196941421 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.19110416 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.190839546 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.197007849 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.199648374 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.191195946 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.196818394 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.195788298 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.19192828 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.192500817 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.191674007 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.193394586 seconds)
  done (took 161.04743588 seconds)
done (took 636.259666711 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.258287587 seconds)
  done (took 9.365472303 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.366793746 seconds)
  done (took 9.570892449 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.62241661 seconds)
  done (took 12.735937661 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.19716171 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.192940444 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.203783463 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.196015843 seconds)
  done (took 30.908881768 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.419975553 seconds)
  done (took 9.527035968 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.201463963 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.186131437 seconds)
  done (took 16.557542685 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.203227601 seconds)
  done (took 9.312540993 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.683275109 seconds)
  done (took 9.819126604 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.195696747 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.211856681 seconds)
  done (took 16.53639311 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.193112411 seconds)
  done (took 9.304310409 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.959047747 seconds)
  done (took 10.156736367 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.196726702 seconds)
  done (took 9.321763272 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.196686509 seconds)
  done (took 9.303201402 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.132317526 seconds)
  done (took 10.238157175 seconds)
done (took 174.764116895 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.199360935 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.188602722 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.188536834 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.186961678 seconds)
  done (took 30.86419426 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.230102488 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.226880024 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.237903174 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.228220698 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.225346141 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.221189647 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.231218176 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.230406002 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.220615488 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.229407492 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.232641012 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.228531014 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.229953998 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.243634501 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.24152138 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.230273336 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.233728604 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.235044528 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.222596743 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.241386087 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.229473975 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.23391497 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.197132072 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.198038933 seconds)
  done (took 55.58856519 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.38637006 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.262100294 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.350115272 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.242466617 seconds)
  done (took 11.351319344 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.194407772 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.260775677 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.252256326 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.245085226 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.284946175 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.302118904 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.252126465 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.407285059 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.313204391 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.323022624 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.206472416 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.219545119 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.212947238 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.248690999 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.300725435 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.190935737 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.192852719 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.314316044 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.259794532 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.410867773 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.199208166 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.251146437 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.291902722 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.250179568 seconds)
  done (took 56.495291526 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.197855123 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.206032834 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.2062466 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.198688079 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.198547794 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.199981589 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.206301958 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.200092755 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.220112767 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.199051604 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.199733972 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.199542107 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.20520611 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.199282253 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.199831013 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.211786945 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.212689788 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.200572009 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.203207103 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.208197639 seconds)
  done (took 46.184539601 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.195967878 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.043402979 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.542293182 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.447988394 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.194800639 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.197537819 seconds)
  done (took 33.733436693 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.209856609 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.215257382 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.202469955 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.222235599 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.242645284 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.201209381 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.258999541 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.357474414 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.205022388 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.256600418 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.214854214 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.204072146 seconds)
  done (took 28.904505535 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.214032387 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.197760863 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.199132148 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.209670199 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.208968739 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.205548572 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.207841846 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.197797235 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.210550191 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.217024788 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.206190228 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.209672845 seconds)
  done (took 48.597833833 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.415589647 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.427346222 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.412074778 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.722565857 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.522088708 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.181156153 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.487323916 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.410889253 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.926226019 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.964741139 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.495738656 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.177133077 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.147315991 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.125393897 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.118916016 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.442907828 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.2005081 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.059735346 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.453265647 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.245590491 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.203697913 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.206226175 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.205796278 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.488044872 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.527868895 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.2056077 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.416380008 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219716699 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.230865535 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.418804253 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.605245507 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.253036281 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.405473479 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.459864541 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.539195342 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.36975309 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.204266632 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.301411061 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.241132775 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.237779679 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.214225263 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.212669333 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.742618306 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.212078931 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.475796028 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207688905 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.317224704 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.204097551 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.127403636 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.518507603 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.314086401 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.203487823 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.240668591 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.635885076 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.321428295 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.44731775 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.207524213 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.310684856 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.257923499 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.463235636 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.431116755 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.206419216 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.417518397 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.129229925 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.552128913 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.326392451 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.210294763 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.210752023 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.905375679 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.445589453 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.286160626 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.524696972 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.958012296 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.204355933 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.207418396 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.24992485 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.303698782 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.201866963 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.495885848 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.212310339 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.129457429 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.302915529 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.600054083 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212046163 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.200870669 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.212076751 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.04965798 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.12986518 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.302724153 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.477159021 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.52776776 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.2084096 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.210011277 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.22765741 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195478928 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.152611661 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.694872914 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.267072683 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.133579526 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.769697835 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.599835718 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.165532606 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.61693368 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.245376498 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.480348591 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.343342907 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.612539081 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.415240139 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.453323279 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.74055592 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.211844517 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.822605517 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.288041908 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.283286946 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.20774532 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.767977507 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.311326212 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.504604491 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.317902097 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.209578289 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.134068561 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.219139568 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.411728127 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.601662931 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.259387711 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.198598699 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.213668239 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.206466387 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.210170306 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.313404336 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.224365144 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.50340373 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.277199035 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.197116458 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.128397161 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.213783013 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.491572732 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.750677528 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264306436 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.46820147 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.471354792 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.905295796 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.803089215 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.150066395 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.470793546 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.277527467 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.282530159 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.775113098 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.33541992 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.305054315 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.181654314 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.344628939 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.214767633 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.199377759 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.482332865 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.623294658 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.634641207 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.241540437 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.209482531 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.158274768 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.309656753 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.447833844 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.273333559 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.237108238 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.214755283 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.293975182 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.437395314 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.208675573 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.136480925 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.449825885 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.446896071 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.501509913 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.614618981 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.261993432 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.275745823 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.219706679 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.424258828 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.293544418 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.865047539 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.734957061 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.42158146 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.682423097 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.169267219 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.849234913 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.47860968 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.582579146 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.22795538 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.6497148 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.312470599 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.824838539 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.238278013 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.723873453 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.139412364 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.217942547 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.542569709 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.16292836 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.533034134 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.270020333 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.257774091 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.213272363 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.213160004 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221801538 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.114350496 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.315501697 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.280684766 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.28544989 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.139828376 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.788545121 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.247399798 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.215435864 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.215018686 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.554760894 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.054861828 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.159402868 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.212309679 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.291030584 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.961652811 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.761127289 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.213227753 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.217769744 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.816472486 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.18850786 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.126207493 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.350520244 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.957456667 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.235488903 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.484264472 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.912264719 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.496687486 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.286157234 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.288207046 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.215188895 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.219826353 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.915257881 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.222038972 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.91671718 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.499557502 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.485449669 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.650243952 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.275621433 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.422245957 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.230240304 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.217637884 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.715700124 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.236625398 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.21900704 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.421128416 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.731215075 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.550356587 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.852860897 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.302364624 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.216200607 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.482905536 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.214715784 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.628675741 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.898526261 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.223191734 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.214361239 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.477600126 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.899107228 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2181859 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.194125415 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221229151 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.42962572 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.420541467 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.481016635 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.508464086 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.661863556 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.142836871 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.220159244 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.255220783 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.460742615 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.21412237 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.251399295 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.662298859 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.276634613 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.642217405 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.512000391 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.611646347 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.845785019 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.484006066 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.27798553 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.230080424 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.872210263 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.352337104 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.151347364 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.336468226 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.144149583 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.960267442 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.50559555 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.231791088 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.481024211 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.196571873 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.552999598 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.51444861 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.479872434 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.264397822 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.24396144 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.219519862 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.269749949 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.218246595 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.332870986 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.329659266 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.219332882 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.693303442 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.253653027 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.265506749 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.221082012 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.723324456 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.237880099 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.218900534 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.910171066 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.242005176 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.336464661 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.291174051 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.961703175 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.650708346 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.292581481 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.095223436 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.864025928 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.485151873 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.272454263 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.663946899 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.252058473 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.623788151 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.217619804 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.435016247 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.228015998 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.726149248 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.263569859 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.488476205 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.148013935 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.430654279 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.414350438 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.240695175 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.223684088 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.14920518 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.380301911 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.082564478 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.202653219 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.223713568 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.89813692 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.655515027 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.346658625 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.671402409 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.052357042 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.225390417 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.535523466 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.616464114 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.772476194 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.252026072 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221549138 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.558061459 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.350948382 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.5290765 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.509811541 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.226990294 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.248104001 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.434858449 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.346991903 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.140384485 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.710228158 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.79549731 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.922499572 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.233133913 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.423859469 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.560213677 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.434678074 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.252346671 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.296463461 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.6283409 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.483668829 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.288627853 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.14766255 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.220875186 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.620067297 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.631276306 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.318669472 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.464463683 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.528664689 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.740209369 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.677131492 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.59390112 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.61718279 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.632128974 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.622800073 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.427580101 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.578568842 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.541889749 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.106055163 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.636472342 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.434930609 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.324956421 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.496083472 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.095698536 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.933232537 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.467260719 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.216967362 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.153288855 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.430043011 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.229167223 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.529798734 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.797616843 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.470253959 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.484737967 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.684725398 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.752841252 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.338930953 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.246186854 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.187774582 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.254541509 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.248032544 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.225378012 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.717205658 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.513869237 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.237705202 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.16413172 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.8965049 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.15305827 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.43959951 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.33863843 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.259565844 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.782080668 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.49729806 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.323381038 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.50715997 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.393734951 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.259330164 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.152408996 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.915404828 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.16985679 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.283857311 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.630629174 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.240974481 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.229807307 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.428847636 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.154600125 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.27265498 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.231094383 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.42478921 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.802680903 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.496439241 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.352313319 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.465096147 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.524048474 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.073841514 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.248147753 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.501477157 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.155156792 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.832914119 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.905327717 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.266830796 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.297567728 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.231106059 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.232448071 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.498982577 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.552555433 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.303642664 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.742904868 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.25959868 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.254334253 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.560712596 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.318890982 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.231401078 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.233980897 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.650362666 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.460015004 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.229822301 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.212241305 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.440917137 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.303829047 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.423553685 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.307613262 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.7412199 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.232350997 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.078440791 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.326161798 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.178439031 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.213911743 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.934014804 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.288766013 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.228554848 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.496251127 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.879030367 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.430902978 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.62385859 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.087508026 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.346374469 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.270108691 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.23227126 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.235911247 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.633398267 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.531380123 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.229279783 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.50278311 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.275214619 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.235223258 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.892082413 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.19917747 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.228602637 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.983790349 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.106736786 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.959790309 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.627752781 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.23817977 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.251836679 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.234719317 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.157507831 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.230075739 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.411381036 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.202830656 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.238863527 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.606086384 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.558053786 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.320186413 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.231983208 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.232078668 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.236074157 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.444629999 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.745774443 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.247508875 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.932908063 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.435961709 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.235423318 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.726025817 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.678777565 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.425178357 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.267767611 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.347221512 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.467809328 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.764796993 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.352979909 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.211989072 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.459360809 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.235665349 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.505921158 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.507479082 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.234060324 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.446309974 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.65684998 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.514444578 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.58482158 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.553791442 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.298537401 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.358603633 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.126554624 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.235629737 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.236076737 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.500276383 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.285233805 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.23567571 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.243980607 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.786408192 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.97713351 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.690509663 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.387323008 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.56936583 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.069820541 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.986969504 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.237038424 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.163929147 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.232156365 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.260121012 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.238953713 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.160693841 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.919532978 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.955676197 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.447891292 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.543646218 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.162241854 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.437843595 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.819946656 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.161259039 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.206838563 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.234713929 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.498280502 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.16376625 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.23755532 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.191432352 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.527499446 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.89407497 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.502504948 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.235966099 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.180766497 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.241569017 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.236891381 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.235885175 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.322826008 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.238732683 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.324594821 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.505241988 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.615507687 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.340890731 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.875898694 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.922495645 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.172513764 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.282881357 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.793399801 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.805582766 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.523727841 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.364500325 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.927270925 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.180233109 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.237779594 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.252794985 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.493199689 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.241319805 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.240543642 seconds)
  done (took 2287.763391767 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.288829833 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.308569525 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.378863232 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.246891512 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.345423044 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.322576098 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.309585166 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.307192362 seconds)
  done (took 60.658748995 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.237177624 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.220052979 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.24423189 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.236460718 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.235105906 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.279672762 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.425464701 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.262478395 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.236559745 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.237390224 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.236744282 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.238100639 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.238934723 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.236893497 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.240473837 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.542510631 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.258122605 seconds)
  done (took 82.811874429 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.315987899 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.585099911 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.260829027 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.942662161 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.288805954 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.617371958 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.258300199 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.258480422 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.385329028 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.556519905 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.269121087 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.276509104 seconds)
  done (took 95.659338232 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.258067816 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.257448471 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.256106996 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.257918665 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.255205037 seconds)
  done (took 13.460114486 seconds)
done (took 2854.23591932 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.509324189 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.354580237 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.332993488 seconds)
  done (took 6.855756153 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.401271462 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.449068122 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.564126139 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.572111895 seconds)
  done (took 12.163211445 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.546969807 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.622959817 seconds)
  done (took 7.340584827 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.686930824 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.260820383 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.651972634 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.258181981 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.262722505 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.259810558 seconds)
  done (took 23.958955668 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.258673323 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.260039893 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.260004594 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.257818245 seconds)
  done (took 11.208732629 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.257146607 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.99229147 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.257855665 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.266925717 seconds)
  done (took 22.944921861 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.407177665 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.282670369 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.031745264 seconds)
  done (took 10.893361689 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.881445024 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.70446461 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.849326499 seconds)
  done (took 10.605788814 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.426520496 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.245141746 seconds)
  done (took 8.842412378 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.401415454 seconds)
  done (took 4.574001775 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.096604529 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.552576546 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.731766547 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.773877038 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.843268385 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.483541353 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.597910066 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.542212518 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.650199288 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.675060084 seconds)
  done (took 29.132544979 seconds)
done (took 165.799686892 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.701832805 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.288439329 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.469217726 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.642735893 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.624872145 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.472309938 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.575174787 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.634128956 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.326199826 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.297819747 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.641116945 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.550108402 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.494331369 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.288833041 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.498076216 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.290073956 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.498188099 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.724000771 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.326650512 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.560229306 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.553067933 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.285466515 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.497715583 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.303961005 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.500953627 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.429911899 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.899104 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.288300915 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.469557994 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.908303561 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.433113419 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.71359759 seconds)
  done (took 182.362391036 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.140983562 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.259511769 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.262004643 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.261863737 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.533866812 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.259512252 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.261609511 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.261289349 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.597539578 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.569774646 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.261884248 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.503214445 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.262741144 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.260131525 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.267473212 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.266048122 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.689942602 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.191956248 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.262118331 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.258147584 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.263639967 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.383186374 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.263259677 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.403243849 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.672476106 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.263979206 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.26261064 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.263624403 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.262561238 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.263339121 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.262697855 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.261406846 seconds)
  done (took 220.637173045 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.264007848 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.267687806 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.266722139 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.266325633 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.26333639 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.265776767 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.267899255 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.264089985 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.154817089 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.146748268 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.267094623 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.264029002 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.269091036 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.25232119 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.267347344 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.265910644 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.263794386 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.265814915 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.266830719 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.271595711 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.271004239 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.935079603 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.265420283 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.975389672 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.268537827 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.264208546 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.265093836 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.268439437 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.262956662 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.26474066 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.26342722 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.262721876 seconds)
  done (took 233.828108503 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.506085671 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.266595964 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.266917759 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.283626414 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.270286723 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.266012971 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.270853124 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.519837516 seconds)
  done (took 22.828682661 seconds)
done (took 661.843059994 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.612939248 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.985794357 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.400178732 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.289886407 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.51543567 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.334139182 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.284965868 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.346163144 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.939189382 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.366473062 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.701815805 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.293305092 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.024902123 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.327330137 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.402266912 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.344096786 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.649315813 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.906201359 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.424267802 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.944221474 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.502431671 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.212356442 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.366057763 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.979893739 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.712621066 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.240689972 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.310246328 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.653234294 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.293792174 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.525285628 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.92202643 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.544646793 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.301081063 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.288045143 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.337071071 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.336260449 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.482932544 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.297844356 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.397353437 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.007420424 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.927648877 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.81557825 seconds)
  done (took 116.725654786 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.280161153 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.272987475 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.275543247 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.272442888 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.293134263 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.270939488 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.272886329 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.27481743 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.273603244 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.274132545 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.273746697 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.283310521 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.2735389 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.287776303 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.271094187 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.27487482 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.273084482 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.286940281 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.273619612 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.274647987 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.274148444 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.274737697 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.274742553 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.273688886 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.274619154 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.273336161 seconds)
  done (took 61.37279516 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.272142808 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.425281587 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.561954296 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.308513187 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.271898195 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.272314518 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.300420856 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.278550726 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.282006769 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.273148999 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.383280103 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.278127759 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.288300085 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.559903049 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.30261116 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.272424327 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.277905274 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.272377774 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.432949736 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.285990426 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.300544808 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.296862066 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.303327911 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.285804577 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.274288005 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.277291648 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.276012659 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.690895941 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.282691589 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.391515334 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.32767574 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.302879196 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.617909615 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.589671182 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.338332157 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.279043845 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.271884997 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.437033962 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.29209482 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.273418764 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.301097431 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.28060561 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.572959749 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.804422416 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.288023668 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.276810117 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.69037904 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.449864972 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.320058944 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.285470295 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.581633069 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.303329423 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.273696307 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.273730068 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.316054328 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.285602063 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.273804397 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.551876737 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.287568093 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.307786056 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.280602809 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.273198233 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.440354657 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.289390773 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.429147866 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.283459878 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.280418323 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.280507901 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.569244161 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.302963533 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.799394153 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.29256008 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.27482407 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.38731645 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.433694594 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.711624304 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.286439365 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.442990133 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.635410096 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.309877241 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.284089994 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.675359412 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.313443914 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.282350456 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.275446499 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.277562527 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.275890744 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.31828694 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.300573227 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.714404286 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.799789574 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.570885906 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.314621933 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.287167231 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.277171375 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.554735974 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.286551037 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.277189909 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.56128992 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.828329534 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.289158004 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.282797183 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.78334886 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.289944058 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.305288761 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.287348377 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.581923714 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.307363492 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.320382961 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.279357877 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.28347005 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.281290083 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.306923379 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.286523165 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.277392286 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.775309331 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.45778393 seconds)
  done (took 280.500075719 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.281168214 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.273738621 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.274190713 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.272475832 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.277203636 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.277652265 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.276604049 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.277964297 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.278257752 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.278210868 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.275081777 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.277566245 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.27631046 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.281824799 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.318659111 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.274462695 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.768839405 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.278656079 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.276887728 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.275896387 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.839085222 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.282254655 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.27668022 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.277164753 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.278840601 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.277438453 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.283589233 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.315778582 seconds)
  done (took 179.099512264 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.28150426 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.325841945 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.28772268 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.325270296 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.292414726 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.279222045 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.29959652 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.293365437 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.283929472 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.270004051 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.283692301 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.305921361 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.288323202 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.357350323 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.306911027 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.308610287 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.35464552 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.286084956 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.282362304 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.280900298 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.328015489 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.291026991 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.306448996 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.333456341 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.294169193 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.325977813 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.292801252 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.273178654 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.259202979 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.367618758 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.299650054 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.310665248 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.312758331 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.296419569 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.372084538 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.370144659 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.3608454 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.307915912 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.28219162 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.282034084 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.282650707 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.283156279 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.329260518 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.294801483 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.27987207 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.372910146 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.300055864 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.284511682 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.3027918 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.284815581 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.2935599 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.296299034 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.315058389 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.377565762 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.328895529 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.308723455 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.30388052 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.298823479 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.28195419 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.354435205 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.287507375 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.374089728 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.30351413 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.283891256 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.286449802 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.290604561 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.334424958 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.318414992 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.356820034 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.287780722 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.355079403 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.336641959 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.296071056 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.284732682 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.275382727 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.320296769 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.365945977 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.337926162 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.330570623 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.315069279 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.291580516 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.283549057 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.287039344 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.311090667 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.292198491 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.371967603 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.372202171 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.291139259 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.284828039 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.285803397 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.285173492 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.306146715 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.337895778 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.323365336 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.36658347 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.317282098 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.319837423 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.294192808 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.296753187 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.292023155 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.314761116 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.292943849 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.296463307 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.61412023 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.322725392 seconds)
  done (took 245.022173 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.616624015 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.325935103 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.354658943 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.568040759 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.648527966 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.176716081 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.323471904 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.333946833 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.341697445 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.450864424 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.395615131 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.384824258 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.31945379 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.305033229 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.32515707 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.343358116 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.364371204 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.610578294 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.433063006 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.813572711 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.325692338 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.584715292 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.621319091 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.667260317 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.371581005 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.704740719 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.952170933 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.426186437 seconds)
  done (took 74.290498752 seconds)
done (took 959.19207065 seconds)
SAVING RESULT...
DONE!
