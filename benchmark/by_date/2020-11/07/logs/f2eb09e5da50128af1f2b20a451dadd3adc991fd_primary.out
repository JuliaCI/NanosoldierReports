cset: moving following pidspec: 31559
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.955500817 seconds)
loading group "shootout"... done (took 1.101557355 seconds)
loading group "string"... done (took 0.665905291 seconds)
loading group "linalg"... done (took 8.629205825 seconds)
loading group "parallel"... done (took 0.184419169 seconds)
loading group "find"... done (took 2.949342293 seconds)
loading group "tuple"... done (took 2.195106159 seconds)
loading group "union"... done (took 14.824269773 seconds)
loading group "dates"... done (took 1.472243812 seconds)
loading group "micro"... done (took 0.220516481 seconds)
loading group "simd"... done (took 4.769009723 seconds)
loading group "io"... done (took 1.05718028 seconds)
loading group "random"... done (took 9.529036296 seconds)
loading group "problem"... done (took 1.505723622 seconds)
loading group "array"... done (took 25.12157338 seconds)
loading group "misc"... done (took 1.886916649 seconds)
loading group "scalar"... done (took 43.338196422 seconds)
loading group "sort"... done (took 3.326952714 seconds)
loading group "sparse"... done (took 12.688275207 seconds)
loading group "collection"... done (took 18.241953254 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.527534143 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.123907663 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128423192 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.12207777 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.187002587 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.120399025 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130545535 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085377673 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.83798839 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138714691 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116353688 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.435304665 seconds)
done (took 5.362240817 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.171489125 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.095084906 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082958271 seconds)
  done (took 1.374980159 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.074373406 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061945475 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067138604 seconds)
  done (took 1.399785325 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065236258 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.137899173 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066920099 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067560776 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.06743134 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066556292 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066537473 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.069319385 seconds)
  done (took 1.743407216 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.074396967 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068029029 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066266146 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067532387 seconds)
  done (took 1.475238905 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067644073 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122023998 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064996583 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065295957 seconds)
  done (took 1.51765104 seconds)
done (took 8.961523462 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.139697977 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.832438597 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.754819601 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.122842625 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.249334895 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.446438425 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123622881 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183065617 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089150212 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075098183 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121037573 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.07816366 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.600825394 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.399168781 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071469129 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.170928368 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.652715514 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088882384 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132317438 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.464240039 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073508599 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087709502 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085300282 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071801335 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.330974974 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.156479522 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.665733322 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.179638766 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.0686672 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094914865 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.0735199 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079434213 seconds)
  done (took 10.999305084 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.096521802 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090318128 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068910099 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123463324 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.097132426 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070232187 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075873557 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068269499 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089174115 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.123715568 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.092102434 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.098858635 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066655383 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.06965327 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.073835933 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.202531358 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082698175 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081479048 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06770691 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.08099334 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105458797 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.080380215 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078449907 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078658447 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.131031129 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.171224781 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097025388 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.100157089 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066044841 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078510709 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11561978 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125926919 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.068983868 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.069990654 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119661258 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097028316 seconds)
  done (took 4.648070649 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.888131041 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.095789523 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083297929 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074305536 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106027369 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113102806 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.120569211 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122872399 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.09945614 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069403382 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152135023 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.644021121 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.138720289 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071451986 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120395184 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361926608 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.061847951 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070076282 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068630341 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071120974 seconds)
    (20/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.095238206 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069344303 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.111832056 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066072464 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.174253467 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.582655431 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070714888 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069159139 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096805679 seconds)
    (29/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.083790053 seconds)
    (30/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.0640938 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.06551436 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.13959038 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095302165 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.06977408 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.546583842 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065849081 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063840326 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088311036 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.204105986 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068139688 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068552102 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079432589 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066612765 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108800575 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079764076 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.490336184 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069660658 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.561977547 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225632564 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.07305007 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071743573 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102513942 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064873997 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068047984 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.851453382 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.12300335 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.0668859 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.271832576 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06998422 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068800437 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06925004 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.100139041 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067506403 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068946936 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073009978 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096165587 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.809094489 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.085965461 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096521061 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069935247 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.479618897 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076184231 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069284046 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070096043 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.084285294 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111069663 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066651803 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066029853 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107067766 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089380287 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088788734 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070212355 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067414995 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066379978 seconds)
    (85/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.06503618 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.321109895 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.189412006 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066377376 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067272578 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.478530143 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064486935 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066078171 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068222069 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.088995194 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066384458 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063211912 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063944287 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098778843 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.186515844 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.336482737 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.06758907 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.460038857 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069250495 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.10241914 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119165925 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067931899 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.097848491 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068436801 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.06521219 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073786527 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065986778 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065189441 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069637107 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066014068 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066730681 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069119584 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068345832 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067421632 seconds)
  done (took 22.628316945 seconds)
done (took 40.366345508 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312247072 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078422852 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079236591 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078115617 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078738331 seconds)
  done (took 1.874521387 seconds)
done (took 3.208752037 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132927039 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.09469281 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064321053 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100689258 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.06881708 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.10180551 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108630759 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104201284 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068672039 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068926193 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.06907227 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102019005 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.104723297 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068907544 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.097970143 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103861861 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.068949271 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064490369 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069231382 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.068981709 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.072038345 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064250814 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.068792407 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069057043 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099647545 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.068743053 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065141184 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.098863682 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.068805884 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098620721 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.068718986 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069060584 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.068808301 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.099824953 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069141235 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.098987244 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064846092 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.068773038 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.068982875 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.068683856 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.068773543 seconds)
  done (took 4.613647444 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072818087 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082343691 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08460963 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062921752 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071816949 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082747702 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062372133 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081903706 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087984175 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082634008 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081990038 seconds)
  done (took 2.144679826 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071696567 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082863908 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084146683 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062250596 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073721062 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08566733 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062648434 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083057647 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08581522 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083273845 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084089457 seconds)
  done (took 2.134154759 seconds)
done (took 10.157664614 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.099698146 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066630516 seconds)
  done (took 1.425066141 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.220758815 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.618386901 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.296727006 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092899317 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072383632 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.08592611 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.201019471 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067049713 seconds)
  done (took 8.1043331 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.098499331 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.070866409 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068376935 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067579895 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070277338 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069275465 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069486446 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068204998 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067888555 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068368412 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068924267 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069198537 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067821744 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069693234 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069367348 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068139747 seconds)
  done (took 2.502347132 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103379681 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069577956 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.09924513 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062350475 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071774953 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062848206 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071060376 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.07272049 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.069977751 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.070981755 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.071784605 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.070976316 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071536945 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071274968 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073416011 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.072826217 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072638439 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071052098 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07340262 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073434393 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072627612 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073499207 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073185793 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071342223 seconds)
  done (took 3.154016754 seconds)
done (took 16.457171378 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.177044198 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074398374 seconds)
  done (took 1.518751975 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.070777179 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.067894428 seconds)
  done (took 1.421617303 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.075687998 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061424922 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079030799 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070091664 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061837871 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.06089401 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.076897975 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061171427 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062014614 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061868303 seconds)
  done (took 1.956420447 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063653163 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068953171 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067195266 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064862348 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066696886 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062340212 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.064761515 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063071769 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.06911545 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062434036 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066425272 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083360966 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065988225 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08383487 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065367653 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066521529 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067952284 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065340131 seconds)
  done (took 2.49966708 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.0637091 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063239214 seconds)
  done (took 1.418603463 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.066987141 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063251444 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065487115 seconds)
    (4/7) benchmarking "year"...
    done (took 0.0648516 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062030241 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061437225 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062258889 seconds)
  done (took 1.732780167 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421445857 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122335007 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.339860523 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068786057 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076684776 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.256034724 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063945758 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069216772 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068515804 seconds)
  done (took 2.816898627 seconds)
done (took 14.662338546 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083417533 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181912048 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088068749 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.405328222 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091334576 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067604127 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112719295 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.17741416 seconds)
done (took 2.512685216 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.21466022 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.163796991 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.366839764 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124701258 seconds)
  done (took 2.949184132 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336423376 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078615 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077006695 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066815515 seconds)
  done (took 1.859242989 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066852829 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071393242 seconds)
  done (took 1.433331528 seconds)
done (took 7.760131435 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074696352 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.096978339 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062251197 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061894065 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.063715565 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064121581 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.063632311 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063173079 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.075214134 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061918068 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064131794 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064117502 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064195601 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063106485 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063954424 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063749467 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06456189 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064265995 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063637204 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.06181695 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063951085 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064184408 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063634357 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064082655 seconds)
  done (took 2.906402905 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.082406853 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066183012 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067775562 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066987523 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067489791 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066596385 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066758058 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065681508 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066607609 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065436954 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067020927 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067023494 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065068233 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067334323 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065612728 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068092823 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066811704 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065853059 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065497839 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067556451 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067143292 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066526598 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.06713036 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066886473 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067506669 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067462512 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065401454 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066044437 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066919637 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06733331 seconds)
  done (took 3.325362104 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066913962 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060090122 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060298302 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070295718 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060075611 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060721948 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061044243 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059869824 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060493257 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061966855 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060734637 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060130677 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061664569 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060122147 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060492475 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060713022 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.06485496 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.07977153 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060756534 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060576881 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064996233 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060327711 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060736607 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060386029 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061349848 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060652987 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060152835 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060951024 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060204703 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060879193 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.06013816 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064589345 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065585852 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060525159 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070285719 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064937583 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.05997499 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064280358 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061381804 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059736982 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060058914 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.059885053 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060410033 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060253945 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070381362 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060329587 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061644742 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063533075 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060832122 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060406847 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060211209 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062135531 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.06570923 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061353152 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060111522 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061521872 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.05968286 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061021903 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060079929 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060168172 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059645593 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064034695 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061425871 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060685832 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079792238 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061827475 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070356514 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060448786 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.06089212 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064361999 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060655157 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078135586 seconds)
  done (took 5.813484414 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071969986 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072030605 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079089708 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.07054765 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064796291 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061471956 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065270187 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06131324 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070657086 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06552072 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061315076 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065101064 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070545655 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065268432 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062474304 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070547019 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065354243 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064239386 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061549116 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06597422 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062459569 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064904902 seconds)
  done (took 2.786614523 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135749689 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066622644 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105121807 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074140517 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068817345 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.075002108 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066187785 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066606382 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066932999 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066978727 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066381591 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066376972 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068277097 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066666249 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066637171 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066830864 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066409719 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066496702 seconds)
  done (took 2.638605236 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.079141564 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066106463 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.08964822 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066094994 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066377717 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065867807 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069160454 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069899367 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065890733 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066087838 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070053053 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065556711 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065923108 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066424316 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065463775 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066302217 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065625195 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066068617 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069929187 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069684711 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069668271 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069837798 seconds)
  done (took 2.832628552 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078929772 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064964421 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.079941019 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06686358 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060842846 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060278141 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066180299 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065454536 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.06568418 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064590345 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064909444 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061000094 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066333396 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065310606 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.066700881 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065383414 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065054029 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065485243 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065110904 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060692462 seconds)
  done (took 2.636789736 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086568036 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063332894 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063236654 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082620692 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063297843 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063370796 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082636372 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063237667 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063256598 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084814775 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063219662 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063237952 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082634036 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.083609288 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063281086 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.08213133 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.082644688 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.082203284 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063083398 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063008543 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084398879 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063192791 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.082417691 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063410398 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063162115 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063186466 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063396364 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082212697 seconds)
  done (took 3.328021753 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065270948 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06371249 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064096645 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063802977 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064705401 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064682515 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065188545 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064728124 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.067489034 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065194743 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064367758 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064254426 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064128861 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064130216 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064349025 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063479913 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063915879 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064179853 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064119745 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064475069 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064413027 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063697275 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063709179 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064397444 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064448021 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063771056 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064282403 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06440241 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063408622 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063872584 seconds)
  done (took 3.255071254 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072879033 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071609311 seconds)
  done (took 1.466010756 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063531187 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078182155 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060665489 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073088271 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068665973 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064288704 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069152718 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068682382 seconds)
  done (took 1.866487055 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.06720712 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090726413 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062476283 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.0628059 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065429676 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.13166461 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074264527 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074264942 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07593826 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064906218 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063127541 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.073808815 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061986332 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075152276 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064312625 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071126357 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069627107 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079559024 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07566525 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060267811 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074755473 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063119353 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060418137 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063512037 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061885096 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069066075 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077766121 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074665635 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070818771 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060166147 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080597949 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061311396 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061812547 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070835769 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065090485 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061189343 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.099334181 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061897643 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065992044 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060481769 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073229145 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081604776 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075420434 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079319358 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062812613 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063070795 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060656982 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062795528 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064510965 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070349352 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060890525 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068425253 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060278904 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062877729 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07195681 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061523599 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066238311 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070474818 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074846222 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071894807 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.069844464 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077044505 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.069623531 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068998026 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062254238 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080713638 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062592566 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074480703 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076338791 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.06217179 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074584805 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061073329 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060008613 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060792746 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09404966 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062933944 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06269491 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061411189 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060822087 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062457549 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070214768 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066089079 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068936483 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064090671 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076544728 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.069708611 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060965378 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.06661563 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079023226 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064257523 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061285447 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077526232 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064685701 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060323997 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078263319 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.07097123 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062138893 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.06155706 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063906113 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074175313 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061421158 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059467377 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069552347 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062069577 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062902954 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065164022 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0684037 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060787442 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070553552 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.06505899 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062007521 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059322592 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064055315 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061017938 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058777333 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069256694 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059842017 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073764728 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066026824 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073887938 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074507872 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070476295 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075418794 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059652001 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058818634 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076806648 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.072006406 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.198732817 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.08054163 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062061721 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073305583 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061918073 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063133612 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071252191 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061024377 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063608588 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.06167981 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066376569 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062988918 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063502381 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066994319 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070482718 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073561128 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.063023986 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070897392 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061802545 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076730962 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071451962 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065714779 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065138144 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062185154 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073377656 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068128965 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070661608 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061103346 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062203379 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061636209 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071819514 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071005376 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063331816 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068703671 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065943529 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061974079 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061517871 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062513282 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064715604 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064872209 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061976173 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069567032 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069970476 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075320692 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068251539 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070406415 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060842684 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061435079 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062917499 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060763298 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.06583012 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070339112 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076644232 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072990377 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082424691 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061731005 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071595424 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062817275 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077989879 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074689012 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062390768 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066217037 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059947016 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062889854 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070658199 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072439492 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074988991 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076054759 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066130234 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065815811 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060871719 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075865341 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061612418 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069724569 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070742213 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065543903 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061078429 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062519236 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.069869451 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066022296 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061645598 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076960798 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066892872 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060837922 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075609307 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061811147 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072008279 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061298431 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065278902 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066857308 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062807802 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070768291 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07691637 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060120095 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061716079 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076422596 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062805788 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063106303 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069205714 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076550735 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065663521 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068513666 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07151387 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070617199 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065244007 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070700209 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061672126 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070411913 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064227837 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072879868 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060898875 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078256193 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.06000488 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075916289 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061374401 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071483586 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061432227 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070290942 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061620455 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077113353 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061938348 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060985511 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071622535 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059092471 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068930768 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059495967 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064888295 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066441724 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069651575 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.06162753 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069013716 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.202278927 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.072275979 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067408478 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071185828 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072018004 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067028343 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061553128 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.07060062 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072980197 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070255163 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062716282 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.062802877 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.061847031 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070766548 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062890133 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062479225 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069779688 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066099448 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067448381 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063217161 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.06308364 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063053216 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070217354 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07099312 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07908192 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070200136 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069168145 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.074087361 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061180532 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076980338 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061763471 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.068821783 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060910809 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067787875 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071136701 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061400892 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080102741 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062647263 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069667 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074097042 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070208934 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064711286 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081223781 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064991424 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069798149 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069793049 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.06571754 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068463966 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063969535 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070119787 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070878146 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071956885 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062737139 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069026554 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070090642 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063180397 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068949957 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063184377 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069788112 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063236185 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060641772 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066065696 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07281457 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066332137 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066102784 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061743775 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060593187 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061905257 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068374365 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065900984 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070083668 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076692133 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060566796 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062715816 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061354979 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065155068 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.07935612 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071780342 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069258015 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065952363 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060724067 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063184441 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063012513 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061576432 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064632293 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060706516 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061678676 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071698605 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063138821 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065980905 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061578115 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.06232839 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070806281 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066074802 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062053862 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067780747 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061505337 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066185765 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060598415 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062385467 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065036633 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060343079 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064590384 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071244055 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077582611 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067668501 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070279238 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062466478 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068852551 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076405583 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068091374 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06201983 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070193047 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060286871 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078994536 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.07022173 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.06928683 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069727462 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061571181 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076384149 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064594379 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070167455 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075606012 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061559701 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066048916 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059509284 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.0751 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064954036 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060100333 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067315005 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06796309 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065664536 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071377708 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.205778437 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070611774 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068274693 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065962871 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063855053 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063138536 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070748563 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077935032 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062525016 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065960952 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069284362 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.069828422 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.065834911 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073756841 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069871109 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063012023 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063172026 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065085252 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062289491 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073325326 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062350325 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065777399 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066298007 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061512949 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068473067 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077655213 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071191 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071974572 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061210247 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060845399 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.07879414 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064714331 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065481662 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069551681 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071463506 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073423554 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070784584 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078268831 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062012816 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066930091 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074303989 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062409209 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061423934 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065186185 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063286366 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070764963 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071892608 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069536524 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063691332 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068255368 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075625579 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062663432 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066342721 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.069012234 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061954687 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071834553 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069276661 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070179633 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063161862 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060709944 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065020867 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069939217 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069318757 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070495948 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062626404 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067835302 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075146264 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068976976 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064419116 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061027864 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064668616 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070630362 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066215187 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061281352 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.065780957 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065023302 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067913629 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071289355 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066235343 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061143465 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078259303 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069560811 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070269616 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063039194 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063059508 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061825361 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.06059555 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07226795 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060771183 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062691645 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065884067 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062644647 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078448374 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069655683 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07662783 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062720214 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065326898 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060852807 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07117152 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.06579 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061842029 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071586078 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060862636 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076846494 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.07321186 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066148166 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060751146 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066219519 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.089554323 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076326489 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070340552 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069529888 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064334722 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070144712 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.06321374 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071393257 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060231016 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.05926593 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069836896 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068772804 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072615808 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059791348 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070364633 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06193767 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068372955 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067430944 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061361985 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06130296 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061263326 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069455753 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064800325 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069317354 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.205967798 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079557949 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063351862 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073810598 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.070671803 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073126225 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076287027 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074100687 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068830724 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062283792 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069473026 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069546479 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063644125 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066746635 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065045923 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083394246 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063341996 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.06294548 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075221235 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067543416 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.06165861 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068212741 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066493651 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071726492 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062921208 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071856403 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065647123 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061968989 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06618409 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065955235 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060376103 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061478006 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061573242 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071304417 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065743775 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061982102 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079875909 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063157297 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070409414 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072912296 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068242523 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063148938 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060756618 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062231339 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074972951 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076771706 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064812936 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069839991 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063064278 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070373204 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060555839 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070213054 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069985279 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069759242 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061363548 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061771362 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076670105 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077320267 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.06594116 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070808087 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070595879 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063046556 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08282575 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070830821 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062468102 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071771543 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063829294 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060763752 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060579052 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063660124 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.072992973 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061213282 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064031511 seconds)
  done (took 42.174785202 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099241872 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062218287 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061029592 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060924247 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071795366 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062531451 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061360669 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065744447 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061970938 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063617517 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.06126682 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061355252 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071988595 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074010169 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071543907 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064909473 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061071638 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062417317 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061392338 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061900681 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071168719 seconds)
  done (took 2.836106491 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.06499923 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065486668 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065512046 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065631854 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064275898 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061016608 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06522458 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061353999 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065763403 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062115754 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06554954 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061513957 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061870472 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061382214 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062195288 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062526533 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065930709 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064753352 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061724587 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064896873 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062707756 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065064335 seconds)
  done (took 2.818627797 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062871276 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061605121 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069732509 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060341451 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060557347 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064835284 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060856966 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064869754 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065439146 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065053672 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070189886 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.06281796 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061254697 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066784014 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060426916 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061580745 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.10284591 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062177156 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062052763 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.06039588 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063739516 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.069997581 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060506208 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060956751 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065078341 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.0643099 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061748577 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063900166 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061560635 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065294115 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062041563 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060350195 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.07033513 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069371619 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065254406 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065393474 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062804029 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062087019 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060547433 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060969533 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069503486 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062444348 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060961858 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062656846 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069817148 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060609398 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.06055871 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070353009 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060775285 seconds)
  done (took 4.581411431 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071661088 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.1133507 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066866197 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094746158 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073443539 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066889919 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066640643 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095183196 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062300488 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.062590988 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074727302 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074741774 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064646412 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065718826 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068042974 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063813284 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064316509 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063008507 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066387919 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063370605 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065936241 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067567394 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073639149 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073919677 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065207298 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063095398 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063640155 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064576606 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073656319 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066793869 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065065805 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065782448 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.07359755 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068956207 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063611378 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065909418 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074683364 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064195271 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063446187 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062580779 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062998686 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064975194 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067726131 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074862689 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064063318 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068392715 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063818195 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061715115 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074148608 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063820064 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067489888 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075416012 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06431889 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064019102 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064792826 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074303383 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063867393 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062362378 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.067407592 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073580095 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061873851 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06474743 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.074529169 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.06363666 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067480196 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074692792 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068756797 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064923579 seconds)
  done (took 6.23854017 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070543934 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096746801 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072377803 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07209671 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07171349 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072079774 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071141288 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071232811 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07179399 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072408249 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071279222 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.111470773 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068168982 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076033125 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071480241 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071659307 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071121052 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071366295 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071608147 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070954507 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07116991 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071778827 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.0716994 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071836913 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074013342 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067832898 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071171442 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071170902 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072066002 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071021248 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.07356623 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071277101 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071905872 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071795481 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074021338 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071152782 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062130045 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071088835 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071546372 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071202626 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068234796 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071937891 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071188353 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068930519 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071511857 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071352738 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072137311 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074084305 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078519703 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071949128 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071505269 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071850574 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07111397 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071425781 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071870832 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077896453 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072455816 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072041402 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071237086 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071759291 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072064899 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077984786 seconds)
  done (took 5.972760336 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074790715 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067783738 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080230912 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060901983 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060951836 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070539094 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061233652 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.060904588 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067878001 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.06785564 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069506605 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070459905 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07268631 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069360612 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070888127 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072217873 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070784563 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070008536 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067496473 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070167771 seconds)
  done (took 2.831277523 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076262307 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080428596 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067014677 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070535274 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066897561 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069978252 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065895409 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067061778 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067270227 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067461277 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071607466 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071275329 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067778584 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070136809 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071258791 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070345225 seconds)
  done (took 2.561952058 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064676815 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069668327 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068651448 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062844942 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064014939 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061854779 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.06245348 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060786441 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063893803 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075497488 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061953151 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064816529 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.063129334 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061452127 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062220421 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064940554 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064070059 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062369489 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062356045 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066516739 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.07038531 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063062429 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064530389 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062003292 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064176043 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.07053263 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063226229 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064102533 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061674811 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064702565 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064209755 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068406238 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063962014 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062632232 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061324574 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061639819 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062005599 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.067349079 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064653837 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062915864 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060774509 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.064376161 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062654276 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063125108 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063564641 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064936317 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063720558 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067791148 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062278836 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064181631 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062340517 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064052605 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062958108 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069194051 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064629241 seconds)
  done (took 4.978004463 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078795538 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066359857 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061425808 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060743404 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.0658685 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066536128 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066470678 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066075029 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066831658 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061055866 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066550321 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.065685776 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066667359 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066262491 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066815932 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066374763 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061242336 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066760775 seconds)
  done (took 2.642908838 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.073530828 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066482704 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.071384398 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.066676498 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.066123556 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066392292 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061128714 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061460703 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061227043 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066556579 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066067537 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.065569357 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061112654 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.065868901 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066417154 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066150369 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.065560693 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061264942 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.065761577 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061435091 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065377706 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061449178 seconds)
  done (took 2.88149669 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088313784 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084278638 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.12818352 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079801515 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088667859 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072290367 seconds)
  done (took 1.989989967 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094432957 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104483338 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06580282 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06626188 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074644779 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068846342 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069141606 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069155108 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074251092 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072958184 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069224258 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074389118 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074375545 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070820667 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074353144 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07692994 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069042037 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06940554 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066063421 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076763291 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068990751 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074187165 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069412392 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068603152 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068949692 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070792323 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076463931 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072727411 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069152937 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074204757 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076754749 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069205323 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073933643 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072776437 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066033205 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074914095 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069498107 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077445565 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074553657 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070667263 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066263564 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074545851 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075375691 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071078324 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077116998 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069919399 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071005734 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069662791 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070038404 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079747818 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074686861 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070966624 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074518974 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077183844 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077812539 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079497615 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072947705 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070973892 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074674843 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073803723 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071237054 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07463175 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071165801 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073873121 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077812647 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0713095 seconds)
  done (took 6.288073714 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101129768 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066690068 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069611691 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073188178 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071227551 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069580343 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069292404 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069606535 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069991586 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066810081 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105539605 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069751366 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07176395 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071204644 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06956732 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069715776 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069799006 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071462929 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067030151 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079530658 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069403232 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071444632 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071236111 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070961602 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076237638 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076763508 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069058897 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069336485 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069758559 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069520495 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071052288 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070125402 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071076744 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066657638 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070979198 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069826735 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069186088 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071097929 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069383616 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07502169 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071199827 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077027306 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069695712 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069368818 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07302772 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069383027 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069262369 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066503281 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069926493 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06705711 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073253896 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072928219 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073552638 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071264934 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069873632 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069645886 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069814445 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070040186 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069964571 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076923028 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071007813 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069382792 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078995116 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069216402 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069363514 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07151589 seconds)
  done (took 6.218789418 seconds)
done (took 129.172171435 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218974746 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.189731204 seconds)
  done (took 1.848552403 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075964859 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166248575 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075280221 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.07535982 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109333656 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107897188 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076697452 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072842396 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.07552276 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072555286 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.13985528 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076054509 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072460465 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.07283102 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072502023 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072464646 seconds)
  done (took 2.873785288 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108850556 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185544265 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082416813 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.07079616 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114239763 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076733578 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072844064 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075687336 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077508974 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070378558 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107259384 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081793708 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074573491 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077309462 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.073546032 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074466971 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075774193 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.07729998 seconds)
  done (took 3.041675173 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098571672 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086508242 seconds)
  done (took 1.652180098 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156003823 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105606707 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.14447497 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.330464445 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.13015896 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127420113 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.129475838 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.126205445 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.11024842 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122664292 seconds)
  done (took 2.944473485 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.10666735 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105233383 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.309615182 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102645257 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082863661 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078079469 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075349527 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.07960751 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075292512 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076380688 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.12211698 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.076014725 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072447024 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124800444 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098536653 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107175144 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071427809 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078166395 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079935783 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071055792 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076200871 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080174889 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178913046 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078166516 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099516825 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075457679 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077097066 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074992156 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075017962 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078457814 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078974242 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099372524 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.07860228 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082757254 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077004524 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097341063 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071883726 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.09839556 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074802618 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072702269 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07529654 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079195386 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072374495 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078272885 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075603602 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077410237 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080280184 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070865375 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075296647 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074134889 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073182915 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076573304 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076094424 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077438555 seconds)
  done (took 6.259302097 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107917664 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106827252 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07051615 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113934997 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106156276 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070834321 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.1049181 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101126707 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108884069 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070382253 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069773961 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069546688 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079857091 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079468381 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.11671209 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108217445 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07195744 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070197381 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107721882 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107580288 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068852113 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101916428 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.10017663 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.10666282 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068408962 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070382725 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068686321 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069439853 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07390304 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074919646 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068767198 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075804012 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081056854 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075120816 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068177208 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068949648 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069341268 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075172564 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076416951 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076258538 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075028368 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068266888 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069392513 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069090501 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069453562 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068451729 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074519041 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075456632 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074524877 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069055259 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069639661 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068782083 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06919938 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075388167 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074274409 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075891804 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075787236 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068666171 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069158135 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070451357 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076750519 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076832781 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07625302 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069780586 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077468984 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069227728 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078105338 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.08043945 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06932143 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070034766 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06923758 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069145943 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069446748 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075064348 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075179486 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069509528 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069126184 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069412834 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077556435 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075224603 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06932339 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074061259 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069168929 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069381278 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069396299 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069833712 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.073939566 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075490228 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069379282 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068712098 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068895903 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068828008 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.06843511 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074299784 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074997418 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075126112 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074618894 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068590973 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.073604674 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073397777 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068351825 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073523009 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06823988 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068700254 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068367 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073802088 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072505049 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075500337 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067781577 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067321189 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.072900992 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.213497191 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.07114055 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.075652547 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078188697 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076247429 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069303245 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078822008 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069895981 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077602375 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06959224 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077550065 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069712839 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075709385 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069631641 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068414138 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069771194 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075765898 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070197434 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069682446 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069668628 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069804689 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075232566 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078998587 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070027169 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075750118 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075405109 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070285601 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075445053 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069335077 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076340769 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069246932 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070105344 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068906506 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078080443 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069034056 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069296761 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06951583 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076598294 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.0701057 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077136541 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07504528 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068948776 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078948046 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078210843 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074878387 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077700298 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070298088 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06939707 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069075273 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069747545 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074569722 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075709183 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069869473 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069433458 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074696568 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077037757 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069088314 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075238305 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074656455 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074899805 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.072425089 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069134942 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078029594 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.308489243 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074400729 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074902692 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075232891 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068730549 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074359491 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075429467 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068715341 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080162744 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069342376 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.078976716 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074766573 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074528689 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075535997 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076507798 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077055172 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077384237 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.07917293 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06877959 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068673125 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075056983 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068577318 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068932924 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074742651 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069413843 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069486586 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080230784 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069306446 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.076678246 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068476204 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075293381 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067996532 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069502996 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079424894 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069040489 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069562355 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074630008 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068780371 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074221897 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076680397 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073989253 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067876879 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069475371 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074947964 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074555294 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068026248 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067759905 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068122926 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072383647 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.07202758 seconds)
  done (took 18.594156271 seconds)
done (took 38.695414668 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.171080502 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116235103 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.206577866 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.196100888 seconds)
  done (took 2.265932459 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100793845 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065824436 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081006378 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090109291 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065729319 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.075965543 seconds)
  done (took 1.995276567 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200192991 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173710625 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.23898251 seconds)
  done (took 2.121890262 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.365737231 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.148625576 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215032939 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.500427494 seconds)
  done (took 2.842248056 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110304215 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.100712914 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077764271 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111364499 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085611568 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063346926 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133022555 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070162871 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.098894928 seconds)
  done (took 2.426984512 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.128934279 seconds)
done (took 13.325138352 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.237557138 seconds)
    (2/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.217169178 seconds)
    (3/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.281634773 seconds)
    (4/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.176725867 seconds)
    (5/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.201148668 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.123834465 seconds)
    (7/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.122997494 seconds)
    (8/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.152714425 seconds)
    (9/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.10639895 seconds)
    (10/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093005863 seconds)
    (11/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.079229049 seconds)
    (12/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.188196746 seconds)
    (13/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.143310806 seconds)
    (14/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.076290326 seconds)
    (15/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.178922986 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076626253 seconds)
    (17/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.177343502 seconds)
    (18/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.232321824 seconds)
    (19/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.065163477 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078146938 seconds)
    (21/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074744403 seconds)
    (22/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.113834616 seconds)
    (23/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.193646714 seconds)
    (24/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.18836043 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078691733 seconds)
    (26/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.21639634 seconds)
    (27/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.144410699 seconds)
    (28/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.077049026 seconds)
    (29/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.149036005 seconds)
    (30/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074688008 seconds)
    (31/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.221239389 seconds)
    (32/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.199140473 seconds)
    (33/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.137217573 seconds)
    (34/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.201722828 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.14216702 seconds)
    (36/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.154979375 seconds)
    (37/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.077376845 seconds)
    (38/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.145181625 seconds)
    (39/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.155104703 seconds)
    (40/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.162619834 seconds)
    (41/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.065903485 seconds)
    (42/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.0887395 seconds)
    (43/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.092142902 seconds)
    (44/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073272868 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.122872725 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.076864725 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.154084651 seconds)
    (48/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.222172614 seconds)
    (49/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.127198051 seconds)
    (50/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.084433774 seconds)
    (51/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.066511691 seconds)
    (52/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.168524471 seconds)
    (53/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.165584301 seconds)
    (54/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072892651 seconds)
    (55/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.085823586 seconds)
    (56/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.145808116 seconds)
    (57/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.076380208 seconds)
    (58/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089492334 seconds)
    (59/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.185823361 seconds)
    (60/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073980779 seconds)
    (61/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.078021555 seconds)
    (62/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.08159621 seconds)
    (63/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.075872697 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.148042353 seconds)
    (65/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.139431736 seconds)
    (66/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153580483 seconds)
    (67/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.074930479 seconds)
    (68/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.075829479 seconds)
    (69/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092613797 seconds)
    (70/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.077642241 seconds)
    (71/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.066035296 seconds)
    (72/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073651065 seconds)
    (73/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066723972 seconds)
    (74/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.212381638 seconds)
    (75/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.193009121 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072812531 seconds)
    (77/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.082465502 seconds)
    (78/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.284180131 seconds)
    (79/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067551873 seconds)
    (80/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.086210377 seconds)
    (81/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074993813 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.11811882 seconds)
    (83/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.094568867 seconds)
    (84/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.09036596 seconds)
    (85/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.157751528 seconds)
    (86/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.084516296 seconds)
    (87/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.095787801 seconds)
    (88/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.077219055 seconds)
    (89/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.077333557 seconds)
    (90/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095306213 seconds)
    (91/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066770462 seconds)
    (92/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.200950269 seconds)
    (93/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.067093204 seconds)
    (94/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.06874066 seconds)
    (95/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.197937629 seconds)
    (96/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.198223031 seconds)
    (97/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.083828893 seconds)
    (98/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074281574 seconds)
    (99/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.164246962 seconds)
    (100/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.076754761 seconds)
    (101/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.15462112 seconds)
    (102/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081019776 seconds)
    (103/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.162855422 seconds)
    (104/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.198481198 seconds)
    (105/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.091252234 seconds)
    (106/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.06735575 seconds)
    (107/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066556576 seconds)
    (108/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.253841243 seconds)
    (109/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.070115677 seconds)
    (110/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.065796826 seconds)
    (111/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066775243 seconds)
    (112/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.161699075 seconds)
    (113/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069733264 seconds)
    (114/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.083049619 seconds)
    (115/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074605498 seconds)
    (116/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.126509829 seconds)
    (117/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.075183272 seconds)
    (118/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065833817 seconds)
    (119/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.066467058 seconds)
    (120/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.083209837 seconds)
    (121/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.228602658 seconds)
    (122/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.200516738 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083403622 seconds)
    (124/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065806878 seconds)
    (125/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068288512 seconds)
    (126/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.189529478 seconds)
    (127/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070463566 seconds)
    (128/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075203604 seconds)
    (129/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.081410944 seconds)
    (130/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.066203092 seconds)
    (131/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.138365328 seconds)
    (132/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.198502311 seconds)
    (133/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075194922 seconds)
    (134/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066473952 seconds)
    (135/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066623931 seconds)
    (136/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132125797 seconds)
    (137/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.072071845 seconds)
    (138/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079307392 seconds)
    (139/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073495214 seconds)
    (140/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073701916 seconds)
    (141/341) benchmarking ("sort", BigInt, false)...
    done (took 0.263322352 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.082674339 seconds)
    (143/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.064694321 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095094683 seconds)
    (145/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.064451979 seconds)
    (146/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.072539916 seconds)
    (147/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.074591794 seconds)
    (148/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075906444 seconds)
    (149/341) benchmarking ("sort", Bool, false)...
    done (took 0.141903753 seconds)
    (150/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.065179829 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085122738 seconds)
    (152/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.066137301 seconds)
    (153/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073617759 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.080020158 seconds)
    (155/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073395038 seconds)
    (156/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.07551729 seconds)
    (157/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.064641957 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066040257 seconds)
    (159/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.0735259 seconds)
    (160/341) benchmarking ("sort", Int64, false)...
    done (took 0.067493279 seconds)
    (161/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.142558847 seconds)
    (162/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074410998 seconds)
    (163/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.081755032 seconds)
    (164/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066192461 seconds)
    (165/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.066875009 seconds)
    (166/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.069075373 seconds)
    (167/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065961604 seconds)
    (168/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.154833399 seconds)
    (169/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070411244 seconds)
    (170/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.150378564 seconds)
    (171/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.081315554 seconds)
    (172/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.072787651 seconds)
    (173/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.068725871 seconds)
    (174/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.064835879 seconds)
    (175/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.081617389 seconds)
    (176/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.137248511 seconds)
    (177/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.149704059 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.122388676 seconds)
    (179/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.2056109 seconds)
    (180/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.07428996 seconds)
    (181/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.069729066 seconds)
    (182/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.131338615 seconds)
    (183/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.06339928 seconds)
    (184/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.077975941 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.064971274 seconds)
    (186/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.091780685 seconds)
    (187/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.075328099 seconds)
    (188/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.079749561 seconds)
    (189/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.080258361 seconds)
    (190/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.075409466 seconds)
    (191/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076353765 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.145858352 seconds)
    (193/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.216700768 seconds)
    (194/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.065541325 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111485175 seconds)
    (196/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069953551 seconds)
    (197/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.068187089 seconds)
    (198/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066104229 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.129076385 seconds)
    (200/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064896938 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.06483477 seconds)
    (202/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.088909386 seconds)
    (203/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062905642 seconds)
    (204/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.15865776 seconds)
    (205/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.065207842 seconds)
    (206/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.065386093 seconds)
    (207/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.173874264 seconds)
    (208/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.07191449 seconds)
    (209/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.07190162 seconds)
    (210/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072931297 seconds)
    (211/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.076082771 seconds)
    (212/341) benchmarking ("sort", Float64, false)...
    done (took 0.135021432 seconds)
    (213/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.064812546 seconds)
    (214/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073392754 seconds)
    (215/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.13999348 seconds)
    (216/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.063652463 seconds)
    (217/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.084854942 seconds)
    (218/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.06499207 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072847316 seconds)
    (220/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.065428825 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.072137308 seconds)
    (222/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070923221 seconds)
    (223/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065801777 seconds)
    (224/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.064531096 seconds)
    (225/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067465843 seconds)
    (226/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067498672 seconds)
    (227/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071665606 seconds)
    (228/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.07713558 seconds)
    (229/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.064582077 seconds)
    (230/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076126919 seconds)
    (231/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074339027 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.082144717 seconds)
    (233/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068779561 seconds)
    (234/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.230180454 seconds)
    (235/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.06425656 seconds)
    (236/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.071851857 seconds)
    (237/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.15792869 seconds)
    (238/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.064300502 seconds)
    (239/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.064908167 seconds)
    (240/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.066518745 seconds)
    (241/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.065305395 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.064084162 seconds)
    (243/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.1619545 seconds)
    (244/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.067688217 seconds)
    (245/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.067151503 seconds)
    (246/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.064780672 seconds)
    (247/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.066971245 seconds)
    (248/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071098276 seconds)
    (249/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.064884715 seconds)
    (250/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065084515 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.087220011 seconds)
    (252/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.141772748 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063576378 seconds)
    (254/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.064592558 seconds)
    (255/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.150037579 seconds)
    (256/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.064642227 seconds)
    (257/341) benchmarking ("sort", Int8, false)...
    done (took 0.143200685 seconds)
    (258/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.064682105 seconds)
    (259/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.175718556 seconds)
    (260/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064868704 seconds)
    (261/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.168304324 seconds)
    (262/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.064675595 seconds)
    (263/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.067348366 seconds)
    (264/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064719959 seconds)
    (265/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072322421 seconds)
    (266/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.064383495 seconds)
    (267/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.065870996 seconds)
    (268/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.081624332 seconds)
    (269/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065678703 seconds)
    (270/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063972017 seconds)
    (271/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.06410937 seconds)
    (272/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.064938514 seconds)
    (273/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071359703 seconds)
    (274/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.214747754 seconds)
    (275/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065716022 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.06325719 seconds)
    (277/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064950087 seconds)
    (278/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.0674119 seconds)
    (279/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.064771957 seconds)
    (280/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067567925 seconds)
    (281/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.065225462 seconds)
    (282/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.071790884 seconds)
    (283/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064702768 seconds)
    (284/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064899516 seconds)
    (285/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066721655 seconds)
    (286/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.063440299 seconds)
    (287/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.065659226 seconds)
    (288/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.065070121 seconds)
    (289/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.065216036 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.146826002 seconds)
    (291/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.06757255 seconds)
    (292/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.065367076 seconds)
    (293/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066321478 seconds)
    (294/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.186385513 seconds)
    (295/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064248617 seconds)
    (296/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.190382018 seconds)
    (297/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.066999727 seconds)
    (298/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.065741316 seconds)
    (299/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.064812776 seconds)
    (300/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.066118582 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.064667017 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.137730428 seconds)
    (303/341) benchmarking ("sort", Float32, false)...
    done (took 0.134891911 seconds)
    (304/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.066423148 seconds)
    (305/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.063897024 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.120369921 seconds)
    (307/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.38327264 seconds)
    (308/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.070613394 seconds)
    (309/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.069827084 seconds)
    (310/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.068358733 seconds)
    (311/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.071229885 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.095585783 seconds)
    (313/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.071162513 seconds)
    (314/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.069258177 seconds)
    (315/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.070410377 seconds)
    (316/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.070963561 seconds)
    (317/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.069960031 seconds)
    (318/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.0817818 seconds)
    (319/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.082068456 seconds)
    (320/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.069313221 seconds)
    (321/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.070478032 seconds)
    (322/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.069107381 seconds)
    (323/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.069189263 seconds)
    (324/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.070265926 seconds)
    (325/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.069403478 seconds)
    (326/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.069247086 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094716784 seconds)
    (328/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073846527 seconds)
    (329/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.152234155 seconds)
    (330/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.186128815 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.068211106 seconds)
    (332/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.06868505 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.068676304 seconds)
    (334/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.126469048 seconds)
    (335/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.068741351 seconds)
    (336/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.070421322 seconds)
    (337/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070826983 seconds)
    (338/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.08793526 seconds)
    (339/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.083685286 seconds)
    (340/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.068059822 seconds)
    (341/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.067927826 seconds)
  done (took 36.500290243 seconds)
done (took 38.025459491 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.09546518 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.083076751 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.08120439 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.078039711 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.082032177 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.080370252 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.081395528 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079346498 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080240277 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079581302 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.07972334 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.067438419 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.076954133 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.083475366 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.076831121 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.083513151 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079883656 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.084024649 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.068217474 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.082406775 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093788798 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.079647274 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.076568893 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.081914463 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067656375 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.07712197 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.091502447 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.089528336 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.074280002 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07720344 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.07511316 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.083508336 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.075768353 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073878704 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076700182 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.073650813 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.07714274 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074521677 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.090638193 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.073248712 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067732675 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.080038611 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.077559701 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.075134696 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.076251337 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.079454736 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.073132578 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080811653 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.067239952 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.078677197 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089977151 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072339326 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.074526858 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.076253219 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.072901514 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077041122 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073926788 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078656098 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.072505499 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078624403 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078719168 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.076034006 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.06705755 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075852564 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.074723716 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.075181388 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.066295956 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072298611 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066930458 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.067426796 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067059716 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.076364528 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.074727369 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073125944 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066791603 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.067536628 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066888171 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.08000061 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.073473089 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.07693113 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.068151887 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.072524964 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.072489655 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.06788062 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072504257 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.079280855 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.066833917 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.0675365 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.067032673 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.08237824 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.0739237 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.067542971 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.079577707 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072057459 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072407362 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.067287302 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066879526 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071894647 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.075353585 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.067333204 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.066252006 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072159841 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.072068343 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.076399184 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067605161 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072409756 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072473545 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.066268105 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075961852 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074946829 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075761005 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.08035968 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075614325 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.079093654 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067248501 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.066271984 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077080068 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.067398119 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072280755 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.075378711 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072478173 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.075017819 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.067190826 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.066182921 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072009293 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073871096 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067464708 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.06722912 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066933637 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.076032622 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.074286428 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065883956 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066872503 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.076088653 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07583871 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.066413133 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.066606786 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.076218191 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.067017143 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.073955849 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.073139134 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075892795 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.066573342 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.066755766 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.211058284 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067388255 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066653359 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072650249 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072093135 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067859247 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075632137 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073671542 seconds)
done (took 13.162359968 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068690369 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106713023 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074956177 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083602588 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079731581 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068393807 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.071272622 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083751124 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071056547 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.087340165 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095563837 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.08908806 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094629036 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066925415 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.068031798 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.069322316 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066426448 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075766338 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082138901 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091331855 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.096534574 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067960592 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.076738058 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084167944 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.078176259 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083898349 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.069066409 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068965434 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070515678 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.126177735 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.093412666 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.067532253 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.06828094 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.081214859 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081224045 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074698213 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068308141 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071507495 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068367574 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067400621 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069593587 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081304098 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071255175 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071251857 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.069064158 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068648724 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.068165196 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070966096 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.081162252 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.07376105 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075353813 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.079674619 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069036393 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.06772855 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.066552905 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071807078 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.068063569 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068933165 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.068273925 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067409443 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067838133 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.070523743 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068328756 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.069012263 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070729606 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069890767 seconds)
  done (took 6.662500057 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084964574 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093536092 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.08199568 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082907497 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067290223 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067827384 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067936209 seconds)
  done (took 2.258849274 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068460093 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075558605 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.080174671 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080083447 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088977017 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.07798219 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068467009 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.10002305 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066939086 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076569489 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.084492976 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081384614 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071593303 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.080207005 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068324716 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.080167386 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068618223 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074917201 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075923383 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.081521984 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072081951 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.098166644 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081303224 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068817798 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081164207 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075627758 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.07036174 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068739457 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068821907 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.068000005 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068032385 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.090168551 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.074351073 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079895177 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069041677 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067428319 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072384914 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068723805 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.072036959 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076678595 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071844182 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.068085348 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068313001 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.068331064 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068812849 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072176298 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068953604 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067491658 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067275801 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075004928 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.067146069 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074014045 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069809953 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072954401 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072490665 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072353279 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075320533 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068045081 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075052547 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073997956 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067756868 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080075354 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078719873 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071562436 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078745437 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076256768 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07441442 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071593123 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067477546 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.0670397 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068378531 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079218171 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.071094958 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069886625 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068737039 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072535101 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071357828 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082846728 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.0826822 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081298683 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070382157 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067586134 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071605346 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082549595 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07247283 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067827184 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068564423 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067273484 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072848257 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067910129 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072282715 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067677965 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074748078 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070348923 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070393444 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07549128 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067767175 seconds)
  done (took 8.84394962 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.071299207 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.07028025 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.06887791 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.069328066 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069943396 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06904176 seconds)
  done (took 2.174288535 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091745945 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069099258 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080646417 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.06892053 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.091107181 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.075152827 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074894319 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070387658 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084784572 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078821589 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074494078 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077407934 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.07498619 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.07024709 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074597059 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06902444 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.07484954 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071235739 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078427319 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070406203 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.08152824 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.070014733 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070818619 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080714055 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.072093858 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069405505 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069668924 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078650492 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.079044957 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.070412732 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.072682804 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071418567 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076975689 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069778622 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074488976 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076945418 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067985766 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073587017 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070889675 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070813944 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076368435 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07013258 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070382799 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073451046 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069539285 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076577142 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.074440884 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07123504 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074082916 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073739767 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073639262 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068797691 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070915645 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073669227 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076522191 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070046119 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073662683 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.07430821 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069642819 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076627491 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068270632 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071138282 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069658881 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.07078781 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072749657 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073474978 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076677115 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070268368 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070266827 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.0681673 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073642358 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068144357 seconds)
  done (took 7.015486837 seconds)
done (took 28.649354523 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.550998384 seconds)
  done (took 2.249779593 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.589741832 seconds)
  done (took 2.313009816 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.486247985 seconds)
  done (took 10.219577222 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.297166776 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.320395908 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.738192081 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133465431 seconds)
  done (took 3.263789785 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.751812771 seconds)
  done (took 2.495159122 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230659784 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.221052977 seconds)
  done (took 2.201401785 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.335182423 seconds)
  done (took 2.070516712 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.153529261 seconds)
  done (took 2.885673282 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.233772289 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161473916 seconds)
  done (took 2.137166394 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.536153638 seconds)
  done (took 2.270545717 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.315968014 seconds)
  done (took 6.055469297 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.235939546 seconds)
  done (took 2.014270114 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231052524 seconds)
  done (took 1.97519089 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.048421789 seconds)
  done (took 3.786432241 seconds)
done (took 47.683779444 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085156547 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087125508 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087175509 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082243432 seconds)
  done (took 2.05619326 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075835033 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071754368 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.07461731 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075063403 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073133359 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073519348 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074091529 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.069489493 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.07229109 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071016745 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070043837 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071274071 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073794129 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.070972473 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073740506 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.075339291 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071641759 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.07124486 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073747311 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.070924045 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073795491 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071292978 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.070221676 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071167726 seconds)
  done (took 3.480090358 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079681108 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.072857417 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077039185 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.07207037 seconds)
  done (took 2.049860604 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077981592 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077577268 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086767591 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091957685 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078875269 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078418929 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085231768 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086139904 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066790679 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088222404 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069734668 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068065132 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067816004 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.087279117 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084811871 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.06338004 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065127711 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078083309 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077719582 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080733978 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069794959 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066824611 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078341673 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078018345 seconds)
  done (took 3.600897898 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080190473 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066592568 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079108076 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.09182834 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093365746 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066945576 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080649573 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093756119 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12894833 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.067237028 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072870565 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066668489 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104952349 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066676883 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081047609 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.11023999 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.113130494 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070730184 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.100264913 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066144985 seconds)
  done (took 3.459780569 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076649662 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070161329 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071159703 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066295355 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077969343 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073889343 seconds)
  done (took 2.196639137 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068807295 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069026758 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.06795213 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073596951 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068615857 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069022645 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068243643 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066836408 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066806482 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068073036 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067157173 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.067862964 seconds)
  done (took 2.573566831 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.157778905 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069513384 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071393246 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066800343 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071703947 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067382199 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082331588 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069325564 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085647371 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068143992 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067884086 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069731577 seconds)
  done (took 2.700713622 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100846169 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101581392 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147059139 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117793012 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11808444 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097899725 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120167654 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095400899 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161925793 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138359358 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117721858 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094594569 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088177333 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070538057 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100527017 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102059731 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136294813 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074036006 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114604228 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165168257 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115291491 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.112423029 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12235318 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117249506 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081774997 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12259284 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09516283 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10284447 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124693755 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110282368 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119670186 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098299583 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072860587 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072305145 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149885413 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101080355 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108361581 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093744214 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10059036 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089598137 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108068335 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070304774 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.088197657 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107174062 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085392954 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117507526 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088969093 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104369117 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082006488 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131996455 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107471415 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099880131 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086545586 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104727514 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131614131 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096450459 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112084693 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108573566 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083967979 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.120478346 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102570144 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.251117464 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095241289 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08307397 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.16236371 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091779834 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113587021 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114735973 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083949072 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09105626 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103970212 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131832402 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108112801 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108633589 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11648863 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096793617 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111604036 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093160872 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130211918 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094740991 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074168633 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.106828504 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130251176 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086381632 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101519641 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13138909 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09359859 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078812538 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093398747 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120510345 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081606674 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097340109 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071044322 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098606355 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108780602 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099234164 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112854715 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108268787 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079718349 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12460585 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109647701 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073717424 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118390127 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099295329 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153001909 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096741124 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077594981 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100911815 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095023677 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149340764 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086426943 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081670634 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099240899 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142286042 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095470022 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170824664 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097424591 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130219297 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098705464 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088739402 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077550279 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091791213 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102699863 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109421265 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103756761 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089659559 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.078194806 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087975024 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.253075864 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094444806 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082819325 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114663666 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102413239 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076088585 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089387287 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077735814 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127473041 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079214472 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109770981 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125779304 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080183806 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106762709 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099483796 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109239753 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099507573 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108316462 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144577085 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116990067 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080795438 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085518162 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108883777 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.144115975 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114784688 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086596867 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078225616 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100985198 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112039346 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09834097 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107562418 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100933496 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10936089 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097773354 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141649608 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11809434 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091980271 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096373701 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097447248 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124192829 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077764853 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15625588 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095424478 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119088249 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08577674 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142106187 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115201537 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090722182 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086190658 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096637865 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105290624 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106503576 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144048214 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096944331 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073401105 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094237748 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132226964 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07716011 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100800349 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091378684 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094135354 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119379151 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084772477 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082512559 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069223414 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102718575 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135631643 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069912583 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.274343195 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.114740739 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104529173 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.10546968 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070958561 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100380889 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139390836 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107148294 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141443273 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117847278 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101671258 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119932353 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100404657 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10648618 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081029844 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.127001131 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135712865 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097135886 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091258464 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136383579 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118365215 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135413339 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097824648 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115937484 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106134899 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102370633 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1041287 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101309106 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144272289 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120825168 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125412928 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08684874 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107532228 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109572747 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136701224 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083223043 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117325637 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076143597 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112941583 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078320313 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107919491 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080157692 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112108533 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080891997 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100809622 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.0710959 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.07518277 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142308952 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113002991 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090518597 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087185871 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137758427 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132330848 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081768597 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10334238 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105937451 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102961014 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101814141 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109736286 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085937349 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095352297 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.271014069 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080960228 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082950589 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100410982 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095028329 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108463624 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085548263 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076264573 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137211514 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105656119 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09611865 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079229583 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096400384 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122719751 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091489085 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088623868 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106467637 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105276564 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142075343 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091746528 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.099031819 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118709704 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081457546 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093183322 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.07041365 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086236008 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077259192 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110774577 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077632795 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109388082 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069833895 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131118588 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087893212 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093961069 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103463884 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098666575 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129022344 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092820165 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129016764 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090628925 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102917888 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10846413 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095397318 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0813359 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104560506 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096767271 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113102328 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097187899 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106141582 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111447089 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095274687 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143495021 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090981113 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121315793 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106129052 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108801888 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104747796 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117686008 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13826524 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113390607 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113590751 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076601378 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084087265 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10627263 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101494593 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147101152 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103531991 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072774529 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086839179 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091259862 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.250114932 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105862283 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083714731 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14285771 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088757876 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088804963 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114006642 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090191834 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099257232 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078295806 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097274599 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101473261 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095290851 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096255042 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109261581 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118869771 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115139913 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133970523 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100649434 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.095211012 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119833952 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11207825 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1122287 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08744671 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0876238 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124241908 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103268654 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129020301 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101958544 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095674615 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10350852 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091249286 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100680797 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097818075 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110041438 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081186162 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077332385 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069372535 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073497348 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118961968 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11006809 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099517374 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099535037 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073679601 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104764262 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100483382 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072972195 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089369867 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095097834 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100745723 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.08489015 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092972231 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115579036 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092428339 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104523097 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10025112 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129672107 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101037331 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089571561 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144415287 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129326414 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089299009 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093502484 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072717569 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080424959 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102971622 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146344915 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119005278 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078076124 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.242430937 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.080032791 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088884263 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074043646 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089319741 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091494876 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105274525 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094014453 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113780634 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104360285 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07701857 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104290905 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098069198 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098501382 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09748 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103094589 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106617848 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.124987676 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102220028 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098569773 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077787715 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081591886 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077308668 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081080778 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103555562 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078990581 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077329303 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130890159 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092323296 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105094253 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109729246 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085910059 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077182952 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134046132 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070347946 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134821974 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072560991 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083769058 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082178813 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080007599 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094458522 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105957756 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097297323 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11397294 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107501761 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105859279 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112048178 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156040617 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07230668 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144566604 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076560325 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076533342 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077286056 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111961356 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090573919 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106708953 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141084508 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090894345 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094142858 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07808586 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129773672 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099769919 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10463267 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08621384 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079962454 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128920401 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080296497 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072588073 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087836249 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112286812 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073771687 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105269602 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.24511785 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081854605 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114394529 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.63198657 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091604129 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077448539 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090528807 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143853394 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130179158 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084249757 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110115291 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.12081864 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090929074 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085492274 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109476645 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.18504452 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07561589 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096366179 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105069053 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099896495 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094210352 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093518327 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087758821 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093973459 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.086971027 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081031424 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109435262 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089282438 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09289356 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098923807 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084333405 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081857527 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131778517 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105250826 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083265538 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090055289 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.101415465 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088995512 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092045941 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070643223 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11501581 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09226607 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102492447 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092251128 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108814217 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121017737 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089872132 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112882734 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089521265 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110122036 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085944578 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079481064 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103159999 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.078897259 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079097246 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117624851 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085239625 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094423128 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104846808 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097145017 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114578617 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118552224 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111832626 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098845672 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079583424 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087694322 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.08898966 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07636086 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079717676 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075554738 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077562827 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.269456723 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087300911 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085653838 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11694845 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084124242 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105063386 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.102060888 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110409386 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084647646 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102426802 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110135639 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091863278 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104904792 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102136097 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130225215 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146704588 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100667189 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12565692 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135663487 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078044698 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076834571 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070474726 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116676697 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0811058 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082569555 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082680318 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134572015 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083627353 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095704615 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232563384 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082267105 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083284023 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097719449 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071643224 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084206458 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109003041 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085644731 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081882659 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099808354 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08463706 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119214895 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112585376 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09074222 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084205005 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082431293 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09411634 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105798799 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129328488 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090981321 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076435877 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107712816 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104099038 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125167763 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074057637 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081782024 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130686193 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093101186 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10503574 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080991063 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120601589 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133648841 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091374521 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134573677 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072298907 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084123973 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091001263 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126236485 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075793537 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089490642 seconds)
  done (took 65.430984427 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.150498338 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.144425577 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083277932 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098625976 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188766459 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198568349 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120498015 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097268309 seconds)
  done (took 3.020611102 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069115948 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084138116 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.084403484 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.208627495 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109607248 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068405259 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073620953 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083245053 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068482685 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067973482 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103538256 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068725539 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069023122 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.365775475 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067252668 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072668105 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068179117 seconds)
  done (took 3.630496064 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.327796538 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.392817021 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.221796492 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.627878163 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.140140393 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486285906 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077561097 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083830183 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.62925393 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371816096 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131609528 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.089379859 seconds)
  done (took 18.484986497 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076502377 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079769701 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079207769 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075517116 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075818067 seconds)
  done (took 2.309933358 seconds)
done (took 116.756203389 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.083975881 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.172947863 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068511898 seconds)
  done (took 2.180317219 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083225135 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082041617 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.081784541 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079351355 seconds)
  done (took 2.237066759 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075809518 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077729831 seconds)
  done (took 2.056882974 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.224604294 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.1765622 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091062778 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083244745 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081114001 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081376795 seconds)
  done (took 2.154689106 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073184088 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072815232 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072832808 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073266084 seconds)
  done (took 2.185810805 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068658457 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067073448 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069069071 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072000211 seconds)
  done (took 2.174273392 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086471517 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084187864 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.112696251 seconds)
  done (took 2.178853222 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084319671 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083444028 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079215459 seconds)
  done (took 2.159117293 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109711596 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097653781 seconds)
  done (took 2.112889692 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081391305 seconds)
  done (took 1.992543614 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091047939 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099359949 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.140973369 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.10738459 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140558981 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.126826139 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.07764029 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078890001 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074498973 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073931149 seconds)
  done (took 2.918688861 seconds)
done (took 26.827203037 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079840143 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.375114871 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.36185708 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088441987 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672848723 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357820266 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.00903889 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091635234 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100950533 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069484224 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08633915 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649867148 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.00177374 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.327055843 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.986199276 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.330287381 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651493106 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070170968 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068672609 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069489835 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.993280196 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069041475 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.0697046 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069658347 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650661713 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374885808 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071113302 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.326255233 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069609805 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071947152 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357274461 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070185228 seconds)
  done (took 16.520554392 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.070962029 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123533976 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07389281 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085124375 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071353122 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071251367 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072359592 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069588276 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11245141 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069858347 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087087709 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069034524 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072962915 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070865497 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088775909 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070083734 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071131691 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070393046 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070063835 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070864025 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087847191 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069439218 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069735888 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070126529 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069882661 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083309421 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070762033 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069516368 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072765621 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071610781 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073456194 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070375437 seconds)
  done (took 4.363789522 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123226181 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127669615 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075005517 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.111509259 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119486764 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071793542 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152459185 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092655537 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115194898 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070103987 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086844141 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069450093 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.106020906 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.07110975 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090440422 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069641137 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071126039 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069725184 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069491675 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070498916 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088280025 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069084059 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070258799 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070690097 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070308809 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084645178 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070793376 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069752286 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069583708 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072014203 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.0735797 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070770395 seconds)
  done (took 4.63763148 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071020604 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072957204 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081438374 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082242102 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068092559 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070149691 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071092095 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068052119 seconds)
  done (took 2.507568659 seconds)
done (took 29.947266677 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080030491 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069046957 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072117455 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088843187 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075236585 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.07156225 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066401921 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076289673 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072974435 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072886147 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074188641 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068412012 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071355367 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066195347 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073344342 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067547665 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073674604 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071689191 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071876684 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.07311691 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.0696198 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073065269 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076085238 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071862125 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071687924 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072426456 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076229595 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073154753 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068096023 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070377931 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069588291 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081210888 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.07343528 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073561191 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.06758821 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067139346 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071627824 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069557856 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073405378 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076747338 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069324594 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076727939 seconds)
  done (took 4.93194395 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089819564 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094770934 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.086456168 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083303795 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.10888172 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083057898 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.090686536 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080517038 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079061215 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.09099786 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075706624 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080229345 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082279682 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076890409 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079800723 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075867305 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080949221 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075016889 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079818332 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079480582 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091266313 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073270622 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080759111 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081275602 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075198532 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081689033 seconds)
  done (took 4.095119399 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074407876 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089219012 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094172327 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143596139 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111015817 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.08446891 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083605033 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.104761646 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101779666 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069174748 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073176206 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095706704 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097927247 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076264614 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107867651 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087774267 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082427073 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071101166 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075823848 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103689862 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092297073 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088138049 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102198447 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089123103 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.0682212 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078548343 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076054947 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084303725 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076921094 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081415485 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073007457 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072804307 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069576698 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082209897 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073458672 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067362788 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091355205 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081774933 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084744379 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107790939 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079050061 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071229037 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099822259 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134423609 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071002443 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.07168527 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072792844 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081170847 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070413973 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099020296 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08750042 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068556065 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087838282 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.069913659 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070133973 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085805601 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070376373 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070747927 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081065199 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075244757 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089684933 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.073826695 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.09015582 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068548747 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081029808 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070661084 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070504193 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067617326 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105140362 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076390079 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.122005102 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070250819 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067334915 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081262182 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080590202 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075743732 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068636229 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088669454 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081119621 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072892636 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080639536 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072092592 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072206578 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105455224 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068829147 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067299594 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067891198 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.072010421 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072145098 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069832425 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082877063 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068509182 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072395898 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.08442476 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069221673 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069551978 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071080941 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070710253 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068339474 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079477142 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072720889 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070723098 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081177718 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070061435 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072635802 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083615265 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078767671 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068529575 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070075282 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071270964 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070465723 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073513857 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072266831 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071189191 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075877474 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076740309 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074421519 seconds)
  done (took 11.362113835 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.162228591 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.151472025 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070497358 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.147472705 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07698487 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073623448 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.148486201 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.08896978 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069332909 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071043235 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068705601 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.09691321 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.092312619 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.1037875 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073473534 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070298596 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094660702 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.10264778 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.15256202 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.145091179 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.09311576 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077174819 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071723586 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071191624 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070466045 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078031765 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085570064 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077475564 seconds)
  done (took 4.66547648 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076519737 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084712498 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073717273 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093619273 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088085868 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.069979589 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071625524 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.07057703 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087002701 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076680696 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069879458 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073501386 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073384362 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071263705 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070269661 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076367236 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076359781 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068666169 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073347691 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074201799 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080038624 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094872279 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073955981 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069677526 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072290416 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069529605 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076182808 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.07924472 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069523166 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099646241 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066976078 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.073532981 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083424516 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070409996 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.06905349 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070259669 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069753866 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.06992068 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069750507 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06755235 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067873373 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074490671 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068632066 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075820004 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084116617 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077135994 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070789307 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072139174 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072678961 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.06679049 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073113489 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072494956 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072451811 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07853172 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073297856 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072296528 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070949799 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.101805721 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.0755362 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069550524 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.06882961 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068060207 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071527204 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077196041 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086725091 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.07105582 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068051021 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070164881 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.07433753 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084131731 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.06899924 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075037068 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06684043 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070027012 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072366318 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072173427 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070616518 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067977365 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.068901695 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070358601 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069526304 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068827686 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069142577 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072192943 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067218262 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067780692 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.06975831 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071022933 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075350327 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068602022 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072601178 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070830441 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068624696 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072679089 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074605008 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.071782339 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.08931703 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078173574 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070042074 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.06798592 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083852404 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071508365 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.06872826 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075441134 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073764089 seconds)
  done (took 9.723463632 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092480112 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.070899094 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089277568 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.095979067 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080191189 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075144477 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084411503 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.07082664 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085724884 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069213485 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078681625 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.067768987 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082552927 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078538723 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.070905329 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079846026 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071745026 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090333118 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084582135 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068129725 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078694921 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.081695355 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082060196 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087871615 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087502869 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088544321 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081757098 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072110211 seconds)
  done (took 4.230480362 seconds)
done (took 40.920957526 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.005776394 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.161148433 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.989406436 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.181245116 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.040020951 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.229052368 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.226097883 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.98802436 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.103204454 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.018886021 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.32300781 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.433917846 seconds)
done (took 69.685172682 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.046530326 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.13689188 seconds)
    (2/2) benchmarking "String"...
    done (took 2.206427262 seconds)
  done (took 6.262955077 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.582023543 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.989811265 seconds)
    (3/3) benchmarking "different"...
    done (took 2.039998824 seconds)
  done (took 8.53131175 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.08676961 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.003255298 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.249849098 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.991272669 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.995515412 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.432740403 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.801883998 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.448037237 seconds)
  done (took 32.84531423 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.298882802 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.244951274 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.748781684 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.774787066 seconds)
  done (took 17.037127876 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.593605008 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.251041196 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.24983308 seconds)
    (4/4) benchmarking "different"...
    done (took 2.243244808 seconds)
  done (took 11.316299882 seconds)
done (took 88.147592338 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.991030234 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.026965684 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.994793058 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.143138499 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.027311571 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.021202968 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.995085649 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.028473921 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.990835562 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.992732169 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.429070039 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.988795777 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.989135904 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.027184905 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.991023667 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.029964884 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.480260315 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.996407647 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.014031634 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.641983366 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.44363757 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.996457582 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.00298032 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.038922383 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.114636076 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.012954165 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.617658618 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.99357938 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.611316385 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.012178993 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.993968189 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.993050233 seconds)
  done (took 211.552349359 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.993057017 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.983388351 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.031172968 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.00784435 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.457799312 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.186581234 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.146347611 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.49554861 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.999386707 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.017096637 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.20590899 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.992812408 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.24355037 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.986438121 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.986111132 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.036608551 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.14688762 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.239876546 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.993243124 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.185287123 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.995059294 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.077692216 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.034755456 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.185011972 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.001947755 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.00787105 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.214860318 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.004348015 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.18772697 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.131203406 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.028957669 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.032085242 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.21697551 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.864308236 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.002765718 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.015635444 seconds)
  done (took 178.258451542 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.178875922 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.019668315 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.062815767 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.13726832 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.77694128 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.737149294 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.002834883 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.001533144 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.00055841 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.008571492 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.004253017 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.0707111 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.303435226 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.013806408 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.00531791 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.0025236 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.319810289 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.996708899 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.992724846 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.9937073 seconds)
    (20/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.993967275 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.057241251 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.368226169 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.130032752 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.995288252 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.004618516 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.13098926 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.003776793 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.994008013 seconds)
    (29/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.993071915 seconds)
    (30/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.992875129 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.132262162 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.99762892 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.071761548 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.132199071 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.00392217 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.075534182 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.00211233 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.491315923 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.99531089 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.994752122 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.995563457 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.056235828 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.994590164 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.104351514 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.0885788 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.996739266 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.010427116 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.073582739 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.682942496 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.999786398 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.99706694 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.997068945 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.997640277 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.998573681 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.165079779 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.968810567 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.023198541 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.628316038 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.000485143 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.998443744 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.998946875 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.998269332 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.998694964 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.004951724 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.034955277 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.80556448 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.226241981 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.385140603 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.801996157 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.001193867 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.727397741 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.056533547 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.000762657 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.077225058 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.998386903 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.998693027 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.999899237 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.999280469 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.160111832 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.136832939 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.997181872 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.12691394 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.002318866 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.999157828 seconds)
    (85/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.99789404 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.147240038 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.338572248 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.000392386 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.012305381 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.05689352 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.998861711 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.998486415 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.005955852 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.140371563 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.001371926 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.998759021 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.998838736 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.091517832 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.001899818 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.179281939 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.225290099 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.070970008 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.250646267 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.234435075 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.003286919 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.999562477 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.015107901 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.000149776 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.999142843 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.010504215 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.999912219 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.998695477 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.000232646 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.000622895 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.999569679 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.001696153 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.013659931 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.993746825 seconds)
  done (took 434.065385372 seconds)
done (took 828.028476018 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.712550828 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.784123128 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.633390126 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.664364706 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.639538967 seconds)
  done (took 15.366497271 seconds)
done (took 17.269348946 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.030127507 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.016663292 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.006012406 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.0579099 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.026135555 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.011489851 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.047246359 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.047594589 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.031694443 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.012388722 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.050239642 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.016504441 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.030273393 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.035355736 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.079084628 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.038705917 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.01804078 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.008641689 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.056660248 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.01792985 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.016759593 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.015533682 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.014700745 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.051341028 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.086212685 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.02501671 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.013376922 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.051797863 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.026188432 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.050716429 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.07006999 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.034860821 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.048814471 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.077750518 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.062841517 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.084233681 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.02470697 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.080878448 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.021340395 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.088445044 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.060384383 seconds)
  done (took 85.578138206 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.012046079 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.155754555 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.221692555 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.042749559 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.011811044 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.229961628 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.068187944 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.135406151 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.142711287 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.249338829 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.231122525 seconds)
  done (took 25.440097091 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.01186225 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.161898326 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.223498481 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.048220558 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.013016654 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.227032803 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.074146111 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.124243841 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.14710484 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.231191059 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.226798524 seconds)
  done (took 25.432982973 seconds)
done (took 138.385382967 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.38137542 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.032674359 seconds)
  done (took 6.350318614 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.99293886 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.016534363 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.157506131 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.008777301 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.999268542 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.981286066 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.006450627 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.007044126 seconds)
  done (took 18.102775032 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.982028734 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.00692301 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.007019535 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.007355812 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.000039124 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.999258322 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.006956098 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.006325723 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.006284015 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.000533864 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.993913489 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.007440467 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.006689362 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.00817491 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.006296879 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.006889451 seconds)
  done (took 33.983605215 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.006934294 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.006963059 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.006989127 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.008271963 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.008196773 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.008750845 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.00969166 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.007542694 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.008333511 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.008093332 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.007920143 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.005157824 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.006010815 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.00528085 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.006864671 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.008370398 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.005244477 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.005501977 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.00610538 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.008433453 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.005874921 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.008630309 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.010615775 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.006673194 seconds)
  done (took 50.115719715 seconds)
done (took 110.497850309 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.201142732 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.565761165 seconds)
  done (took 8.702201438 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.01108154 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.006568909 seconds)
  done (took 6.014946933 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.007005618 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.007262855 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.006825522 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.006248706 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.00658571 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.006944622 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.008388961 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.007585986 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.007563528 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.007668476 seconds)
  done (took 22.009385525 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.007703529 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.007597529 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.007548995 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.007669343 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.008498741 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.007304213 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.009709719 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.009431887 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.00815411 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.008781161 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.007587817 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.007929804 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.007944929 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.003032829 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.008458835 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.008518672 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.008559332 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.009184482 seconds)
  done (took 38.081509627 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.009398238 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.009554625 seconds)
  done (took 5.957316595 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.009091107 seconds)
    (2/7) benchmarking "second"...
    done (took 2.007775225 seconds)
    (3/7) benchmarking "month"...
    done (took 2.009534259 seconds)
    (4/7) benchmarking "year"...
    done (took 2.008232761 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.009369781 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.009260492 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.009349839 seconds)
  done (took 16.001069684 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.009768635 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.157397117 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.204787981 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.592013796 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.010631865 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.011873142 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.885729681 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.011848299 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.01305892 seconds)
  done (took 21.835565196 seconds)
done (took 120.540226674 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.837835296 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.012049171 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.25632528 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.069195576 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.020074312 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.305099353 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.020096596 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.555132985 seconds)
done (took 44.016557054 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.110698753 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.006745725 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.037612407 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.038125028 seconds)
  done (took 23.022091629 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.007734444 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.320527563 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.032409943 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.969264279 seconds)
  done (took 23.284771778 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.386545329 seconds)
    (2/2) benchmarking "read"...
    done (took 2.357644217 seconds)
  done (took 6.687480685 seconds)
done (took 62.046380419 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.010463944 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.01078662 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.010606654 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.00929691 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 2.010603639 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.009321139 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.010017668 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.010316539 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.010256304 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.01011136 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.009794309 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.010648878 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.010763697 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.009762388 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.999621521 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.010253737 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.010552188 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.010624653 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.011276172 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.011316209 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.011163982 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.011376039 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.010361285 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.010159133 seconds)
  done (took 50.181637953 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.011242754 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.012335483 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.012075661 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.011844533 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.012186077 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.011635916 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.011242335 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.011920559 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.011146493 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.011229746 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.012436561 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.011800529 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.012088819 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.01260397 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.011609118 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.01203085 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.011745446 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.012481335 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.012932582 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.013743565 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.01097104 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.011776959 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.010039058 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.010463698 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.012025878 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.012880138 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.011783283 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.012464513 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.013587079 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.013395149 seconds)
  done (took 62.302155742 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.013269176 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.013110684 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.01391235 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.012430766 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.01322369 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.012603301 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.0124174 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.012816838 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.999431047 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.013319233 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.01351557 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.014156918 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.009958895 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.013171299 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.014210818 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.014469122 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.013324914 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.014047042 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.013996278 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.013616914 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.01370609 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.014967623 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.014328384 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.014115296 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.01519691 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.014735712 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.014891161 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.013570256 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.014614071 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.014721498 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.015912533 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.014551742 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.015688742 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.014441134 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.015762898 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.013135067 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.014502412 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.01553389 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.0150588 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.016392296 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.015538755 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.015952564 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.015448901 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.016473188 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.015375196 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.016332924 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.015859366 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.016581118 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.015208171 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.015853482 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.016076106 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.015435404 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.016243201 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.016525186 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.016250005 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.016695608 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.016658744 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.015794297 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.01675907 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.016142214 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.016246372 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.017089806 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.017057162 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.016403887 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.017231799 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.017054376 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.015938108 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.016690154 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.016765358 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.017199381 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.017582366 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.017245541 seconds)
  done (took 147.015441661 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.017334861 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.017613701 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.017884245 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.017772231 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.016630648 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.017619976 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.017903426 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.017607465 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.016756642 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.017297288 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.018162112 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.017318094 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.018633375 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.017692221 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.018085416 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.017750353 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.016997371 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.017840575 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.017300697 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.018644073 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.018363187 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.017542742 seconds)
  done (took 46.33547923 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.020242008 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.018542146 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.01827786 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.017865351 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.018685158 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.018917801 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.016752774 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.018912369 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.018166058 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.018305429 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.018274915 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.019107329 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.018356316 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.018740041 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.019234145 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.01968784 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.020049757 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.019949529 seconds)
  done (took 38.28659061 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.022176183 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.019446413 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.01879233 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.024075902 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.01936651 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.019648623 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.019233423 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.019666857 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.019523476 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.019411545 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.019481907 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.019566959 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.019361162 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.019329126 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.020203633 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.020617034 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.020978076 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.018942329 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.020122637 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.020136706 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.01979326 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.020072046 seconds)
  done (took 46.389634305 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.019961961 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.020717157 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.02084591 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.020555536 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.020414997 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.021192375 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.020839147 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.020058692 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.020185665 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.020200412 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.020224288 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.020647004 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.020822726 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.02128395 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.021340514 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.021367888 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.021071114 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.02211642 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.02162246 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.022649585 seconds)
  done (took 42.368276741 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.022558271 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.022491146 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.02243364 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.021795224 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.02202536 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.021983265 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.022289266 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.023106992 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.022568084 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.022524323 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.022462286 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.022495515 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.023440297 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.023205164 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.02322849 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.022844063 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.022889693 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.023718251 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.022838409 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.02317353 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.023121179 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.023559602 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.022702965 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.02243736 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.022906681 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.023353833 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.023574134 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.024712918 seconds)
  done (took 58.591350653 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.023092612 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.023249298 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.023969593 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.023834433 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.022952629 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.023299549 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.023728196 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.023993356 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.022655502 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.024127481 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.023824136 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.023145247 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.025150567 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.024079825 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.023708974 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.024284902 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.024793215 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.024234289 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.024227026 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.024513652 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.024557396 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.022386561 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.021323106 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.023100607 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.023606263 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.024886292 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.02578529 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.025251778 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.024758314 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.024012854 seconds)
  done (took 62.670166344 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.042956389 seconds)
    (2/2) benchmarking "in"...
    done (took 2.045048713 seconds)
  done (took 6.041763649 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.011388711 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.025241063 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.025701531 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.025458553 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.013568703 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.023232423 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.026932257 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.025576122 seconds)
  done (took 18.131296976 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.025688608 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.029845867 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.025787911 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.025813028 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.026529896 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.034508433 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.02728254 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.028427512 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.029110455 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.028035602 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.031813143 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.030966863 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.035412394 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.03223068 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.026620993 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.027479539 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.0282603 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.030378476 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.0278405 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.026919654 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.029728783 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.027796032 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.027607493 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.027043422 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.027697958 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.029708976 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.037753316 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.028605539 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.028955861 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.026923827 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.034220074 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.027512497 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.027808878 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.030210704 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.028675617 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.028337073 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.027286712 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.023094176 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.019488408 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.023585196 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.030675043 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.030648195 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.031699297 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.03087295 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.030209195 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.015897307 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.011937726 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.029681141 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.014854641 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.018886229 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.025409676 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.030111566 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.0289278 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.011348778 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.020742562 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.029196564 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.014570485 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.030619311 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.037721302 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.036413519 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.033165571 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.051380689 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.039399456 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.029782486 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.030646207 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.040342246 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.041694235 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.031428373 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.031865053 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.029894613 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.037797901 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.03013924 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.030293337 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.029331822 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.045500264 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.039866183 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.030044452 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.030098739 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.030456374 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.030801674 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.032329428 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.030700438 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.031491022 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.030865592 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.040846237 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.057543557 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.03127158 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.031531322 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.033744363 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.031626397 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.036053469 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.00508441 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.031266487 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.031378008 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.031446253 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.005411925 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.021481867 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.029581641 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.021151364 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.036756117 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.023728916 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.02490934 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.028932542 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.040339915 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.031164269 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.031593249 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.033382064 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.03213092 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.040521695 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.033053796 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.032739637 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.032046488 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.033531307 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.037585527 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.032485486 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.035651524 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.041989801 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.040867116 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.0341238 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.037220054 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.037014753 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.034934771 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.042853632 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.058591021 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.03221028 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.037088323 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.039132215 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.045639585 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.039028402 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.033639408 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.03636214 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.032975538 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.033022144 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.036974311 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.032335088 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.034507126 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.034301205 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.034454672 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.033080965 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.034629189 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.037236766 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.036814053 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.037501731 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.034515622 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.039929786 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.034633011 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.037848331 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.042440841 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.034802196 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.034576867 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.034549179 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.037011139 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.036106327 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.035933107 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.03436548 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.035916355 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.035491794 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.036030239 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.038145863 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.035126157 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.035306242 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.035748076 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.039436894 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.035718895 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.036078841 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.036150853 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.035404379 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.036155484 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.037296775 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.037866563 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.038887806 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.035692704 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.040131631 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.034797837 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.035789309 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.036859575 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.035475924 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.035413167 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.040680965 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.048469285 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.04075519 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.04819167 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.036136552 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.043854185 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.036634143 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.039186807 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.03755358 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.036312879 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.03735237 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.036240882 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.036569612 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.042346333 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.059454095 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.048884833 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.039869531 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.038280138 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.043748275 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.041754367 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.043817891 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.03776994 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.03923635 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.040277243 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.03826365 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.038672624 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.037129131 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.041077992 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.038483267 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.037356295 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.042133909 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.038411629 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.038433109 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.039168376 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.038432591 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.040539408 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.038576477 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.038350801 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.039090662 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.038960398 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.047264364 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.040719601 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.039140196 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.039312308 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.042050153 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.039579629 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.039633891 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.040973338 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.043376565 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.039813379 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.040909466 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.047212849 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.039895791 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.039742291 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.039534017 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.039732915 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.041418171 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.03970092 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.043601224 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.049365041 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.044046214 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.04044437 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.047057639 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.03998936 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.0456071 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.041305781 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.042795675 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.040299306 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.04216105 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.040147955 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.040588963 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.047858123 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.040594643 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.040976574 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.040916472 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.043010143 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.042071865 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.044820447 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.040960526 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.04551341 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.050674433 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.048028654 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.043540837 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.044774546 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.043353376 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.042659322 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.045745915 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.043489378 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.055612267 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.051593352 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.040977564 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.041727672 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.044899666 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.044930351 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.04188021 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.043017508 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.05025693 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.042297949 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.043425377 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.046822534 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.042162497 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.042423651 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.049501576 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.044212557 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.046686143 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.043676339 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.044210328 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.043393679 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.042642763 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.045466018 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.043092282 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.044673138 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.047302843 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.043125983 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.043232109 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.043235366 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.052729413 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.042632732 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.045226173 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.051471477 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.045226669 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.043649441 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.045342636 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.043492033 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.045529719 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.045755395 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.043652151 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.045219967 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.043819271 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.048678834 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.054836069 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.047897869 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.053455046 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.046210092 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.055192969 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.044655857 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.044668601 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.045293272 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.047847408 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.053940345 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.044136509 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.043421869 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.052874397 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.045893508 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.045212606 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.049941191 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.04499306 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.045103191 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.045647192 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.046528728 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.05097692 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.047336578 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.044676521 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.045193961 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.045334647 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.044519828 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.048139165 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.047292987 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.046457921 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.046247416 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.045515157 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.045966627 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.046588897 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.045166816 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.046286739 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.045514765 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.045677241 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.054055181 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.045982004 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.046680732 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.050734443 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.046173615 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.054138327 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.046939126 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.046374893 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.047566178 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.04600733 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.049314729 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.047325938 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.046760542 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.04706739 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.045879829 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.047722994 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.058787863 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.054267942 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.049922844 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.048237286 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.041495716 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.04754827 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.058016637 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.072562717 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.047494254 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.050032809 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.051612752 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.055036263 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.019213 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.053956073 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.050376644 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.057263872 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.049204011 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.047494372 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.052295388 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.061293624 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.048568202 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.04842092 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.047547543 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.05309361 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.05053696 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.047525628 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.048825258 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.051091785 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.049727877 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.060971439 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.049397754 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.050462224 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.050483006 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.048867998 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.048562544 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.048068769 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.050210422 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.050843396 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.049368698 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.048799798 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.051934455 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.055207358 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.048854164 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.052706043 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.060262037 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.049219065 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.049646913 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.051381904 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.050311266 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.052311692 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.049539456 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.048668921 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.052948304 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.050340634 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.049704965 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.053546622 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.060668136 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.052187434 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.049208022 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.049192281 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.050241832 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.025900494 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.051675349 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.053022237 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.059500866 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.05454774 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.063849552 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.061036259 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.050279764 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.039022645 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.051274165 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.046146677 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.051223854 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.050386677 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.051109997 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.053582644 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.053376613 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.052304189 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.050749425 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.051962272 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.05746759 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.050702207 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.051900042 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.050851136 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.051065637 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.053689628 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.054759543 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.057626961 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.051027884 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.051374603 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.021611792 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.053205005 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.05363924 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.055938846 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.052784317 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.052322966 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.054942829 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.053740384 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.056915803 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.052260027 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.0503962 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.049330695 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.050713922 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.047483401 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.052994667 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.051839892 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.052161394 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.056080021 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.059687934 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.051728761 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.053387735 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.052851747 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.057550204 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.05393608 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.052951983 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.053296314 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.052946811 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.062824492 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.05166905 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.026312192 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.048873002 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.05410912 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.058977602 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.055586908 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.046215105 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.053630685 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.053932908 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.053329164 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.057778692 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.063940434 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.058677802 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.05867804 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.063049178 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.059170945 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.043816267 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.055046745 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.053602054 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.054169438 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.055737978 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.058518614 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.05729048 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.057850026 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.055745201 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.056989967 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.056194112 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.058321243 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.055507367 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.054776059 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.059915707 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.065567801 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.06490232 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.055408256 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.057723544 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.05535253 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.060805901 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.067677222 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.056631841 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.056370515 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.056512161 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.057453985 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.056476326 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.065123975 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.065961437 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.059892027 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.056735872 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.063037798 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.075408043 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.058322829 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.067066584 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.089722102 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.051991307 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.048213749 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.035482571 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.057976459 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.057946119 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.060153422 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.056638004 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.063895443 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.057465876 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.057189163 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.066025495 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.037690915 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.047622939 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.058361274 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.059329795 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.040964575 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.053300761 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.064840713 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.058309633 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.058333544 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.058038884 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.060703981 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.058606648 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.056614783 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.057262632 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.060085201 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.057404002 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.044879947 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.066864513 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.057737189 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.058270166 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.559771558 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.069809408 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.055539358 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.055535104 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.057003195 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.062683478 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.060258525 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.055943188 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.059847366 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.065449109 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.061274103 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.065136774 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.058113165 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.057841679 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.058514037 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.057007506 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.056304379 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.07005742 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.069612031 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.034021407 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.058076723 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.058846565 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.05668877 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.06412376 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.062691598 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.058025793 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.058001721 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.057067574 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.055404701 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.056045009 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.056882215 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.060448297 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.065249163 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.056562171 seconds)
  done (took 1221.145436696 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.055974524 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.056107435 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.056519812 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.056663422 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.056241088 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.060409502 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.055333873 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.055364711 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.056935028 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.05638503 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.058923388 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.055971721 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.05694351 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.057034957 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.056642384 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.06427922 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.05914616 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.055587285 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.056302085 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.060529739 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.051349446 seconds)
  done (took 45.183619016 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.051051813 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.051148595 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.053308643 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.049803331 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.050403623 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.049897524 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.050622297 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.052029675 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.050680767 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.049370112 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.037775403 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.038711922 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.045867785 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.049985405 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.048681894 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.049897987 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.050405358 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.050815726 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.04992431 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.050250684 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.037050011 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.037323438 seconds)
  done (took 47.034611604 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.039135605 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.05220168 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.039506962 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.050716008 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.051687092 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.051768424 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.05069559 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.052587034 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.05115546 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.050265537 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.059635998 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.032939545 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.04875217 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.053932252 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.051905779 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.051673007 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.196271762 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.051953606 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.055992893 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.048319054 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.048968074 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.056430131 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.048046435 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.051058329 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.047207879 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.047193563 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.0474286 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.047770776 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.050643228 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.049372362 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.05350979 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.04823415 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.049878501 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.056923672 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.050437719 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.053549287 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.057380437 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.052691315 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.050226829 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.0478057 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.059067907 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.075024979 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.04800757 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.050756383 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.05655502 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.047775055 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.048864576 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.053985148 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.057816392 seconds)
  done (took 102.634329112 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.048392928 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.050125616 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.048976355 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.04848367 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.048415723 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.047397578 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.04966708 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.049868606 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.047184436 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.047720671 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.048212567 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.048691318 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.050830546 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.050286656 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.048424242 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.048677237 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.047331471 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.048304 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.048583719 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.046432895 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.048788999 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.048927349 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.0489688 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.049088515 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.048379058 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.049763218 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.050168993 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.051251824 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.049062598 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.048215188 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.048482125 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.049152078 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.050872622 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.048655878 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.047672773 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.048483231 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.048703926 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.051886287 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.048438969 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.048062676 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.049557115 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.049499233 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.051108687 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.047833905 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.046707478 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.04803552 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.04871737 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.051098406 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.047507594 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.047591822 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.048829665 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.050018698 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.048968782 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.049395184 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.048650313 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.04827568 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.05208062 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.049552426 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.049363726 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.049569898 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.049548306 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.050393709 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.042096029 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.043063882 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.04359809 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.043404104 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.045203388 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.038955596 seconds)
  done (took 141.272351858 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.040582614 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.041212554 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.043231491 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.039924089 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.039876132 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.036685935 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.038827462 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.037262784 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.039231958 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.039154599 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.039082507 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.03871326 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.041595249 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.038163162 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.038647949 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.037847189 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.038611293 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.039471038 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.037688276 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.038499757 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.038214444 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.037688846 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.040469585 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.036786422 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.037343923 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.038282365 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.037887078 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.036827114 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.035003415 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.035124334 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.034413192 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.035750613 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.03384784 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.033735208 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.033899266 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.034801158 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.036855654 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.033818751 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.033357486 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.034174679 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.034271148 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.036800318 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.034270443 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.032600747 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.033322706 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.032810931 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.034901413 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.033053742 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.032514322 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.032531873 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.031372386 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.032426437 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.032235631 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.032969896 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.033096201 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.032286853 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.033192976 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.032133724 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.032746487 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.032302024 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.032629874 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.034558635 seconds)
  done (took 128.200853027 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.031276209 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.031850348 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.032031486 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.035026959 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.031966482 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.032218417 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.032128577 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.031885188 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.034389929 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.032097615 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.030881084 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.03175029 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.03308625 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.03266244 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.03189712 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.032553187 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.031329569 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.031943823 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.031639525 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.03104937 seconds)
  done (took 42.603376538 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.031645563 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.031168311 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.031729477 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.031255945 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.031074418 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.030565061 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.03036996 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.017796621 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.030540386 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.030118477 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.029619176 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.030343497 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.034945648 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.029564201 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.030014176 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.029927946 seconds)
  done (took 34.439972294 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.029205259 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.028891045 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.030502827 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.030111264 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.031693718 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.029561088 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.029258057 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.02939137 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.028586066 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.029246101 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.027355214 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.996332442 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.028907521 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.029695848 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.031626664 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.02918205 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.028382716 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.02909089 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.028928977 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.031977844 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.028448515 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.028104767 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.028426679 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.027786549 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.030376265 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.02748868 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.02654214 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.027496004 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.027387224 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.028984946 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.026809281 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.027736712 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.028116879 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.026944341 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.030143701 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.01223954 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.027368829 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.026610696 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.026944397 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.027868696 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.02609891 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.026454373 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.027199972 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.026063295 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.026968408 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.028073546 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.026771022 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.026174621 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.026079514 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.027100353 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.026449272 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.026252369 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.02608707 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.02684208 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.028009007 seconds)
  done (took 113.461602293 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.025508321 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.026321695 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.026091781 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.027181938 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.026219817 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.025296399 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.025485162 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.025481493 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.026431456 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.024706674 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.026109316 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.02520914 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.025656696 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.026494577 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.025192481 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.026535661 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.025482752 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.026321932 seconds)
  done (took 38.419827354 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.025914114 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.026166308 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.026506244 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.025656327 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.026442055 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.025347301 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.024920735 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.024701957 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.027382162 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.02506309 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.025311858 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.025318628 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.025369471 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.027346483 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.025242223 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.024510137 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.024470436 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.025213512 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.027248214 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.024993715 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.024841427 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.024753728 seconds)
  done (took 46.518348808 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.028601616 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.025013741 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.032925279 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.040433253 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.04400893 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.056053853 seconds)
  done (took 14.179580722 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.016516261 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994093867 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.011190125 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.005993517 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.027128367 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.026913468 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.026945052 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.026670092 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.028665085 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.016067336 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.025555401 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.014956075 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.027536139 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.029854643 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.026614218 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.028143863 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028145685 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.01395991 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.029759821 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.013596533 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028027309 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.013180618 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.028461051 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.026774227 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.027432833 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.028848376 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.02860113 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.030973692 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.007897107 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021476858 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.027634582 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028357371 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028537661 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.030809782 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.028665219 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.028828269 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.028525003 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.02859583 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.031094059 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.028552147 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.027654728 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.029004418 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028697658 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.031088491 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.028229367 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.029870965 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028748281 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028408169 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.03066439 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.03014336 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.029326059 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.029452825 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.028742112 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03083779 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.029036437 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.030882011 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.029674402 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.029789315 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.030642257 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.029730425 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.030101403 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.029715134 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.032782991 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.029287442 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03016297 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028862371 seconds)
  done (took 135.676647851 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.031867689 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.029644539 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.029291221 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.030471378 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.029626371 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031861076 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.029540031 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.030286359 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.030089282 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.029880765 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024244273 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.008198256 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0303176 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.030067057 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.02953254 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.032268325 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.030934066 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.030458962 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.030916539 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.030802234 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.032739872 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.031149228 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.030598827 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.031321453 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.030996969 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.033877651 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.030735839 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.030975376 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.031452098 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.030214336 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034259241 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.031980938 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.030974887 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.030706928 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.031073105 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.033708483 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031078941 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.030875443 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.030088528 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.030682812 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034287743 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.017769957 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.031625482 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.03180616 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.032183172 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.033465587 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.032198569 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.031687506 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.032639442 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.031792326 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03371366 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.018131105 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.032329982 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03284443 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03220476 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.033623003 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.003061559 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.032658257 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.033374574 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.018551317 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.033596603 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.032241059 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.033116616 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033199859 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.034854139 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.01923386 seconds)
  done (took 135.936273221 seconds)
done (took 2826.969960913 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.103805473 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.138776068 seconds)
  done (took 16.203514508 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.195623092 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.061071588 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.219690715 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.149699481 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.059263606 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.065489251 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.036210336 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.034828326 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.127801615 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.033169354 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.017110121 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.008700328 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.033357742 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.036304441 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.035391055 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.036136031 seconds)
  done (took 55.119924486 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.039956147 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.040675534 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.039948107 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.036238873 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.051753539 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.115842472 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.061466691 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.042054062 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.052011086 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.069146182 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.056247046 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.046061153 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.045654147 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.043567788 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.130233059 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.085287379 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.090995853 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.115031654 seconds)
  done (took 39.122351166 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.118349651 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.051456903 seconds)
  done (took 11.137347012 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.054947036 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.050650535 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.047852723 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.04951819 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.064194012 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.065859566 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.039175392 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.041614687 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.048319409 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.043097897 seconds)
  done (took 72.470315991 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.038034252 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.039042806 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.346392432 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.046317834 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.048193921 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.066815196 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.03762718 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.069496614 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.03910804 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.035417036 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.047203754 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.357828355 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.052051471 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.037877432 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.459135381 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.04818733 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.044019441 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.071176275 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.073925382 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.041567819 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.045347466 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.045991757 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.200847026 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.725454359 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.041357166 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.044061752 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.044445957 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.036234243 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.03799237 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.039552863 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.041161114 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.039567864 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.046850327 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.043728677 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.045519876 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.042938859 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.533626101 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.064203783 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.04580509 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.135134287 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.08398604 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.044783728 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.831419016 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.041904534 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.036818509 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.049271412 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.723692941 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.118111969 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.039693901 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.200404518 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.408478858 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.054229132 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.202683177 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.180527328 seconds)
  done (took 142.279569485 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.035140391 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.274967276 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.189143669 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.039016458 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.294721825 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.246326902 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.037850015 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.082878072 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.039024994 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.23903189 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.286880795 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.13996584 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.040718218 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.036650378 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.038435614 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.037425419 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.182110066 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.106359172 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.040544802 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.038104989 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.062783524 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.237246844 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.157979727 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.040037589 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.064043823 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.245226516 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.159037583 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.139711697 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.818721326 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.037824291 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.101104949 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.041003892 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.042597273 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.037631114 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.189797363 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.132231802 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.121198285 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.03982676 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.038144049 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.037884697 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.714999315 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.238156934 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.132617145 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.160480817 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.289515121 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.251992935 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.649389578 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.039103166 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.662635215 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.202865143 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.244480543 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.245813101 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.156359472 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.043069144 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.329701659 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.040848036 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.039337327 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.260740451 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.256803745 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.138253483 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.042348048 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.039373295 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.039318515 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.279135501 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.042554143 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.13101562 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.04379517 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.041902686 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.132957283 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.141054486 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.262946619 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.261090872 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.07050753 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.359503827 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.536174957 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.242593128 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.106320904 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.259463159 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.043078084 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.042037681 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.122644112 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.886660854 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.290869915 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.280854838 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.238318098 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.070915149 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.690399081 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.041316106 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.22720161 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.22938598 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.276229429 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.283901748 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.276936216 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.394481264 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.042564178 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.042301964 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.415818374 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.159092837 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.046202183 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.393268149 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.27060533 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.526825513 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.067344102 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.325796418 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.170677644 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.044954718 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.689716265 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.042559568 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.248779798 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.069380417 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.020374424 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.043881418 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.232424134 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.952208247 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.043311517 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.763190194 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.102050125 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.046750449 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.245005501 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.045640801 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.285936554 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.032178108 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.274997526 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.64711366 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.073483574 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.215362538 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.284249168 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.675837156 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.333110764 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.284530372 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.158514058 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.264257249 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.856404956 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.046861842 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.304781667 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.032847847 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.043552374 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.214529201 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.045590527 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.175389832 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.049586106 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.309858584 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.064419 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.268415822 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.048589033 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.282748997 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.075298824 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.093808854 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.0470298 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.171377633 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.048738652 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.888954959 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.20201649 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.048070723 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.046897327 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.634967945 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.047770976 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.200806627 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.268608866 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.06484366 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.112674175 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.613284394 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.043516289 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.130227962 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.067273254 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.688153163 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.047549858 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.293992819 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.023131105 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.521239394 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.049173249 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.279548745 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.235549553 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.047589398 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.047993431 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.889652714 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.04564929 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.046357135 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.202027901 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.02112932 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.957135148 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.244045198 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.052155415 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.173654996 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.049912607 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.133127755 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.389069808 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.046676281 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.048636287 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.047223472 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.049344106 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.04899695 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.254664183 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.075284108 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.480915594 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.181366182 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.300955216 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.355007707 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.244276251 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.07234759 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.050081175 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.268218511 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.02288312 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.109807403 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.035166384 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.066887493 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.264115574 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.033630502 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.252774407 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.279326446 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.934018678 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.0937098 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.050364903 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.047810805 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.961094678 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.189367578 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.132726202 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.051996301 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.048559905 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.146299285 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.166671367 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.230848359 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.861803784 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.178839941 seconds)
  done (took 939.917863607 seconds)
done (took 1278.21329837 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.043382954 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.051688144 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.053862097 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.025318088 seconds)
  done (took 30.15135873 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.049927663 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.049942531 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.052089786 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.052938536 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.049867576 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.050056884 seconds)
  done (took 14.280310006 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.050679278 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.052047519 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.051086999 seconds)
  done (took 23.131182434 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.469074575 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.448166128 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.126385494 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.192688428 seconds)
  done (took 11.212527424 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.056625893 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.050432557 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.051387272 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.051506818 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.051428936 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.052130644 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.054205301 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.05360949 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.055655895 seconds)
  done (took 20.446702915 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.28204368 seconds)
done (took 105.481347602 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.150572407 seconds)
    (2/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.459660392 seconds)
    (3/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.407556764 seconds)
    (4/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.299515235 seconds)
    (5/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.280387307 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.984641092 seconds)
    (7/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.409806037 seconds)
    (8/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.933879102 seconds)
    (9/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.093037834 seconds)
    (10/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.712859392 seconds)
    (11/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.15866257 seconds)
    (12/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.260962402 seconds)
    (13/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.146569874 seconds)
    (14/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.150681526 seconds)
    (15/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.168362925 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.081758137 seconds)
    (17/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.17723852 seconds)
    (18/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.431170002 seconds)
    (19/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.180389054 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.064930831 seconds)
    (21/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.075389802 seconds)
    (22/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.942341028 seconds)
    (23/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.503235609 seconds)
    (24/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.564709046 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.082501663 seconds)
    (26/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.062473342 seconds)
    (27/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.480439276 seconds)
    (28/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.359654237 seconds)
    (29/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.065214033 seconds)
    (30/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.118076638 seconds)
    (31/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.164556014 seconds)
    (32/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.287311278 seconds)
    (33/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.144208722 seconds)
    (34/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.988297117 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.169592581 seconds)
    (36/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.080826535 seconds)
    (37/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.264752816 seconds)
    (38/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.26041614 seconds)
    (39/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.071832215 seconds)
    (40/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.192245795 seconds)
    (41/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.307751838 seconds)
    (42/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.184384032 seconds)
    (43/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.387478728 seconds)
    (44/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.153615019 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.201308852 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.288441725 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.091008142 seconds)
    (48/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.331385717 seconds)
    (49/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.072883592 seconds)
    (50/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.360727522 seconds)
    (51/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.53952065 seconds)
    (52/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.066874703 seconds)
    (53/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.343032587 seconds)
    (54/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.086017295 seconds)
    (55/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.477903554 seconds)
    (56/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.336969156 seconds)
    (57/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.768967991 seconds)
    (58/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.040084651 seconds)
    (59/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.313858341 seconds)
    (60/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.154170213 seconds)
    (61/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.066171213 seconds)
    (62/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.372621877 seconds)
    (63/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.195873218 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.091765073 seconds)
    (65/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.267583435 seconds)
    (66/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.10282441 seconds)
    (67/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.069935214 seconds)
    (68/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.069186966 seconds)
    (69/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.751877412 seconds)
    (70/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.167449919 seconds)
    (71/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.509951828 seconds)
    (72/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.087870945 seconds)
    (73/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.645465003 seconds)
    (74/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.399892775 seconds)
    (75/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.289195485 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.082675716 seconds)
    (77/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.548198321 seconds)
    (78/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.069450727 seconds)
    (79/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.217073009 seconds)
    (80/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.005705882 seconds)
    (81/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.094556803 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.196501282 seconds)
    (83/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.075819464 seconds)
    (84/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.065094014 seconds)
    (85/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 4.437984169 seconds)
    (86/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.288915636 seconds)
    (87/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.075657726 seconds)
    (88/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.083278052 seconds)
    (89/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.069496998 seconds)
    (90/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.715597861 seconds)
    (91/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.267041298 seconds)
    (92/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.494695765 seconds)
    (93/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.070259073 seconds)
    (94/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.103690268 seconds)
    (95/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.491781334 seconds)
    (96/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.267563505 seconds)
    (97/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.172551439 seconds)
    (98/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.085388664 seconds)
    (99/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.156297674 seconds)
    (100/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.471735612 seconds)
    (101/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.961386052 seconds)
    (102/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.890597565 seconds)
    (103/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.195210508 seconds)
    (104/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.404081923 seconds)
    (105/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.092386748 seconds)
    (106/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.390195565 seconds)
    (107/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.385310747 seconds)
    (108/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.99544054 seconds)
    (109/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.437879475 seconds)
    (110/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.476714268 seconds)
    (111/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.069374313 seconds)
    (112/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.352715287 seconds)
    (113/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.344521846 seconds)
    (114/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.363717955 seconds)
    (115/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.746573826 seconds)
    (116/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.977631438 seconds)
    (117/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.17645061 seconds)
    (118/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.481088204 seconds)
    (119/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.727099821 seconds)
    (120/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.431212577 seconds)
    (121/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.368114399 seconds)
    (122/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.851616954 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.942100618 seconds)
    (124/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.285533702 seconds)
    (125/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.880235131 seconds)
    (126/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.07930024 seconds)
    (127/341) benchmarking ("perf_sum", Float32, true)...
    done (took 3.849924078 seconds)
    (128/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.085374562 seconds)
    (129/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.54127585 seconds)
    (130/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.289981793 seconds)
    (131/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.14997679 seconds)
    (132/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.475410312 seconds)
    (133/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.083382112 seconds)
    (134/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.28159987 seconds)
    (135/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.074738849 seconds)
    (136/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.176949434 seconds)
    (137/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.148979823 seconds)
    (138/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.889883934 seconds)
    (139/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.179905109 seconds)
    (140/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.082331696 seconds)
    (141/341) benchmarking ("sort", BigInt, false)...
    done (took 7.070441999 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.329833452 seconds)
    (143/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.074014893 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.05819917 seconds)
    (145/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.214007289 seconds)
    (146/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.073754286 seconds)
    (147/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.148974242 seconds)
    (148/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.366286978 seconds)
    (149/341) benchmarking ("sort", Bool, false)...
    done (took 2.288368894 seconds)
    (150/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.191885158 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.954626883 seconds)
    (152/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.215465758 seconds)
    (153/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.091732768 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.330612391 seconds)
    (155/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.092961468 seconds)
    (156/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.087000549 seconds)
    (157/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.197413259 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.386883255 seconds)
    (159/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.155501011 seconds)
    (160/341) benchmarking ("sort", Int64, false)...
    done (took 5.699599086 seconds)
    (161/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.345334811 seconds)
    (162/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.085643408 seconds)
    (163/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.408742097 seconds)
    (164/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.206039129 seconds)
    (165/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.737047313 seconds)
    (166/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.254928308 seconds)
    (167/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.202291223 seconds)
    (168/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.839973412 seconds)
    (169/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.102151746 seconds)
    (170/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.072500649 seconds)
    (171/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.357805068 seconds)
    (172/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.382120428 seconds)
    (173/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.137840245 seconds)
    (174/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.282176034 seconds)
    (175/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.208823136 seconds)
    (176/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.540090855 seconds)
    (177/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.065208093 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.92742534 seconds)
    (179/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.618969241 seconds)
    (180/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.091277455 seconds)
    (181/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.200179382 seconds)
    (182/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.173316813 seconds)
    (183/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.226127601 seconds)
    (184/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.623043958 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.490563352 seconds)
    (186/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.115875288 seconds)
    (187/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.726215804 seconds)
    (188/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.574497976 seconds)
    (189/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.230039748 seconds)
    (190/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.080852047 seconds)
    (191/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.778074311 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.082910038 seconds)
    (193/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.40028228 seconds)
    (194/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.080435537 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.239287422 seconds)
    (196/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.153344563 seconds)
    (197/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.442549953 seconds)
    (198/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.850206108 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.199436465 seconds)
    (200/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.278182562 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.368210366 seconds)
    (202/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.861428459 seconds)
    (203/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.105259808 seconds)
    (204/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.271439259 seconds)
    (205/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.082169804 seconds)
    (206/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.090754028 seconds)
    (207/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.12591373 seconds)
    (208/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.157392105 seconds)
    (209/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.085449547 seconds)
    (210/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.085709157 seconds)
    (211/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.751416232 seconds)
    (212/341) benchmarking ("sort", Float64, false)...
    done (took 5.783718558 seconds)
    (213/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.354568645 seconds)
    (214/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.824967222 seconds)
    (215/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.298846499 seconds)
    (216/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.616470559 seconds)
    (217/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.086482305 seconds)
    (218/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.124857052 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.211945191 seconds)
    (220/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.164160845 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.103301888 seconds)
    (222/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.089110602 seconds)
    (223/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.075969483 seconds)
    (224/341) benchmarking ("map", identity, Bool, true)...
    done (took 3.8383277 seconds)
    (225/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.396728041 seconds)
    (226/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.327144615 seconds)
    (227/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.200909173 seconds)
    (228/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.206878954 seconds)
    (229/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.466029915 seconds)
    (230/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.719000632 seconds)
    (231/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.370471108 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.235527385 seconds)
    (233/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.138830729 seconds)
    (234/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.076548394 seconds)
    (235/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.227453366 seconds)
    (236/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.100457688 seconds)
    (237/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.37044419 seconds)
    (238/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.194322059 seconds)
    (239/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.136633865 seconds)
    (240/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.194383636 seconds)
    (241/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.092024478 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.463047459 seconds)
    (243/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.079137894 seconds)
    (244/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.185279678 seconds)
    (245/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.23456956 seconds)
    (246/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.383784495 seconds)
    (247/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.164639102 seconds)
    (248/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.097360029 seconds)
    (249/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.22108195 seconds)
    (250/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.864653705 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.434353544 seconds)
    (252/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.079244756 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 4.008549426 seconds)
    (254/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.254852824 seconds)
    (255/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.072858443 seconds)
    (256/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.480439077 seconds)
    (257/341) benchmarking ("sort", Int8, false)...
    done (took 5.003099736 seconds)
    (258/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.29963544 seconds)
    (259/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.244185974 seconds)
    (260/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.340792387 seconds)
    (261/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.079274495 seconds)
    (262/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.490351081 seconds)
    (263/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.287365025 seconds)
    (264/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.399913059 seconds)
    (265/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.096046204 seconds)
    (266/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.260183877 seconds)
    (267/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.090536648 seconds)
    (268/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.886668562 seconds)
    (269/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.079938588 seconds)
    (270/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.207373274 seconds)
    (271/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.25068276 seconds)
    (272/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.3495114 seconds)
    (273/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.083654394 seconds)
    (274/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.079436855 seconds)
    (275/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 8.751860607 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 3.547210269 seconds)
    (277/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.418092547 seconds)
    (278/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.152501791 seconds)
    (279/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.444310967 seconds)
    (280/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.142357351 seconds)
    (281/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.181808034 seconds)
    (282/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.295632936 seconds)
    (283/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.934985208 seconds)
    (284/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.594151557 seconds)
    (285/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.77586382 seconds)
    (286/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.317217295 seconds)
    (287/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.078711109 seconds)
    (288/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.172027791 seconds)
    (289/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.484983473 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.082897611 seconds)
    (291/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.222737661 seconds)
    (292/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.079674001 seconds)
    (293/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 9.864926414 seconds)
    (294/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.156273301 seconds)
    (295/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.480138508 seconds)
    (296/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.0844032 seconds)
    (297/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.457590923 seconds)
    (298/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.391675748 seconds)
    (299/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.195577039 seconds)
    (300/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.51721174 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.452840569 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.211155542 seconds)
    (303/341) benchmarking ("sort", Float32, false)...
    done (took 5.755678296 seconds)
    (304/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.084278616 seconds)
    (305/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.311993109 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.084299599 seconds)
    (307/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.020536902 seconds)
    (308/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.092391639 seconds)
    (309/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.521614439 seconds)
    (310/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.314156613 seconds)
    (311/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.676384048 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.716413079 seconds)
    (313/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.074653269 seconds)
    (314/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.207752273 seconds)
    (315/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.831959264 seconds)
    (316/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.555438294 seconds)
    (317/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.529213437 seconds)
    (318/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.579565306 seconds)
    (319/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.984121796 seconds)
    (320/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.296247947 seconds)
    (321/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.320823623 seconds)
    (322/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.484863615 seconds)
    (323/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.222910743 seconds)
    (324/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.506405153 seconds)
    (325/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.720770193 seconds)
    (326/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.778285785 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.832144097 seconds)
    (328/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.247239539 seconds)
    (329/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.083002074 seconds)
    (330/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.086568773 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.401559898 seconds)
    (332/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.204669502 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.490577762 seconds)
    (334/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.087847173 seconds)
    (335/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.260657077 seconds)
    (336/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.386489212 seconds)
    (337/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.240201423 seconds)
    (338/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.116045719 seconds)
    (339/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.601540282 seconds)
    (340/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.366827254 seconds)
    (341/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.475009308 seconds)
  done (took 1160.858926029 seconds)
done (took 1163.176283399 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.104859149 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.089056559 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.602530538 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.101331256 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.086860821 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.089571673 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.612532626 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.121110808 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.107351015 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.612129588 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.099357858 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.087194145 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.10164725 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.124161399 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.101132491 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.100587511 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.092992288 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.112609759 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.125401736 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.092524035 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.13859157 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.093270611 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.087050784 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.142720528 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.091412014 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.107886182 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.108552675 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.141447646 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.139984814 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.094239441 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.095842 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.459023468 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.14299337 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.095538323 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.103253671 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.105729444 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.097793407 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.106167734 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.108544706 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.105920574 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.093226362 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.101881873 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.095981313 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.095552673 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.091255931 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.0901013 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.092808829 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.218252861 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.105807637 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.439297253 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.152364616 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.109312646 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.142032015 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.096586694 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.093199235 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.096541575 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.142550951 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.099748034 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.096873792 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.440253296 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.187901515 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.109269649 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.44126525 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.15859635 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.102464866 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.100669472 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.090595888 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.110560796 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.459430666 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.659448329 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.12565297 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.114493212 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.098346581 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.095305891 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.107370736 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.614810344 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.108916047 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.682998624 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.121202585 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.110769792 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.100850094 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.095113315 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.09604786 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.111988908 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.111602821 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.092468019 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.099301976 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.10131295 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.106958537 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.460751739 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.13940693 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.605570297 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.102586954 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.112519124 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.111543384 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.684697283 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.124129415 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.112698161 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.099431541 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.460603819 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.136781331 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.112405619 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.095638636 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.106835243 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.21121589 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.113546294 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.112912828 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.0938288 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.118649123 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.100462739 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.096677686 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.108826554 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.117459262 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.131937104 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.114154501 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.095375044 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.103968424 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.102541049 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.112075966 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.104224855 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.100545347 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.108437487 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.097869602 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.147052193 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.112868077 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.110799286 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.212725838 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.103388249 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.223264834 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.11221131 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.103182607 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.095689423 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.44517182 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.143754837 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.120803288 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.104349172 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.119066041 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.120256779 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.115946921 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.098564181 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.11233541 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.097289168 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.147952276 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.099337427 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.122257396 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.147396131 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.111283442 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.103112623 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.113996176 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.134694494 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.121176931 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.100377831 seconds)
done (took 330.067567521 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.142871092 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.095173581 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.171732166 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.096039749 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.162767616 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.149235017 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.095259211 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.096409071 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.095571178 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.494724324 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.097202497 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.101873778 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.095429344 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.095976957 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.144591713 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.095301669 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.09544325 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.333622547 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.09670795 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.155829967 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.094125112 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.096600539 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.095580841 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.494906658 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.093591021 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.096039339 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.157974198 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.097545189 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.337195336 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.094497208 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.06038988 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.339429082 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.15613302 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.109647672 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.103879149 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.104411453 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.164701357 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.10591422 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.144329284 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.143765116 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.173494795 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.130944089 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.095529997 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.096905163 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.102619774 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.098961452 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.098724436 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.130408156 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.098076996 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.106063091 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.33574357 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.10365404 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.107150935 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.099204912 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.097880084 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.112683321 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.099524788 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.099299652 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.159380412 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.099260954 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.146521284 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.498205192 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.497787548 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.099620773 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.098077979 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.099608906 seconds)
  done (took 198.908227344 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.165319542 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.171057134 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.164768089 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.104397732 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.148079327 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.168443749 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.105747458 seconds)
  done (took 17.050822236 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.106167035 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.100925421 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.12239814 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.121950475 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.098971946 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.238139732 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.110337279 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.103637828 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.124769952 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.099825243 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.434985058 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.123163347 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.106922531 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.098889099 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.112029812 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.128406603 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.102932795 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.101845428 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.197972363 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.179209067 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.105676273 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.108882256 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.130119619 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.111552484 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.101805076 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.102357725 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.102196853 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.108578258 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.101881681 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.100794915 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.100869678 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.115542209 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.10090313 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.100340365 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.10151593 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.10240223 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.102947712 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.101403493 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.101776587 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.100339767 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.101839079 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.102134049 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.102542268 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.10202488 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.101382075 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.126057995 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.088214852 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.101559852 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.087323544 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.102600477 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.131004407 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.103376457 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.099060342 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.108465598 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.148765267 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.112230063 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.10556565 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.105189436 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.105384274 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.106183549 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.104615962 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.182478789 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.129771047 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.105583986 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.129282588 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.143237292 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.10640769 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.105793595 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.106042275 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.130254538 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.10597196 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.129095402 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.106547682 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.20284831 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.106164035 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.246406049 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.129644847 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.110282407 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.110624809 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.106354969 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.112761136 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.104557493 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.107754573 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.112740853 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.110733958 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.106336755 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.10836339 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.107707378 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.113059382 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.106266624 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.151600242 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.107023769 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.107505752 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.205046438 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.107908044 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.203960842 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.133268201 seconds)
  done (took 227.78681313 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.112135555 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.109392436 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.121650972 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.108432026 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.108288585 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.112954671 seconds)
  done (took 14.70242749 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.110429102 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.111080839 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.108121568 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.107717398 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.108290046 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.108420765 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.107136851 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.110434413 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.113773638 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.108042546 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.109044546 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.109524317 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.109693648 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.108686163 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.108918528 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.108148853 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.10884255 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.108540926 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.1093406 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.107979082 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.312708733 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.110227429 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.109221074 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.113324251 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.113675424 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.109070921 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.117693035 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.108940821 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.109813391 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.114910993 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.114093941 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.110696115 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.113550883 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.115833844 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.114333998 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.114232551 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.113294481 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.110427896 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.109460264 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.110323138 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.11023287 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.110980763 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.109353798 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.110302391 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.113434083 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.11861023 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.115427401 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.118263543 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.110820988 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.110402641 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.112224134 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.109409625 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.109743349 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.112585317 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.114934568 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.118357738 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.116077677 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.11007072 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.110959741 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.115319848 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.116040775 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.111723235 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.113220033 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.102255422 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.118728224 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.113066304 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.114099065 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.115816486 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.110963483 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.111909465 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.113351293 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.112020634 seconds)
  done (took 155.271771217 seconds)
done (took 615.740504643 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.235755155 seconds)
  done (took 9.270567994 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.260438176 seconds)
  done (took 9.363845757 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.787361757 seconds)
  done (took 12.823057028 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.139367523 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.124855753 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.126115756 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.112373233 seconds)
  done (took 30.549511853 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.461617455 seconds)
  done (took 9.497628556 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.124742169 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.109388712 seconds)
  done (took 16.33739519 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.176028874 seconds)
  done (took 9.197380496 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.604260043 seconds)
  done (took 9.656729024 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.118645321 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.127788094 seconds)
  done (took 16.302471897 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.078282075 seconds)
  done (took 9.11247135 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.917449082 seconds)
  done (took 10.047086153 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.117123138 seconds)
  done (took 9.171744436 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.123719693 seconds)
  done (took 9.158783244 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.250609194 seconds)
  done (took 10.285455837 seconds)
done (took 172.809638324 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.121551322 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.11409383 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.113991152 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.112234745 seconds)
  done (took 30.49727459 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.148016253 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.148094211 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.156433014 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.149101521 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.13895807 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.138514781 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.148697341 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.149096711 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.140547165 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.146817608 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.149005649 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.145922783 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.149249244 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.159467098 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.158367227 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.146851823 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.148690176 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.15019498 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.140320595 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.15797281 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.147172217 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.147421013 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.115407372 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.115535108 seconds)
  done (took 53.532774742 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.303167384 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.178423951 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.268682243 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.160387965 seconds)
  done (took 10.946906995 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.11310998 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.178669053 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.165567962 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.160402883 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.201471662 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.217398433 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.166807054 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.324057577 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.229517313 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.240371691 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.121889782 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.136796315 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.139750531 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.161260137 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.218727199 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.114736748 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.11509718 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.229019641 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.175624599 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.309799094 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.117436312 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.169771248 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.201054813 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.168407114 seconds)
  done (took 54.413919022 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.115398815 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.124002349 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.123495641 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.116164419 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.11753972 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.116625832 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.122947639 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.118438738 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.140840086 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.118010341 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.117329567 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.117241187 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.123986052 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.118020669 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.117291034 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.13082611 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.130963084 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.118442367 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.117685542 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.124258981 seconds)
  done (took 44.46735409 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.114923759 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.962341871 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.462283056 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.367287798 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.11546796 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.118121395 seconds)
  done (took 33.179531791 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.130672362 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.135519991 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.12416549 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.139842476 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.166410583 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.126697951 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.179036938 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.259159426 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.126294582 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.176750908 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.139529563 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.126245097 seconds)
  done (took 27.868701508 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.11631313 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.117757624 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.12030377 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.130920212 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.130006312 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.125777579 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.125655589 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.116071362 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.131083047 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.13716812 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.126237706 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.130496081 seconds)
  done (took 47.547440676 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.331773892 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.343915658 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.330998617 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.749790493 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.439822522 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.10274815 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.404744328 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.330190915 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.894112808 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.926210352 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.414871239 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.100682505 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.071842383 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.043235129 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.035768923 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.359751305 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.120406475 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.975664978 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.376871739 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.168027702 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121673391 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.11948243 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123746563 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.420762646 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.43362955 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.118389386 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.330514901 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134293267 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.11845759 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.372465858 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.606854878 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.175141773 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.320093125 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.381972238 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.460811597 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.173921871 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.223626769 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.31716077 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.166493831 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.154631568 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.129625911 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.130363089 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.65833007 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.131914169 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.392076337 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123211239 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.120124651 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.213917819 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.046990991 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.533589203 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.241728656 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.11871904 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.155410277 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.552703624 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241051919 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.363126996 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.124907836 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.32724785 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.179630751 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.472089887 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.234412534 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.228258851 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.333472936 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.04864198 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.555164655 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.254871938 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.123215615 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.125721116 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.82169138 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.36439043 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.202230002 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.530704055 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.894977071 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.124609685 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.12339732 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.172217455 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.210998003 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.122067015 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.414533079 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.127530074 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.047601325 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.221286303 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.519152972 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127972757 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.120925912 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.129875184 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.966451165 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.048848441 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.218655038 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.468699098 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.454079813 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.122934044 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.122585897 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.144479169 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124644519 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068212082 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.709889787 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.189853711 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.050877944 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.688947117 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.61691801 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.091418802 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.62467152 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.16750498 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.398811563 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.278113345 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.529268585 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.332405128 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.369108987 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.657023802 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.128310785 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.740288083 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.186066089 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.189116174 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.098148035 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.681561353 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.324064292 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.504584793 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.233539135 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.124209767 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.048935319 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.134955198 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327925316 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.621854843 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.166292654 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123952655 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.128991756 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.123896807 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.127847926 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.285921877 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140777928 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.420455077 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.203758755 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.125076466 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.060108192 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.121151158 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.409276553 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.826612607 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.185918884 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.368124863 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.396733946 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.825411188 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.724909527 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.178642786 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.396622136 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.199975021 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199409661 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.705929958 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.257629401 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.189916448 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125805356 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.262779444 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.132109787 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.127155267 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.541973761 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.540893282 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.553383395 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.169414927 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.125276562 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.085591546 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.334768767 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.370253442 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.240325451 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.158632871 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.131535827 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.210137028 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.353267285 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.127953987 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.052438835 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.372435343 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.368808574 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.428147045 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.538340813 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.239543612 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.200657467 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137457503 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.338868368 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.208262226 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.784361999 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.672825881 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.350215995 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.72579473 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.0942948 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.767259862 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.485005887 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.51881054 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.143352355 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.580081136 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.331201289 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.834530656 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.160834722 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.654714141 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.054020475 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133760067 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.461775122 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.085834602 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.44505129 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.189321667 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182524245 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.13056957 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.129309343 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135921192 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.089110213 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.236422265 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197199476 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202265259 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.055875692 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.803066334 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.169575643 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.131974614 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.129159146 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.537714427 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.982406026 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.083793449 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.129543158 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.206399506 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.879233899 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.679195565 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.133245536 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132734015 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.737729753 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.135376566 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.718394967 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.138522716 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.043678894 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.158972288 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.483262985 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.83862968 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.419721768 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.207820028 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.206480136 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.130702772 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.139579863 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.832455615 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.14002786 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.833069918 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.419337469 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.41005392 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.5756417 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.199801746 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.341615795 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.146146165 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.133002394 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.666584996 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.158317742 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133760598 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.334753644 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.649175831 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.553364105 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.103646369 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.219763646 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.1316623 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.402606167 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.138738307 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.684464162 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.827109707 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.148448457 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.133565022 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.385066522 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.817631235 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.13380183 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.062014382 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141098672 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.345552757 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.336566786 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.404648188 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.432509247 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.583530577 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.059708154 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.138343905 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.158776036 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.37721924 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.133245556 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.168713637 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.580664164 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.251419059 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.563094651 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.419851501 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.608570847 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.774607224 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.400471252 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.20185324 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.145891425 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.790170347 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.275067021 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.067659906 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.252278784 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.059322141 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.867054336 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.426620166 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.152787626 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.40622174 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.118453217 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.474978567 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.434456407 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.493434033 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.189356307 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.163507451 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.135715531 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.184089325 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.134409431 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.3531688 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.252274324 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.141222636 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.699652095 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.176657303 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.181085112 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.140482221 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.688744102 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.156897666 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138902973 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.829086536 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.160307282 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.255157922 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.208640783 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.927859303 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.659394791 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.16401865 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.089054019 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.787688785 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.405138838 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.19572386 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.58827167 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.175022968 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.539936252 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.136947585 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.349883891 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.140145678 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.735666619 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.185231988 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.405911556 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.100082233 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.350046172 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.337124324 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.163269915 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.143778365 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.062870414 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.243935122 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.018357929 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.122061149 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.140962353 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.819457777 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.606176761 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.364881636 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.64966042 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.960405471 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.140331062 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.579310905 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.544405875 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.785353596 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173803838 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139715984 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.550932289 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.278861533 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.539365875 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.416629521 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.146886352 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.1637963 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.350724265 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264153187 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.057745099 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.632110087 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.722504237 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.839668761 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.149573539 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.341490309 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.562286541 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.462980865 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.176378758 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.211945838 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.543302482 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.410815605 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.210993855 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.065587591 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.139164742 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.534587269 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.538742212 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.236386537 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.380982627 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.451926353 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.806454451 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.649864339 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.599882561 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.605292344 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.594756479 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.552294511 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.352794934 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.508997586 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.463162603 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.029112149 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.553497578 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.354440165 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.229504937 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.418756909 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.010910045 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.850606098 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.383178435 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.14680136 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.069757242 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.347989959 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.145367815 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.667407533 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.66435207 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.388869549 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.496040567 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.616258891 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.679411883 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.36128343 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.168325447 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.106404391 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.165549974 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.161981829 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.142354629 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.634008236 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.434357782 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.155304114 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086245203 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.815236003 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.069210214 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.355786325 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.351756911 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.179198162 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.698912287 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.491785375 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.251082213 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.437313234 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.419698495 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.180154092 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068805062 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.932656166 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.090835189 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.254016468 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.569443999 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.159087062 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.146056753 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.347054181 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.07121329 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.187715648 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.147314192 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.341963207 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.726544803 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.416685484 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.272300436 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.390443892 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.442818784 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.07401546 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.178449069 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.417347429 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.071133256 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.799031683 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.844548121 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.184979437 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215327781 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.144622363 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.147151159 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.416578191 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.562577987 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.250020777 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.764645904 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.178857909 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.168186135 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.559169295 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.242483456 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.145962185 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.14950853 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.698936454 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.379367965 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.144875516 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.119743763 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.357552458 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.220632337 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.34121771 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.220951503 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.659925928 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.150618265 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.086064624 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.248530295 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.093881072 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.145573008 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.903514103 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.208207935 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.146592539 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.420134559 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.771939087 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.349235903 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.541594402 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.020847497 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.363918369 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.190454089 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.150220976 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.146133279 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.53498927 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.45602262 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.146250224 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.418495241 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.19771592 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.151841221 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.808442636 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.11568784 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.147320709 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.876074052 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.03751362 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.880604977 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.541177669 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.15867676 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.178442077 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.150902299 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.060010594 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.136953232 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.316385815 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.168164786 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.15644858 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.521836044 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.552860547 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.245434021 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.153917221 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.148947707 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.147123813 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.360707607 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.662549871 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129639198 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.855540211 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.352125923 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.152103094 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.640659259 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.605300668 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.444499062 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.189707727 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.362157787 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.392744486 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.689387125 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.374395028 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.126839765 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.376844527 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.149617073 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.420943116 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.422989583 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.149552749 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.404515569 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.654915196 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.435464593 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.501314554 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.47107779 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.220928613 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.370921893 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.103306512 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.155609001 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.15383074 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.42042576 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.209379459 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.149715282 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.159198828 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.705443398 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.890583257 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.624257586 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.306659771 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.583166136 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.000270373 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.907599661 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.151892298 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.07637094 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.150237485 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.176921325 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.153836045 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.076467772 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.95006528 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.875879368 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.365042648 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.461638155 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.078498224 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.354563275 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.75037082 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.07719291 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.120151795 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.151390025 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.40818341 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.07969608 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.154420966 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.105783977 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.526553418 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.906240333 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.4216887 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.152179731 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.101211742 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.157502059 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.153368411 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.152439982 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.237125326 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.152896122 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.269272675 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.422511159 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.639183916 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.26533551 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.791256059 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.961705692 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.091310795 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195407692 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.766788453 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.722723834 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.536972373 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.289778585 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.966377617 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.099448988 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.156144738 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171121893 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.391894468 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.158425655 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.155641857 seconds)
  done (took 2246.346508467 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.190533961 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.265085289 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.240173113 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.173855871 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.247005805 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.331410271 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.186951763 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.247299475 seconds)
  done (took 59.957652332 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.151790244 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.158570369 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.16329547 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.155308305 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.154532895 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.158360847 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.345473588 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.185897673 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.155791962 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.158840906 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.155699131 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.157788726 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.154933205 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.154617158 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.160132268 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.475747828 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.176876182 seconds)
  done (took 81.344335616 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.211066822 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.489485675 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.161024715 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.85407595 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.179980479 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.565633721 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.154656042 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.150235498 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.281904678 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.449616912 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.160596316 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.163958864 seconds)
  done (took 94.403707187 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.147472312 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.148353397 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.145805079 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.145654403 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.145439703 seconds)
  done (took 12.802318217 seconds)
done (took 2799.407127968 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.391959458 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.239954759 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.219462338 seconds)
  done (took 6.527164625 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.288324981 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.337641486 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.44808006 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.471076657 seconds)
  done (took 11.618110708 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.429541328 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.508062816 seconds)
  done (took 7.004953655 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.556136762 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.15885295 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.540365951 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.132683386 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.144274952 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.144179946 seconds)
  done (took 23.472994154 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.144240273 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.14341428 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.143634137 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.142992143 seconds)
  done (took 10.640416629 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.140990748 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.922834212 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.131355073 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.154625882 seconds)
  done (took 22.41654396 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.349881285 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.196074493 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.913771372 seconds)
  done (took 10.526875995 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.76764858 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.590516412 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.749910112 seconds)
  done (took 10.175636632 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.287051697 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.129302605 seconds)
  done (took 8.482902248 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.286442231 seconds)
  done (took 4.353439764 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.958560099 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.456900199 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.62177227 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.67706018 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.759915328 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.378362641 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.498534022 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.440618184 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.544253538 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.572253304 seconds)
  done (took 27.975389941 seconds)
done (took 159.910818488 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.612573376 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.186291868 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.372268902 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.544495005 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.406315527 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.371724249 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.457600764 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.534159256 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.22744805 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.207515164 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.545792043 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.403298023 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.408832417 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.192436233 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.412634488 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.185513664 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.402606034 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.636278485 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.222501374 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.46798528 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.462453272 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.18617275 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.386907109 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.206760845 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.407132895 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.325189159 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.808507887 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.190015455 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.37205358 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.825514359 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.325330114 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.615620427 seconds)
  done (took 178.99292246 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.162538167 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.162545237 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.164640686 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.162356106 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.417498667 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.163749067 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.164919637 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.163382671 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.47692322 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.46394747 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.163958735 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.404680575 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.164152754 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.163656474 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.164582508 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.163788323 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.582390505 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.164682733 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.163241759 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.163442269 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.163935787 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.284580064 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.163612858 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.315808892 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.572180078 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.165252391 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.16418873 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.164449273 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.165223716 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.164830721 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.164543689 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.165237157 seconds)
  done (took 217.541046703 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.164660262 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.166112627 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.164205456 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.165818905 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.166157993 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.1654741 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.167484364 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.165194745 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.053771799 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.048614419 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.165690266 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.165932715 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.168819153 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.165758976 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.168162292 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.165410002 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.165024067 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.165504667 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.160648123 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.166120333 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.166610266 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.860299228 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.162914898 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.882464142 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.166159622 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.167010365 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.166147017 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.165899098 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.165873294 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.166153159 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.167376659 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.166695284 seconds)
  done (took 230.576806917 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.404613907 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.16643574 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.168786707 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.178662082 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.168138472 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.166513693 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.174679757 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.418140966 seconds)
  done (took 21.934491047 seconds)
done (took 651.139267466 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.555958321 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.909596912 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.302431925 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.192987308 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.44101392 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.236093888 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.185530171 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.246626802 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.834799578 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.25587205 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.583742044 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.196747135 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.886318142 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.218105707 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.302518871 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.246918601 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.5348674 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.796086009 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.328034598 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.898977997 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.39778524 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.118753217 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.270132061 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.879920431 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.593956793 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.133980735 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.20420458 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.541578274 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.193893507 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.422434507 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.84450814 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.439232453 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.207929833 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.190945502 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.241554602 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.219186184 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.379203006 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.202683615 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.301175277 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.912029593 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.865733186 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.713016867 seconds)
  done (took 112.516088991 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.172102445 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.175438873 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.175927609 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.17463797 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.18367462 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.174753736 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.174796957 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.175087271 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.174125695 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.175083394 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.176234038 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.184727597 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.175029288 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.184243551 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.176506735 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.17676149 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.176647265 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.184279993 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.175141505 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.176771383 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.176742017 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.175640186 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.172329005 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.177008915 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.175672537 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.176306284 seconds)
  done (took 58.695519124 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.171400227 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.323952334 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.453123509 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.20656425 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.173459723 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.175939708 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.201077253 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.18161823 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.174479663 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.174503355 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.265490921 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.178049154 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.185148639 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.448893021 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.20491813 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.173349619 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.172673501 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.173610584 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.333442269 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.188887367 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.204843306 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.181295714 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.206252357 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.1892133 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.17535233 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.17417045 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.176682797 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.579193555 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.187822096 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.268613811 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.233217381 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.210811413 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.520746849 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.463305016 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.245664667 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.181035793 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.174161074 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.313490442 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.187562677 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.174438297 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.203844416 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.183350082 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.452852135 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.689040325 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.190656271 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.17461262 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.572335737 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.326581424 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.22573507 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.18891875 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.461606519 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.206480833 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.175102093 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.176136093 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.212285163 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.188129445 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.175771442 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.420472507 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.192156393 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.205985049 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.183456424 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.176235974 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.339902413 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.185536626 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.330754157 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.186254192 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.182011581 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.177292285 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.455519912 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.20769714 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.68467133 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.191715752 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.175312587 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.270120962 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.335781904 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.601502528 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.19276092 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.34203559 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.537839761 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.215955122 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.188137298 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.562078727 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.218919516 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.188347366 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.176679512 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.176625654 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.176376091 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.219572319 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.204010127 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.604207237 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.686501136 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.440958649 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.218513376 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.190214606 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.177616089 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.418480395 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.190045363 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.177095661 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.451151441 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.714798083 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.193388776 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.183550506 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.665778016 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.190397446 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.205983061 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.188568931 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.469187698 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.209085875 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.219654261 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.178030258 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.184394418 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.180960862 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.20937223 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.188821961 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.178520257 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.656823614 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.330534768 seconds)
  done (took 268.312551786 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.181518215 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.178334973 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.177499249 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.177550215 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.176602334 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.177541 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.177384148 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.177794907 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.178454757 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.177167278 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.177068138 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.178984673 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.180476638 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.177764237 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.205446872 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.158940989 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.668190263 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.179512536 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.178338485 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.181217393 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.753633114 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.18465848 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.178339205 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.181055031 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.177792692 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.177183259 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.179246438 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.212204991 seconds)
  done (took 176.215633845 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.179631874 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.235825978 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.192882816 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.228207884 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.194559344 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.179501535 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.204843821 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.195670192 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.186981506 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.180247601 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.1795152 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.178866267 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.1887946 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.264780704 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.211004646 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.214999122 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.282417667 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.189401605 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.18006339 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.18071474 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.228936276 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.190789839 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.212485696 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.244237682 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.194002893 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.237135223 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.196155067 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.181337851 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.181047252 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.297667193 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.200817224 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.214093459 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.218195545 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.18879313 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.301422936 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.293915945 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.288114985 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.216388239 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.185579287 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.182122509 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.182152373 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.183096446 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.238223955 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.195930855 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.184139877 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.299611523 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.202640908 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.182784297 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.206215105 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.182059336 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.195621688 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.200787232 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.221045416 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.309077958 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.231433995 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.209216891 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.207877131 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.201014334 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.18432127 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.281103942 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.191826112 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.298887816 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.204986818 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.184524453 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.18435649 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.187323888 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.232376746 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.222248304 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.28653049 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.19306762 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.281045915 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.240520943 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.19813056 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.1836178 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.18428722 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.240321609 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.295434115 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.240822353 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.245800693 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.22086888 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.194624902 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.183567351 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.185969573 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.212510619 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.193014384 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.299793562 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.300622297 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.192762801 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.183928404 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.185122575 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.185010529 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.209514984 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.249580959 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.226156484 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.292367157 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.224957832 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.225042109 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.193640221 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.199365995 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.191025174 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.219927551 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.193406353 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.197776122 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.522359747 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.224237827 seconds)
  done (took 235.099148812 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.543852857 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.23224983 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.256531512 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.46657494 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.54266562 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.063781367 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.225123091 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.235208391 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.24474988 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.37145189 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.296463248 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.279224878 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.225473922 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.209272806 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.229390868 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.246217889 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.267702022 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.535836944 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.334779938 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.738984326 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.226473068 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.508298453 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.529114347 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.574817915 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.275673414 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.63625217 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.835076914 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.327443871 seconds)
  done (took 71.568929955 seconds)
done (took 924.497618402 seconds)
SAVING RESULT...
DONE!
