cset: moving following pidspec: 8868
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.988640264 seconds)
loading group "shootout"... done (took 1.118480482 seconds)
loading group "string"... done (took 0.674451418 seconds)
loading group "linalg"... done (took 8.642105602 seconds)
loading group "parallel"... done (took 0.166125119 seconds)
loading group "find"... done (took 3.076151564 seconds)
loading group "tuple"... done (took 2.228787403 seconds)
loading group "union"... done (took 15.09053455 seconds)
loading group "dates"... done (took 1.491873016 seconds)
loading group "micro"... done (took 0.221857375 seconds)
loading group "simd"... done (took 4.83793044 seconds)
loading group "io"... done (took 1.086076226 seconds)
loading group "random"... done (took 9.638435908 seconds)
loading group "problem"... done (took 1.529904039 seconds)
loading group "array"... done (took 25.376548105 seconds)
loading group "misc"... done (took 1.901166644 seconds)
loading group "scalar"... done (took 43.853251484 seconds)
loading group "sort"... done (took 3.352176369 seconds)
loading group "sparse"... done (took 12.869723622 seconds)
loading group "collection"... done (took 18.690914373 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.532229625 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.127106322 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.13108937 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.125245973 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.190688433 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.123646478 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.134376995 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.088098234 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.865124879 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138823415 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116345733 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.442372944 seconds)
done (took 5.426033585 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166811146 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.092258888 seconds)
    (2/2) benchmarking "String"...
    done (took 0.08310223 seconds)
  done (took 1.360962296 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071910577 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.060820035 seconds)
    (3/3) benchmarking "different"...
    done (took 0.0681763 seconds)
  done (took 1.390411783 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065815347 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135893108 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067935687 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068366241 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068053783 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067920983 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.06797825 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.071314841 seconds)
  done (took 1.741810341 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072700878 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068201312 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066385997 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068120994 seconds)
  done (took 1.468572112 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065782787 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122383432 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06547781 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066317302 seconds)
  done (took 1.510243631 seconds)
done (took 8.909788841 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140748043 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.820391529 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.768149247 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126828102 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.252633477 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450435302 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.12494461 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.18649523 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.092297464 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.076942265 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.125371622 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080112918 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.610140108 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.406314681 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072453947 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.177794007 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.657955941 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087317972 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132954557 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.445244998 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074064989 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087839207 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085857831 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071620437 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.319602093 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154740303 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.658845267 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.181517665 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070374956 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096632624 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070798935 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078874253 seconds)
  done (took 11.01255172 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093788305 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090674936 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068945337 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124241656 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094187102 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070425496 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.076422403 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069028953 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089409513 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124791951 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090361627 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099238207 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066970525 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069350465 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074880854 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.205993491 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082527072 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083491131 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069711815 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083207427 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108135364 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.081209778 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080437904 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080159377 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132651702 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.172993355 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.09698249 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098649724 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066154376 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079175473 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11704837 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128391489 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069137165 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.070240494 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122082903 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097731233 seconds)
  done (took 4.670108595 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.898041361 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096705382 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.084742524 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076706774 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109323005 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.117129208 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.125406931 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.125868707 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100358334 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069173894 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.154125567 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.653675417 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.151772403 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071381958 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120419059 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.362415999 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.062927269 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070603706 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069198563 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.072547131 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072116436 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.114364264 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067808818 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.178817805 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.582445127 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071077882 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070781073 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097528185 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.06791129 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140800761 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093785018 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071293785 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.549386806 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.070328345 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065717072 seconds)
    (35/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.114673994 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090050575 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094508552 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.176302354 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070206672 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.08211209 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068800639 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.112167858 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082694312 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.494809416 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.072260883 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.575784629 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.228721647 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.075475329 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07485538 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104263695 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065726579 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069707284 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.923193779 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.125573056 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068502996 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.277596258 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070384917 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070716944 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070995753 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102131942 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069020373 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070456383 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073781802 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097771887 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.874149427 seconds)
    (66/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.067510088 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088451335 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098428729 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069106184 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.492244009 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076134487 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071692264 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070033421 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.084029159 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.112943452 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068473098 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067722426 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110129052 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.091885971 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090815135 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070919378 seconds)
    (82/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065986414 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068558129 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068281496 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.333085549 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.155404199 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066704024 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067272979 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.477555758 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063764526 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066148189 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068006691 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089752464 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066585607 seconds)
    (95/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.064305841 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064907294 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065860314 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100729304 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.183804558 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.712125406 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068963627 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.473772163 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071561604 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.106268047 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.124322843 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070383675 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.101740994 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.070474556 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066801676 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075549515 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067121156 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066568357 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070787344 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067333775 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068334454 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071136075 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070588115 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069633907 seconds)
  done (took 23.355011545 seconds)
done (took 41.131255621 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312637842 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.081522186 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.081155493 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080939522 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.081233933 seconds)
  done (took 1.876552012 seconds)
done (took 3.206025721 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.136217272 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.097261339 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066084751 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103529344 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070450397 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104319799 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111274187 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.106893518 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070636121 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070155515 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070662746 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105451464 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107538968 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070574553 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100831242 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106544143 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.071002145 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.065815836 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.071148844 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.070898656 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.073631758 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066452094 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070476028 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070905426 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101791178 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070656654 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066654083 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101711186 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.070668297 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.101304233 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070998277 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070624676 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.071041242 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.102418429 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.071238076 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.102135869 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066984389 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.070928878 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.071045282 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.07079447 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.071419832 seconds)
  done (took 4.695278995 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071422388 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082513843 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085608788 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063383309 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073448279 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084444034 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063909459 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083670934 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090534585 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084380162 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084571846 seconds)
  done (took 2.152160364 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070233882 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083282148 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085375209 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064038428 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075975689 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.088595509 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063846426 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.0852587 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088211717 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085490282 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.086224389 seconds)
  done (took 2.141791149 seconds)
done (took 10.245894547 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096638826 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.067431731 seconds)
  done (took 1.413591244 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.225222989 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.625598584 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.279423381 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093199126 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072687217 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086339955 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.200166861 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067092839 seconds)
  done (took 8.090669685 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.100531457 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070446105 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.073596149 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068041762 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067830962 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068084901 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069892288 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069470771 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070352762 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071010212 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070809876 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069951534 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069641113 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071341702 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070597712 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070476768 seconds)
  done (took 2.51008593 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103258211 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069433983 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.100867519 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062194754 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072019815 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06281692 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072466982 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.075407303 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072029251 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.07289245 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074324179 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.073344073 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073274435 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073881764 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074511874 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074812992 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075007779 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072307234 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074494122 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075488325 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.074273213 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075242279 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075466228 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073407895 seconds)
  done (took 3.18482722 seconds)
done (took 16.465200575 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175534822 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075405877 seconds)
  done (took 1.511560796 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067870416 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069080901 seconds)
  done (took 1.414277004 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072908264 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.06167319 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078818012 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.071397611 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.06340394 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063142985 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079614431 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063306617 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062259789 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063933854 seconds)
  done (took 1.957454788 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063060821 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068973932 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067175102 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066088501 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069178287 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064707632 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067958043 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065036042 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071590801 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064240364 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068025121 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08597926 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067693462 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.085850895 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067440231 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.06777136 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069457534 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06699644 seconds)
  done (took 2.527347625 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062051799 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061912361 seconds)
  done (took 1.408019331 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064713728 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062754486 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064605197 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064034993 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061864072 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061612169 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062412851 seconds)
  done (took 1.719810989 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.423720731 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.125005364 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.3482678 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.071357802 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.078974034 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259203057 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065204373 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.06995288 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070546075 seconds)
  done (took 2.834137716 seconds)
done (took 14.66187596 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.081965806 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.1818866 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087847895 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.406009764 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091838692 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067485228 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113232653 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.178088663 seconds)
done (took 2.507972972 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214681183 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.180819781 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.378176427 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.127399612 seconds)
  done (took 2.975836154 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.333709183 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079803556 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078629385 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.069121106 seconds)
  done (took 1.85984232 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065405045 seconds)
    (2/2) benchmarking "read"...
    done (took 0.07140797 seconds)
  done (took 1.428805896 seconds)
done (took 7.779609056 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072325473 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.097694977 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.063069541 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.066406071 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.066180664 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.06597961 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065273075 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066057186 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.074554109 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063871313 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.066020873 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.066104425 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066267874 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065708914 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065442636 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066227644 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.064772825 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065941775 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065910593 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.06352471 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065772726 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066215859 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065025112 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066205963 seconds)
  done (took 2.940395085 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079706913 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065713735 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067155439 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067607111 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069514323 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068750007 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.06883154 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.06770949 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068567435 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066859178 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068806632 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.068739768 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066988466 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.06946403 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067144361 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069299232 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069099855 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067741506 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067214489 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.06969863 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068773791 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067526308 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.0690758 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069616913 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069038463 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069430804 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067932242 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.068034746 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069101269 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069216691 seconds)
  done (took 3.370051102 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067047981 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060181829 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061099937 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070759583 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061386392 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062444845 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062325393 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061643024 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062002773 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063041172 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062146487 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061646114 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062203533 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061537689 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.062004908 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062327684 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066739877 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081252462 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062351833 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062362915 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066125858 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062095421 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062369739 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061849838 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.06284185 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062409759 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.06224199 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062833029 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061667368 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062430325 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061832563 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.06606681 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067155538 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062023068 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071845106 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066820234 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061912556 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066267909 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062683301 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06158119 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061558619 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061666521 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.062203847 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061613203 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072038173 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.06228171 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063159529 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.066256009 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060645695 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061391207 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061825919 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06295211 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.066769239 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063026685 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061674543 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062615083 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061279349 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062410667 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061692749 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061304175 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061285905 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065712876 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062125017 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062138856 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081761668 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063099366 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071942093 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061466629 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061371125 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064197872 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060687756 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078622187 seconds)
  done (took 5.908564469 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071276399 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072386438 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079779029 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070588504 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067138582 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063214758 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06728205 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063877804 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073045643 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066932385 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063676963 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066904835 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072846135 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067667417 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064163732 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072720226 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067477947 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06642559 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063440276 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067279465 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064743133 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066851658 seconds)
  done (took 2.818863838 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136040125 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066902502 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108413278 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076928195 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070338289 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.076883519 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068260275 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068159937 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068256635 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068507459 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068639932 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067889069 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070468592 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068823857 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068493832 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068639199 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06847655 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068468556 seconds)
  done (took 2.667798652 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077470122 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066111755 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090276613 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068061437 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067643418 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068231314 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071426268 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071667313 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067478966 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067956137 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072322785 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068160783 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067572835 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068154492 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06797333 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068075333 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067321158 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067749622 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072027105 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071647483 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071516663 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071782071 seconds)
  done (took 2.864613688 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07727137 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065583887 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080842766 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066187268 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061837817 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062356216 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067729442 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067375523 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067740542 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066427345 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066988651 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062080609 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068338184 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067407602 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068461105 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066717833 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066896501 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067147677 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066772582 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062586718 seconds)
  done (took 2.65988144 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086708892 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063548734 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064233175 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084376361 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064790485 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.065063596 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084774036 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065368993 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064758465 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086842585 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.066113134 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065284984 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.085389578 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.085067485 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065349274 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084663679 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.085177659 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084833022 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06592315 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066144355 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086844646 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065500223 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084999965 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06496972 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065409935 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065000115 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065097345 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.084773722 seconds)
  done (took 3.380857037 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064614587 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065300132 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065263921 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.06498493 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065796756 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.066208827 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065942065 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066026872 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.069005259 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065975805 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065682 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065670011 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065927455 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065909903 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065889951 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065275844 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065429909 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066128175 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066014665 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066270299 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065769463 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066203659 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065845773 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066038748 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06598766 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065675039 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065645038 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066539746 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06500469 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065908592 seconds)
  done (took 3.295488384 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072859354 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071661957 seconds)
  done (took 1.464231102 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062317185 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078182571 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060798062 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073210712 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068384492 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064849842 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07093004 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071015304 seconds)
  done (took 1.864407708 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067160672 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090408101 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062256931 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063563933 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.06689463 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.134247873 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076785446 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075718204 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078096517 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066406157 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064472116 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.075991488 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063567761 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077262957 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065398078 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073639425 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071618942 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081456761 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07677022 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062064962 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076353808 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064742241 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062397113 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064649538 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06394811 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071171192 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079675625 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076586688 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072287607 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061824648 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082558196 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062637124 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064209101 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072353041 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067054062 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063001082 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100945778 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063379618 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068161999 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062355581 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075220967 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084197106 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077656217 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081191642 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064764798 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064873585 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062302595 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065326834 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065615965 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070557837 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060947441 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069168949 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060764101 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062330565 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072242512 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063389561 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06808891 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072146509 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076615414 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073459601 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071768489 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.0787332 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.072232406 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070918081 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064070569 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.083224111 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064832979 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076528579 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078209214 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063908736 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076746538 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062259633 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.062070925 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062497276 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097506591 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064463154 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064020981 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06310461 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062382131 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064192543 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072300227 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068116008 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069846387 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066219555 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079061001 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071988093 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063292927 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069973163 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081231452 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06600173 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062650049 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079650657 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065788155 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061935233 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080380349 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072170794 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063844457 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063413596 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065522936 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075730275 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063641813 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060666632 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071022976 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064003854 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064508085 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066929835 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070073707 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061907845 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071951127 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066194635 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063822042 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060825626 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066192151 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062678267 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060597233 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071750625 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062075551 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075949054 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068282584 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076426141 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076582633 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072097732 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07732605 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061627465 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060351648 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079350886 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.073807193 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.196709402 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081381876 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.064316795 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075412549 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063844542 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065467957 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073320879 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062637861 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066185391 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063250103 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068034032 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064014181 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065282369 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068295978 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071865804 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075351685 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064385811 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.072150676 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.064006027 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.078684677 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072938815 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.06730651 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066310782 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063480992 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075227309 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069332634 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072218042 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062828645 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063653797 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062870104 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073984213 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072203598 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064526024 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070577367 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066863259 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.064020103 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063614984 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064072606 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066148123 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066505627 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063791725 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071032012 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072621017 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07718213 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070656179 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071764896 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062214043 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.06277408 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064757184 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062546544 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067213959 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.07251841 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078875535 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074975976 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084002576 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063779419 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073008003 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064864083 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.080324403 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076515683 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064394407 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068016815 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061837759 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064684399 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072512133 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074622511 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.077277002 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078173108 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06745 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067533107 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062444895 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078353189 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063323758 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071281845 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072711887 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067703026 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063055099 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064683777 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072246788 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067465946 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062881195 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079149948 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069351829 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062857229 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077697922 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063103337 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073912749 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062775936 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066421193 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.06830558 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.065176133 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072624568 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078388995 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.0616864 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063390583 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078372634 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.064870163 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064124325 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071127889 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077982422 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067993794 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070602946 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073786894 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.07292255 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066790176 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071963544 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063482276 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071721997 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064939634 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073840941 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062018016 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080044675 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061130833 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.07696321 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062356947 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073001052 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062761296 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071352408 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062700255 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079130994 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.064078475 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062989434 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073875609 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060691646 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071311225 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061119909 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066650447 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06841565 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071710507 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063746798 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071924478 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.202330511 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.073112905 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.069291301 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.07343057 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073627564 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068522713 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063919708 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.072254533 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.075252278 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.072039581 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064553179 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.065031088 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.064593195 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.073272249 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.065110751 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064988334 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071590756 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.0677334 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069148372 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065093399 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065003757 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.065000502 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071363535 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072949723 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080986311 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072019341 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070855925 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.075764937 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062559932 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07935942 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063056948 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.070461802 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061741579 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069254665 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072177008 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.0635458 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082700171 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064399096 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071755071 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07599211 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072486953 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.068392153 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081114376 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066693149 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.072019322 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071873917 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.06758117 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069986526 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.06519436 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071721366 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073180123 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073793178 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064395908 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070697598 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072300537 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064579674 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070791775 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.0644143 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071782603 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064822079 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061568424 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067693986 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074907235 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067826133 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.06805542 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063381609 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061923752 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063719068 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070685594 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.06824473 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072008636 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079051787 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062034605 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064045364 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062454458 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066069165 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081143264 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072939989 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071140587 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067963857 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062142592 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064361374 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065509858 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063063214 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.067153288 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.061971453 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.0621723 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073533161 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064784523 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067281351 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063195765 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064437142 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072561106 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068122982 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063771969 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069577637 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063130895 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067871774 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.06238202 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064765791 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067231992 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062362037 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066751638 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.073527239 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079704684 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068978129 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071930436 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064160935 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070428259 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077781603 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069832271 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063624326 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071962245 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061617803 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080774086 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071428252 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070807453 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071468406 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063102002 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078362897 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066278796 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072018693 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077403458 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062786705 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067872681 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061127383 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077243801 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066016688 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061139327 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069631297 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070167501 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067714203 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07365682 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.205985883 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070867709 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068628838 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.068309821 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065802513 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065926322 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.07319864 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080085078 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064714334 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.068017651 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071573603 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071957504 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06772549 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075622382 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071317754 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064524999 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064751687 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.06680853 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064214027 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075351145 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063632888 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067336755 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068241414 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.063078436 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070344485 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080493956 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.07295336 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072687663 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.06301013 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062019192 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081574017 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066512999 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066761628 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071191071 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.07374901 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075617961 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.073075209 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080231091 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063505612 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069255534 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075848953 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064630243 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063684488 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066903425 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.065190424 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072285394 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073053684 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070769224 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065246099 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069732011 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076412893 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064366479 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067404747 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.071196386 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063673503 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073486492 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071162293 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072034536 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.065297302 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062881936 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.0665446 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071630106 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.07063464 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071894706 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064087821 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070251874 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076796878 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070094253 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064943243 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061139018 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066229882 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072117284 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068177381 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062760467 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067896214 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066717646 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070575956 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072861544 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067813572 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062883771 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.081148507 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071035975 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072658872 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.064978343 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065044263 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063722573 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062985348 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074194297 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062824606 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064709283 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067836231 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065016314 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080609051 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071506801 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079104818 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063967914 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067964176 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062703211 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073168927 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067678589 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063776839 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073374413 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062591292 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078601436 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074797365 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068249611 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.06228348 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.067509668 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.091954714 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077808784 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07256789 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072390587 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066470681 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072655334 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064895152 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073439497 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061920727 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061157211 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072287269 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070781064 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07474726 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061615988 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071946344 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.064210506 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070208291 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069323701 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063833129 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063422409 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063043725 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070960522 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066421198 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070870407 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.208354111 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079561799 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063656426 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.074175093 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071616885 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.07475468 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07812038 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076430524 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071282631 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063997725 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070666941 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071082838 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064741884 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.067898273 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066753769 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085274732 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065103749 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064974975 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077392057 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.069942583 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.063017136 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070320874 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.068034041 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073251942 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064577435 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073917129 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06724972 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064600255 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067991748 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067494625 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062437441 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.06266867 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062727038 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073494368 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.068114506 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063873385 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081917246 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064298224 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071822925 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075182041 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070413664 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065310664 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.06216971 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063728342 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.076416764 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079141586 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.067314309 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071623231 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064574478 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072629984 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062271345 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072364275 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071305056 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07172614 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062780468 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063476562 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078086122 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078537936 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067796438 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072369364 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072170357 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064661917 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.084536802 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072377588 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06457364 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.07404331 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065357305 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061873835 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062352137 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.06488415 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074750901 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.06297809 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.066087602 seconds)
  done (took 43.211496229 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099436767 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062136371 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062958482 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062509118 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073778625 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063814562 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063193319 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.067005159 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063843419 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06548746 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062629415 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062820461 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07437468 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076063591 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073523696 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067036148 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063546221 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063689037 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06282955 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064328127 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073029902 seconds)
  done (took 2.870581976 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065056532 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065796542 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064998775 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065626173 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06521945 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063223051 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067114473 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062855675 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067710749 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063386281 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067548339 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062952413 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063517885 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063201469 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063243234 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064918153 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067337249 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067214936 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.063190331 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066936957 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064413946 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067503968 seconds)
  done (took 2.849232193 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062898304 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062086645 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071657601 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061917405 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062090469 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066352901 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061790988 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066843973 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066838599 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066928381 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071782357 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063565433 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061911984 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068338771 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062044644 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063262723 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106949565 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063741121 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063680544 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061833732 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065602385 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071522914 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062462901 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062395701 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066926428 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065915058 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062515224 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065061598 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063328154 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066694352 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063954363 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062150595 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071332441 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070989442 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066621238 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.067032125 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064157679 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06370738 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062574345 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062986545 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070874657 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064250775 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.063350168 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063821653 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071656516 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062406758 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061964219 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071639979 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.06208645 seconds)
  done (took 4.655290999 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071961203 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.116277844 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068372885 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.096162703 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.075520267 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069119325 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068348875 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097363899 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063807354 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064998557 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076536426 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.077141506 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065849174 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.067029114 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.070036319 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065794261 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066257086 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064415576 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068482412 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065063214 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068426399 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.0695852 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.076017623 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075776338 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06676821 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064656892 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065238027 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066959881 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.07572129 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068855807 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067136997 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067465806 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.078245222 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070400888 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064842557 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065219596 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.076808391 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065564128 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065272025 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063939254 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065129929 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.066735439 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070094408 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077179448 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066193749 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069584324 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064431809 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062092273 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.07398951 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063592619 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068032868 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075468094 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065963461 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065942347 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067730543 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076282521 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.06587779 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064483537 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06909941 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076361041 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063845688 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066411729 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077292317 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065243224 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.068877573 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077178633 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.07078753 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066570787 seconds)
  done (took 6.357612318 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070875092 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096246014 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07442837 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074517692 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073650947 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073591654 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073500125 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.07346554 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073824624 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073948597 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073797583 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.114884956 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069905885 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078364048 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074023092 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073529898 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073978615 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073811462 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.073386528 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073324017 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073423909 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073941946 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073453438 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.075164031 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07600351 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069334164 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.07314725 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072959184 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07459931 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073945603 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.07597377 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07325342 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073491552 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073939012 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.077243201 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073874378 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063955455 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07365435 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073920229 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073067547 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069564244 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074366244 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073617951 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.07008426 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073621088 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073117988 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074149028 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.07630785 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.08095024 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074294321 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073410055 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074084635 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07319886 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073860884 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073968402 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.0806156 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074051632 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074477537 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073479082 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074249778 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073850428 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080621633 seconds)
  done (took 6.10395085 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074275685 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067352299 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080425671 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061005007 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062863818 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.07238698 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062789511 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.06274722 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070132022 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.0699941 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072250135 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072939062 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074752485 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071273776 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072809681 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074314434 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072311303 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072768735 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.07014609 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072295851 seconds)
  done (took 2.864059752 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076243521 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080190012 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.06685849 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070304793 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067085078 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070440659 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065885804 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06749591 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067502439 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067459127 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073079941 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073164135 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068974008 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072325036 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073426833 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071993846 seconds)
  done (took 2.573458548 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064985148 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069182651 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068406137 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064288186 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065855958 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.063566965 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064147542 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062619362 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.065679238 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077045663 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063444514 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066344518 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.06434255 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062975319 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063245901 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.06653301 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.065287514 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063966848 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064221514 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068176082 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072244097 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.06507385 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.06694632 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.063843665 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.066538607 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.072193543 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065173313 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066617218 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063709654 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.066519523 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066144201 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070612007 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.066292095 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064534555 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063119755 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063805335 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064043355 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.070029836 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066482623 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064350552 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.063314924 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066219152 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064361942 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064608795 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.065455986 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066596568 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065496867 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069391938 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06368597 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.06620089 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064349959 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065567657 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06501222 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071289427 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066095961 seconds)
  done (took 5.074497857 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078415436 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067021204 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062927703 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06264898 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.068015994 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06849029 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067957502 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068312174 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068767721 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062215767 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068871429 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067970835 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069233468 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068143649 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068863213 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068199346 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062263516 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068366586 seconds)
  done (took 2.673869038 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.073071227 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066375126 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.071431202 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.06627909 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.066281079 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067445389 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062772093 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.06304434 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062934768 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068057805 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068112308 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.067006347 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062476718 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.067167838 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067759801 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067819749 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.066933118 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062916871 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067701143 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06276327 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067388555 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062718655 seconds)
  done (took 2.907488595 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088690468 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084924946 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.130313642 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082262205 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091168776 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073919661 seconds)
  done (took 2.001617988 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094070032 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104496549 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066149543 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066104002 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074868377 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071350505 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071023155 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070937091 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076406331 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075182711 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071347667 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076621173 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076901576 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072846758 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075895067 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076990222 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069097927 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069597754 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066348283 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077025262 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06948004 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075012778 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069079387 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068905254 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069458868 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072364523 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078167241 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073081181 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069589403 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074665092 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077193529 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069570231 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075382794 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072902768 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066579426 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074889176 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07093894 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079996038 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077165165 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072165925 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06839384 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075975488 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075157481 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070982494 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077105066 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069685353 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071239332 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069900957 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070078961 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07951329 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075534726 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0715057 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075352229 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077444136 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077618194 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079449058 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073509447 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071589645 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074992219 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073906058 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07138104 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076125517 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073050408 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075686195 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079876329 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071953967 seconds)
  done (took 6.342468106 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101264943 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066622607 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069457562 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073293833 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07093385 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069773949 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071510103 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070743275 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070801496 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068975529 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.108093767 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072239702 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073985401 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07338016 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072218507 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072302318 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071975286 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073920265 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069090152 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081813369 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071854648 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073833654 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073561978 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072503935 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077280836 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079138521 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070926538 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071716049 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07149451 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071604475 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073346374 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071844219 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073151452 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06873609 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073118605 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071626067 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071900933 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073258187 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071456684 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077098904 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073326332 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080280233 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071552578 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070246232 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073450548 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069625889 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069743799 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067302841 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069648218 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067842469 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074794842 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07357515 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073779217 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071556832 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069837722 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06965917 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069683286 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069904361 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069927138 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077654985 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071489851 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070569374 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079876079 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069405031 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069691828 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071218473 seconds)
  done (took 6.304632876 seconds)
done (took 131.321118443 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.217815203 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.189274289 seconds)
  done (took 1.846121622 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075093991 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166192059 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075651244 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075252676 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.110049976 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107845423 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.07703824 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073528941 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075598554 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.074941248 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.142237376 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076731944 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072749239 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072921738 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.074811812 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07449263 seconds)
  done (took 2.883562642 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108664272 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.186667533 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.085073733 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072486089 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.117944429 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.079433869 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.074823902 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078298481 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079601039 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.071394894 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107740386 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082198801 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073981475 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076909748 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072962047 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074403193 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075794748 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076757451 seconds)
  done (took 3.059220144 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098920736 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086883915 seconds)
  done (took 1.651904146 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156099976 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105288293 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145106405 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.330135369 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.13031702 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.130681629 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133429443 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.126293123 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.117621671 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.123746426 seconds)
  done (took 2.957892844 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106662962 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105498368 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.310061731 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.105883751 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.085295773 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.080310568 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.077947832 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082328202 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.077747547 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078804752 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.125339888 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077646691 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074515443 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127499469 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.102071028 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.10950546 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073642809 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.081111961 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.082335462 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.07307972 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.078688157 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.082645083 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.182645314 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.080371567 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.10370144 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.077778641 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.079806796 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.076716298 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.077058799 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.081383296 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.08206907 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.103145106 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.080998707 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08525719 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.080025681 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.098728938 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071999264 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099977745 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.07440451 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.074532334 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077531604 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082126512 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.073500112 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078406609 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.077957189 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.080058202 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.081396386 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071086512 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075613739 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.07513024 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073852685 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076895995 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.077442413 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.080175592 seconds)
  done (took 6.367655763 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.109128882 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106858908 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070817206 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.114344575 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106973414 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070820455 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.104937788 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100823597 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108845995 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069712317 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069478396 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069634142 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.080160292 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.07988489 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116725121 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108261311 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072513156 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.07062651 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108505818 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107037478 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070104134 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102829648 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100779313 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106048341 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069026739 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070293058 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068566653 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069293163 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07422069 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075774126 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068986688 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076048228 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081132833 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075681702 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068162005 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.0690023 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068499043 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075755252 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076644809 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076369489 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075256665 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068572205 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068859309 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069293068 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.0700893 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068561358 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075298514 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075649435 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075022966 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068813702 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069594542 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069985074 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.0713303 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077759609 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075669432 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07718414 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077334835 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071219692 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07125037 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072934864 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080379246 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.080004973 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.08005205 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072404374 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080029098 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.07166688 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080509075 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.083197876 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071346454 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071241204 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.0716229 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071237018 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071699391 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077469852 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077609625 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072101075 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071237663 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071010504 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07981721 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077664013 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071086065 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.07655357 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070814444 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070948675 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071539789 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071421542 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.076707494 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.077805591 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071989108 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070372229 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071157784 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071321705 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070340417 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.076904056 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.078057315 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.077564557 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.07528853 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069395856 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074557266 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074184656 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068520971 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073659557 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068318736 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068307891 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068036553 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073616788 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07283187 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075003078 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067656701 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067502547 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.072907892 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.212080026 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071293283 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07638822 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078634394 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076799711 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069627569 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078577518 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069773961 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077772083 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07066925 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077809892 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070004497 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075615683 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069530962 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068595938 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069297562 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075397594 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070110647 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069924006 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069894922 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069368086 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075946712 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078970318 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070228158 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075094969 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.076125061 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.07017081 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.0756935 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.0696288 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076348015 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069991984 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069782237 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068838495 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078157786 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069777551 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069472182 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069085867 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076971229 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069669148 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077974369 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075089697 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068839865 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078889387 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077241402 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075343014 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077422283 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07067542 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06978187 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069863984 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071993104 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077305388 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078763809 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072345599 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072148949 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.076834787 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.081153975 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069717966 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074658695 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075413581 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.077740561 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.073605887 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070347758 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.080394769 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.30905156 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.07483939 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075218978 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077502204 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069998307 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077272679 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077580757 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071196836 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085572078 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07167598 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081817625 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078515626 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077170251 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078738856 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079405116 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.080474457 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077603513 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079915906 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069010446 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068929726 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075298181 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06941279 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071554051 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077939851 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072164932 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070560211 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079955987 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069354216 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077777945 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.070432826 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.078471863 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06881811 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071257366 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082668521 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071652132 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070851257 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075216184 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.07110123 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.076881176 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080367115 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.07420679 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06820246 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069153212 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074976286 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076122262 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067594549 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067533769 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069053373 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075015125 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.075028573 seconds)
  done (took 18.82351707 seconds)
done (took 39.067439583 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.173875757 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116741799 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.212968247 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.200683201 seconds)
  done (took 2.276202795 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101954585 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066288954 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.08422905 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.093541651 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.067388097 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.079412704 seconds)
  done (took 2.005876478 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200545279 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.17602742 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.243161748 seconds)
  done (took 2.126424456 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.370248678 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.153790751 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.221053423 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.511045144 seconds)
  done (took 2.867322111 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.111353213 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.103038505 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.080727772 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.114619235 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.087992833 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.064466004 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.137372318 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.072885895 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.103726678 seconds)
  done (took 2.448059003 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.131581799 seconds)
done (took 13.395914496 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.234831798 seconds)
    (2/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.275249782 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.16071399 seconds)
    (4/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.226821394 seconds)
    (5/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.17369042 seconds)
    (6/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.220656502 seconds)
    (7/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.107734255 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.193340286 seconds)
    (9/341) benchmarking ("sort", Int8, false)...
    done (took 0.156137196 seconds)
    (10/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.073533232 seconds)
    (11/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.240624332 seconds)
    (12/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.096576758 seconds)
    (13/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.205499419 seconds)
    (14/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.155205306 seconds)
    (15/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.133062366 seconds)
    (16/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.116006948 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07894672 seconds)
    (18/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.166299164 seconds)
    (19/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.225771592 seconds)
    (20/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.181571608 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080187201 seconds)
    (22/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.223705983 seconds)
    (23/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.221772924 seconds)
    (24/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.244186654 seconds)
    (25/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.167743788 seconds)
    (26/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.09540447 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.081469815 seconds)
    (28/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.121861907 seconds)
    (29/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.081028625 seconds)
    (30/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.07728775 seconds)
    (31/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.082335964 seconds)
    (32/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.204523091 seconds)
    (33/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.246583727 seconds)
    (34/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.068924233 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.09472833 seconds)
    (36/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.092818455 seconds)
    (37/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.068380148 seconds)
    (38/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.175922782 seconds)
    (39/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.07696547 seconds)
    (40/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.068939234 seconds)
    (41/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.068306023 seconds)
    (42/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.094526746 seconds)
    (43/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.193352576 seconds)
    (44/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.068593315 seconds)
    (45/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.178292454 seconds)
    (46/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.183552081 seconds)
    (47/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.14663677 seconds)
    (48/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.147261777 seconds)
    (49/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.187103272 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.078580235 seconds)
    (51/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.075271563 seconds)
    (52/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.193578246 seconds)
    (53/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.083379645 seconds)
    (54/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.0749582 seconds)
    (55/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.146857869 seconds)
    (56/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.088659413 seconds)
    (57/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068592923 seconds)
    (58/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.075145298 seconds)
    (59/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.075244503 seconds)
    (60/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.079389323 seconds)
    (61/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.165401571 seconds)
    (62/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.236872251 seconds)
    (63/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.089563358 seconds)
    (64/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.077868115 seconds)
    (65/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.101831708 seconds)
    (66/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.139302191 seconds)
    (67/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.068706642 seconds)
    (68/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.07573256 seconds)
    (69/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.084629576 seconds)
    (70/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.06704682 seconds)
    (71/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.076580021 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.092734724 seconds)
    (73/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.07670218 seconds)
    (74/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.218855491 seconds)
    (75/341) benchmarking ("sort", Float32, false)...
    done (took 0.296437088 seconds)
    (76/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.17530602 seconds)
    (77/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.203242405 seconds)
    (78/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.085744599 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06896195 seconds)
    (80/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.070822293 seconds)
    (81/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.165425976 seconds)
    (82/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075812562 seconds)
    (83/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.154834342 seconds)
    (84/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.06681462 seconds)
    (85/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075173358 seconds)
    (86/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.19972435 seconds)
    (87/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.076305214 seconds)
    (88/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.188963757 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.130302699 seconds)
    (90/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.068760888 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.06904859 seconds)
    (92/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.206416416 seconds)
    (93/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.150895274 seconds)
    (94/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.208456573 seconds)
    (95/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.079795736 seconds)
    (96/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.145383286 seconds)
    (97/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.147522342 seconds)
    (98/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.15535214 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085884903 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.086010285 seconds)
    (101/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.197330958 seconds)
    (102/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.135844004 seconds)
    (103/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.077416228 seconds)
    (104/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.080848531 seconds)
    (105/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.155533904 seconds)
    (106/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.125511958 seconds)
    (107/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.072131108 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.068305083 seconds)
    (109/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.197239843 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094618249 seconds)
    (111/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.069077592 seconds)
    (112/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.069033425 seconds)
    (113/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.070424799 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.090992529 seconds)
    (115/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.148330039 seconds)
    (116/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.252907749 seconds)
    (117/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.069942764 seconds)
    (118/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075994267 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.092571182 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.147778469 seconds)
    (121/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.068754184 seconds)
    (122/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.141502623 seconds)
    (123/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.068734393 seconds)
    (124/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.074200723 seconds)
    (125/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.068571504 seconds)
    (126/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.089200659 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.091759379 seconds)
    (128/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.076460253 seconds)
    (129/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.152337751 seconds)
    (130/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.085677514 seconds)
    (131/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.078885974 seconds)
    (132/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.072594567 seconds)
    (133/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070552678 seconds)
    (134/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068138266 seconds)
    (135/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.068771996 seconds)
    (136/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.098276737 seconds)
    (137/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.095818344 seconds)
    (138/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.076792919 seconds)
    (139/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.0770632 seconds)
    (140/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.126155598 seconds)
    (141/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.077171844 seconds)
    (142/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.07043616 seconds)
    (143/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.186014188 seconds)
    (144/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.141247225 seconds)
    (145/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095816528 seconds)
    (146/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.077277157 seconds)
    (147/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.076338085 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.078248309 seconds)
    (149/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.069199638 seconds)
    (150/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.068346138 seconds)
    (151/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.076321536 seconds)
    (152/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071335265 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.078332828 seconds)
    (154/341) benchmarking ("sort", Bool, false)...
    done (took 0.146391318 seconds)
    (155/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.067986215 seconds)
    (156/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.07608275 seconds)
    (157/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.077502189 seconds)
    (158/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.069245474 seconds)
    (159/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.145397573 seconds)
    (160/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.068157482 seconds)
    (161/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.143024673 seconds)
    (162/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.198248292 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.150252225 seconds)
    (164/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075447303 seconds)
    (165/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.077803787 seconds)
    (166/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.067009305 seconds)
    (167/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.070308445 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 0.06876606 seconds)
    (169/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.086670923 seconds)
    (170/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.079388537 seconds)
    (171/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.228137029 seconds)
    (172/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.079215284 seconds)
    (173/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.067474963 seconds)
    (174/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.082063637 seconds)
    (175/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.085475204 seconds)
    (176/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.173209895 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.156667073 seconds)
    (178/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.067600955 seconds)
    (179/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.071603236 seconds)
    (180/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.066861814 seconds)
    (181/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.226961476 seconds)
    (182/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.085617347 seconds)
    (183/341) benchmarking ("sort", BigInt, false)...
    done (took 0.272713697 seconds)
    (184/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.06984924 seconds)
    (185/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.087351102 seconds)
    (186/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075879188 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.068632367 seconds)
    (188/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.078649606 seconds)
    (189/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.086381257 seconds)
    (190/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.078610407 seconds)
    (191/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.076577131 seconds)
    (192/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.06831382 seconds)
    (193/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.090485521 seconds)
    (194/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.069488054 seconds)
    (195/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.161254112 seconds)
    (196/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.067452145 seconds)
    (197/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095575719 seconds)
    (198/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.070001859 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.122341501 seconds)
    (200/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.147510336 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.068273184 seconds)
    (202/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.078473292 seconds)
    (203/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.068598807 seconds)
    (204/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.067762468 seconds)
    (205/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.06857904 seconds)
    (206/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.077073558 seconds)
    (207/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066223321 seconds)
    (208/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.07013508 seconds)
    (209/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.084374359 seconds)
    (210/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.069827216 seconds)
    (211/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133821668 seconds)
    (212/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.220623097 seconds)
    (213/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148072004 seconds)
    (214/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067123796 seconds)
    (215/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.066732644 seconds)
    (216/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.14904209 seconds)
    (217/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111774311 seconds)
    (218/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.066718509 seconds)
    (219/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.153276228 seconds)
    (220/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.163279989 seconds)
    (221/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.066813399 seconds)
    (222/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.066577698 seconds)
    (223/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.066906815 seconds)
    (224/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.06732479 seconds)
    (225/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.067528017 seconds)
    (226/341) benchmarking ("sort", Float64, false)...
    done (took 0.138519205 seconds)
    (227/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.069270472 seconds)
    (228/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.071344782 seconds)
    (229/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.070273861 seconds)
    (230/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.068559551 seconds)
    (231/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.068009265 seconds)
    (232/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.075719856 seconds)
    (233/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.080224463 seconds)
    (234/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.076604344 seconds)
    (235/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.069024648 seconds)
    (236/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.072223161 seconds)
    (237/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.075247931 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.094830349 seconds)
    (239/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.077306069 seconds)
    (240/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.240917181 seconds)
    (241/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.07945961 seconds)
    (242/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073336109 seconds)
    (243/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.071134734 seconds)
    (244/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.068720488 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087439591 seconds)
    (246/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.070706513 seconds)
    (247/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.155422253 seconds)
    (248/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.071052439 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.080784057 seconds)
    (250/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.078683921 seconds)
    (251/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.069523441 seconds)
    (252/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.069604808 seconds)
    (253/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.082098755 seconds)
    (254/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.143047729 seconds)
    (255/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.068525795 seconds)
    (256/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.068588151 seconds)
    (257/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.069570289 seconds)
    (258/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.076116885 seconds)
    (259/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.06862295 seconds)
    (260/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.072119616 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.067812358 seconds)
    (262/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.075064528 seconds)
    (263/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.066211909 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067950412 seconds)
    (265/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.167526139 seconds)
    (266/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.070166568 seconds)
    (267/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.081518661 seconds)
    (268/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.075577089 seconds)
    (269/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.078947647 seconds)
    (270/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.07541102 seconds)
    (271/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.072351287 seconds)
    (272/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.068655081 seconds)
    (273/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072500393 seconds)
    (274/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.068728277 seconds)
    (275/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.068045184 seconds)
    (276/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.174734976 seconds)
    (277/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.067113212 seconds)
    (278/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.067256849 seconds)
    (279/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.066716188 seconds)
    (280/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.068348692 seconds)
    (281/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.068682833 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.093398901 seconds)
    (283/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.069535423 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.068369282 seconds)
    (285/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.08502143 seconds)
    (286/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.070317351 seconds)
    (287/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.068955585 seconds)
    (288/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.094288423 seconds)
    (289/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.068987286 seconds)
    (290/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.068551682 seconds)
    (291/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.067790236 seconds)
    (292/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067504126 seconds)
    (293/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.135087679 seconds)
    (294/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.06619806 seconds)
    (295/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.069129992 seconds)
    (296/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.068652371 seconds)
    (297/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.069020855 seconds)
    (298/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.070074561 seconds)
    (299/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075746361 seconds)
    (300/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.067224862 seconds)
    (301/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.070759369 seconds)
    (302/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.067321244 seconds)
    (303/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.068302967 seconds)
    (304/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.067712241 seconds)
    (305/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.067459329 seconds)
    (306/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.06857838 seconds)
    (307/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.069563993 seconds)
    (308/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150913804 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.125958683 seconds)
    (310/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.250618412 seconds)
    (311/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.075154688 seconds)
    (312/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.093275408 seconds)
    (313/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.068730221 seconds)
    (314/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.086022722 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.096409753 seconds)
    (316/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.099423982 seconds)
    (317/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.068788751 seconds)
    (318/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.182592581 seconds)
    (319/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.070423428 seconds)
    (320/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.068361648 seconds)
    (321/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.07647049 seconds)
    (322/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.071419237 seconds)
    (323/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.185329563 seconds)
    (324/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.068821607 seconds)
    (325/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.069535383 seconds)
    (326/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.077014936 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.08124787 seconds)
    (328/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.086083247 seconds)
    (329/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.069547949 seconds)
    (330/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.071110917 seconds)
    (331/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.067227875 seconds)
    (332/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.068808913 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.097642477 seconds)
    (334/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.068332091 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090643491 seconds)
    (336/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.137124474 seconds)
    (337/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.080028588 seconds)
    (338/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.071924507 seconds)
    (339/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.069868448 seconds)
    (340/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.072048787 seconds)
    (341/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075572492 seconds)
  done (took 37.645217209 seconds)
done (took 39.171367329 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.091917398 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080863392 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.081857385 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.077717502 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081805107 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.080548677 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.081724331 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079957882 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080639882 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079858365 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.0796587 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.06742138 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.076320745 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.083370789 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.076879173 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.084500341 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.080684082 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.084042954 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.068521751 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.083137862 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.095307421 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.080490502 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077520257 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.082126916 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.068369958 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075406419 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089555689 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.086577835 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073374935 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075887166 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.07382134 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.083794775 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.076409521 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.074994208 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.078356666 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.074792644 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.078297845 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.075622725 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.092435286 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.074789801 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068970963 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.08115827 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.079177497 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076671361 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077176708 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080911994 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.073963483 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.082233413 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068067624 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079795107 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.092505584 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073823846 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.075344074 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.076494507 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.073697825 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077674336 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.075263788 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.07989229 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073406899 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.079968895 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.079707383 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.076824734 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.067759018 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077377382 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.075104881 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.075345603 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067289864 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07336229 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.067769749 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068107236 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.06714497 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.076516213 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.075034431 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073514657 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067469737 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.067759294 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066508338 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.079883634 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072845456 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.077518043 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.068274775 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.074122926 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073751009 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068291165 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073888617 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.080384539 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.067803804 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068431687 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.067589294 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.082449156 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.074727874 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068031229 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.080171654 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073538454 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073212741 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068866822 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.067420912 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073484299 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.076588561 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.068400199 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.067163477 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073868417 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.07361369 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.07745868 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.068365059 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07316206 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073409335 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.067367185 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076547983 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074323204 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075858114 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079694596 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075036937 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078599223 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066801313 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065419476 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077636078 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.068074091 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073769997 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.075935543 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.073430409 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.076463253 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.068425781 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.067017278 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073552308 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.074290302 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.068027974 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.068296726 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.067932534 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.077598642 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075239454 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06672493 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.067440764 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075884865 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.076313266 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.066838221 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.066706293 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.076373248 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.067662088 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.073386076 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.07349892 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075798017 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.066976945 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.067237523 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.066263088 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06651627 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.06652549 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072628825 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072187228 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067819777 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.076539328 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073926505 seconds)
done (took 13.009943055 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.070442805 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107438775 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.075063122 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.085464707 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079770941 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068783125 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073457293 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083828949 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070164363 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086330315 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.0943375 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088611038 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094090907 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.065604194 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.066588556 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068180293 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066985343 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077028718 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.083960478 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.093144568 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099264896 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.069239141 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.078736444 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086359414 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079979918 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.085566207 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.070442304 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.069854176 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.072098988 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.127424315 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.095593597 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.06911686 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070321634 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.08283631 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.083336495 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.075127928 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068786179 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071747345 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069486361 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06943856 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.070655163 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082877241 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.07054252 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071183638 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068981443 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068604785 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.069731279 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071941643 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.082520493 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.076142651 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077297411 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081650877 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.07116994 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.069888811 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067672445 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073320921 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.069657676 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.070433809 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069811625 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069287333 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069559185 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.071573633 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069718998 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.069745995 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070371723 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070051474 seconds)
  done (took 6.665657933 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083193493 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093223788 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081331444 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081648293 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067168896 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067495953 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067744536 seconds)
  done (took 2.188307471 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06774699 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07510389 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079464114 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080055645 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089088601 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076516136 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067489313 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099167452 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.067226338 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.075764339 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.082465763 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079825298 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070740204 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079471892 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067999156 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.078762977 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067892545 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07443819 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074447454 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080670828 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07340683 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.098622207 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.082690994 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.070209704 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.083264339 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077685789 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.072198394 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070115249 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070300195 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069523015 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069118355 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.091740179 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.076103643 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081528313 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070076261 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068948724 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.073932598 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070054675 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.073340875 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076149836 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.072324108 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.06776912 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067740809 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.068978814 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070446502 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.073680753 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.070878747 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.069493498 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.069227692 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07714087 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068745273 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076061928 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.071708442 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074904263 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.074163279 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074272173 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076786227 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.069535199 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076938818 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075620511 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069635541 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.082292771 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.081253084 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.073272629 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.081603338 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.078049184 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076272291 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.073457391 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.069301799 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.068925793 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.070188253 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.081152509 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.072595102 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.072032451 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070558341 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.075184323 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.074043583 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.085096702 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.08484418 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.083197603 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.072352691 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.069694503 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.074026422 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.085231639 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074715007 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069473274 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.070742012 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.069140872 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.07424249 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.069553371 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074248678 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069478256 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076819003 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072380305 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.071931242 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07745378 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069491196 seconds)
  done (took 8.892253682 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069914608 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069174708 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068260465 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068441043 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.070707813 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.070799127 seconds)
  done (took 2.099775151 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090831432 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068263966 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.08204131 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.070307779 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.092683274 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.076901224 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07703087 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071947829 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.086603898 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.081153729 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.076836332 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.079011475 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076339851 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.071621201 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.076146402 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.070917363 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.076158359 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073171793 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080337814 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072257891 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083564687 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072207216 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072121362 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082060838 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.07299748 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071126575 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070957015 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080362108 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080283034 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.071431066 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.074380857 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.072923491 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.078384673 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.07193056 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.076164414 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.078994305 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069990659 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075185761 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072484333 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.073529603 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.078056976 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071693912 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.071899881 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.075492676 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.071277927 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07840927 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.075634979 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073846819 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.076398437 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.07549049 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.075796862 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070412849 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.072739886 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.075119388 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078365031 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071483083 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.075733774 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.076192432 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.071363069 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078657648 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.069881886 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073573519 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071584306 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.07304584 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.074172141 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075632282 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078573639 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071898336 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072471627 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070038844 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.07546101 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.069793891 seconds)
  done (took 7.065508669 seconds)
done (took 28.589020355 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.562806487 seconds)
  done (took 2.188857976 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.583227413 seconds)
  done (took 2.250880667 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.33222309 seconds)
  done (took 9.997752969 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.306599916 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.330038937 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.736945515 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133246643 seconds)
  done (took 3.201814265 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.75473638 seconds)
  done (took 2.427459673 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229259922 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.221033328 seconds)
  done (took 2.133536755 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.335974184 seconds)
  done (took 2.000470203 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.147996528 seconds)
  done (took 2.808481103 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.228645175 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161255033 seconds)
  done (took 2.063181831 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.541524379 seconds)
  done (took 2.209932855 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.310647831 seconds)
  done (took 5.984146795 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.243379577 seconds)
  done (took 1.950671406 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.23047411 seconds)
  done (took 1.902545705 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.030335546 seconds)
  done (took 3.695958893 seconds)
done (took 46.489434706 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084986074 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087514546 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087200815 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082193421 seconds)
  done (took 1.983864389 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.07509171 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071841576 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075276511 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.077357362 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.07491023 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.075621353 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.076851051 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.072103429 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074756885 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073889564 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072334458 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.074131089 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.076718357 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.073738713 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.075969419 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.077323693 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073642321 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073733769 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.076010981 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.073356636 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.07609839 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.073569934 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.072036732 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.073637224 seconds)
  done (took 3.456696918 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079721337 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.07346808 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077884509 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.074884674 seconds)
  done (took 1.98213629 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077858121 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078471042 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.090022633 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.09407787 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.080258325 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.08046546 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.087623209 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.087864204 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.068620186 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.090547506 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.070943092 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.069654064 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.069609504 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.089150902 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.086419402 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.06561862 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.067080294 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.081058578 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.080045896 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.083117388 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.072001171 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.068638456 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.080360481 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.0805451 seconds)
  done (took 3.569647763 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080416786 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066817045 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079456426 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.093463975 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.095873314 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.069121433 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.08304896 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.096244709 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.132289753 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.068978682 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.074843845 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.069202037 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.108589326 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.068813115 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.084275121 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112951853 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115464227 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072414628 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.101891863 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068775687 seconds)
  done (took 3.42699419 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076877176 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070381144 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071116756 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066546361 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077577614 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.076011432 seconds)
  done (took 2.126424288 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.06911524 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068601846 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.06801443 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073413986 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.070726203 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.070496416 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.069880298 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.068819117 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.068964634 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.069674886 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.06989126 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.070195107 seconds)
  done (took 2.517775013 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.158233278 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069891091 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071193604 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066767617 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071927244 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068558826 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.084506753 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.071604929 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.089185434 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.07019893 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.070477292 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.072060004 seconds)
  done (took 2.645555012 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100824381 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102010146 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146802235 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117752196 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116849015 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097303816 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120457576 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095110977 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.162336679 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.14020855 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118756894 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096222861 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089243241 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070869805 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100361239 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101740432 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136156824 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073416215 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113766603 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165595922 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116784951 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.11409952 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123705577 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120669989 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084531513 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125664891 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098994093 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106276528 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129070919 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114200935 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123200483 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099629477 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072738858 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072931202 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153832612 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104906785 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111822074 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.097391845 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104192577 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092268477 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111167496 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.07331837 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.090144784 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.111209649 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087762132 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120847303 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.091513814 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107984186 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084538626 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.135566703 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110185617 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103458517 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089081758 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107860409 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13481069 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098553963 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112322355 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10956658 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085894098 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.120394795 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102712488 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.254406509 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097571488 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085354346 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.165153102 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093601429 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.116802793 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117359868 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.086899778 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094093747 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107404149 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135514287 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112626355 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.111791782 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118747138 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099598242 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114436378 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.096165582 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.131449405 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097384481 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.076627425 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108792458 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133035875 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088980462 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105047919 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134319563 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095619186 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08158172 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096417042 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.124314732 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084573852 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.100726814 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073664341 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.102277623 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111527295 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099753349 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116110832 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10968421 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081088287 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128774301 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110819043 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076137168 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121715802 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103049331 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157589281 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099334692 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.079747034 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103822307 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097739039 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150975161 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088840898 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083610201 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102660562 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146333041 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09803538 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.176105892 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10034684 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133852227 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100390203 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089881405 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075550668 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090367934 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101632479 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106330514 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102362498 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08808585 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.076834451 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08647712 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.252383677 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094616039 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083597889 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119493857 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.10622449 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.07890315 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09104724 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.078268951 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129996551 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.081192731 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112949286 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128843296 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.083020652 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109123399 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101945685 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111476131 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.10111245 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111108659 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147692746 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.120244306 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081467881 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085085207 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110604181 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.146505114 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.118258574 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088769217 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.080079048 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10445853 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114787206 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100321811 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110996081 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104400293 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112886672 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102095834 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144108498 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122571937 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094942288 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099196432 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099538286 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.126758632 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080400279 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160779652 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098657413 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123377591 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088702589 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145685147 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.119182337 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094368662 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088347551 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099843618 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.109079533 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110045252 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148160263 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.100230056 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.076066858 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097346533 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134207329 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077801223 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102258808 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.093916394 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.097253557 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121105275 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.086775709 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084363617 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.070992924 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105091168 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135810381 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.071020208 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.276819635 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.115242698 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104312606 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.106063635 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070597115 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10038026 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138992019 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106677024 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140417551 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11782006 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101545579 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121931316 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.102797143 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.109749276 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08316957 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.129776723 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.139452262 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099609385 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092444611 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13586409 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119438102 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.138963176 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.099280622 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119196927 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.107537329 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105369843 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108558668 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.105058301 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148265284 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12386857 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.129655427 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089284072 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110074824 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113592123 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14098009 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086287784 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121025197 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.078973331 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115957206 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.081271324 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1112653 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.083390774 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.115532659 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08303152 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10391574 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.0731634 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.077963355 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.147133034 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.117278935 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093388831 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08957244 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.139672346 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135340974 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.08408154 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10572337 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108496494 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103397218 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104273591 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111641136 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.088422941 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097451345 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.273993502 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083308511 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.086393884 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104020007 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098657684 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110093559 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088270604 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079045286 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140407905 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108461905 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099667423 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081296167 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09933701 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.125151474 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093433684 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09151269 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109018457 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108048602 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145777313 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.092843469 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.100693821 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121496297 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08417612 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096446179 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.073459303 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088803703 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.080105278 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113612312 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079413579 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113041818 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.071708646 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135102202 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091219687 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.096902346 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10679808 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102064382 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130461217 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095921255 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132979126 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094482313 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106717015 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112957135 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098829312 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084080359 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107653609 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100166207 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.116968815 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.099986826 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109816661 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114521357 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098579918 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145891405 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093659668 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124706624 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110025396 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111806403 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108142167 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121473447 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142383956 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116682935 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116225851 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078814427 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086995489 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10937149 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103757804 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146691414 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101972123 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072077468 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08671109 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090347962 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.253650535 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107271218 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08430478 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143550673 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088243384 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088392358 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114909409 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090844181 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09840018 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07714306 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096296614 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101727792 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096160342 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096140984 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109159041 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118657751 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114596072 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133400811 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099946036 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.09474321 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119514887 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113722138 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115540453 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090762035 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090646323 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127780327 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106472533 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.133621055 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.10543957 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099458371 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106429997 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094684922 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103449091 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101077638 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.112865831 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082807019 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077881273 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.071800767 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.07438383 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121216689 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113695801 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10378821 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103042929 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.075898362 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107697542 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104306397 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076062471 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091290297 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098204486 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103716379 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.087804467 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096624448 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.119474021 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.09578871 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107995546 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103919076 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134086236 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.103998112 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09138965 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147319461 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132161843 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090595579 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093917167 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.074647036 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081641981 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103881428 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145865933 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117382706 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077412888 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.244338638 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079174486 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089401931 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.07375861 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.092654526 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.094561004 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107484916 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094587376 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113926718 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104750401 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076884872 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105004798 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101283552 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096121677 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101088373 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106386971 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11009616 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.126425223 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103070159 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102094014 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080160751 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084573806 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079507699 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084008558 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106673503 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.082016431 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079606712 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132615558 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.093953132 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107461852 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113381239 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089096624 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079541668 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13723905 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.074573286 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139684338 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075591192 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086442193 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085511156 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08309649 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099118492 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109467344 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100784049 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118115952 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11085798 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108839252 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115136545 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161454523 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079272146 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.149074553 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08012023 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078924937 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079603058 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115678544 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094011732 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109424306 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145341455 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093740865 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096909353 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081278515 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133791281 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.102921884 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108544257 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090048151 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083292955 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133187071 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082925352 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.075213095 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090061977 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113179988 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073456848 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104479177 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.248520017 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081830253 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114260881 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.63244138 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091687365 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077664341 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090826946 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143711117 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129482301 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08551558 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112640529 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.124577848 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094043748 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088451633 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110899768 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188384741 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078217721 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099654259 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.108284014 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102651046 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096644747 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.095089342 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.090735374 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.097077195 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.089655682 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084064784 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111973619 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091660498 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09630253 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102204278 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087143935 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084515374 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13639539 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.108942607 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.086260102 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09320193 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105576555 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09281757 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095484187 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.07182124 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120071798 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095357156 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106185965 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095296594 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112885735 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125875901 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093201067 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117491313 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.093181058 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113140614 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086205975 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079967412 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102786698 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079248113 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079139479 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117986932 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.087428103 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.097382416 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108686603 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.100298444 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118780323 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122766951 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116116773 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101882475 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08281783 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090307047 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.090835669 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077128348 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08110073 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.076264258 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.079592003 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.27367064 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088387909 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088771021 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120619019 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086842578 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107586755 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.104947084 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114199472 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08798396 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105652604 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113375227 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094805944 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107767864 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104999934 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.133521189 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150732417 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103193065 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128490292 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138499628 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.081032859 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079596244 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072621606 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11889731 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083488362 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.084850412 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083956471 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13471479 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082920579 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095770464 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232367012 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081605435 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083134418 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098211794 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071246849 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087353051 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112771869 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089610944 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085317791 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102125355 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087935966 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122616148 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115734194 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093801299 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087484671 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084406188 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098349641 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.109155421 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132925806 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092794634 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077089048 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107307704 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104773209 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124534599 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074010273 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08549793 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.134502509 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096857967 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10855785 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084381696 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125339439 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137874567 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094177628 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137090244 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072309288 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084715331 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090656867 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126510745 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075281395 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088517293 seconds)
  done (took 66.7630796 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.154533121 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143587058 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083781627 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.099217664 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188410707 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198453259 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120832995 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097468524 seconds)
  done (took 2.956551747 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069473261 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084258054 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.084560085 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.210109033 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.112501064 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068351507 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073760376 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083437503 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.070968746 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068605581 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.106113427 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068933835 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.071522557 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.375872814 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.070598577 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.075302222 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.071323288 seconds)
  done (took 3.58764683 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.327470037 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.435932175 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.233699198 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.670307798 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.137949332 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486257269 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077945114 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083438367 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.623758199 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372736844 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131601385 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088911602 seconds)
  done (took 18.505852299 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076987976 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079127448 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079553622 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075850491 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075553882 seconds)
  done (took 2.228021319 seconds)
done (took 117.442332177 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084882528 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.175663471 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068830203 seconds)
  done (took 2.1064446 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.084364028 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.08204018 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.081903375 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079918845 seconds)
  done (took 2.160475021 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076265366 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077750066 seconds)
  done (took 1.979996146 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.225065456 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.179593957 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.093724491 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083981325 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082943573 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.083985612 seconds)
  done (took 2.089531079 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073106514 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072793469 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073236352 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073856986 seconds)
  done (took 2.11977492 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.069297336 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067500206 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069896643 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072998238 seconds)
  done (took 2.105476805 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087259127 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084598551 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114882198 seconds)
  done (took 2.112366637 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084477201 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084017516 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079295701 seconds)
  done (took 2.07967192 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109983471 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098477962 seconds)
  done (took 2.034230907 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080897671 seconds)
  done (took 1.912132238 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091301426 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099254447 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.143837395 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.109343536 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.141628763 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127281761 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077824578 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078981807 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074211856 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07378853 seconds)
  done (took 2.844167667 seconds)
done (took 25.952299704 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079810015 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.370070798 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360543314 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087981866 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672343347 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357340853 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.000782286 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092031762 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100293424 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069062857 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086185833 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650025606 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.989958367 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.328581454 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.978989438 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.328290521 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.662213504 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070951379 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071170003 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07177307 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.983917604 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071553702 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072634636 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072375686 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.659542064 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.378143621 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073755085 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.328760595 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071968764 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072382738 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.35754615 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070161186 seconds)
  done (took 16.450086847 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.070795973 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123829674 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073774974 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085212947 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071467473 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071400841 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072886375 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.071088109 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112968948 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069626643 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.0864087 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068933772 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073097278 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070112545 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089139814 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069094821 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071062601 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070474212 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069319088 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070679886 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087670423 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068971836 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070221326 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070315939 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069786639 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08211665 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070342286 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069281867 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072327928 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07129092 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072543201 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070926834 seconds)
  done (took 4.284543112 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123102643 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128095318 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074874932 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110018138 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119205395 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071509064 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152473108 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095899164 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.117633884 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071186409 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086405103 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069237869 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105161779 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070524087 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089750593 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069156336 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071301373 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069908554 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069484767 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069605747 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088014522 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069152649 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069537725 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070261706 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.0697847 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08415119 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070249866 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069385624 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069380382 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071741366 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073268262 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070339975 seconds)
  done (took 4.560395482 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070836804 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072756195 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081120323 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082668348 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069860234 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.072155297 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.073231572 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069926956 seconds)
  done (took 2.444474383 seconds)
done (took 29.586578567 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080168482 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.06908945 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072887443 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089343093 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075400611 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071827861 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066035898 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076098234 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.07288127 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072717795 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074405338 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068596225 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07155979 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066662474 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.075798686 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.070028893 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.076518326 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.074118982 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.074543802 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.075670888 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.07214697 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073733806 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076033867 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.073568087 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072001837 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.071571356 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076143731 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072954106 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06736281 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070323597 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.06915062 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.080919612 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073493498 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073654357 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066806155 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.066987617 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071129856 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069578343 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073645423 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076061262 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069262073 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075993386 seconds)
  done (took 4.880268788 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.09121783 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.097458821 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.090545619 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.086851486 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.111844653 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.086709159 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.094954171 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.084079159 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.082336398 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.094096042 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.078319164 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.082524016 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.08559606 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.079724597 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.082894307 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.078995998 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.084176143 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.07797972 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.082729328 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.081672941 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091556568 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072933847 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080200151 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080585601 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.074755239 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081157763 seconds)
  done (took 4.060678766 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074589409 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089596576 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093998139 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143327652 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110787835 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083805236 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.08358878 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.105045426 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102338111 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.06982243 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073179898 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095603746 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097770681 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076291401 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107129741 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087204602 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.08143409 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071189695 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075169192 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104020222 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091764084 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088123203 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101258017 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089114338 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068088253 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078614576 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075472226 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084957837 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076565036 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.08169513 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073131949 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072574487 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070118696 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081755549 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.072735739 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067128622 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091381599 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08220414 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08447213 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107493118 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078902699 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.07028119 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099251213 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135385156 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.074744598 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.07333006 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.075728502 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.084572949 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071933709 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100075806 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087539369 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068990787 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087675815 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.07040593 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.07016802 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086257284 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070423315 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070728964 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081526293 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.07544218 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090131928 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074404129 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090414726 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069060969 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.08022106 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070206196 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070399707 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067785931 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105378143 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.075953989 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121654136 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070797572 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066986343 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081184532 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080299265 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075815014 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068827317 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087867487 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081582405 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.075010518 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080867369 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071270241 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072038266 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104433336 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068022468 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067551821 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.069745093 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.074163731 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.074637707 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.071592414 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.085446058 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.071031759 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.07464881 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.087479333 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.071491613 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.071976403 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.074125072 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.073070157 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.070840947 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.081711383 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072828253 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071066606 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081451294 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.069461483 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072203894 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083989686 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078489917 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069708102 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070366007 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071576099 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070986539 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073594618 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073950724 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071260868 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076346585 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077286029 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.076131584 seconds)
  done (took 11.337123366 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.16177027 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.150645213 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.069897082 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.146741931 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077074272 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073796941 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.147336291 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.08856034 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069872416 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070827155 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068716289 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097845578 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.092657275 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.109633231 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073786739 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.072731504 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.097981507 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.10581295 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.154527081 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.148322277 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.096248293 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.080382719 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073963445 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.07276484 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.073724788 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.0812044 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086566289 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077673202 seconds)
  done (took 4.61600228 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077377609 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085023019 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074512293 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.095926516 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.090828679 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.072833944 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.074345587 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.073823649 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.089092328 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.079193562 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.072300372 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.076496474 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.075805438 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.072904007 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.072830393 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.079379713 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.078893082 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.071115539 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.075786781 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07707691 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.083424619 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.098069803 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.075948404 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070618281 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.07244462 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069225124 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075977543 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078992488 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068982328 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099785688 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066697952 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074373596 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084223406 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070417827 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069119939 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070082563 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069498467 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069793627 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.06994726 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068927538 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067620002 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073687343 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068209578 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075388346 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083369012 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07714619 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070906794 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.073660047 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071656511 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066541241 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072326212 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072729058 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071581461 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077494789 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.07274744 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072011155 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070743209 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.101431038 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075596969 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069162381 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068681326 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068070714 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.07082576 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077294451 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.085874309 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071746178 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068144095 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.06953619 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.07399518 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083711722 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068961316 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074659226 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066544514 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069696841 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072372046 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.071962242 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071187902 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067660164 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069256044 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069457799 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069217139 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069080691 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068600879 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072195654 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067692388 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067969276 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069478761 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070685389 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075532111 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068611646 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072351166 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070551566 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068282126 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.07191645 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074363561 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072021579 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.0889708 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.077956983 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070140929 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067322758 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083953382 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071511978 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068695135 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074740419 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073970851 seconds)
  done (took 9.695216761 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092330793 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071344125 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089221037 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096076357 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080475606 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075530733 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083793889 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070706922 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086307648 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068968639 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078358487 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.067561604 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082412969 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078423678 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.070677368 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079815203 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071583789 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089842299 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084277627 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067894919 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078436913 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.081589725 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082339259 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088015972 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086848088 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088202807 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081828909 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071830687 seconds)
  done (took 4.156048244 seconds)
done (took 40.587212124 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.916360847 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.096302663 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.923441324 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.110205078 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.136677417 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.008982111 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.051677011 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.919646397 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.155732744 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.942693043 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.253677371 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.342789914 seconds)
done (took 68.780832489 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.984759716 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.072996889 seconds)
    (2/2) benchmarking "String"...
    done (took 2.152078275 seconds)
  done (took 6.075632623 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.516840059 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.924062871 seconds)
    (3/3) benchmarking "different"...
    done (took 1.97184372 seconds)
  done (took 8.262466825 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.018934461 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.942717865 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.178167567 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.922755687 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.922599273 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.331216882 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.724336651 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.375951387 seconds)
  done (took 32.247747545 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.073173207 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.155542166 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.586867961 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.605228186 seconds)
  done (took 16.306351249 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.530367093 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.186909873 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.184686686 seconds)
    (4/4) benchmarking "different"...
    done (took 2.177331594 seconds)
  done (took 10.978340458 seconds)
done (took 85.82039555 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.924982184 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.482492063 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.925265994 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.073075305 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.994156762 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.957059961 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.922556837 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.951886375 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.92243954 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.92483006 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.345390073 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.924055765 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.905265471 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.960183938 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.918006425 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.962383207 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.456508634 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.925438223 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.942776358 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.566973765 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.416307846 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.930761965 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.932278283 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.977822939 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.033944877 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.937661841 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.420170338 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.938763768 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.546484831 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.937263474 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.925348712 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.923103285 seconds)
  done (took 209.754991148 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.923777575 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.972265509 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.025020972 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.948390728 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.320186661 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.119567275 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.070152046 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.410920188 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.930203799 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.9478127 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.198020143 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.923005407 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.211597869 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.87238194 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.918787309 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.931390906 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.159436373 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.186446289 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.920903204 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.112405842 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.942476318 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.001309118 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.953438985 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.135714086 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.948100955 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.94201288 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.92710625 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.931215274 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.11036915 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.1571027 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.928440479 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.964959254 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.115508233 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.787038807 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.950921931 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.943325657 seconds)
  done (took 175.695475482 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.095529516 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.9369352 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.985258452 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.059034709 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.684508651 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.641062831 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.927419764 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.927358126 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.926704269 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.935469874 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.926684741 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.997229386 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.392391968 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.93896975 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.92557735 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.926604813 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.47574982 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.927843758 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.926689418 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.92691126 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.988621701 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.300146053 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.058828521 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.928213248 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.937969008 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.06369567 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.936458715 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.92564966 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.063478922 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.929446428 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.004145796 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.060058859 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.936783068 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.007078599 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.934653371 seconds)
    (35/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.92325293 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.415224236 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.924772753 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.927467355 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.928908093 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.992034511 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.924671439 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.032409294 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.014506411 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.9268152 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.942161308 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.121584165 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.574025517 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.927596698 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.927721942 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.928228366 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.927316391 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.929477368 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.618178886 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.930032666 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.954638104 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.535541974 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.929250737 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.929469186 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.930335108 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.92912006 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.929146086 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.937217012 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.964182065 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.732484933 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.951415068 seconds)
    (66/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.929405411 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.321005294 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.720581619 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.930276624 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.967507725 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.987335753 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.930291138 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.009165535 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.925310989 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.930452874 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.928025851 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.930920404 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.01680228 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.006351658 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.925893255 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.065497684 seconds)
    (82/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.931489217 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.933160332 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.930064931 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.169068311 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.895956748 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.116489831 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.945910314 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.993259212 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.933145779 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.934746531 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.951882031 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.088612344 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.936487321 seconds)
    (95/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.934774325 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.933746437 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.932182542 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.111441311 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.934302364 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.952313523 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.163268005 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.008046699 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.186419137 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.162401892 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.936773321 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.936336021 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.950276634 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.935183449 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.933790265 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.943431643 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.934791895 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.934918244 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.9360053 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.935332566 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.934570021 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.938053763 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.946539979 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.935609514 seconds)
  done (took 427.632738463 seconds)
done (took 817.07315915 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.610925458 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.687937009 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.525728979 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.567085019 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.533505407 seconds)
  done (took 14.791196698 seconds)
done (took 16.661722592 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.965493516 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.952051476 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.942043044 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.996856681 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.959226962 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.950008985 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.982207482 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.98258844 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.966785485 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.946941972 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.988546109 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.951540651 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.96857798 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.969394408 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.008463962 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.97516153 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.953989123 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.944264784 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.991624908 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.951183605 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.954057032 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.949526826 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.949739978 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.988217881 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.0196529 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.960730987 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.951282966 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.986363579 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.958782849 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.987764915 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.005403178 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.970357743 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.98337818 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.014838482 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.994064188 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.020184668 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.958294807 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.006036747 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.955993227 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.023129934 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.994567216 seconds)
  done (took 82.847100433 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.949374535 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.08634866 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.159050552 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.978886637 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.947336827 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.159125278 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.004767054 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.075555616 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.082101841 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.161928984 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.166549528 seconds)
  done (took 24.643547586 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.948841102 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.085846589 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.160871218 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.984108513 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.95060873 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.162151655 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.012340763 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.081080751 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.085381096 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.16329198 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.173171915 seconds)
  done (took 24.684677747 seconds)
done (took 134.051562179 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.316543379 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.967668754 seconds)
  done (took 6.156001906 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.940987665 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.95843591 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.092037964 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.944068394 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.940455016 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.942231376 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.94217743 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.941737378 seconds)
  done (took 17.573519252 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.943310427 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.942713506 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.943574106 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.942441288 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.94188018 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.943404364 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.942216102 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.941604979 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.942200902 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.942594938 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.941612069 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.943467409 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.943094528 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.943683436 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.942970745 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.944169511 seconds)
  done (took 32.957199652 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.943313012 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.943413137 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.942673413 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.941665201 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.912586905 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.942840581 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.94573388 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.942997174 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.945191493 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.943101738 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.942584249 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.94296509 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.943761204 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.944238274 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.943976394 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.943157415 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.944153883 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.942698327 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.944846372 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.94480876 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.943000269 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.948043894 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.949913861 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.944920641 seconds)
  done (took 48.499130024 seconds)
done (took 107.072672938 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.306523523 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.481797908 seconds)
  done (took 8.66118514 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.949359562 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.943766266 seconds)
  done (took 5.82812309 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.944730364 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.944434792 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.941304617 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.945099068 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.945605499 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.945311974 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.944142006 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.946511593 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.945418261 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.944506387 seconds)
  done (took 21.321154447 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.945604361 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.945874055 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.945753731 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.945471566 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.945380816 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.944194153 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.947470879 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.946053284 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.946850559 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.946266013 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.947270253 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.945090538 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.945085145 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.947009328 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.946933218 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.947268036 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.946254246 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.945079619 seconds)
  done (took 36.904583173 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.946378351 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.94775597 seconds)
  done (took 5.770347989 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.945625963 seconds)
    (2/7) benchmarking "second"...
    done (took 1.948230023 seconds)
    (3/7) benchmarking "month"...
    done (took 1.945676852 seconds)
    (4/7) benchmarking "year"...
    done (took 1.946475406 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.946239771 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.946881717 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.946752575 seconds)
  done (took 15.501658005 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.947439698 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.090750009 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.144843635 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.554102263 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.947423115 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.948359418 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.841471011 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.94858961 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.951112344 seconds)
  done (took 21.251373109 seconds)
done (took 117.117336299 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.784755752 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.950102925 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.169091614 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.016129313 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.970991974 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.243542983 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.98313599 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.486104391 seconds)
done (took 43.486349914 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.027558475 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.947062921 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.974968714 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.97502073 seconds)
  done (took 22.774058605 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.948438565 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.261487983 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.965751864 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.895638545 seconds)
  done (took 22.961083118 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.318580875 seconds)
    (2/2) benchmarking "read"...
    done (took 2.280738582 seconds)
  done (took 6.475407487 seconds)
done (took 61.122746309 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.944242171 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.944125653 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.942778977 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.942910193 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.943459689 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.944005452 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.938533219 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.943633362 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.94373304 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.944308649 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.943794288 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.943197397 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.944755573 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.944001165 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.944084821 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.944732353 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.944899652 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.94448515 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.943717494 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.944404765 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.944599444 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.940975504 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.944818878 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.944280628 seconds)
  done (took 48.522017296 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.944756305 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.944309499 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.94461254 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.944501924 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.945854481 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.944851847 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.944726039 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.945240171 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.944158919 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.944364865 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.945237899 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.946037572 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.946078336 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.943994451 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.945295798 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.945235603 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.944628311 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.94473991 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.944941322 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.945484454 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.944535695 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.946004455 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.945851236 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.945471052 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.945482628 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.945539507 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.946846042 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.945183229 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.945994302 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.946235398 seconds)
  done (took 60.231069246 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.945008172 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.946361558 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.945557073 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.945929607 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.946148563 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.947006815 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.946797985 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.947152934 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.946245509 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.94691405 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.94708336 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.947206766 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.946906127 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.947588906 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.946462829 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.94651582 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.946762405 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.946802892 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.947461474 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.947465874 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.947352077 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.9470487 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.947857921 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.948137495 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.948095955 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.948194703 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.946825376 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.947704171 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.948140512 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.947423048 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.94798824 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.947889849 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.94782785 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.94847036 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.94888221 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.94803582 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.947874414 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.947789119 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.947710798 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.947515833 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.948931856 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.948321004 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.948842973 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.948331774 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.950531149 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.950312952 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.950483107 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.950300487 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.95080326 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.950806857 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.951701856 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.950946127 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.950735478 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.950740277 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.951591569 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.952031915 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.950438234 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.951252108 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.951219365 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.950140454 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.951783372 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.951123161 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.951408078 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.951561016 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.951225209 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.952257428 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.952022308 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.952067012 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.952081433 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.9493642 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.951816993 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.947885993 seconds)
  done (took 142.191493604 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.951755483 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.950861201 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.950772733 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.951569906 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.951963227 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.952231074 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.952941609 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.952066852 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.953176726 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.952112495 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.952129958 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.953105949 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.953918222 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.953175784 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.953355591 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.952753066 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.95275537 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.952791266 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.952816059 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.953366578 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.952720085 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.953346989 seconds)
  done (took 44.838636091 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.955520865 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.953197067 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.953594288 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.953288809 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.952972338 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.953129682 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.951704893 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.952649633 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.952164837 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.953513617 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.953291784 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.953929583 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.953722084 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.953792431 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.953759872 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.95434534 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.954659803 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.955037038 seconds)
  done (took 37.047476679 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.954235475 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.954633719 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.954579038 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.954052768 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.955063306 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.941173238 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.932223866 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.955176478 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.954706429 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.954751383 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.954217531 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.954720651 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.954187955 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.955279382 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.954735736 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.955793242 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.954866053 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.955111591 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.955674306 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.954770315 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.956116052 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.954690147 seconds)
  done (took 44.854773883 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.954892627 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.956098471 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.956348359 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.955456386 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.955799521 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.955949305 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.955048954 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.955147026 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.95532829 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.955511097 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.955672271 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.954478616 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.955542306 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.955451511 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.955846161 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.955449784 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.955475545 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.955500726 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.955779995 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.95544788 seconds)
  done (took 40.99431135 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.956922027 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.957457785 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.957242329 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.95738369 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.958083405 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.957354372 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.958470296 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.957040476 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.957974734 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.957392396 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.957266989 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.958070888 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.957376543 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.957166099 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.958224436 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.959033404 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.957800666 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.958695389 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.958710868 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.958323823 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.958851021 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.957608852 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.958733648 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.958291089 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.958536823 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.958507197 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.958687331 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.95845689 seconds)
  done (took 56.709713927 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.957382456 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.957469526 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.957730294 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.957389893 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.958046794 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.958418264 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.95797838 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.958146773 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.957524953 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.958318562 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.958394449 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.958479703 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.959038718 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.957666987 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.958637047 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.958490151 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.958603954 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.959296567 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.959123883 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.958544489 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.95920747 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.958942728 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.959538418 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.958825835 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.958941772 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.958533779 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.959852832 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.955194182 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.959927462 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.959207258 seconds)
  done (took 60.64095814 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.979964071 seconds)
    (2/2) benchmarking "in"...
    done (took 1.977430468 seconds)
  done (took 5.845916929 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.959365145 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.960062947 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.960003417 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.9601779 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.96009191 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.958804547 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.96010636 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.959606476 seconds)
  done (took 17.566845844 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.961249605 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.966672305 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.961776578 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.960535442 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.960430221 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.971630839 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.962361889 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.964551234 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.96481635 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.957374282 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.965273027 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.968358538 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.968917615 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.970238089 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.961306097 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.961489195 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.965450858 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.967230434 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.96520493 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.961837248 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.967021105 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.960611436 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.961790378 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.963027667 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.961589458 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.967278224 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.974248997 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.966724954 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.965812499 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.962411117 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.971731893 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.962084409 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.961938915 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.968318357 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.962158304 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.963051815 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.972842747 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.962195089 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.962167355 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.961942477 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.9657219 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.967501201 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.969504677 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.973756746 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.963250253 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.964074142 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.963320222 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.962711034 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.963864757 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.970370499 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.972255869 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.967172371 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.963991542 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.964298189 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.968658999 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.963250582 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.96275602 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.968395905 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.973336033 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.974371161 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.970816938 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.988578361 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.977002805 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.954323787 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.963890022 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.977061965 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.988268282 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.968241158 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.968548101 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.965486467 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.975574018 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.940448442 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.956999507 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.965017586 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.98083601 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.972814811 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.964939558 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.965438629 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.965328346 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.964461268 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.969809043 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.94761964 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.949783569 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.964527844 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.977488714 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.993808894 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.964553033 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.964989977 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.971046182 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.966277526 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.969123903 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.97178704 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.96597987 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.965785318 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.969345511 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.968156902 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.964781369 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.965676933 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.965211837 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.978710038 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.966912456 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.966554216 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.973174015 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.974866622 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.965438976 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.966074728 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.970284805 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.965984296 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.977320404 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.966587984 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.966568745 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.967425693 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.968101608 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.970984615 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.966188686 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.973669931 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.975290464 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.977481376 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.967205888 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.973845193 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.973852802 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.972170476 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.980149934 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.991885918 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.967656783 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.973873789 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.976447606 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.979981609 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.974196294 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.968272935 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.973339827 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.968545305 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.968883938 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.972295674 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.968059266 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.966483024 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.9679078 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.965040708 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.96929718 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.967743633 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.969888523 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.972374461 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.973697868 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.968380206 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.975603795 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.967154164 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.974543585 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.97921341 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.969214189 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.968198712 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.969079915 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.975116941 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.970706665 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.972603714 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.96905175 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.970027277 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.96846177 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.969272459 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.974607629 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.968711992 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.97053911 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.970851932 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.975036012 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.968744343 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.969348805 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.970026056 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.968911264 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.968951979 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.974486815 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.971188777 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.964712122 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.968427412 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.965653051 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.970455009 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.97083031 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.938927845 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.970420063 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.970894507 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.97796772 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.984800586 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.977806706 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.982624418 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.97130989 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.981268667 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.972396907 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.975430336 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.975575483 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.939156715 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.971488762 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.971302999 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.971578539 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.977792029 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.997112751 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.984910417 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.976974667 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.972650863 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.976370424 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.976631512 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.981158536 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.972473889 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.97563542 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.977333573 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.971073344 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.972105737 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.971913333 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.978841557 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.972650917 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.972228082 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.979164485 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.947558462 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.962373835 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.975299263 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.972647284 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.977022872 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.973327528 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.952169917 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.958563998 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.973006194 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.984017474 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.978797169 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.973635081 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.971548828 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.977695676 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.972513454 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.973815601 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.977841926 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.979524939 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.973004659 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.978157543 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.983982523 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.974586418 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.973099808 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.973209344 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.974488292 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.978705213 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.97524452 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.980311763 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.982810831 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.976557107 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.974750754 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.977951524 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.974085188 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.983666773 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.973573595 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.97953963 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.973706312 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.979544612 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.973440778 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.974638557 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.985280178 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.974737628 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.977953503 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.974828686 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.977707617 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.977245614 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.979570474 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.974298708 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.982664009 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.982594379 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.983429351 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.975995012 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.978601885 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.97998404 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.976499615 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.98061457 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.980060765 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.991752759 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.989241703 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.977207636 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.979571064 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.973579217 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.980888754 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.977176984 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.976126129 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.985510618 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.976488889 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.977205152 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.981421012 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.976892819 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.975965074 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.985524745 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.980649823 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.982503963 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.981203435 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.980995102 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.980957194 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.977069324 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.982712176 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.97646547 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.982859668 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.981672746 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.97793788 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.980808484 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.976922732 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.990209941 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.977626038 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.981239962 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.98937061 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.981859065 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.963264954 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.981841189 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.977453016 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.981661515 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.981570994 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.977601661 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.978918465 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.977070599 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.983550109 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.991116491 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.984261595 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.985306379 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.983468211 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.992119409 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.977713035 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.978883772 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.978277108 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.985013109 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.986417058 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.979312714 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.978545939 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.989110203 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.978724886 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.978623904 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.98263683 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.978613364 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.977605495 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.977694283 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.980060241 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.98786053 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.98508482 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.979273081 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.97827523 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.979872489 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.978309857 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.986386233 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.983783977 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.984214109 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.980132002 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.980085306 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.979501451 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.978750077 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.979605072 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.97899585 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.981033239 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.979962585 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.991870963 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.97862919 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.98195336 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.984585713 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.980900662 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.992518927 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.979901045 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.979263442 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.98126933 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.98188466 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.983526811 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.980404714 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.980255631 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.981052234 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.981276672 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.982121576 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.996725784 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.991530512 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.984656544 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.986401578 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.98097944 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.985840307 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.994296241 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.00672903 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.981186102 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.98618955 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.985776212 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.99207359 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.986396589 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.99087473 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.988986972 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.990586696 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.986159987 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.982006725 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.988227253 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.998101681 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.9817309 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.982495086 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.982570992 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.989957935 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.984026489 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.982414783 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.983483222 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.989192577 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.983996535 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.997813653 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.984595446 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.98430677 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.983330219 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.983231663 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.982740169 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.983147595 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.987405144 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.986868911 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.983070596 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.982741641 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.989236148 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.991744449 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.98344181 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.989920171 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.99625011 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.982887614 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.983998762 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.985722895 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.982533851 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.988567099 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.983336696 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.983390611 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.985647049 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.984028977 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.985013868 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.990918504 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.996769009 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.988019868 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.984152774 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.984704016 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.990704394 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.983449921 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.983986385 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.989321378 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.996144577 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.990929489 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.000261473 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.998523166 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.984169184 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.985429303 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.996375663 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.992991169 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.984331967 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.984800999 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.984398609 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.98927002 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.989595509 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.988852275 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.985264913 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.985844168 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.994390649 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.986329346 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.985470543 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.984998981 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.986687203 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.990709137 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.992053905 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.994656835 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.986018272 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.985566431 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.98552221 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.989139542 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.989866222 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.991546886 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.985175193 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.986677279 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.991958836 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.991417397 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.991775067 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.986591944 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.986363922 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.991092989 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.986655788 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.986423932 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.988170738 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.987603121 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.987942019 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.993165146 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.99557504 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.98810538 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.991796607 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.98806453 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.995117614 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.987085273 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.987322793 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.986508383 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.986822572 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.998444515 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.987459744 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.986428295 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.988398951 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.988386652 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.99584945 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.992449819 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.994986676 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.987188823 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.988109861 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.987891842 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.994219154 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.997093574 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.993334782 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.995627936 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.997567847 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.996465207 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.993911453 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.989868052 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.988856539 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.988861799 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.988886641 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.986615239 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.989168799 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.994504943 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.988471575 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.994159354 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.988620268 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.994510318 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.989152907 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.989439072 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.996293284 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.002203707 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.001898028 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.989171475 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.994031985 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.988896666 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.99700882 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.001251035 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.989966854 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.989171651 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.989155596 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.994242763 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.991023863 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.001066052 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.998936474 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.997039748 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.989336845 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.998733518 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.011175584 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.996101934 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.003142808 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.026310202 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.992030917 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.990086304 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.994330718 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.992036903 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.990448205 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.994077673 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.990718508 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.001335918 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.989627409 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.990723135 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.002713873 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.991980657 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.991774313 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.990696425 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.992357055 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.000648727 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.990978382 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.001623089 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.991351828 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.992077019 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.991698646 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.994372869 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.992156695 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.991396192 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.991914101 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.998907511 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.99222407 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.991923402 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.0048194 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.992353513 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.998050063 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.498186218 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.001359251 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.992217796 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.992630057 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.992249363 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.001294075 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.998649444 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.993463156 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.99925092 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.002034216 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.001353935 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.001046682 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.997172041 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.997893414 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.997195457 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.992768174 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.992891836 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.009485084 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.008068445 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.994646035 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.994926568 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.004004249 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.994738582 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.004582826 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.003616496 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.993758734 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.99900215 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.993947309 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.993019207 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.994523182 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.993913673 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.000774134 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.002812774 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.994419163 seconds)
  done (took 1182.85984861 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.994101604 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.995129064 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.995106908 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.993285752 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.993404981 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.993040561 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.994053861 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.994824633 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.992274547 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.992302612 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.98854503 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.99277284 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.993427587 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.993184792 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.991665621 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.992444926 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.994613977 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.99337092 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.991573372 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.993103614 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.992502446 seconds)
  done (took 43.776816994 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.992706569 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.992115074 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.992218069 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.992535518 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.992443402 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.992263073 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.991641197 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.992909397 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.992468567 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.992308608 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.992097618 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.991851058 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.991728151 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.991419649 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.992733397 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.993124673 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.990107321 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.990705346 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.99077352 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.990266172 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.992650979 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.990080051 seconds)
  done (took 45.741913216 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.989589495 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.989196892 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.994954134 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.990831361 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.990768868 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.990661396 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.991027835 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.993201775 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.987029984 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.988821212 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.999196197 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.997337376 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.989107994 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.986358408 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.987200002 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.986565657 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.134009674 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.988269809 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.986689959 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.987698842 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.987530574 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.997864606 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.989155409 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.987131372 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.986753669 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.987081344 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.98600696 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.987757863 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.987322417 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.988556508 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.991533834 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.987958394 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.991514513 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.993057542 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.987702374 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.98831978 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.991527181 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.988268591 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.987414122 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.987744788 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.001009812 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.013011152 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.987923525 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.987479962 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.000529239 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.987733166 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.988578899 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.996022276 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.996275536 seconds)
  done (took 99.607270014 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.986855392 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.987242652 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.988074744 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.986467793 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.985651739 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.985899415 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.985919686 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.989630238 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.986124456 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.98522386 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.986056282 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.98778376 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.98753656 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.986689447 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.984637824 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.985284097 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.984831344 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.987238327 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.986348549 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.985408074 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.985246287 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.984768564 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.985000688 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.984524168 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.95764407 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.976500951 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.984955681 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.984766031 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.985470345 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.985320254 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.985439067 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.972057344 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.985550053 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.985842944 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.985592026 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.984497391 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.985415588 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.985695304 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.986254471 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.985510378 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.986513892 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.972150803 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.986295426 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.986654123 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.967019191 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.969585368 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.986085148 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.986384053 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.985910903 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.972162492 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.986525089 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.987298659 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.986279297 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.983226792 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.986617152 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.985945834 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.98734549 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.987479049 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.98792891 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.987119716 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.986739869 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.986522268 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.986650206 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.98784071 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.986829643 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.987204219 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.986771728 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.987677905 seconds)
  done (took 136.862969811 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.986986393 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.986982851 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.987422048 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.987499331 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.98855378 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.987981172 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.98687922 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.985682597 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.986621496 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.98831842 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.986681472 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.988312613 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.987377633 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.987281677 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.988821103 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.986766698 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.987319526 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.987228136 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.987301173 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.987874595 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.984987368 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.975470221 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.987488595 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.986746009 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.98952496 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.986933037 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.950437095 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.987384124 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.951752947 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.987003591 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.979148283 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.979406463 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.980087521 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.964870796 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.982409997 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.97598675 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.976252378 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.976325243 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.971282569 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.97780307 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.975537071 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.974182996 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.975526378 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.975558535 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.976124378 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.974789401 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.974432839 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.974071724 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.974914123 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.974987564 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.973534559 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.974248217 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.974124779 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.972967559 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.97439133 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.97488175 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.974868414 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.97515268 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.97476456 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.973784033 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.974275702 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.973941025 seconds)
  done (took 124.658176855 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.973340055 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.974383517 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.975562783 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.974602572 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.95919824 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.973933532 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.972521852 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.974739471 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.973631031 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.974926093 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.973404308 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.97421246 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.977045279 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.973341057 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.973249912 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.9743097 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.973002941 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.974643096 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.971015441 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.972139604 seconds)
  done (took 41.364783693 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.972289851 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.975712742 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.974112114 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.974884894 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.973905954 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.977041804 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.976176882 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.975329705 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.974347338 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.973352954 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.974238163 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.974296066 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.973676294 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.974075573 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.974537711 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.972569554 seconds)
  done (took 33.490982515 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.971564041 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.974337736 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.973832235 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.97386032 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.974692807 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.972633892 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.939563513 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.971195776 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.97321828 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.974799399 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.972798469 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.958325587 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.972807062 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.973557368 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.974358356 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.972018553 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.973858586 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.974841671 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.973545535 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.975939476 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.976727663 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.961515324 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.974872564 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.974718328 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.97508438 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.980479409 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.975166206 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.975064646 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.97406012 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.973668335 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.977039834 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.975159725 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.974879118 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.977225173 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.974350017 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.973855867 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.974404991 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.973786316 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.973189676 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.973563317 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.973623242 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.971389152 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.976001307 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.976037572 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.975851727 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.960728231 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.972818979 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.973539373 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.974787075 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.974540799 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.974757545 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.973290537 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.973727721 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.97278294 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.974518469 seconds)
  done (took 110.412049154 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.970799888 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.971846358 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.975538791 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.974264567 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.978493633 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.971246854 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.971851525 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.973438507 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.972517443 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.970856766 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.970361858 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.97241634 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.970032684 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.970148673 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.971912472 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.965354131 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.972383988 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.971074502 seconds)
  done (took 37.393530656 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.973273972 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.97188706 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.975108767 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.971219958 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.970937959 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.973591826 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.971305432 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.970471316 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.971229436 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.969263796 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.971181437 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.970357912 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.969966911 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.97077137 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.970133357 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.972247819 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.969598582 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.971631036 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.969986208 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.970229113 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.973353329 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.974366062 seconds)
  done (took 45.269677422 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.970105922 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.970519696 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.983708675 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.987858938 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.987777129 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.004043105 seconds)
  done (took 13.80032518 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969714183 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97159003 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.973212838 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.972718853 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970460092 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.97071134 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972248346 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969966877 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970694042 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.970918716 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.97064971 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973924803 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97209891 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.97181767 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.968692755 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.96934635 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970458662 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971214704 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971623655 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971644788 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972906707 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973111108 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.968347474 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969574886 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970282419 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969363623 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970667252 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969970206 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968983505 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970061251 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970559969 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.97138651 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968594824 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.97041304 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969281357 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969612377 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.970411049 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.969107036 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.968613615 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970449138 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.971158761 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.972055485 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.972446431 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969411098 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969950417 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.969812975 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.969576332 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970900777 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970958889 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97023167 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969569288 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971728937 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970072851 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970047868 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970094413 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970944117 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970096292 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972498874 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971016182 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971028052 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969628548 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970093234 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.97151237 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971659322 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971770167 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971443586 seconds)
  done (took 131.963765116 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.972486498 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.971894162 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971530414 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972224586 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971314218 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971818315 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973191033 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.97048567 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971854269 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970855834 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.972563789 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971464675 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.972926113 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971610658 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.972193943 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973144018 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.972936253 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.973991405 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972553272 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97363044 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973696919 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971005748 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973187196 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973870026 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971541758 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973599084 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.973354472 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.972922013 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.972864505 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97208402 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973035448 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.972739431 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972908621 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.972443999 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973935947 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.976387271 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.974209366 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973444715 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973374124 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.972622134 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.974132988 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973246036 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.974781695 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973998768 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.972926004 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97441323 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.974675394 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.974792688 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.974586716 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97297265 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973455911 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973522828 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.973295748 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.975108275 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973809458 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.974744288 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.97447021 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972870461 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.974366869 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973803428 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.975584619 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.974918593 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.974649911 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973811129 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.974926413 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.975365645 seconds)
  done (took 132.136192351 seconds)
done (took 2740.667844822 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.004796108 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.114507184 seconds)
  done (took 16.022650637 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.144796627 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.006724671 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.156594488 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.093238669 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.000513392 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.008166243 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.975258756 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.973690288 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.039321601 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.965253767 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.950344315 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.978220056 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.978400136 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.955067564 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.966334991 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.978629233 seconds)
  done (took 54.076252817 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.982248907 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.982054687 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.97926874 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.982041748 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.98848449 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.060169021 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.004654769 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.980458482 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.991950156 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.015020662 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.994222467 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.982198889 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.988703772 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.99228256 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.072200666 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.030207225 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.042442074 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.063210568 seconds)
  done (took 38.033548594 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.065617481 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.988354389 seconds)
  done (took 10.961782927 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.980136566 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.993632548 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.993647295 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.007115334 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.989037025 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.015261521 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.985462967 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.018953741 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.990926526 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.993308773 seconds)
  done (took 71.879157041 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.979267542 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.983055475 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.285995748 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.99053997 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.987591957 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.008859926 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.986132903 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.012253107 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.986084762 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.976664474 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.98803803 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.290893065 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.991344054 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.981536339 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.32696125 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.99076818 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.984525513 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.015620081 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.0174076 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.983054057 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.981768623 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.985747062 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.140771531 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.686415054 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.981261778 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.985104867 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.983472702 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.979200226 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.976712406 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.987453906 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.986117554 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.978793361 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.987049098 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.977519858 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.98317269 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.986063997 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.482245071 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.000040354 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.984910209 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.064154672 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.024111798 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.985420993 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.804375746 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.978921709 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.974353457 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.986799304 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.659573534 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.059174773 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.981953204 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.125717944 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.367781982 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.996984539 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.143781113 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.133666389 seconds)
  done (took 139.014336823 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.983898979 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.214316673 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.136496186 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.984500978 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.240119392 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.191386953 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.983303254 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.027377607 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.984802481 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.185205054 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.239020708 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.084610409 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.983053919 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.985795186 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.985679141 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.968995355 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.1330528 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.04991466 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.987017293 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.983703047 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.009635799 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.178611996 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.106182367 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.986502452 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.009154065 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.187997361 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.105767925 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.084940539 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.804792671 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.983905794 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.041819823 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.986556499 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.986242739 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.981841044 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.134208346 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.080418548 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.071379499 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.985051141 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.982333568 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.986426808 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.65487502 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.187207988 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.073291009 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.106934881 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.230527037 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.203234946 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.597684052 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.982426083 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.612445634 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.146356366 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.18995133 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.190878168 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.102422759 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.987250224 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.550616423 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.981316462 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.980790278 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.202780116 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.198560906 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.08325478 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.984855393 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.984317031 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.986317391 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.221063102 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.983534119 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.072973961 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.985806787 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.981324532 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.075645113 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.085851446 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.208268865 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.206453146 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.017097721 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.299626277 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.467810868 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.18550127 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.050201551 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.203144036 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.985878931 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.984392826 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.064793297 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.821896601 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.238733425 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.229139184 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.184143861 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.01372668 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.629636761 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.984513196 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.172066594 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.180868523 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.217275183 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.231445813 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.220382291 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.357218017 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.987685832 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.986285022 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.281036895 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.101617104 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.938553674 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.343042096 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.214416296 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.516022888 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.010182068 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.313516396 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.115251444 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.991359608 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.634878273 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.986569969 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.187804619 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.027534763 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.989998738 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.984613168 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.17611717 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.892043886 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.985123827 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.934783727 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.041452505 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.987013268 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.188627343 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.985318164 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.228430935 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.989384085 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.216223667 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.617717916 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.01338055 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.214729737 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.228869466 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.615268908 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.223886465 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.226802528 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.099209284 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.258968961 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.988604876 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.986481351 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.249279183 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.987390581 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.988871214 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.154322142 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.99051601 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.127315743 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.991144999 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.255144575 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.005621243 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.216368279 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.991612982 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.223466519 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.0212002 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.034607251 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.989652202 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.115279217 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.989447823 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.827031779 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.141418241 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.990416329 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.988353534 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.76308565 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.985035841 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.133577378 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.213343659 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.005668229 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.054071855 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.550156017 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.986507567 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.072822898 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.008191971 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.276769537 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.986387465 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.23947105 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.967712045 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.470964392 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.98601181 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.21307854 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.224839093 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.987565734 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.985409816 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.836518371 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.986778628 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.994364677 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.139756084 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.427457988 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.901628046 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.183322728 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.990711788 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.114914843 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.994533728 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.060482631 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.3300083 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.986528711 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.988605272 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.98793062 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.988563728 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.991456235 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.249491679 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.013936889 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.42057392 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.127608203 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.246028147 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.295475161 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.187697442 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.025709109 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.979075501 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.212943947 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.991043396 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.053569266 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.99189085 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.01024318 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.221107267 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.993876301 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.188921142 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.224753769 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.88688539 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.038714312 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.992196609 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.992877037 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.969826128 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.14064128 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.077769482 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.994549154 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.9888892 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.105648167 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.110259412 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.171826898 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.808906487 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.113740302 seconds)
  done (took 927.54672667 seconds)
done (took 1259.446187498 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.990052877 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.994512754 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.99739459 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.995087937 seconds)
  done (took 29.89277672 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.992357345 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.993015508 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.98822178 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.99301802 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.992943748 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.991773354 seconds)
  done (took 13.86720852 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.993029654 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.990633607 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.992117835 seconds)
  done (took 22.892307326 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.415710191 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.399208364 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.070008579 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.139436769 seconds)
  done (took 10.944269852 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.996895371 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.990594445 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.994648225 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.994048551 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.992491028 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.996251168 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.992709313 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.993267808 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.993571076 seconds)
  done (took 19.872100165 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.100640028 seconds)
done (took 103.493958131 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.880416909 seconds)
    (2/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.298406937 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.021708651 seconds)
    (4/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.187787062 seconds)
    (5/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.071160219 seconds)
    (6/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.110568195 seconds)
    (7/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.074644085 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.018747548 seconds)
    (9/341) benchmarking ("sort", Int8, false)...
    done (took 4.94371774 seconds)
    (10/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.075240587 seconds)
    (11/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.433241134 seconds)
    (12/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 6.991341302 seconds)
    (13/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 4.519761023 seconds)
    (14/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.377299904 seconds)
    (15/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.008359432 seconds)
    (16/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.903858866 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.017116501 seconds)
    (18/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.142553477 seconds)
    (19/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.379421825 seconds)
    (20/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.288784894 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.012530332 seconds)
    (22/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.191230369 seconds)
    (23/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.751593817 seconds)
    (24/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.311752843 seconds)
    (25/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.1990379 seconds)
    (26/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.261083357 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.014080431 seconds)
    (28/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.925295621 seconds)
    (29/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.139428885 seconds)
    (30/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.080022696 seconds)
    (31/341) benchmarking ("perf_sum", Int8, true)...
    done (took 1.994519832 seconds)
    (32/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 6.996569411 seconds)
    (33/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 6.997995126 seconds)
    (34/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.401987822 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.109750628 seconds)
    (36/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.858690308 seconds)
    (37/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.167118291 seconds)
    (38/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.929460745 seconds)
    (39/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.011637693 seconds)
    (40/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.399566682 seconds)
    (41/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.321908956 seconds)
    (42/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.327192803 seconds)
    (43/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 6.996860982 seconds)
    (44/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.149733324 seconds)
    (45/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.107152441 seconds)
    (46/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.209542803 seconds)
    (47/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.263197461 seconds)
    (48/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.228432626 seconds)
    (49/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.110593674 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.07760791 seconds)
    (51/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.224620775 seconds)
    (52/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 6.998922933 seconds)
    (53/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.538614704 seconds)
    (54/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.090296519 seconds)
    (55/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.11410198 seconds)
    (56/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.407941904 seconds)
    (57/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.398888292 seconds)
    (58/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.201725413 seconds)
    (59/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.242443338 seconds)
    (60/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.814294401 seconds)
    (61/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.249555253 seconds)
    (62/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 6.997131013 seconds)
    (63/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.410395678 seconds)
    (64/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.268078844 seconds)
    (65/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.013345682 seconds)
    (66/341) benchmarking ("sort", BigFloat, false)...
    done (took 6.998699281 seconds)
    (67/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.99593566 seconds)
    (68/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 9.806020267 seconds)
    (69/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.591532862 seconds)
    (70/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.34074217 seconds)
    (71/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.244838933 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.342662958 seconds)
    (73/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.079185691 seconds)
    (74/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.773633596 seconds)
    (75/341) benchmarking ("sort", Float32, false)...
    done (took 5.637297213 seconds)
    (76/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.532217829 seconds)
    (77/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.403556387 seconds)
    (78/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.193337365 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.591558452 seconds)
    (80/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.088548373 seconds)
    (81/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.206229208 seconds)
    (82/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.015191493 seconds)
    (83/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.993039649 seconds)
    (84/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.088366526 seconds)
    (85/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.014869879 seconds)
    (86/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.405807356 seconds)
    (87/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.180927977 seconds)
    (88/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.013650277 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.006213882 seconds)
    (90/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.204914204 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.28631404 seconds)
    (92/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.370237119 seconds)
    (93/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.598927107 seconds)
    (94/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.416902712 seconds)
    (95/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.399434476 seconds)
    (96/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.090441288 seconds)
    (97/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.21152041 seconds)
    (98/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.99863932 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.884791805 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.874307995 seconds)
    (101/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.328932364 seconds)
    (102/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.132850267 seconds)
    (103/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.013181939 seconds)
    (104/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.659755303 seconds)
    (105/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.962576589 seconds)
    (106/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.139767832 seconds)
    (107/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.05797874 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.3163674 seconds)
    (109/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.001682496 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.757094268 seconds)
    (111/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.296447535 seconds)
    (112/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.420822011 seconds)
    (113/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.046002325 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.320749951 seconds)
    (115/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 6.99917351 seconds)
    (116/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.385676263 seconds)
    (117/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.396807309 seconds)
    (118/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.008523052 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.865698073 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.141963461 seconds)
    (121/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.09691774 seconds)
    (122/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.134537515 seconds)
    (123/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.320109159 seconds)
    (124/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.086221396 seconds)
    (125/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.192452456 seconds)
    (126/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.025685616 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.138526261 seconds)
    (128/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.012552686 seconds)
    (129/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.000252201 seconds)
    (130/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.2920056 seconds)
    (131/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.302026865 seconds)
    (132/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.271070928 seconds)
    (133/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.091354554 seconds)
    (134/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.355986372 seconds)
    (135/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.276427357 seconds)
    (136/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.000631969 seconds)
    (137/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.091389743 seconds)
    (138/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.157802066 seconds)
    (139/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.138103526 seconds)
    (140/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.333871487 seconds)
    (141/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.138063209 seconds)
    (142/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 2.964959654 seconds)
    (143/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.165277754 seconds)
    (144/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.085804615 seconds)
    (145/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.621518759 seconds)
    (146/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.119115989 seconds)
    (147/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.093123435 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.251594851 seconds)
    (149/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.305659925 seconds)
    (150/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.272132488 seconds)
    (151/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.010459937 seconds)
    (152/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.093402974 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.295732429 seconds)
    (154/341) benchmarking ("sort", Bool, false)...
    done (took 2.218041881 seconds)
    (155/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.140056623 seconds)
    (156/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.139765943 seconds)
    (157/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.005139028 seconds)
    (158/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.009192325 seconds)
    (159/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.132532051 seconds)
    (160/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.217851613 seconds)
    (161/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.46070499 seconds)
    (162/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.281199172 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.037474433 seconds)
    (164/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.018613381 seconds)
    (165/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.01772696 seconds)
    (166/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.080917105 seconds)
    (167/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.598970105 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 5.653688622 seconds)
    (169/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.479903762 seconds)
    (170/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.000061488 seconds)
    (171/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.365048609 seconds)
    (172/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.00489831 seconds)
    (173/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.366775309 seconds)
    (174/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.809928682 seconds)
    (175/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.643187512 seconds)
    (176/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.494027078 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.755706527 seconds)
    (178/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.176591308 seconds)
    (179/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.352060536 seconds)
    (180/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.233503759 seconds)
    (181/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.215672146 seconds)
    (182/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.138747318 seconds)
    (183/341) benchmarking ("sort", BigInt, false)...
    done (took 7.012367541 seconds)
    (184/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.42584537 seconds)
    (185/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.083187811 seconds)
    (186/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.014748723 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.393378043 seconds)
    (188/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.02637005 seconds)
    (189/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.263397511 seconds)
    (190/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.017573783 seconds)
    (191/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.013264964 seconds)
    (192/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.12067477 seconds)
    (193/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.020900978 seconds)
    (194/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.182622566 seconds)
    (195/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.136093797 seconds)
    (196/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.175693211 seconds)
    (197/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.357054133 seconds)
    (198/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.10991539 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.146749184 seconds)
    (200/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.108354958 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.404497398 seconds)
    (202/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.033164081 seconds)
    (203/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.227375092 seconds)
    (204/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.276190868 seconds)
    (205/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.910480516 seconds)
    (206/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.373003318 seconds)
    (207/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.376638165 seconds)
    (208/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.14308836 seconds)
    (209/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.119830698 seconds)
    (210/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.286632979 seconds)
    (211/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.14231791 seconds)
    (212/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.012156125 seconds)
    (213/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 8.728372174 seconds)
    (214/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.430747383 seconds)
    (215/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.698611493 seconds)
    (216/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.032250262 seconds)
    (217/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.133171206 seconds)
    (218/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.09379018 seconds)
    (219/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.013392058 seconds)
    (220/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.125883876 seconds)
    (221/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.38412392 seconds)
    (222/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.094899102 seconds)
    (223/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.403620361 seconds)
    (224/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.009501381 seconds)
    (225/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 3.684095276 seconds)
    (226/341) benchmarking ("sort", Float64, false)...
    done (took 5.721303893 seconds)
    (227/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.1451644 seconds)
    (228/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.666138455 seconds)
    (229/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.396072647 seconds)
    (230/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.227433183 seconds)
    (231/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.314748195 seconds)
    (232/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.086990987 seconds)
    (233/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.010008554 seconds)
    (234/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.158095095 seconds)
    (235/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.193604353 seconds)
    (236/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.466009355 seconds)
    (237/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.021484255 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.603822126 seconds)
    (239/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.030986128 seconds)
    (240/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.011702983 seconds)
    (241/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 3.634626094 seconds)
    (242/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.155916799 seconds)
    (243/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.244874486 seconds)
    (244/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.459521269 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.942233269 seconds)
    (246/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.019606395 seconds)
    (247/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 8.26995172 seconds)
    (248/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.010122974 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.695056603 seconds)
    (250/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.303468834 seconds)
    (251/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.262912511 seconds)
    (252/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.210850985 seconds)
    (253/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.492511747 seconds)
    (254/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.173811286 seconds)
    (255/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.01150032 seconds)
    (256/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.472460447 seconds)
    (257/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.013854246 seconds)
    (258/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.02319322 seconds)
    (259/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.295953159 seconds)
    (260/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.269583108 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.330559504 seconds)
    (262/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.032150106 seconds)
    (263/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.106558314 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.319640792 seconds)
    (265/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.320840428 seconds)
    (266/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.009744118 seconds)
    (267/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 8.630786774 seconds)
    (268/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.146219598 seconds)
    (269/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.007990011 seconds)
    (270/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.067982961 seconds)
    (271/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.089926822 seconds)
    (272/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.012205084 seconds)
    (273/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.159426654 seconds)
    (274/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.26888527 seconds)
    (275/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.523065296 seconds)
    (276/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.114135553 seconds)
    (277/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.09145572 seconds)
    (278/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.0131975 seconds)
    (279/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.138378486 seconds)
    (280/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.267488374 seconds)
    (281/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.308069518 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.790875148 seconds)
    (283/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.505725432 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.409142845 seconds)
    (285/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.489861399 seconds)
    (286/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.787493755 seconds)
    (287/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.241789218 seconds)
    (288/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.027307695 seconds)
    (289/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.216995631 seconds)
    (290/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.333493421 seconds)
    (291/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.208165523 seconds)
    (292/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.131487823 seconds)
    (293/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.143446168 seconds)
    (294/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.027114402 seconds)
    (295/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.010400427 seconds)
    (296/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.033200668 seconds)
    (297/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.227496083 seconds)
    (298/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.810569649 seconds)
    (299/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.471302624 seconds)
    (300/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.15555608 seconds)
    (301/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.089226845 seconds)
    (302/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.435851924 seconds)
    (303/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.237873801 seconds)
    (304/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.179470988 seconds)
    (305/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.034548315 seconds)
    (306/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.442087281 seconds)
    (307/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.974596534 seconds)
    (308/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.030720311 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.032050174 seconds)
    (310/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.164520417 seconds)
    (311/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.151894677 seconds)
    (312/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.038246256 seconds)
    (313/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.464907607 seconds)
    (314/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.30763843 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.702438786 seconds)
    (316/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.084172066 seconds)
    (317/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.024278942 seconds)
    (318/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.063064318 seconds)
    (319/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.027619121 seconds)
    (320/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.114741312 seconds)
    (321/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.039160274 seconds)
    (322/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.172005805 seconds)
    (323/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.11696399 seconds)
    (324/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.319190455 seconds)
    (325/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.818014942 seconds)
    (326/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.04188905 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.853057057 seconds)
    (328/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.940224844 seconds)
    (329/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.427946407 seconds)
    (330/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.033026928 seconds)
    (331/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.163707025 seconds)
    (332/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.133756901 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.030950918 seconds)
    (334/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.737817981 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.373672319 seconds)
    (336/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.15461899 seconds)
    (337/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.686858569 seconds)
    (338/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.105130182 seconds)
    (339/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.777963953 seconds)
    (340/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.085208925 seconds)
    (341/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.026100117 seconds)
  done (took 1142.615039459 seconds)
done (took 1144.624126373 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.050976146 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.028276035 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.545115514 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.039580901 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.025680082 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.031216617 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.552929816 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.056872331 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.045157349 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.557256868 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.037504097 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.027137666 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.040921503 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.063127834 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.041043567 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.044754987 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.033516522 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.051853881 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.063555796 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.037790806 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.08038979 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.033958399 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.027909909 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.079899816 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.029781052 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.04262277 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.048712499 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.079698004 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.084281454 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.028853349 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.034273223 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.392968588 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.082944071 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.036392833 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.038628541 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.045334404 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.032061519 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.043487393 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.04900487 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.041675523 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.029311271 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.039345374 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.031671943 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.037439991 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.02774372 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.028344592 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.033995267 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.153091387 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.046073015 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.376468037 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.092981336 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.048679612 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.083298336 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.033641191 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.031141904 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.032317709 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.082779105 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.038131811 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.033460645 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.376612839 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.126029451 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.04571017 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.374751288 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.096001559 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.038828214 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.03862604 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.030655342 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.051187719 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.394536072 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.596827213 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.06165391 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.051806501 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.030380072 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.033363239 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.044520463 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.550104409 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.049826793 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.620514115 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.055619246 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.044639762 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.038946838 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.033468031 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.037181841 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.046559518 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.050476043 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.033160293 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.037147542 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.034122033 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.045412962 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.396171935 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.084872305 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.539461599 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.039368573 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.05304267 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.050666867 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.621980331 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.061334054 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.049941888 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.032691526 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.399014864 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.078697489 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.054158693 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.036495585 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.042074322 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.145151366 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.051594598 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.051261249 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.033951947 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.055982354 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.042831196 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.033767788 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.046396915 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.052348627 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.067339597 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.048916986 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.031829457 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.040550073 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.038060355 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.049707653 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.045917299 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.039610839 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.042782655 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.034953342 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.084145064 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.054239828 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.050224937 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.14962283 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.03743379 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.161047923 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.045836358 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.039448888 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.034999066 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.377642108 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.081307762 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.054260569 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.040348835 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.057215067 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.054548173 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.050122019 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.026897643 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.035295084 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.034956994 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.08694533 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.037893083 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.059693464 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.085614822 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.047942983 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.040378722 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.053146733 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.068590082 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.054142316 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.037887851 seconds)
done (took 320.55102664 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.080505652 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.030116867 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.109672497 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.033289496 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.101389987 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.085480813 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.033034575 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.035006696 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.033692186 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.432152039 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.034386955 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.039046417 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.032656503 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.034967789 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.085762652 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.035732399 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.034796686 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.270417192 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.034388968 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.094875173 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.034607569 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.036811515 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.03488724 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.435518746 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.032977696 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.03292991 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.094565153 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.03649981 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.279366658 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.033073552 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.03597357 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.277414716 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.096817166 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.048520711 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.043175324 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.043696716 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.10615713 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.041594679 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.083418092 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.085392121 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.109751921 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.06789684 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.033019397 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.03406474 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.038267013 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.036507134 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.035724292 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.067329059 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.032461319 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.042221382 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.274515578 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.04167667 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.0413666 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.03661714 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.035969349 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.049945961 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.036457444 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.036910962 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.096979029 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.036663574 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.086551788 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.437387432 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.435888767 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.037972509 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.036671853 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.037911757 seconds)
  done (took 194.797435416 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.101751285 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.111474798 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.10346095 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.040235577 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.085093983 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.103164575 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.041435777 seconds)
  done (took 16.546020419 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.044370068 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.038740936 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.059775237 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.060298172 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.036510834 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.174866733 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.048277354 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.04478309 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.062444791 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.038493326 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.373737925 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.06251042 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.046742968 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.037235211 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.0488279 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.065744939 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.041505804 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.042670286 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.138629948 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.118040236 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.046776827 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.046132709 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.069624929 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.050455913 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.041551225 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.041878035 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.043266291 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.047740721 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.042069557 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.042395909 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.042608465 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.053555567 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.043616622 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.039056644 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.042062395 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.04382612 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.042065914 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.041146692 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.042371539 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.039804612 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.042899364 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.042429557 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.043592667 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.044315348 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.042625516 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.066653623 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.038801356 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.041664167 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.043553212 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.041633524 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.072273573 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.041910657 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.044063255 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.047931894 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.083450472 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.050201923 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.0429626 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.043235692 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.043563725 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.042485277 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.043787912 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.120618702 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.063686291 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.044126753 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.067039975 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.082428115 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.044856594 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.044038472 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.044294548 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.067790943 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.044847942 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.066259754 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.044979541 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.145064507 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.044986004 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.188075125 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.068666892 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.047912025 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.048524397 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.040910499 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.053294149 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.046254331 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.046778647 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.052169867 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.049444046 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.044832292 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.046206465 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.047412999 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.052205877 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.044937164 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.091574035 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.044437297 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.045042051 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.145041786 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.046305726 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.145481962 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.070556957 seconds)
  done (took 221.844440214 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.051691706 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.044942159 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.059441658 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.045378142 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.045170648 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.051301786 seconds)
  done (took 14.26300686 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.047413823 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.050256997 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.045760742 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.044049054 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.04555471 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.047578095 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.046457436 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.047966537 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.051776511 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.045938694 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.045783959 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.047297198 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.047913227 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.046579546 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.046770089 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.047858476 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.047614932 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.046958535 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.046518273 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.048152458 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.249515441 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.045497047 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.047550726 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.049461501 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.051256017 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.047642978 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.058973581 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.047811146 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.04742186 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.053060455 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.05132654 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.03284202 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.051488452 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.053878099 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.05363643 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.048922105 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.053287853 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.047221775 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.048238114 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.048047122 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.019574555 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.045399944 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.047032913 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.048702364 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.050596901 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.056709147 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.051759263 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.056070406 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.047859632 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.035114354 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.047681763 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.037235091 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.047186642 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.052168433 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.052990877 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.058268419 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.05378557 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.050095179 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.049737348 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.052783907 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.051676359 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.049506768 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.052610147 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.03836062 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.044362438 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.051054855 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.054018262 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.055299161 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.049742521 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.050370312 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.048283114 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.050867361 seconds)
  done (took 150.65741893 seconds)
done (took 600.072343458 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.131054567 seconds)
  done (took 9.100135464 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.191257102 seconds)
  done (took 9.253126825 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.687883183 seconds)
  done (took 12.671520986 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.077317262 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.083406009 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.060724481 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.056228476 seconds)
  done (took 30.262588124 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.366593023 seconds)
  done (took 9.338875514 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.067908882 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.050640657 seconds)
  done (took 16.160485741 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.162974811 seconds)
  done (took 9.135404916 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.53372834 seconds)
  done (took 9.529888486 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.058558 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.072831759 seconds)
  done (took 16.125348978 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.05736632 seconds)
  done (took 9.030861744 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.83276371 seconds)
  done (took 9.896861182 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.055501986 seconds)
  done (took 9.046291557 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.093636251 seconds)
  done (took 9.066149377 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.148753422 seconds)
  done (took 10.123333458 seconds)
done (took 170.719336757 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.058182324 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.047995131 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.046644274 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.048477189 seconds)
  done (took 30.173158793 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.086489912 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.086129831 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.096698002 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.087835955 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.078177097 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.076399281 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.086387233 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.08574928 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.0792703 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.084971867 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.089422417 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.087276939 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.087222289 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.09648428 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.095778942 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.087606144 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.087626681 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.089554969 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.079722344 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.095928879 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.08587991 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.088692308 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.0553337 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.053298133 seconds)
  done (took 52.001266538 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.243459129 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.119840622 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.209448143 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.098335878 seconds)
  done (took 10.64464739 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.052698668 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.118478697 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.104574522 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.099772429 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.13919044 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.157036555 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.10514314 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.261084309 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.169725361 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.233322035 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.061816723 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.075630793 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.080000782 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.098799672 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.157865981 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.054490473 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.054118367 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.168411983 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.115724547 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.263027458 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.056460319 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.108019285 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.149537679 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.107037456 seconds)
  done (took 52.966661334 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.056315155 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.062038221 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.062543507 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.05671584 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.055238978 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.057774851 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.062651912 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.056811586 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.077737529 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.059172178 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.054222163 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.054732563 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.064013053 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.057298896 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.055012595 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.06984282 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.069959351 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.056590401 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.061202877 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.064067872 seconds)
  done (took 43.189376964 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.055613796 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.901302339 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.401094735 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.304737337 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.054349479 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.054603226 seconds)
  done (took 32.747149643 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.067175496 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.074941388 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.062261879 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.078710602 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.100848656 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.06083626 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.117580279 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.193182561 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.063101515 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.114084005 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.074598631 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.0595414 seconds)
  done (took 27.043583254 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.05593129 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.054478956 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.055625263 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.066257343 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.065877236 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.064285392 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.064961594 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.054191789 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.066230773 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.075276838 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.065122592 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.067555695 seconds)
  done (took 46.730986005 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.269765526 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.282519772 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.274975967 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.678940616 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.372343857 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.042619392 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.344168995 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.278174348 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.725029275 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.747676391 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.34782633 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.036297136 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.005119572 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.980224322 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.956599183 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.302418946 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.057485061 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.915273717 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.310831701 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.10113062 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.059843324 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.059726918 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.066906162 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.356010332 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.384407078 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.057837952 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.271184851 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07425649 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.058230798 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.311613983 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.547405253 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.111049007 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.260551776 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.31634198 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.396078138 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.156216943 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.063966232 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.259924828 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.102452151 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.095111851 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.068574733 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.072663546 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.605272919 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.075758078 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.332436417 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.056741998 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.101007249 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.041672156 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.984716169 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.375778078 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.170812308 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.064363344 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.0952546 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.493945712 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.180341257 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.304551791 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.065515345 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.267797406 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.116706129 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.321695172 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.221033023 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.065176209 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.275653351 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.986531194 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.414336955 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.181334417 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.062748824 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.065357637 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.765188481 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.305058258 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.169476207 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.389011049 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.817959328 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.063992344 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.06313769 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.106078838 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.157895254 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.055753866 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.356519164 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.054017649 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.986274489 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.161262961 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.459090916 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.06766576 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.062062855 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.069367304 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.906990992 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.989771923 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.162151889 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.341081437 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.381964553 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.06292127 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.064307445 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.08487777 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.066197937 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.008416186 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.652902738 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.126517772 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.989631682 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.62871883 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.551489644 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.029704109 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.556005582 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.104997774 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.349978114 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.217707147 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.468424122 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.270894683 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.309218499 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.625988605 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.069106978 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.675803297 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.144958793 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14049794 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.063684483 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.623427957 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.267851091 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.369817465 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.177831226 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.064639709 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.991662115 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.076273147 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.269258319 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.559533414 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.119453918 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.06147758 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.069773532 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.063346131 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.064681173 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.178957604 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.082638761 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.353180539 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.142839924 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.064367852 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.001912099 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.067081 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.352927136 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.760435401 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.124690436 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.31972595 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.335514974 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.765099817 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.661391829 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.017916672 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.331439848 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.135127857 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.141811406 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.667054917 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.200558911 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.16078554 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.064772581 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.207676147 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.075942136 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.070511951 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.508135207 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.484490084 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.495317093 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.111628002 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.066911637 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.014811139 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.274947978 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.306379265 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123060566 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.088757829 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.072003875 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.150627988 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.2916175 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.066553917 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.994113506 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.316942062 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.310049604 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.367050083 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.476988844 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.120227212 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.142373653 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.077236339 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.283274822 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.152024545 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.726377846 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.611420695 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.286076775 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.657403186 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.032013536 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.703962732 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.340281245 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.448674158 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.085040148 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.517888669 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.268621662 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.777078451 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.098104054 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.594817557 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.99371448 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.070973553 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.408707556 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.024318181 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.377966453 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.135598977 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109405914 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.06975367 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.070288314 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.076678776 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.980238261 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.174048307 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.139253199 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.142215569 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.995790127 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.736415197 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.103454207 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.071619791 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.069514846 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.424857769 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.90860278 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.021057136 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.069240813 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.144785629 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.816159689 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.622830902 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.07169227 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.072971888 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.674292754 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.075678143 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.980905172 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.152158854 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.819364531 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.09365759 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.341881352 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.769453506 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.357409236 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.14529642 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.143717207 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.071430487 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.07065251 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.770373434 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.079734008 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.771759864 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.353633067 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.349068419 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.522694856 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.131421954 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.280133968 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.084507308 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.072789642 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.582333564 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.094975565 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.069619115 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.273651244 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.593651376 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.412911725 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.718251198 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.157752908 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.071898391 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.338327145 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.059430997 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.565558066 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.757495844 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.071476698 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.070823697 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.318937872 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.755155349 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.072849005 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.047443631 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07766549 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.285054461 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.273832355 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.347089594 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.37356286 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.521538547 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.998709859 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.076596286 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.099752069 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.314346076 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.070543024 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.107038991 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.519389904 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.131333764 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.498156217 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.354312752 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.468821185 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.703500863 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.335915395 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.136943637 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.08329719 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.723572061 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.201115495 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.004729581 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.190567785 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.001912773 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.764668936 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.36147813 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.085597575 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.339371197 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.050718849 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.405629286 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.369213844 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.350208905 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.115870109 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.098013533 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.072220104 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.121565572 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.072988895 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.298153862 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.187179601 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.080052286 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.63836106 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109296084 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.12104748 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.079794662 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.582690339 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.092628036 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.076260404 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.768688129 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.094441311 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.191142837 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.147735739 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.821750715 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.594984443 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.09748824 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.026855346 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.720356044 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.343445597 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.129174559 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.539996525 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115741201 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.479882837 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.073430377 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.288072269 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.079339618 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.683277103 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121089031 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.355646473 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.031390736 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.286172672 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.27998829 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.105344124 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.076935887 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.002190686 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.179417778 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.939387426 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.05713927 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.077339255 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.760943488 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.498319722 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.314136728 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.538199161 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.899078993 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.078532561 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.448467047 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.469257233 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.736691465 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.110857806 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.076844743 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.408271251 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.193854081 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.402269702 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.346544983 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.085370964 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.102479726 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.290281964 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201584638 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.994470952 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.568035731 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.659379918 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.777208432 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.087353081 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.279400195 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.416863363 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.403011439 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.112937356 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.150826805 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.481566703 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.345147274 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.144448133 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.003457728 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.078038365 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.473237484 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.478052499 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.175417645 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.317575831 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.404851433 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.760400225 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.585116258 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.546069344 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.473616232 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.526181932 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.489032656 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.294881375 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.454005558 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.401747735 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.960556944 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.49182775 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.28959873 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.17631406 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.357927693 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.950191934 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.786652041 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.32229855 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.083634631 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.00746075 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.286146578 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.08556692 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.620318442 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.599297449 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.325363532 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.353562875 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.551836786 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.618254476 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.301916234 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.105942053 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.04462095 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.102822411 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.100616939 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.082066427 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.576021067 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.371560778 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.094102576 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.022854526 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.749470302 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.010883563 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.293912212 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.303400043 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.117988847 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.635364617 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.350298571 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.178465471 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.370570613 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.361899859 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.116619313 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.007609586 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.819182092 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.028128781 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.150689014 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.505469417 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094683866 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.086874285 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.285379221 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.011199956 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.127659528 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.087591303 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.293028577 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.667002886 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.351487893 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207754 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.329350837 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.386813655 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.955509526 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.106478998 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.354040252 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.008678312 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.737171467 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.788857517 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.120062422 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.155198483 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.082323843 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.08251606 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.351972086 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.416992912 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.180775384 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.694263759 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.115720136 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.107341789 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.419122378 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.170026184 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.083621796 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.086613507 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.593784919 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.317851822 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.08384838 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.057827991 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.296743552 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.155504744 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.27966317 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.159837221 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.597829686 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.090606538 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.936885354 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.18259676 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.039699737 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.082389426 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.786279966 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.143822732 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.081424035 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.353048164 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.743843625 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.286423682 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.479175469 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.995445635 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.317515801 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.128925931 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.086305968 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.088162097 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.480467871 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.389778898 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.083587307 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.358104254 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130596163 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.089906872 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.747250783 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.053678447 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.085802094 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.766646347 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.0506208 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.814150578 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.481061662 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.099312719 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106058452 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.089692152 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.010464245 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.084824609 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.250569971 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.089298321 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.215658616 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.353221901 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.395476442 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.171455405 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.091651948 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.087316547 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.093654942 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.298694884 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.601882692 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103126666 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.788077235 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.287826623 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.094806454 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.581746316 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.533956175 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.395566446 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.125442486 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.314332675 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.337609834 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.628665132 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.315189083 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.056961453 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.31229317 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.088514802 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.358853381 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.361074129 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.088251321 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.299480372 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.616664191 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.372307264 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.439782538 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.39828942 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.149926621 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.319861854 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.989785231 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.086548945 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.090566607 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.350358227 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143344275 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.085533333 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.09840004 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.643933962 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.757138805 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.55564323 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.247909736 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.409233204 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.851371069 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.842924718 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.083903192 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.000483383 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.087062398 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.111821588 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.062621396 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.014175124 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.816543334 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.817388971 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.302104913 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.403005071 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.017239107 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.293303156 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.689062805 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.016148694 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.057813118 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.0909503 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.349645856 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.018586361 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.092746213 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.042915098 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.357222227 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.999469741 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.361306368 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.090803347 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.036028643 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.089729385 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.083604246 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.091132747 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.175165841 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.091648913 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.205379319 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.352118564 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.456603285 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.192294025 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.730162333 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.828234324 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.025869418 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.133202537 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.705186035 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.661246409 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.361234517 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.217112394 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.822784851 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.035441718 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.091114917 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107525936 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.332615968 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.095242687 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.094973739 seconds)
  done (took 2205.007277887 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.229466604 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.12730844 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.15124933 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.122501547 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.224145187 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.168621231 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.152220159 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.270457088 seconds)
  done (took 59.455956283 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.091173996 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.088969127 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.097061459 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.092364985 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.088914792 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.095139579 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.284874714 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.120660365 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.103736305 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.09210209 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.090450109 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.092796974 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.090367597 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.089905279 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.096635332 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.407963111 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.11322347 seconds)
  done (took 80.1573039 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.154368965 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.90570914 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.094354772 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.7693605 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.150403682 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.434958572 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.095649535 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.094715691 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.209120766 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.391214607 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.143412407 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.109671901 seconds)
  done (took 92.587824731 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.09426667 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.095598291 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.092970561 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.094777735 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.093780196 seconds)
  done (took 12.484618427 seconds)
done (took 2747.23099524 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.489831124 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.191427481 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.169556584 seconds)
  done (took 6.372572861 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.236177223 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.285020507 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.401360978 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.378935097 seconds)
  done (took 11.320522728 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.382853113 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.470852174 seconds)
  done (took 6.86595999 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.469680906 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.10848938 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.482977106 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.096766362 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.096968047 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.095260852 seconds)
  done (took 23.307401805 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.096264715 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.096156133 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.097179239 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.096629777 seconds)
  done (took 10.40008145 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.094490756 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.862385805 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.095965506 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.104347452 seconds)
  done (took 22.169748448 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.309824154 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.257122303 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.86241903 seconds)
  done (took 13.441790086 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.712610834 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.546402339 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.706287637 seconds)
  done (took 9.979323788 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.92377182 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.912097911 seconds)
  done (took 7.851199265 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.236566218 seconds)
  done (took 4.249785917 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.92314526 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.40907089 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.57537429 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.64550468 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.709740652 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.324101695 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.419108659 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.366437477 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.52330505 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.515388055 seconds)
  done (took 27.42778399 seconds)
done (took 159.956403451 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.527302037 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.116787596 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.303488994 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.474571678 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.336245815 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.302002625 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.393417619 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.465527342 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.146743097 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.134083593 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.47709698 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.337221898 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.336845341 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.124338128 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.341306296 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.123200417 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.439757705 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.553369108 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.158423116 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.365509647 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.39610435 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.115623791 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.318152173 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.134127801 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.39420538 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.255336553 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.718317241 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.124598564 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.306208448 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.733224256 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.261655989 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.514693381 seconds)
  done (took 176.746359694 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.972638153 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.096749191 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.09567986 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.085836529 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.467064455 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.096512617 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.098715707 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.099958438 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.324344439 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.284198882 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.094828425 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.451039974 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.099274176 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.096136412 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.098199708 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.097362944 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.420245173 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.016859116 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.096816353 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.09912733 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.097804606 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.331103214 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.098404725 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.348908945 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.398020134 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.096783105 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.098163989 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.099324274 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.099115458 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.09853659 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.100337762 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.099250452 seconds)
  done (took 215.177690404 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.10152629 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.099224612 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.097814753 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.099795594 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.098642744 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.099246243 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.09748035 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.100955999 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.897433909 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.881291913 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.099014908 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.100003918 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.103132445 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.098111062 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.105042667 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.09858105 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.103387369 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.100076188 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.101058651 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.098160022 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.102519971 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.829680129 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.101354706 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.87863029 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.098146776 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.111201067 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.101595564 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.0986632 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.100153772 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.103123765 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.075894878 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.099274651 seconds)
  done (took 228.300588566 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.343323316 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.10392787 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.07282422 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.116633078 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.105198131 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.101966817 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.111802172 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.356926329 seconds)
  done (took 21.321146901 seconds)
done (took 643.58177353 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.431942842 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.829203488 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.225738048 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.132110852 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.377367293 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.171145709 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.126198928 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.185804311 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.781110017 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.194957443 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.540366908 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.12874224 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.862991238 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.153456575 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.24172198 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.181377291 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.487459644 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.777861167 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.257053772 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.786547305 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.333522649 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.050855566 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.20414846 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.818727434 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.543196674 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.064954692 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.14814922 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.493885202 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.13146382 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.363881613 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.775611065 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.393623819 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.13856376 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.1253667 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.17817002 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.15724293 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.325525443 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.134832055 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.235939564 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.841733233 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.79257058 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.654789107 seconds)
  done (took 109.80219252 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.117315611 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.116797454 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.113290975 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.114097033 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.123822995 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.114503123 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.114943829 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.114133511 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.113135231 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.116390492 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.115061196 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.124514843 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.115345424 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.12393352 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.115254313 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.116140093 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.115726711 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.12386949 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.115365511 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.115150003 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.11259131 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.117143815 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.109337057 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.115826157 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.116074478 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.116926754 seconds)
  done (took 57.063396547 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.109732922 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.29033312 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.390698223 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.139059976 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.108375052 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.113089184 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.138177283 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.11556865 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.109689591 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.109035332 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.20704205 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.114641863 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.122417932 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.385715106 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.13760715 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.108761216 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.106895992 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.109610314 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.29466863 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.125288813 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.138156448 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.115457958 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.139283748 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.124044741 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.114080312 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.10903934 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.113600868 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.573626991 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.120638391 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.20818789 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.151922908 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.144700123 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.504871701 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.398891953 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.176971419 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.118036766 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.111435629 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.253663586 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.1214728 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.110513392 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.139016249 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.115615555 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.392918713 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.633831056 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.121615553 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.080710173 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.570156481 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.264016937 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.155880509 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.123437769 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.400076169 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.140674715 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.110524701 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.111456037 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.146927061 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.121294401 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.112678287 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.393672602 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.125752274 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.139538834 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.118494168 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.111511306 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.30378654 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.121639444 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.293747113 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.123376764 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.117945732 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.115011719 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.394732259 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.143647004 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.637878145 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.127254772 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.097265973 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.210872322 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.297154146 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.598422568 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.127112396 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.306394216 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.524902628 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.149096514 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.120834443 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.560371214 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.150061349 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.120443272 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.114350541 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.113616968 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.112908442 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.162219316 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.140072377 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.548972762 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.63306171 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.40713721 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.151526051 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.125680656 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.116206933 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.397058592 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.123347286 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.11427605 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.391329553 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.65844838 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.128551924 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.122646097 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.613909958 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.127727111 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.144294044 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.124652331 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.410390433 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.144219233 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.162203804 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.115572228 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.119868665 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.117990626 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.145204766 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.122947099 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.117121094 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.605045783 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.269579459 seconds)
  done (took 261.387981487 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.115471571 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.108860402 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.113211502 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.112172754 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.114610661 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.11523427 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.11305246 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.111882557 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.115934214 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.11546687 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.114347341 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.113840199 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.117080164 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.114578647 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.162525036 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.116225848 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.602574831 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.113831691 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.111442281 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.115605297 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.688955693 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.11956528 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.115498169 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.114038865 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.115147186 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.115901793 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.123052326 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.159350766 seconds)
  done (took 174.411826618 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.117873944 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.169418089 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.128373266 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.162292063 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.126004148 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.116247065 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.140956504 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.129908416 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.120798102 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.118780178 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.11582311 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.145156096 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.123810232 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.214301094 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.145652466 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.149763473 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.215141744 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.120999615 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.117313746 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.117809984 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.162427663 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.132155964 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.148674736 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.177576412 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.128680824 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.172626886 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.132708251 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.118968515 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.118531419 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.230851096 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.135178641 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.142398902 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.150777935 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.138817719 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.23320197 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.228589478 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.220558427 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.147356265 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.121313231 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.119276657 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.118656507 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.120592513 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.173906284 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.130875896 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.119814746 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.237051213 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.135923408 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.120513258 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.141023064 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.120455485 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.129483375 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.134842529 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.151656283 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.241358762 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.163892385 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.145409521 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.144282951 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.138992829 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.117878371 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.216400244 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.127455275 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.234261267 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.136385209 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.123099905 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.122959405 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.123938968 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.168675313 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.157329002 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.220097343 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.126845671 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.216696108 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.173075497 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.134122067 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.121181199 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.121564644 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.175082741 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.227025532 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.17299772 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.178315187 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.156500879 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.129047955 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.119853621 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.1249143 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.146966847 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.127488182 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.23335132 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.232367237 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.126913173 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.122608441 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.122083101 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.120334381 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.146772556 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.182657413 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.161197345 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.226890348 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.157508016 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.158462524 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.128968098 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.134247246 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.127251495 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.15435506 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.128494229 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.134011616 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.45896968 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.161102284 seconds)
  done (took 228.283898246 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.475339731 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.167677441 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.191103128 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.396224175 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.478165733 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.005696211 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.162109204 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.171488596 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.17945358 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.297061004 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.23169166 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.219064402 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.158949425 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.146341955 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.166995938 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.182602185 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.207146068 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.473781646 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.270277919 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.704535796 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.164212704 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.437170466 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.464970645 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.505675638 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.208314433 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.58007074 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.76654768 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.266914746 seconds)
  done (took 69.723052687 seconds)
done (took 902.70393075 seconds)
SAVING RESULT...
DONE!
