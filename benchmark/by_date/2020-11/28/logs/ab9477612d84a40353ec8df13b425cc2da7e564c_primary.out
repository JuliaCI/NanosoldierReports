cset: moving following pidspec: 25222
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.963658494 seconds)
loading group "shootout"... done (took 1.139895628 seconds)
loading group "string"... done (took 0.672711723 seconds)
loading group "linalg"... done (took 8.679894481 seconds)
loading group "parallel"... done (took 0.189134989 seconds)
loading group "find"... done (took 2.98577586 seconds)
loading group "tuple"... done (took 2.193021204 seconds)
loading group "union"... done (took 15.041881836 seconds)
loading group "dates"... done (took 1.485370114 seconds)
loading group "micro"... done (took 0.220590808 seconds)
loading group "simd"... done (took 4.824415968 seconds)
loading group "io"... done (took 1.080860529 seconds)
loading group "random"... done (took 9.618689135 seconds)
loading group "problem"... done (took 1.518202394 seconds)
loading group "array"... done (took 25.282269167 seconds)
loading group "misc"... done (took 1.927654504 seconds)
loading group "scalar"... done (took 44.157878395 seconds)
loading group "sort"... done (took 3.364212576 seconds)
loading group "sparse"... done (took 12.809339943 seconds)
loading group "collection"... done (took 18.986280092 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.428136826 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124623541 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129314557 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.124468193 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.185486727 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.125826543 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.134118212 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087559734 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.882694478 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.143459781 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116338593 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.436682751 seconds)
done (took 5.365642131 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169103046 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093168486 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083075539 seconds)
  done (took 1.393831897 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072188204 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.060666284 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067692814 seconds)
  done (took 1.416954102 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065453994 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135075273 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066662284 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067099287 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.07082824 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067836105 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068007975 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067812571 seconds)
  done (took 1.76310663 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072774627 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068380971 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066113305 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068407691 seconds)
  done (took 1.501379883 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.0657166 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123138293 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065186931 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065974288 seconds)
  done (took 1.544468305 seconds)
done (took 9.093894235 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.139472593 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.814739158 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.753248656 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123383932 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.248259854 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.449727494 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123696464 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.185492194 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.092618061 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077660628 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.125364958 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.08007379 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.399470765 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.40086394 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.07178056 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.171306412 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.645125565 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087139549 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133311859 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.454744753 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074184028 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088153171 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085913524 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071940147 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.341433291 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154744221 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.667299425 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.099663745 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068947838 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096815461 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.073497593 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.080802407 seconds)
  done (took 10.740262428 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093267718 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090875587 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069387799 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123868248 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.096639346 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.071544529 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077319373 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068928227 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.09131453 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126989124 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.093269121 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.101345375 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068682278 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071609432 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.082204894 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.200458118 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080577202 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081810338 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067678272 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.08099774 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105765928 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078715962 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078763604 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078408404 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130348586 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.172601647 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097457533 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099230633 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066718968 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078868741 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118065763 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126020933 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.06845334 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065672005 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.11982947 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096697508 seconds)
  done (took 4.69551916 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.899933673 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.09843394 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085376633 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076277223 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109531391 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.116169408 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.125018502 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.125849634 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103074896 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070673384 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.156050548 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.651008237 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.127002262 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071776986 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120357815 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.360474291 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.063715266 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070137503 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068617227 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071376009 seconds)
    (20/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.117382998 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072069392 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.115111609 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.068246678 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.177031505 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.584984774 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071615394 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069385891 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096172218 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065619139 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.145373963 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094451467 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07182266 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.549061437 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066113163 seconds)
    (35/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.064197415 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064614191 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.09052794 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093444152 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.18084276 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070835385 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080972661 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067887164 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110597818 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082192994 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.491460505 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.07039068 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.566296094 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.229865687 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.075835779 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.074138754 seconds)
    (51/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066743675 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104057175 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.066310907 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069464897 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.921895786 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.125520703 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068214353 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.278084964 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070708371 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070617262 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071109309 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102189799 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069313893 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070330707 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074679804 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.09842548 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.814488466 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.086456959 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096341051 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068316753 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.404436266 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076246224 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071622531 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07168794 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.086466462 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.115079857 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068499179 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067628878 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110674107 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.091540329 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.092331634 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071240313 seconds)
    (83/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064903139 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067094983 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067528548 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.329428177 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.168954589 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067431218 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067838322 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.478821231 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063935052 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066167948 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067814645 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089260385 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066695908 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063642445 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064742467 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098149422 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069336685 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.464671889 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070098053 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.474046018 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071833067 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.108752134 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119604262 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068795497 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.095291595 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068536978 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065959662 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075718661 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066157662 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065871183 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071416336 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066615027 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067878453 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071400081 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070107114 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069292704 seconds)
  done (took 22.837597998 seconds)
done (took 40.403443977 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.317209367 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.081118097 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080692535 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.081960767 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080799889 seconds)
  done (took 1.918337053 seconds)
done (took 3.288923238 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.135527338 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077458637 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066265904 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103354318 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.071100743 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104167543 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.11144565 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.106759 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070866223 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070832102 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.07058738 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105221813 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107882423 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070989711 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.101029979 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106630529 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.07169041 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06897433 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070865795 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.070790622 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.071114301 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066595309 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070599067 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.071090368 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101981655 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070406792 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066074214 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101616809 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.070766008 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.10149072 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070958154 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070638799 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070677623 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.101983607 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.070932269 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.10225134 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066335988 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.070793328 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.071077855 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.070561411 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070927551 seconds)
  done (took 4.712626613 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071455409 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083453369 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085580021 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064272689 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073599508 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084859123 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063802511 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084041542 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090183264 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084641631 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083990797 seconds)
  done (took 2.194278973 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070619085 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085100379 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089572155 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063847855 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075427221 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085174799 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063625396 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084730069 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087985026 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085466471 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08579289 seconds)
  done (took 2.182942415 seconds)
done (took 10.386938803 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097251801 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.068112839 seconds)
  done (took 1.452664091 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.229520628 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.513682501 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.38540057 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092722903 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072606156 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085295026 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.2006082 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068504855 seconds)
  done (took 8.12670586 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.105084601 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.07079594 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069695381 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068770571 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069964783 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071186129 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069689502 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071570349 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069804325 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070256528 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070457829 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.070855747 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071649108 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071641073 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.070015087 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069710116 seconds)
  done (took 2.563634797 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105723735 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071362644 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101524628 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063845383 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073743235 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064293316 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072613083 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.074950128 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.071831205 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.073236326 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074197186 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.073297099 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073156724 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073169865 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074900322 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075143218 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075154036 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072116858 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074601363 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075134539 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.074395338 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.074616768 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075542408 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073717383 seconds)
  done (took 3.23484737 seconds)
done (took 16.685054766 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.17528664 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076307475 seconds)
  done (took 1.549036433 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068424967 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068495538 seconds)
  done (took 1.451712008 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073968432 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.06135585 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079904582 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072546727 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063331059 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063459633 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079210621 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063602399 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063383293 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063314942 seconds)
  done (took 1.997419337 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063227689 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069598735 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068689545 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.067031764 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069111354 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064603449 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.066967283 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064820124 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071071462 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063229823 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.067530086 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085181511 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.068035367 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.085927295 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06790488 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068003244 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069840837 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067532804 seconds)
  done (took 2.566148289 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061136094 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062011961 seconds)
  done (took 1.444604003 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065505314 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062224844 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064662305 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06485058 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062535866 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062235574 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062329855 seconds)
  done (took 1.757593947 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.422603489 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.12296485 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341544903 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069749848 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.0788312 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.260120286 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065700788 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070327661 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.07024205 seconds)
  done (took 2.859604816 seconds)
done (took 14.956714439 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082283506 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182471603 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.08886967 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.405835809 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094116547 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.06914506 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.115481405 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.17869455 seconds)
done (took 2.559922632 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.215266238 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.252420747 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.396579255 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.127321218 seconds)
  done (took 3.099865358 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.337600527 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.081126693 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078428042 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068982561 seconds)
  done (took 1.903285283 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065198108 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072733268 seconds)
  done (took 1.468872864 seconds)
done (took 8.027431544 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072446618 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.094223374 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.069125716 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.063483988 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.065757883 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.066371527 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.065717513 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.076176498 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.06404511 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066068679 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063502146 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.066018324 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.066365318 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066187736 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067966872 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065840764 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066220559 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065811164 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.06526032 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066216758 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065663297 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065950379 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065443431 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065505487 seconds)
  done (took 2.98231778 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079509724 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065740383 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068705515 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068968429 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069141803 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068869748 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068654561 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067893887 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069408755 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067409051 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069064944 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069348901 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.06725 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069766129 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067521624 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.06928203 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06963047 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067575998 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067608307 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069556758 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068857061 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067780222 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069445556 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06848584 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.068974367 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06901414 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.06753146 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067551463 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069182587 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069556764 seconds)
  done (took 3.415637253 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066832331 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061928025 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062791773 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.072264201 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061689396 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062929758 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062132245 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.062013459 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061836501 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063481894 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062569736 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061751722 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062449624 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061854 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.06208056 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062573664 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.06656488 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081214737 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062390045 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061640589 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066139962 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062083966 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061849752 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062553041 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.063102612 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062110948 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.06159469 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.06236436 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061601299 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.063013681 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061663124 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066151876 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066538747 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061541865 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071977509 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066312442 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061747129 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066019146 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062903111 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061852954 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061235467 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.0613827 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061839706 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061672624 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072209578 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.06206822 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062839846 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062336441 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061997682 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062117267 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061635375 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.063927602 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070484524 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063016901 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061467691 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062610325 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061354029 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062450331 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061811653 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061682357 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061255555 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065808146 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062757298 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062815708 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081585986 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062979556 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072072079 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061903822 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062594501 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065523125 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062020965 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079746725 seconds)
  done (took 5.960225643 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071406199 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072033433 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.07884897 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.07029022 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064689314 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061582065 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066572104 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062741948 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072742859 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067611083 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063491545 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067085703 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072397862 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067703049 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064457907 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072130174 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067456224 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066099639 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063227018 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066949223 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064484462 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067119737 seconds)
  done (took 2.852128899 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135703132 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066582951 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105631886 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074745462 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06856774 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.074999707 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066615584 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066142643 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066421343 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068840289 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069001238 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06808806 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070306778 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068677375 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068765075 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068903579 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067702507 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068478978 seconds)
  done (took 2.69397618 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076306678 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066256837 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089798963 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067253808 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067861683 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067221912 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071710716 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071914015 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067835594 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067671604 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072055682 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067254798 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067437361 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067713729 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067671772 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067898432 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067625447 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067602705 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070392384 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069513009 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069491401 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069874537 seconds)
  done (took 2.890654095 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07715127 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065213515 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080465214 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066336891 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060821571 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060669153 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066549538 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065566881 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065733143 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064990251 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065495983 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060980808 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067097689 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06556405 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067101823 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066356121 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065207947 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065207881 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065002135 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060788942 seconds)
  done (took 2.675887351 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.085944499 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063932629 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063458897 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082860067 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063506197 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06333083 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082684298 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063233474 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063475416 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085547648 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063593742 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063739538 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082647293 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.082307025 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063827512 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.082550836 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.082868485 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.08250482 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063446074 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063409236 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085036754 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063605096 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.083041377 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063653704 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063655527 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063603551 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063602386 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082571152 seconds)
  done (took 3.371373352 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065094584 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064879024 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.06551512 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065304068 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065864883 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065657094 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066185172 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.0659198 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065561983 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066213692 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066036569 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065978666 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069466656 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065676238 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065718841 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065663186 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066253776 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06605094 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066062751 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066054818 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065658046 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066352303 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.066258733 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066152269 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066229448 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065865532 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066318874 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06588815 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065219424 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065855634 seconds)
  done (took 3.338012663 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073463274 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072624515 seconds)
  done (took 1.506492087 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062210581 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077448867 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060835837 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072948177 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069176031 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064917674 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069655635 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069107119 seconds)
  done (took 1.901478562 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.06717688 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090953984 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.06302129 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063170869 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065204338 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.132108615 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074957578 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073794169 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076097443 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064900979 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062946066 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074661325 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062395113 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075478535 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064042669 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071620764 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070593452 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081711297 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07701575 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062079315 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076359088 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064787357 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062810198 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064833405 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063659468 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070523958 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077959572 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076099725 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.0724281 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061808557 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083197018 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062801364 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063895516 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072659408 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067158209 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062727397 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.10023929 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063116817 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068473247 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062449489 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075490599 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083799364 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075808688 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079261945 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062880802 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062855031 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061630631 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063613576 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065915646 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072740897 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062851507 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0704951 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062046492 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064779141 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073741681 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063420524 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068661567 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072499226 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076687636 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073806941 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072299003 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078856501 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.07212115 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071098773 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064110599 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.083077226 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064551264 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076576861 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077930313 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063981408 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.077006402 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062204262 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061860121 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062468201 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097039437 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064812237 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064428431 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062825795 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.063061076 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064969352 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072796542 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068667957 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070657537 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066466367 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078904667 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.07218708 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062776196 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069483253 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080709961 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065957231 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062997854 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079292756 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065927318 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062276895 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080420452 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072723785 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064346165 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063320655 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065779676 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075496167 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063491847 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060972299 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070904991 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063658579 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.065062395 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066868995 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070706668 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.062415162 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072909504 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066561368 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063877169 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.061092263 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066068912 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063523115 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060845466 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071351351 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062425786 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075911192 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.06820165 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076082992 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07617178 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072107712 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077179718 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061823817 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060240988 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079333201 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.0712666 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.205545581 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.083313737 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.063997995 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.078125552 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063949583 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065217191 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073502392 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.06252977 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06505838 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.06361329 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068169227 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064759169 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065282694 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06860209 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071885472 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075948625 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064975342 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071980087 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063525271 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079541305 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073124134 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067997048 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066865054 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063903986 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075546938 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.0696477 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072803806 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062814098 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063627987 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063144152 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073543889 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072508642 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.065112689 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070625953 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067580866 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063627806 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063466422 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064082421 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066487302 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06641351 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063943331 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071194427 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071817309 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077584638 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070521667 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.072433319 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061565399 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062423399 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064624298 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062636493 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067213939 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.073101783 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079061095 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.075399646 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084507439 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063008551 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073431629 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.0649704 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.079993621 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.07647057 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064191213 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067624704 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.062138233 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064339641 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.0726233 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074760418 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.077259823 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078410443 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067469284 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067954697 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062485169 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077827561 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063412695 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071525234 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072843486 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067924225 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063607613 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064628357 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072530691 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06730228 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.063370209 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079080467 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069534126 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062652336 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077672933 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063251119 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073931674 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062731936 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066977783 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.0681747 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064836763 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072944133 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078956899 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.06131903 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063877742 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078690006 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.065650184 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064676403 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071592081 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078864118 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067549883 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.071368682 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073376251 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072532948 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066652645 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071952494 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063558875 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072176279 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065684049 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073922893 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062094819 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080151294 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061072364 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077345876 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061706004 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072365198 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061056333 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070203746 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061273968 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077008299 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061973999 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060805861 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071500242 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058741473 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069620409 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059445336 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065302715 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068153322 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071233565 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063874312 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071793239 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.207438986 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.073831182 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06947239 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.072651029 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073624919 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068850308 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063171124 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.072164275 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074966466 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071873334 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064787608 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.065233468 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063885364 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072434217 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064901636 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064742199 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071700738 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067791854 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069492422 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064918174 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065233306 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.065235666 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072500783 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07335227 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081441613 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072075244 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.071019741 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072345183 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.063138219 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079068914 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063472006 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.074735102 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061671828 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.06761408 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070548884 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061719357 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081206597 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063184474 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070129569 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073960577 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070931212 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065364517 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.07965286 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065022369 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.072069571 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070150505 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066475341 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068169259 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063562033 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070001149 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071568982 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072371165 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062917465 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.07042542 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071967665 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064850431 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070208734 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063437873 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069925489 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063324807 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060446747 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065970207 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072857774 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066200399 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066619346 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061705863 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060715757 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061990603 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068561376 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066309883 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070435074 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076994339 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060964037 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062452604 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062139613 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.06627013 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080749603 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071339276 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070307254 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067775977 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062208079 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064433733 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063833011 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.062169706 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066321475 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062388257 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062568937 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073231638 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065094749 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067750111 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063945548 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064786036 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071922321 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066381528 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062387911 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069101332 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061428576 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067168694 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060663147 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063203881 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066468964 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061224351 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065414433 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072502911 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077781921 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069339426 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.072530217 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064369367 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071169949 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078810338 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068885405 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062478761 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070683046 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060745662 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079288532 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.07061006 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.06981474 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070675138 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062193399 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077475111 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065843235 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070791235 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076381014 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062495661 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066452138 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060043493 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075952079 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064682684 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059954476 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068317997 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068437899 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065880327 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07215086 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.210838043 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071957885 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068253564 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.067213075 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064971627 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.064456163 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.071376306 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078472729 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063017953 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066225414 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070010572 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070581808 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066171393 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074257711 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071125934 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063672978 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063578179 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065818782 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063162072 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074547286 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062607669 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066788193 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066472969 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061616902 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069882524 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.08107631 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073374748 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073242167 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062531588 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.06114979 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079376338 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065220536 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065780457 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.07030967 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071907054 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074968751 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071374673 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078705618 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062482752 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068040426 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074245422 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062555045 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061906055 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065744147 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063857826 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070749996 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072160158 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069486119 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063882897 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068934251 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075073381 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063470461 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066761189 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066701196 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06255995 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072468985 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071429689 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.074965858 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.065284996 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.063112371 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066572307 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071802161 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070128635 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072687127 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064607656 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070178532 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.077651481 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071379814 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066537435 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.063013622 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06505801 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.071174995 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065617904 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061672089 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066092566 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065334545 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068941048 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070853798 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066445083 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061197779 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078515356 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070058607 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071048479 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063566465 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063192687 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0622726 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061318497 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072829378 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061553359 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063490193 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066001387 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063612744 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.079181039 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069590675 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077669766 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062694946 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066334989 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060868806 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071706462 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066275993 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061690841 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072359091 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061103865 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076680483 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073173717 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.06636768 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.061190644 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.087186045 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069220813 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075838868 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070486475 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070526285 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064707526 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070727943 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063452884 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072074895 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061341481 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060375071 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071474176 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070286559 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072958151 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.06050348 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070652249 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062062698 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068724352 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067933763 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061525814 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061325933 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06137467 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069138951 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064556558 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069257607 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.212177432 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079827777 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.06412265 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073455178 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071523914 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073287399 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076297942 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073934419 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.070135027 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062495597 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06942976 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069670395 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063394006 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066929023 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065507928 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083685939 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063785916 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063204461 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076474907 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068285794 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062548684 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069003341 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066958201 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072024177 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063056846 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073895896 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067914015 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064252984 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067336135 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067732972 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062130164 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062701867 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.063105451 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073498058 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067592066 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063335729 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082799698 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.065217547 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072328205 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074906841 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070200851 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065342507 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061054094 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063516822 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075255946 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079518976 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.067016942 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072143538 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.065133664 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.073231717 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062338997 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071697011 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071136171 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071973537 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.063190679 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063406988 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07746076 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077703567 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066561682 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071903694 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072511929 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063182469 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08333182 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070554428 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063074337 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072887052 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064155295 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060997847 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061018428 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064904726 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074464616 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062008063 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064034109 seconds)
  done (took 42.961033836 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099657212 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062182753 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061465922 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061207966 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072596646 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062783846 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06171954 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062406489 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062358458 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064140906 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063501732 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065897673 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074867114 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076484118 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073810014 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066805323 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063383092 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063995242 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063672045 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064555518 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074015169 seconds)
  done (took 2.905594754 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064738426 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066203697 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065980377 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065976226 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064992717 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061979505 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06570196 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061975263 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066454202 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062595113 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066445717 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06226483 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062274468 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.062092627 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061944025 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063881194 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066751985 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065196562 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061580693 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065452419 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063329733 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065721532 seconds)
  done (took 2.874199231 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063173385 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062491181 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070395221 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060782445 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061232978 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064813022 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060851977 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065721407 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065700578 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065519017 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070250139 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062110217 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061076593 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067062081 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060756692 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061854744 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.10387175 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062427775 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062359354 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061615907 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063846924 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070367196 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062250578 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.063307144 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067648142 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065129836 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.06209796 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063959866 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062393591 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065566618 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.06259466 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060705599 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070648714 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070254822 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065689505 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.06621271 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063262818 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.0625363 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061317122 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061039663 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069571594 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062639576 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061500554 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062673977 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070258609 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060949128 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060906746 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070459487 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061144278 seconds)
  done (took 4.647362288 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071862351 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113795434 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067754027 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095552206 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.074440568 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067362398 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067360424 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095633495 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062415848 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063107189 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075207608 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075271186 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064456182 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065496358 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067138636 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064381854 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064785283 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063479027 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066953799 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063711476 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066913601 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067978644 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.074126558 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074213285 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064942751 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063214011 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063844677 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065323254 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074032987 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067310599 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065709815 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066170656 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074217333 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068305974 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063686084 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.06342862 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074713758 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064355224 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.064538597 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062338775 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064155662 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065355128 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068641282 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075195208 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064177246 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.06894364 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063889972 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061877976 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074092605 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063601289 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067692776 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075955977 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064994889 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064342091 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065229531 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074623125 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064115688 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062620679 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064594267 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073948526 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062020403 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064696404 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077329213 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063783412 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067468449 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075023491 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068897226 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064998675 seconds)
  done (took 6.297738456 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071340142 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096078867 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07263658 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072810026 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072181779 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072189963 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071765182 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.07174546 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071474305 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072730049 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072087379 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.111877049 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069346835 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076457988 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071860691 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072041579 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.072230441 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072669967 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072218142 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072402458 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072138102 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072032079 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071348439 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072031899 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074041011 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068393435 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071531792 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071654435 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072158211 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071443328 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074007687 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071746741 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071934644 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07224083 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074257647 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.07155563 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062336526 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071459204 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071709137 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071988963 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068119528 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071965914 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.072068288 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06823806 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071393187 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072418768 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072296749 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074143939 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078760938 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072175315 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071813295 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072133986 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072505151 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072036604 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07239051 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078716877 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072482338 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072768153 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071814143 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072610296 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072205224 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078865029 seconds)
  done (took 6.041036633 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07490396 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068170019 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080258742 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061772705 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061677479 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070568155 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061665608 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061353047 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068492916 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068479778 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06960073 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070995135 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072865575 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070407015 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.07057129 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072597493 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070524154 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072208081 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070081384 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.071202098 seconds)
  done (took 2.872828075 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076629165 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080519158 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067708159 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071081074 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067181631 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070583399 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066316318 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067259582 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067574481 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067027191 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071406532 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072338992 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067677274 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071028283 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.07196587 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070528565 seconds)
  done (took 2.610673059 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065109215 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069690947 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068307851 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063206697 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064812043 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062487101 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.06327815 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061096401 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064848459 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075823811 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062817535 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.065006242 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062925816 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061782143 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062310699 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065234847 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064587853 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062569284 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.063083261 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.067119783 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070555642 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063877403 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064824169 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06273362 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064770715 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071120354 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064264104 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064842182 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062576044 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065312536 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064974208 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068686533 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06510645 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063104135 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.064082056 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062808177 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064489552 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.067859376 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065867153 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.063277574 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061011986 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067765997 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063098806 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.06339772 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064285103 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065355742 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064765379 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.06844963 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062698849 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064494092 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06290316 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064802296 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062674303 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069628277 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064633879 seconds)
  done (took 5.055594479 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078921504 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066918662 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061057599 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061086457 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067389411 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066912913 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06682031 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067001344 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067490771 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061493563 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067721431 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066278313 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067082009 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06882435 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068216557 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06702325 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063351557 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068098808 seconds)
  done (took 2.702394541 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068560859 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067685822 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066133105 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063396193 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063885773 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068110848 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062079016 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063211288 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063354231 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063473455 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063661435 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062894415 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0627986 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063176851 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067633796 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063299794 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062905647 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061415565 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063409138 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061694687 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068189261 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06183676 seconds)
  done (took 2.904223116 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089087314 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085384222 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128988803 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080560925 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089398966 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072760552 seconds)
  done (took 2.03972518 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094744412 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105160813 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066547581 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066927589 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074736782 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069437431 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069455728 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069576704 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075104861 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073209093 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069478791 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075607342 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074680628 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071299628 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075188797 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077462844 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070122335 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071476559 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068182691 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079303138 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072050836 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07703153 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070357237 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069313673 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069413139 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071397175 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077855891 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073253441 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069455678 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074977153 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077105928 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069797673 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074837001 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073401763 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066204036 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074812856 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069827691 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077495565 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075099342 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071071883 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066326487 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075197987 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075526585 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071272122 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077360559 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069674152 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071805454 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069725126 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070015779 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079676244 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07546354 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071463286 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075125991 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077196808 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077339051 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079562755 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073222331 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071208786 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075126497 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073680656 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07111726 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07553556 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071597564 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074147288 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078119758 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071895786 seconds)
  done (took 6.366967602 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101434491 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067414972 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069792625 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07375679 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071056795 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069972629 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069841323 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07025824 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069896724 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067682355 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.107405175 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072291406 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073963663 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076440962 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071871423 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071910841 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072032178 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073912429 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069025335 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082201942 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071705046 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073668165 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073472301 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073615428 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073505555 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077186288 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069368638 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069600245 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069555892 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06935345 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071116906 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069693602 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071686491 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066874194 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071273085 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069894578 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069198188 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071071703 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069314077 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075000702 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071187755 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076854417 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069563339 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069454739 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073162363 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069470496 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069370685 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067144322 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069279602 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068271585 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074781026 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075173345 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075523272 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073442218 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070754622 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069890771 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069722363 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069723223 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070475262 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07752807 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071294176 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069326446 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079053421 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069871572 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06994586 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071872625 seconds)
  done (took 6.308280782 seconds)
done (took 131.510601182 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218660368 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.1901718 seconds)
  done (took 1.887537173 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075404296 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.167074956 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075511841 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075383048 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109295535 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108296813 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076757984 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073391314 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075460057 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072830801 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139690275 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076663036 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072412807 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073082933 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072871969 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073197522 seconds)
  done (took 2.918089785 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108522281 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.184690718 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082789366 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071285948 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115397748 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077539091 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.07296275 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075605917 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077159079 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.0706572 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107430046 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081785368 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074435437 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077827183 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072524033 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074302448 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076211243 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077284459 seconds)
  done (took 3.081400138 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.097902246 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086258262 seconds)
  done (took 1.694442868 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155570821 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106034384 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145767355 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.331053315 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.131418343 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.126259011 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.129946088 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125207981 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110723698 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122690973 seconds)
  done (took 2.98877743 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106443451 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105501876 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.309092087 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102443104 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082691985 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077972202 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075574861 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080054223 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07575876 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077098679 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122045408 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075778829 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073985845 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124949705 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099300728 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106658539 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071444251 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078461653 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080199126 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071266221 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076145631 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.07989573 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.17789326 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078381472 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.10046964 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07549693 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077565037 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075057126 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074761725 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078124142 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078939557 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099861556 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078709016 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083405789 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077119289 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097231357 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071988743 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099047523 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.07454006 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072608401 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07564032 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.081433043 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.073555451 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.077939061 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075646834 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077981764 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.08023831 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071650269 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075664605 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074881713 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073976074 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076729485 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076868036 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07746036 seconds)
  done (took 6.301278568 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108265512 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108757571 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07176911 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.114461727 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106031742 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070627295 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105137588 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101094958 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.10897608 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070999433 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070003413 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070120079 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076921144 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080197263 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116279481 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.10843813 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072377989 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070580845 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107692381 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107360681 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069685591 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102275478 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.10036021 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107401983 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069172379 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070802125 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068934713 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069750744 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074334885 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075459712 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069540883 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076607452 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081702442 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07597588 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068620409 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06956814 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069298677 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076128591 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076382139 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.0767974 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074860702 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068596723 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069280796 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069711577 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070399295 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068986868 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075149474 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076284087 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075086649 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06933201 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069658804 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069171507 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06919089 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076068461 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075497286 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.077002228 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076695888 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.0692607 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069645124 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071270381 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077724191 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077283792 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076445227 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070404802 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077239154 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06904722 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078127708 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081773797 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069426418 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069956641 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069547429 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069791082 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070060905 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075228649 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075568428 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07003927 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069536161 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069342342 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077354298 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075416119 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069722809 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074674153 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068939716 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069300709 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070425971 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070159408 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074929646 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076278387 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070240359 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069214661 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069302349 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06983729 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068615943 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074376545 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075666126 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075190262 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074365785 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069032029 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075008229 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074321965 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068749544 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073860553 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068731777 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068965605 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068441059 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073395133 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07316517 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075474351 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06798879 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067824622 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.07301248 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075873186 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.211601211 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076359435 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078911834 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076532324 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069698071 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07978185 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070257631 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078037328 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069710395 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078034162 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070253521 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076009619 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070059999 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069374679 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069428085 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.07599707 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070028452 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069805688 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070808467 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070121852 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075934556 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078785258 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070615535 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076169935 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075441056 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070254786 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075354597 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070033954 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077356345 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069882419 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07011816 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069616528 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078644213 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069739614 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069883039 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069561143 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077236175 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070344717 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07830208 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075447118 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069380607 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079716915 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07791729 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075491982 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078072335 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070310082 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069950141 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069941607 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072772577 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075318735 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076076281 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070250792 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069920789 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075113706 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.078167863 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069011391 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074685746 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075903498 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075946848 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069987989 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069577391 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078069848 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077920901 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075362899 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.308588737 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076082688 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069394539 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074787484 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074972707 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069495903 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081740732 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069308275 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079455847 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075826134 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074916292 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076202947 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077369595 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077607424 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077546617 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079957943 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069066403 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06928399 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075379145 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069302764 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069717277 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074967319 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070413465 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070114413 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079786743 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069862758 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077767555 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068780826 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075912442 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068936289 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069798313 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079336138 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069129828 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069702224 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074516215 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06892788 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074638507 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077038785 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075160057 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068504441 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06910265 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074673704 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074574634 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06790623 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068544753 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068980812 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073538917 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073067187 seconds)
  done (took 18.734256717 seconds)
done (took 39.128462446 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.171552016 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116567177 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207730456 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198092949 seconds)
  done (took 2.30910814 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101263038 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066240838 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081496187 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090514103 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066049941 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.077105692 seconds)
  done (took 2.041355087 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.201929028 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.17413786 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.239672961 seconds)
  done (took 2.166015807 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367029502 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150998289 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.218832174 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.503999577 seconds)
  done (took 2.897997459 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110644129 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.10050199 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078387795 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.11140215 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085743996 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063484139 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133571252 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070545487 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100198812 seconds)
  done (took 2.470729605 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.13103772 seconds)
done (took 13.602471499 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.102226405 seconds)
    (2/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.281354447 seconds)
    (3/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.281131873 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.187873489 seconds)
    (5/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.148294502 seconds)
    (6/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.189077278 seconds)
    (7/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069188156 seconds)
    (8/341) benchmarking ("sort", Float64, false)...
    done (took 0.138366007 seconds)
    (9/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.21382613 seconds)
    (10/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.077442117 seconds)
    (11/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.156445739 seconds)
    (12/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.22019477 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.091980772 seconds)
    (14/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.155210302 seconds)
    (15/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.10202875 seconds)
    (16/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.20069493 seconds)
    (17/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.143964844 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07663037 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.091808299 seconds)
    (20/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.188740313 seconds)
    (21/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.17954179 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078726452 seconds)
    (23/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.233350865 seconds)
    (24/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.260310146 seconds)
    (25/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.216196734 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079100834 seconds)
    (27/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.143416862 seconds)
    (28/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.23583074 seconds)
    (29/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.070205449 seconds)
    (30/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.218104817 seconds)
    (31/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.113901903 seconds)
    (32/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.073600796 seconds)
    (33/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.189433747 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075085891 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.12169017 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.175833082 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.092056854 seconds)
    (38/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070174655 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073548478 seconds)
    (40/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.138322262 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073823461 seconds)
    (42/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.188595806 seconds)
    (43/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073888292 seconds)
    (44/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.217070182 seconds)
    (45/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.153386842 seconds)
    (46/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.080524097 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.089312617 seconds)
    (48/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.08607896 seconds)
    (49/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.14649124 seconds)
    (50/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.066739179 seconds)
    (51/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.07710284 seconds)
    (52/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095025954 seconds)
    (53/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190196355 seconds)
    (54/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.253971802 seconds)
    (55/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.080213238 seconds)
    (56/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.079655756 seconds)
    (57/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.198640211 seconds)
    (58/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.141838655 seconds)
    (59/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.089545218 seconds)
    (60/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067492114 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075454942 seconds)
    (62/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.073548994 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.092621756 seconds)
    (64/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.078444569 seconds)
    (65/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076831873 seconds)
    (66/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.161454012 seconds)
    (67/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.225598233 seconds)
    (68/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.196431232 seconds)
    (69/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.072869922 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067502712 seconds)
    (71/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.194314869 seconds)
    (72/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.065559741 seconds)
    (73/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.073549076 seconds)
    (74/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072750907 seconds)
    (75/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072924664 seconds)
    (76/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.244428522 seconds)
    (77/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.08543489 seconds)
    (78/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076409434 seconds)
    (79/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.144220444 seconds)
    (80/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.157111205 seconds)
    (81/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.074891009 seconds)
    (82/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.087736723 seconds)
    (83/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.089839999 seconds)
    (84/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.219660981 seconds)
    (85/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.155820456 seconds)
    (86/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.074549248 seconds)
    (87/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.14591855 seconds)
    (88/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067469978 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.150236047 seconds)
    (90/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.199563223 seconds)
    (91/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.083755796 seconds)
    (92/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.082205379 seconds)
    (93/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.0703103 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.099265816 seconds)
    (95/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.069932472 seconds)
    (96/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.176422754 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.095546994 seconds)
    (98/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.069415209 seconds)
    (99/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.093589141 seconds)
    (100/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.06639644 seconds)
    (101/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.165582202 seconds)
    (102/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066985897 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091356756 seconds)
    (104/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.157145792 seconds)
    (105/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.136985234 seconds)
    (106/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.144144345 seconds)
    (107/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082612632 seconds)
    (108/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.11911195 seconds)
    (109/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.077223175 seconds)
    (110/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067467299 seconds)
    (111/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.20163042 seconds)
    (112/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.175244865 seconds)
    (113/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.076543643 seconds)
    (114/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.091625295 seconds)
    (115/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.070429721 seconds)
    (116/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.071684073 seconds)
    (117/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.079153057 seconds)
    (118/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.06719481 seconds)
    (119/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.072894816 seconds)
    (120/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.066841012 seconds)
    (121/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074852943 seconds)
    (122/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.129695029 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076451757 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069989746 seconds)
    (125/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.074619815 seconds)
    (126/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.066573152 seconds)
    (127/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075231936 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.140375978 seconds)
    (129/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.066525177 seconds)
    (130/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067409936 seconds)
    (131/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.06655498 seconds)
    (132/341) benchmarking ("sort", Int8, false)...
    done (took 0.148889698 seconds)
    (133/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075589041 seconds)
    (134/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075060378 seconds)
    (135/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067084097 seconds)
    (136/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077440815 seconds)
    (137/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.220510282 seconds)
    (138/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074568358 seconds)
    (139/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.0737267 seconds)
    (140/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076061965 seconds)
    (141/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.083936784 seconds)
    (142/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.088665779 seconds)
    (143/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071458748 seconds)
    (144/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.083388653 seconds)
    (145/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066324256 seconds)
    (146/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067861007 seconds)
    (147/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.163975591 seconds)
    (148/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.199221085 seconds)
    (149/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076617775 seconds)
    (150/341) benchmarking ("sort", Bool, false)...
    done (took 0.145941003 seconds)
    (151/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069349153 seconds)
    (152/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.066628553 seconds)
    (153/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.083466991 seconds)
    (154/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.067143874 seconds)
    (155/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.065504291 seconds)
    (156/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.116206942 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073336687 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075536871 seconds)
    (159/341) benchmarking ("sort", Int64, false)...
    done (took 0.067485154 seconds)
    (160/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066240539 seconds)
    (161/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.06715594 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066237565 seconds)
    (163/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066294302 seconds)
    (164/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.157337531 seconds)
    (165/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.066675316 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.127460007 seconds)
    (167/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065516832 seconds)
    (168/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.162196941 seconds)
    (169/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.141053983 seconds)
    (170/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082823413 seconds)
    (171/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.081983824 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06588699 seconds)
    (173/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067089084 seconds)
    (174/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.086137989 seconds)
    (175/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073677478 seconds)
    (176/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.07452505 seconds)
    (177/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.065882558 seconds)
    (178/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073614137 seconds)
    (179/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.064784223 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065392345 seconds)
    (181/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.122475925 seconds)
    (182/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.063935016 seconds)
    (183/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.162347272 seconds)
    (184/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069520899 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.267097346 seconds)
    (186/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.194139772 seconds)
    (187/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.068357716 seconds)
    (188/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.146994699 seconds)
    (189/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.068579426 seconds)
    (190/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.067422835 seconds)
    (191/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.095555737 seconds)
    (192/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.06704347 seconds)
    (193/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.067197292 seconds)
    (194/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.068275562 seconds)
    (195/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.067420605 seconds)
    (196/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067961752 seconds)
    (197/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148249786 seconds)
    (198/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.067890208 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.149063382 seconds)
    (200/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.068123141 seconds)
    (201/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067551654 seconds)
    (202/341) benchmarking ("sort", BigInt, false)...
    done (took 0.267604527 seconds)
    (203/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.067023956 seconds)
    (204/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.085546628 seconds)
    (205/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065454203 seconds)
    (206/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065701398 seconds)
    (207/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070154015 seconds)
    (208/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.085010024 seconds)
    (209/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.067197387 seconds)
    (210/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.173696285 seconds)
    (211/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.077363722 seconds)
    (212/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.164326393 seconds)
    (213/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.067800721 seconds)
    (214/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.070113815 seconds)
    (215/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.075444334 seconds)
    (216/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074559247 seconds)
    (217/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.073964273 seconds)
    (218/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.07392607 seconds)
    (219/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.070563729 seconds)
    (220/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.078360766 seconds)
    (221/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066475722 seconds)
    (222/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.13247052 seconds)
    (223/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067206066 seconds)
    (224/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.073958038 seconds)
    (225/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094286557 seconds)
    (226/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.066733786 seconds)
    (227/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068933917 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.12348929 seconds)
    (229/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.140706223 seconds)
    (230/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.11810103 seconds)
    (231/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078922324 seconds)
    (232/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076987805 seconds)
    (233/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.067439428 seconds)
    (234/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.067031023 seconds)
    (235/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.067698744 seconds)
    (236/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.147531639 seconds)
    (237/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.066775926 seconds)
    (238/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074300968 seconds)
    (239/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.075577571 seconds)
    (240/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.067164521 seconds)
    (241/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091973276 seconds)
    (242/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078142622 seconds)
    (243/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.06938462 seconds)
    (244/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.07403435 seconds)
    (245/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070099503 seconds)
    (246/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066687317 seconds)
    (247/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.066347534 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085560656 seconds)
    (249/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073169175 seconds)
    (250/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069639298 seconds)
    (251/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.069460413 seconds)
    (252/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.068013138 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065202445 seconds)
    (254/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.065980429 seconds)
    (255/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.066694713 seconds)
    (256/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.191654825 seconds)
    (257/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.06729578 seconds)
    (258/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.157009324 seconds)
    (259/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069233372 seconds)
    (260/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066410921 seconds)
    (261/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075280662 seconds)
    (262/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078003484 seconds)
    (263/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070298833 seconds)
    (264/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071230034 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084672768 seconds)
    (266/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.067631994 seconds)
    (267/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066482265 seconds)
    (268/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068095899 seconds)
    (269/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066423285 seconds)
    (270/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066144142 seconds)
    (271/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065695445 seconds)
    (272/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.06902809 seconds)
    (273/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064930593 seconds)
    (274/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092315899 seconds)
    (275/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.070566097 seconds)
    (276/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.0664451 seconds)
    (277/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.069889307 seconds)
    (278/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.084464589 seconds)
    (279/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067716231 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.133666838 seconds)
    (281/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.07013924 seconds)
    (282/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073730078 seconds)
    (283/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068889164 seconds)
    (284/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067773144 seconds)
    (285/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.17632533 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.14989041 seconds)
    (287/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.179184495 seconds)
    (288/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.223612787 seconds)
    (289/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.169328591 seconds)
    (290/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066765367 seconds)
    (291/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.066517248 seconds)
    (292/341) benchmarking ("sort", Float32, false)...
    done (took 0.137234343 seconds)
    (293/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075215649 seconds)
    (294/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.06610077 seconds)
    (295/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.160519524 seconds)
    (296/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.067884495 seconds)
    (297/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.065159622 seconds)
    (298/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075001963 seconds)
    (299/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.088874197 seconds)
    (300/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.06681887 seconds)
    (301/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066287965 seconds)
    (302/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.066676181 seconds)
    (303/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073771165 seconds)
    (304/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067451627 seconds)
    (305/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.06577787 seconds)
    (306/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.064222352 seconds)
    (307/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.066273552 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.14045516 seconds)
    (309/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067322298 seconds)
    (310/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.067305592 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.129802953 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.08387781 seconds)
    (313/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072351382 seconds)
    (314/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.123743672 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085017422 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076742725 seconds)
    (317/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.148495108 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.08334973 seconds)
    (319/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.065932757 seconds)
    (320/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083039795 seconds)
    (321/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.142886928 seconds)
    (322/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.066071742 seconds)
    (323/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.064816998 seconds)
    (324/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.064529921 seconds)
    (325/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.066259822 seconds)
    (326/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.08768961 seconds)
    (327/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073146185 seconds)
    (328/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.074165454 seconds)
    (329/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.065670418 seconds)
    (330/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.066476089 seconds)
    (331/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.067146201 seconds)
    (332/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.067165795 seconds)
    (333/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065822981 seconds)
    (334/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065744204 seconds)
    (335/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.065651111 seconds)
    (336/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.065461463 seconds)
    (337/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065276942 seconds)
    (338/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.22480842 seconds)
    (339/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.065577671 seconds)
    (340/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.065188424 seconds)
    (341/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.065323105 seconds)
  done (took 36.799355849 seconds)
done (took 38.375478257 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.098175139 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.081754991 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080918086 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.077408882 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081180518 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.078392846 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.080197886 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07802733 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.079545015 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.078451753 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.078294388 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066960853 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.07533438 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.082127735 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075967764 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.082390595 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078981253 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082258629 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067362518 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081056554 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.092780821 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078579561 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.07513213 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080167725 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066647172 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075162256 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090084662 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087951132 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.074070947 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07572816 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074333895 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084892401 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074110733 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.07249396 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.07627258 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.07266648 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.0758731 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073725188 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089548226 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072970329 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067259299 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078311222 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073666442 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074906999 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075800883 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078775998 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.07209365 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080360458 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066590766 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077732082 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089351872 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071585451 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073532457 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074802889 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.072076545 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075793514 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073390152 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078174534 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071814867 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078147369 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077917602 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074976931 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066402845 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075853429 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073647782 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074214555 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065870468 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071753451 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066694887 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066723669 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065967889 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075644683 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07321954 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071837069 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066121555 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066845118 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06589377 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078594989 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072557739 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076278916 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.067035759 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071532906 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071608963 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066489108 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071476717 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078107591 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065563227 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.067330155 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065389172 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080566843 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.0733314 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.067258032 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077721186 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071093125 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071090229 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066719044 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065705889 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07129121 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.07419126 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066320256 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065036237 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07134109 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071466951 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075257337 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067331286 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071225763 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071561184 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.06572912 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075488569 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073413163 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075145778 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079799098 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075224394 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078143794 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066736615 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.064881861 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075639794 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066570639 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07119961 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.073762855 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071683632 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074046306 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066324407 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065260692 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071121708 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073167438 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066733681 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066321933 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066828512 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075423573 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073484714 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065001075 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065820825 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075569747 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074725988 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065570577 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065152419 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074987137 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066425722 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071717708 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071518801 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074308324 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065100264 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.066516453 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.217892128 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066919625 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066425571 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072592486 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071975942 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.06723654 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075294258 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072794869 seconds)
done (took 13.102100165 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067731323 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106542885 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.073791568 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.08300384 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078996202 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068458538 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070749811 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083468908 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071154224 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.087437447 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095318209 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088269802 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094185211 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.06616309 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067320562 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068072473 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065658082 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074840158 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081339246 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090213814 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.09583547 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066787396 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.076005759 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083631201 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077418045 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083086245 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068093471 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068501755 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069803059 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.123353252 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.093500309 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.068007305 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.069136729 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080557349 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081089353 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073671361 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06800557 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070675884 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070643596 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067367885 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069177935 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081215313 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071048947 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071234268 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068719581 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068051662 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067316088 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.069905979 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.08064429 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070573508 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074966562 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078978497 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069179574 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067212751 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065657881 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070762639 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067434091 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067788722 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067687027 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067224003 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.068060613 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069524884 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068108467 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067964573 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070548333 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069442067 seconds)
  done (took 6.619740736 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.08323618 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093541202 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.082067494 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082255589 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066461224 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067739519 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069328323 seconds)
  done (took 2.251702017 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06837975 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075581428 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079927399 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079547878 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.091955523 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.080119197 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.070342183 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.102374854 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.068806054 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078854122 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.086192184 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.083476037 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.073303852 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.082037954 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.070259674 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.082299461 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070131205 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077586978 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077654044 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.083047048 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072493154 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097377536 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081336368 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.070494878 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.083896024 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077134116 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.071950013 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.069309684 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068231997 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067053668 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06721066 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089333582 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073331202 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.078998896 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06831709 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066599531 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071905117 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067904047 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071523263 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076458918 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071384217 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067416352 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068097976 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067989549 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068207553 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.07231734 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068647661 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067442961 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066832031 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074623269 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066830519 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073847531 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069614686 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.07244891 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.07216823 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072097399 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074405833 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067325597 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074571908 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073659088 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067382128 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.0798052 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078694573 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.0707248 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078667722 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075498474 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073658614 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070870904 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.06685293 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.067258868 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067988069 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.080574201 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.072793677 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071777728 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070430022 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074773705 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.073586879 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.085381433 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.085408204 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.083803469 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.072384379 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.069832836 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073656364 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.085282715 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074592339 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068293707 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.069886108 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.069094053 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.073472662 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.068450478 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072152185 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067598848 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074133107 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069748756 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069621989 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075349773 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067575062 seconds)
  done (took 8.889514274 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070284997 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.06970932 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068586182 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068387968 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068987007 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068396877 seconds)
  done (took 2.156504433 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091014452 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068334555 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080045414 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.070438058 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.092778679 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.077373973 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.077194611 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070029407 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083818365 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.077972806 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074526558 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077029753 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073826528 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069586648 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.07414873 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069131401 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.074386986 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070848878 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077805675 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069905427 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084076487 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069336917 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071541583 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082578572 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073949152 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.070963242 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071954053 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080891245 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080485467 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.071045446 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.070521524 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071394162 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076231317 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069395917 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074269907 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076289951 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067547848 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072746849 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070267792 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070775957 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076343394 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069593848 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070146549 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.0731758 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069727708 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076102735 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073292299 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071271802 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073646278 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073331381 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073148355 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068372485 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070489023 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073520966 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076362614 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069652698 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073055339 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074313444 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069819805 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076163239 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068152368 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071137355 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069328851 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070575002 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072420238 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072759766 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076038699 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.0697357 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069799945 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067783371 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073962969 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067995708 seconds)
  done (took 7.001080673 seconds)
done (took 28.611742451 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.547793786 seconds)
  done (took 2.22922986 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.587305086 seconds)
  done (took 2.311722113 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 9.061730456 seconds)
  done (took 10.786547472 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.305885509 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.335139881 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.740703897 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133777821 seconds)
  done (took 3.282182924 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.753102585 seconds)
  done (took 2.486073387 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229973463 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.219394449 seconds)
  done (took 2.193602739 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.337158889 seconds)
  done (took 2.053465331 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.157312861 seconds)
  done (took 2.879630743 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.231649564 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160735139 seconds)
  done (took 2.127368673 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.546712387 seconds)
  done (took 2.27515197 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.291332202 seconds)
  done (took 6.028009366 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.234675698 seconds)
  done (took 2.017247251 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231004787 seconds)
  done (took 1.966405379 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.070137349 seconds)
  done (took 3.802107289 seconds)
done (took 48.173416144 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085316449 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087932833 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087645642 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082735138 seconds)
  done (took 2.05057447 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075393342 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071792892 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074965184 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075652422 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073554361 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.074883024 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.07533548 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071587872 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.073985174 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073761278 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.071960384 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.07184158 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07624447 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.074334575 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.077214385 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.077867532 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.074434529 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.074075304 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.076340079 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.074169112 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.076953595 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.074264926 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.072092302 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.073678572 seconds)
  done (took 3.52083837 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.0796056 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073476169 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076853791 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072449943 seconds)
  done (took 2.04526987 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078120253 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077863253 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086763642 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.092475235 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078098692 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078684636 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08561785 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086180692 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.067033359 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.08846857 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068956703 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068101889 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070620732 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.090246373 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.087328199 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.066173597 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.067973476 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.079800902 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.078494381 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.083298311 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.072185209 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.06974317 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.081744615 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.080575829 seconds)
  done (took 3.62727901 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080617913 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067001701 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079710951 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091712441 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093310041 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066623586 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079808102 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093691972 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128087214 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066353495 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072845458 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066580839 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105127908 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066786116 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.08180985 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109413447 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112391116 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.07060619 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099686248 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066950027 seconds)
  done (took 3.451610825 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076800793 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070673538 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071686873 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066796872 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078188295 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073738224 seconds)
  done (took 2.192467752 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069542421 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069203908 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.071096619 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073253061 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.069303693 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069228998 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.06842175 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.06781879 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067197705 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.06802973 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068308614 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068604487 seconds)
  done (took 2.576153861 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.156179931 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069945644 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071347931 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.06696966 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071982535 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067995745 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082298737 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069825871 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.08557264 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.06850521 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068278673 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070028193 seconds)
  done (took 2.698007692 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102100715 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102726754 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147112749 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118419828 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11757078 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097531943 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120258533 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096252311 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161541361 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137917571 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11716228 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095116789 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089035534 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.072565981 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101642693 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1028273 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137747817 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073988095 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114208732 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165214543 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115259628 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.112621021 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122722577 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116933051 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082249792 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122378223 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095348537 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10266549 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125128841 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109945101 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119410911 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099044629 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072545313 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072247132 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150256333 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100330946 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107676332 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094067066 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100395268 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088927749 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107793012 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070114721 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.088053748 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107955273 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085419675 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117786777 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089351323 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104368727 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082048466 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132124098 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107554476 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099516625 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086556869 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104955118 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130796547 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095944458 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111652073 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106904489 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083000853 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.117649704 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100411043 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.257615149 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09701287 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082978858 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161508842 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090207189 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.11314134 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114090328 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.084621355 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091362827 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104113874 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132352986 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108055164 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108021712 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1156491 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096321203 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111485494 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093009058 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130415689 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094054524 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074776058 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105681715 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130099307 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086298488 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101687345 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13092489 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093429746 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078089993 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093534049 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.11918426 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081522796 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097251108 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070733603 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098435186 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10799331 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09773593 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112784018 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107534615 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079070449 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125059197 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110272528 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073585368 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118188864 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099806576 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153604452 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096602796 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077677911 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100726361 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094658857 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148349993 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086062181 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081167131 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099393487 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141602063 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095087132 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170166644 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097115161 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12991877 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097815661 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088623757 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076551119 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091235474 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102278918 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108033717 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101737544 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089260102 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077140936 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087189745 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095867729 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.257472639 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083150026 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11553621 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103371685 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076938974 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089977204 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.08038881 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126422749 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079013724 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109909833 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125653839 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079951783 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105964124 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098952125 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108730187 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099369263 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107918871 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14117145 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116989676 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08098921 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085347047 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108925736 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143236833 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.115022844 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086925194 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077875386 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100657491 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111294643 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098606744 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107560156 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101444751 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109577668 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0982364 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141157557 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118435137 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09174903 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096101681 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097503206 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123845087 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077932249 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156174946 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095268384 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11884437 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085877291 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141737535 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115297397 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090553125 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085845191 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09691091 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105271116 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106595463 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144009283 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097211578 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073658008 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093923724 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132708875 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077584415 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101347126 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091102209 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094498831 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119438404 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084117395 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081522278 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068811728 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101861237 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134609645 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.07119938 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112931302 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.118268933 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101260102 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.102591745 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069538416 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097832047 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135626291 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103892566 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136565326 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114627826 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098820917 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116102731 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.097937211 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102265409 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07849681 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.120335016 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.128109176 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091649888 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087635699 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127057475 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114189139 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.127739543 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.093560084 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108435123 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.100038793 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097925622 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098118149 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.095564196 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134671992 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115523636 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.118599793 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084273267 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101981962 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105372684 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126396485 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080659508 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110852922 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.073313025 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107157596 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075901099 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103044379 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078685477 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.10908433 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078453855 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095824739 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068886683 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.072679842 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1345879 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.107696097 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085771144 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08291062 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.128214985 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.124684928 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079578116 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097569569 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100293832 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097355782 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09732967 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105059466 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.083854782 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090247862 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.392745843 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082555023 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.08641166 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104207713 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098064389 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112665212 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088558102 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079389394 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14050996 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109114387 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098822085 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081673455 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099044106 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.125523298 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093440565 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090785806 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10790582 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106774618 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144013316 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.092891128 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101062884 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120421642 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083324112 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.094706439 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071744528 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.087275076 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.078143524 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110735675 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077660093 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110141004 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070197822 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132532613 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088223108 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094133644 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104141183 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101449262 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128783427 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093320148 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129883766 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091274683 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102817107 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109512856 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095492028 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08129493 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104717506 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097470098 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110375166 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097632241 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106485312 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111168645 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095438094 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142771897 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09096623 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121787372 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106876888 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108147915 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10513435 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119108886 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138743152 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113999592 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113036007 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076794408 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083785114 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106332839 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10102924 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147296127 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10340539 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.074081297 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087270369 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092005976 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.267483103 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106016835 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084038299 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142693962 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088545504 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.089078895 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115104168 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091189424 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098325052 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077507176 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096680654 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101998584 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095973075 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096237692 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109545535 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118457991 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11514493 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133604822 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100004059 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.094442884 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120916003 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111884581 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112670698 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087477518 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088207559 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12498203 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103759925 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129593977 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101591625 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095652943 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103367781 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091755057 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100901601 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097979181 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.11074649 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081937669 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077966981 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.070116707 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.074061158 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119211413 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110357253 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100139884 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100055683 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074255327 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105030128 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100876733 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073292513 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088242606 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095614855 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100295429 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084777774 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093402635 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115537136 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092272289 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.1042416 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100873781 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12911665 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101038476 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089842619 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144519163 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128906525 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089055479 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094336845 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072634883 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080313045 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102762641 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146582894 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119655111 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.079041548 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.253080503 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079330383 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087749137 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073517574 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.08823766 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091247278 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10461114 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09391618 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113621472 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105419811 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077113475 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104315956 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098826645 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093644812 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097890281 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102898404 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106620668 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.125194263 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102477028 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098432356 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077760349 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.082437539 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077292022 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080824605 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103410297 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.080120925 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077323718 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131271147 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092603059 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106320686 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110034269 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086023663 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077281538 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134264979 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070831513 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135137348 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.07270054 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083533741 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081720787 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081036818 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095264674 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105904657 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097641358 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114583377 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107006278 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105456721 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111332758 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155989717 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072373777 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144370552 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077096237 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077012473 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07755474 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115371501 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09078479 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105880703 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141256087 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091190616 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093582699 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078156601 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129387699 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099307894 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104268256 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083961016 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.07946866 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128901295 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080936706 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072472992 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087499686 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112269657 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073399012 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105226209 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.253337677 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083188167 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114037126 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631649479 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091951498 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077310284 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090818445 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143759101 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129133754 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084880625 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109877081 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120794295 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090997805 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085626768 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109822842 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.184861097 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075698579 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096084295 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105506277 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.1001076 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094415028 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093208573 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087848911 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093712008 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087381532 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081413314 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10934262 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089664077 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09321508 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099148496 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084088938 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081620507 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132743119 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105174795 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083521803 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090097628 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.10249161 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089100406 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092312262 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070670713 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11483937 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092202523 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102406169 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.09224316 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108737863 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121331488 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090175041 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113082026 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.08971872 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110321334 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086217477 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079217459 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102827391 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079948574 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078841083 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117568459 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085665059 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094028192 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105033017 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096428902 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115316716 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118655827 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112019969 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099023707 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079849869 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086964805 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.0895432 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076520617 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079594199 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075809722 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077226111 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.275438702 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08668555 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08509266 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116888261 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084075453 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105226866 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101952721 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111149618 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085277113 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102590533 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110988322 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091733555 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105224641 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101753144 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130189883 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146691878 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100823828 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125438974 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134752696 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078654135 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076999004 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070309436 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116519418 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080899114 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082736499 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082749724 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133852661 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083232077 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09569943 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.233746777 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082033166 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082913501 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098343486 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071705754 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084601338 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109302228 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08641858 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082007007 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099923979 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08490595 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119135944 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113054477 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090574818 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083496295 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082276898 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09417684 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105514803 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129318656 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090841109 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076630134 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107610675 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104740524 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12461454 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074235137 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082736229 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.13115372 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093724951 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104630131 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081999329 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121377678 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133511923 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091172804 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134564839 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072444772 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084307155 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090221905 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.12648853 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075646735 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089676627 seconds)
  done (took 65.22935374 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.156426656 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143639252 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083887552 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.099229408 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188582096 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198308833 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120750873 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.096880283 seconds)
  done (took 3.059724703 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069407865 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084163941 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082725476 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.209237049 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.110463838 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068975981 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074587437 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083521432 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.069204098 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068240542 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.10350975 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068840238 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069399671 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.372792868 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067512062 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.07334377 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.069512508 seconds)
  done (took 3.669487014 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.327282375 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.403796966 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.222820807 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.641321374 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.141471442 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486538045 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077840533 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.08396606 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.649623234 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.376840691 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131995624 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088768672 seconds)
  done (took 18.569213589 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076796266 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079800799 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.07942014 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075718727 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075346607 seconds)
  done (took 2.321472561 seconds)
done (took 116.776181767 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084679879 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.17255591 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068848847 seconds)
  done (took 2.214340246 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083529146 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.081748165 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.081507638 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079538891 seconds)
  done (took 2.267693835 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075600258 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077668008 seconds)
  done (took 2.087212921 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.224859115 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.17610258 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091269861 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083057253 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081167728 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081240118 seconds)
  done (took 2.191517288 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072849401 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072420437 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073495615 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073335767 seconds)
  done (took 2.214867751 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.073241645 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067411335 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070092376 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.07209535 seconds)
  done (took 2.218156825 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086074135 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083705707 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.112454877 seconds)
  done (took 2.217282068 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084038401 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083973493 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079057081 seconds)
  done (took 2.178093653 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109673863 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097756431 seconds)
  done (took 2.12999685 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081127973 seconds)
  done (took 2.02281005 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090398031 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098621088 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.141651783 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108220135 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140928026 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127115374 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078355727 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.07916734 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074556285 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073707953 seconds)
  done (took 2.952220248 seconds)
done (took 27.208368659 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079652735 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.373751842 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361627662 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088638157 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674234887 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357676543 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.008908288 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092298209 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.10147881 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069109278 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086652103 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650955025 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.001303749 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.327225488 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.987019179 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.324806534 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651672704 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07016316 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069285444 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069924859 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.994560938 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069188745 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069422456 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070461242 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.65087332 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375989712 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069981273 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.33099516 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070095245 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072186658 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358037751 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07089 seconds)
  done (took 16.563547662 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.070959707 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123490413 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074168649 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08530046 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072425498 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071158243 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072649288 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.07007546 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112063478 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070108572 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086635862 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069347232 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073761978 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070578465 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089327748 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069666413 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071314551 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.074099002 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070157089 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071108959 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087874938 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069165887 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070282454 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070006683 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069654997 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082957225 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070921419 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069681355 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070209186 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072021886 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073301484 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07088578 seconds)
  done (took 4.403384773 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.122282465 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127318699 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074723132 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.11018368 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119636667 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071520216 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152440964 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092913746 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115922578 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070303724 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087134234 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070138713 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105368373 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071214659 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090323721 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069844777 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071527753 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070462149 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069583774 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070650956 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088244942 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069264685 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070376518 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070687095 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070494612 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084594584 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070725346 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070022658 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070035869 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072188497 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073885735 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070868169 seconds)
  done (took 4.677543749 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071847177 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072893893 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081798414 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082503622 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.06831068 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070963259 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.07169667 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068194459 seconds)
  done (took 2.553637547 seconds)
done (took 30.161277712 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080743506 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069226408 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072708975 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088837897 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.07586897 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071741341 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066400543 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076218224 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.07275815 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072633281 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074546238 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068853489 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07154509 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066491091 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073404683 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067671159 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073860987 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071831633 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072194005 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073531441 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069944584 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073273189 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076583792 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072296236 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071913762 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.071994905 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076776287 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.07343535 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067729317 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069978453 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069752237 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081925241 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073898384 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074060632 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067062125 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067564986 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071976571 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069761142 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074053209 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076531648 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069368927 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076559861 seconds)
  done (took 4.978810092 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089798996 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.096876676 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087972492 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.08343637 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.109125525 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083729302 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091952488 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080696642 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079362712 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091891474 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075569744 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080923091 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082414285 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076807894 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.08020055 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076247104 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081662404 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075640028 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080221328 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080218133 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092547491 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073823495 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.08066505 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081063514 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075975073 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081360185 seconds)
  done (took 4.144029092 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074148501 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089046895 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093787133 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.14325055 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110824592 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084062495 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083858357 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098970219 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102532796 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.06955615 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073762414 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095902864 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097884745 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077389927 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108042341 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087914068 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082374797 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071261203 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076470539 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103957544 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.09243779 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088354483 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102048853 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089605949 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068498396 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078864541 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076311022 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084785763 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077040452 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081804602 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073761597 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073345398 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070057936 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082042163 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076566046 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067493065 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091629129 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082306852 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084584372 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107495026 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079321444 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071333808 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099176067 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134532448 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068887059 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071983163 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073061934 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081134603 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070775852 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099739507 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088129593 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068814479 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.08776544 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070837397 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070418472 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085854785 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070930613 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070944189 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081418008 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075859159 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090231331 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074027757 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090333507 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069040734 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080278933 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070879725 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070512927 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067979053 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105503299 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076664682 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.12131388 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070374643 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067426946 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081058236 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080625682 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07605483 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069135045 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088406137 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.08096235 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072893728 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080943416 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071827727 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072199311 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105119162 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068066673 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067145956 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067346399 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071466487 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072099869 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070084662 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082480128 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068797898 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072417186 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084777452 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.06925501 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.06989443 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071782281 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070398686 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068961044 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080127669 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073472143 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070465454 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081860128 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.069874671 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073024442 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083774173 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078371999 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068423494 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069992796 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071446042 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070835341 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07368671 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072236339 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071075255 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07634893 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076908446 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074702201 seconds)
  done (took 11.415552681 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.164950798 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155775637 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070527485 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.150688038 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077684587 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073651908 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.151960185 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.089317095 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.07031988 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070860024 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.06941708 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.098166317 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093062813 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104724125 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073911964 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070708048 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095138114 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103277683 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.154257091 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147999047 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093240202 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077792046 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071805631 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071302242 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071018219 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078843618 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086426259 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078226277 seconds)
  done (took 4.732394684 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076885652 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084874417 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074177233 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093921908 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.087837121 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070215302 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.07165549 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071137684 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087060829 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076720264 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069452084 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074567644 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073409044 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070928597 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071323002 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076205644 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076333552 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069501659 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073912736 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074801013 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080320001 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095129637 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074618902 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070525806 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073203466 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.07012743 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076618507 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079805664 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069484182 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099808582 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067440541 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074254008 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084491761 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071269789 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069337947 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.07071873 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069832747 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070258535 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070264431 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068230983 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068160019 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.07513384 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068351629 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075697712 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083939709 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077723268 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071321449 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.075209467 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.07258246 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066881707 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072701434 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073279447 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072739702 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078439199 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073671625 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.07229489 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070976764 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099931747 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075868518 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069227175 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068465578 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068644155 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071720037 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077432837 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086474357 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071461724 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068274275 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070133115 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.07464415 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084144691 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069387516 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074770522 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067079762 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070071036 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072133442 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073097967 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071687344 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067868109 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069534645 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070047066 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070094685 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069622028 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068899799 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073019108 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067479511 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.06823343 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070931877 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070891443 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076137619 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068653357 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072150945 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070979194 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069167558 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.07255524 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075455135 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072875766 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.08958975 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078090031 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070661307 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067632073 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084458704 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.07200662 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069003013 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075215536 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074849506 seconds)
  done (took 9.803584336 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.09268722 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071417858 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089210504 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096488983 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080383529 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075407792 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084143063 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070693602 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086497528 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068766885 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078815524 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068806453 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083200334 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079046109 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071311614 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080404813 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072551715 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090049071 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085167941 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068376713 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079541576 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082316676 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082085249 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088202783 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088114047 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088750451 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081943182 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072816625 seconds)
  done (took 4.282511004 seconds)
done (took 41.315274018 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.04556081 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.216002836 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.046022733 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.246204626 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.105313134 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.260064796 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.164847442 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.036446306 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.283040014 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.064619695 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.374436602 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.459703979 seconds)
done (took 70.336967837 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.094197172 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.181973979 seconds)
    (2/2) benchmarking "String"...
    done (took 2.25476824 seconds)
  done (took 6.405611078 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.634802496 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.035508234 seconds)
    (3/3) benchmarking "different"...
    done (took 2.085964884 seconds)
  done (took 8.720979188 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.119955584 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.692799374 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.292743592 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.035499256 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.039948014 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.440851214 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.850084229 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.50113127 seconds)
  done (took 33.818962954 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.284243762 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.251181111 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.793507642 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.818477702 seconds)
  done (took 17.165201355 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.639893421 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.296602037 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.296966744 seconds)
    (4/4) benchmarking "different"...
    done (took 2.29181814 seconds)
  done (took 11.553754275 seconds)
done (took 89.945146389 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.035792378 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.266174189 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.072859944 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.190720152 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.09545859 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.066362321 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.040121056 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.055094281 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.039819873 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.04077255 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.460875468 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.035237144 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.050255336 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.071833693 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.038855066 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.045670172 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.497241342 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.037098334 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.04414908 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.610294357 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.506427645 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.043714069 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.042019952 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.089706977 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.294844607 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.090314863 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.65254138 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.04532682 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.65915844 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.046758531 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.225884735 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.04518059 seconds)
  done (took 213.502271602 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.042395366 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.079308513 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.185672935 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.063197195 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.573901323 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.237651049 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.190835117 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.613785315 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.048384469 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.047348904 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.203425026 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.048944421 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.224970665 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.994858184 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.039441887 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.052939047 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.30216748 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.245777568 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.045970095 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.232372643 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.04857856 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.027247123 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.99387572 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.197272703 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.09027408 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.090312833 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.045781486 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.05916554 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.216440554 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.267307225 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.054144843 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.061711292 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.238751616 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.898777529 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.0388358 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.038641447 seconds)
  done (took 179.815126538 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.205579802 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.045706079 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.097781211 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.173665868 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.794136278 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.766546573 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.03562321 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.039376003 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.034363676 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.043457572 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.036840562 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.104107786 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.462684949 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.064761637 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.04896641 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.050398227 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.361430106 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.050644916 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.047358277 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.046670294 seconds)
    (20/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.048159114 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.110849355 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.419278937 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.184264839 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.052033059 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.058759155 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.184150133 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.060325259 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.048550467 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.186169076 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.046854424 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.128639637 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.183116325 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.059369507 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.13065008 seconds)
    (35/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.051089041 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.059127978 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.534151964 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.046793829 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.048066908 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.050538536 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.112808157 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.049015176 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.153724143 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.138107721 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.049181067 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.061505525 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.11781074 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.725609623 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.050804282 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.050193747 seconds)
    (51/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.047555895 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.048460594 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.051339631 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.032173325 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.686901447 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.052571034 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.076031658 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.682352932 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.053325873 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.051259648 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.050315288 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.050796938 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.05046404 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.056914811 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.086711726 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.861137387 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.269804223 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.438229292 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.854173536 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.055747519 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.922778505 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.107932117 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.05098065 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.127368561 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.050484449 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.052345502 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.049767309 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.049814136 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.145216839 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.137955613 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.051600535 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.189667251 seconds)
    (83/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.054186975 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.050850499 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.05035254 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.254450859 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.253112837 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.053355121 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.067682256 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.110142967 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.054786476 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.053881778 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.06111384 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.143393608 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.054429623 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.053877343 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.056122955 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.152811935 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.052718625 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.067161518 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.27583331 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.12403997 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.298101019 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.27709485 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.056350988 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.056361997 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.072141086 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.058652296 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.055828587 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.058442956 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.057293114 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.057687436 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.059961849 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.058910843 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.058450933 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.059275237 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.070145479 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.052176108 seconds)
  done (took 440.429593692 seconds)
done (took 837.972615275 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.628901462 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.729495169 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.626448126 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.655264541 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.623646634 seconds)
  done (took 15.244382697 seconds)
done (took 17.226722369 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.088979142 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.068632462 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.062286021 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.118139444 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.082998966 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.069628821 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.097845803 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.071209512 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.088175081 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.068052619 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.115383976 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.068138899 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.087947485 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.088687419 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.142135587 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.095999414 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.073104069 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.065970501 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.119853791 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.074423926 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.073147098 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.070256845 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.070827785 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.11453975 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.149190206 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.080210653 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.070504793 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.115130282 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.080597499 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.118346416 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.126972979 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.094566222 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.103265941 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.144644156 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.124165454 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.153200184 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.080483798 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.136683505 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.077242852 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.154806516 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.125019377 seconds)
  done (took 87.991920151 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.070790076 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.197910376 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.279106281 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.097784696 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.067521207 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.277591249 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.124854021 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.196464066 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.198012582 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.277926647 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.284789246 seconds)
  done (took 26.061696522 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.065715096 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.203579912 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.285423757 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.102384651 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.088509633 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.278022888 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.129060376 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.187077371 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.1788094 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.282526521 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.29311728 seconds)
  done (took 26.085091931 seconds)
done (took 142.12597387 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.435347692 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.089458605 seconds)
  done (took 6.509333521 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.062725145 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.083116037 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.217540414 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.063400468 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.064759933 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.063160564 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.067138455 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.063774637 seconds)
  done (took 18.66924206 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.059142795 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.064059254 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.062450479 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.063468737 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.06356636 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.060677433 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.061176242 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.062581449 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.065249592 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.064296778 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.06088694 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.060779119 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.059106375 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.058422922 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.060566135 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.058580003 seconds)
  done (took 34.971465929 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.059607117 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.060353692 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.058918805 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.059937706 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.058900918 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.06043242 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.062164786 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.060733656 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.057502571 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.058099548 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.061911588 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.05984404 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.058996169 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.060265165 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.059148861 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.061443652 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.061761865 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.053153124 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.037379421 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.06227881 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.063061743 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.061522289 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.064746363 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.060570643 seconds)
  done (took 51.397704635 seconds)
done (took 113.544658518 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.240366459 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.859265616 seconds)
  done (took 9.08283832 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.064366126 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.062230078 seconds)
  done (took 6.185473712 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.061163368 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.061070878 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.063485198 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.061909714 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.062608938 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.062633467 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.062669916 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.061357343 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.062377802 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.061451426 seconds)
  done (took 22.605308571 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.061141082 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.06267558 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.060416055 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.061084168 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.062615751 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.063739873 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.061888676 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.062042544 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.062603533 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.063148275 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.062198812 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.060489502 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.062961055 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.063781635 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.062477322 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.061699053 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.061203535 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.061173793 seconds)
  done (took 39.102186733 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.064285608 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.047349292 seconds)
  done (took 6.098197542 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.061385937 seconds)
    (2/7) benchmarking "second"...
    done (took 2.062168575 seconds)
    (3/7) benchmarking "month"...
    done (took 2.063002637 seconds)
    (4/7) benchmarking "year"...
    done (took 2.065383985 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.064333539 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.061852592 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.063447046 seconds)
  done (took 16.426552937 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.065011926 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.211937094 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.253016336 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.666408904 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.064094006 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.066488364 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.939416631 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.067918888 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.069407587 seconds)
  done (took 22.392040968 seconds)
done (took 123.880926458 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.914045758 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.066175529 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.347286308 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.13672368 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.139297049 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.405946495 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.089467028 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.617235287 seconds)
done (took 44.707600361 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.154196677 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.063585558 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.096228803 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.093672867 seconds)
  done (took 23.245154095 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.062942875 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.4067029 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.088441548 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.034794704 seconds)
  done (took 23.598946413 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.444025444 seconds)
    (2/2) benchmarking "read"...
    done (took 2.41697134 seconds)
  done (took 6.856019693 seconds)
done (took 62.849773506 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.068286005 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.067028968 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.066444287 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.067522927 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 2.065148645 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.065889813 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.065550154 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.06551885 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.06613429 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.067708884 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.068804602 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.068732099 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.067807253 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.069572704 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.070400055 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.068501237 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.069902116 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.06951347 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.070778839 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.064946322 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.068886878 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.071405113 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.068803861 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.069948397 seconds)
  done (took 51.626288471 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.068504743 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.070554978 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.06863273 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.067443637 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.071200812 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.071244497 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.067145618 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.06970877 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.070338934 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.071034519 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.070955956 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.072052258 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.070061709 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.068509543 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.070466863 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.07350683 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.069893165 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.07085046 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.072133747 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.071888465 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.072768779 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.07272318 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.069491967 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.072341753 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.073601992 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.072638573 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.067753077 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.070842872 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.073903048 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.071762861 seconds)
  done (took 64.11833109 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.072508188 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.070131917 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.070158153 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.073787215 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.074606297 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.070349089 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.071781703 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.069276344 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.072133241 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.071533668 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.072523874 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.07155603 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.07119861 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.069901006 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.074423118 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.074935565 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.069764315 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.075470749 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.077552096 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.072246099 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.077865897 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.074965007 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.074654989 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.07483345 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.077006202 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.069875946 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.077968497 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.076924473 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.078544346 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.077306075 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.078062105 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.075537108 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.077866403 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.079440464 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.074826708 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.075346295 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.080406616 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.076486729 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.076130694 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.078649538 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.076097849 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.073998133 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.075168478 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.077301712 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.075256581 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.078673613 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.075946443 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.076794647 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.076974944 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.077834954 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.079886246 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.078293292 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.078472293 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.075557932 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.078140238 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.07953661 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.075813992 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.078628018 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.076827091 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.076315609 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.076447838 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.076545035 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.076004645 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.080238712 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.076965607 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.077196773 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.074199041 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.079498699 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.074923781 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.07831248 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.079262797 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.078798072 seconds)
  done (took 151.44678386 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.081418936 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.079118237 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.042749466 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.082505003 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.076811844 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.077273756 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.078254595 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.077241342 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.081271059 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.079219803 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.078514637 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.080651432 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.078895391 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.077777691 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.07964627 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.079565567 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.075560691 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.081619377 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.078772728 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.077237919 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.077648507 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.075000395 seconds)
  done (took 47.69624452 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.076676872 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.079727981 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.078955173 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.078126116 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.077434514 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.082301124 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.081704732 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.083386745 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.07930113 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.081069945 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.08080953 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.081575546 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.079225699 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.081371796 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.082493129 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.080834694 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.079854124 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.079341216 seconds)
  done (took 39.450466869 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.082680984 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.080285053 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.078461502 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.079445906 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.080402545 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.081951212 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.078427605 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.0840839 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.055910846 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.083578249 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.081793305 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.081799479 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.081290145 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.080617524 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.081003149 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.079967977 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.079702694 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.080344162 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.083038957 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.080555933 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.080357323 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.081966103 seconds)
  done (took 47.763680957 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.08127963 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.08379517 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.081874609 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.083703762 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.083386323 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.08358838 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.081198202 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.081825673 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.0820683 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.083479894 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.083202625 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.080728879 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.080697424 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.081943417 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.08062113 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.082092464 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.082582752 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.085093953 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.079474685 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.084466212 seconds)
  done (took 43.653206148 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.084683223 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.082060749 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.084800046 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.084441082 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.082845908 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.084569085 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.083172659 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.084413433 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.085075169 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.084636823 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.08183184 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.084609931 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.082306084 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.085014668 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.082950239 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.085463293 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.083017936 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.081375444 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.085256709 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.081614332 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.085805372 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.087042378 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.0837722 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.088560866 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.086237628 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.08622669 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.085049747 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.085512672 seconds)
  done (took 60.366860832 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.08700945 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.086162639 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.08609739 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.082360391 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.084563299 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.082393054 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.08484521 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.084631433 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.088194556 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.087193268 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.084842533 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.086458634 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.083901268 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.087958423 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.088771117 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.083573612 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.083248153 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.084071869 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.086472393 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.086647147 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.084099488 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.086821056 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.085891195 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.08527013 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.086152806 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.087547092 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.084857663 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.088846187 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.087419328 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.089047095 seconds)
  done (took 64.583434307 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.104437593 seconds)
    (2/2) benchmarking "in"...
    done (took 2.108432755 seconds)
  done (took 6.219535818 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.08837183 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.087950802 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.086634792 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.088636227 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.087259675 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.089353228 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.088666969 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.083254279 seconds)
  done (took 18.70977602 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.08964461 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.090329289 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.084865339 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.084222824 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.089655388 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.096927088 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.087935368 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.090943832 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.089520971 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.08800197 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.094239154 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.09123496 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.089791205 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.091287256 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.091157914 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.089798302 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.090841717 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.092100079 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.073095296 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.085594073 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.093536971 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.086854773 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.08903146 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.089747472 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.090176862 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.093589575 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.098153965 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.08706751 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.091751032 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.087941353 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.0969001 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.08779637 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.091649717 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.090129209 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.092810016 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.087947798 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.09299734 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.090424932 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.089002335 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.089993354 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.092851658 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.091987051 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.091481448 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.098195794 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.088280102 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.091291725 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.091470808 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.092986581 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.089663437 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.097922741 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.099978771 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.090422249 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.092303959 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.093753554 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.095294772 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.09311441 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.09435992 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.093626321 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.099689677 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.100649595 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.093339805 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.113526793 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.099810531 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.091457284 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.094773059 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.101962021 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.118958735 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.09623973 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.091397467 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.091168839 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.098950763 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.089253709 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.093548559 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.093038577 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.104835105 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.100001303 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.094642894 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.090982592 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.093997603 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.094212439 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.095157037 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.094421301 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.093327838 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.094693971 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.103795998 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.122188151 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.094513522 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.092319086 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.098474766 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.096199296 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.098363129 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.098519695 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.089958981 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.092673127 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.09449524 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.097064788 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.094144914 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.096880829 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.09151777 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.103435891 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.094969486 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.097967432 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.100442995 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.10130299 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.095967397 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.093843622 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.092080464 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.095411465 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.104945237 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.095289228 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.095699566 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.093939225 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.096802953 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.099953317 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.095240217 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.10143217 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.109116618 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.10306495 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.069896748 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.089024962 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.099653318 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.098369763 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.1042507 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.124885088 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.091898698 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.099934209 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.100908848 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.110194859 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.095693333 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.094441132 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.098839159 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.093094168 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.094804505 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.095026138 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.096028753 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.093431373 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.092769678 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.093563387 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.096013802 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.098734145 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.096460553 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.098074039 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.099903803 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.094394579 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.099839415 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.097054154 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.100526179 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.101531658 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.096000467 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.095849268 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.099291375 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.099997411 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.099273543 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.096487256 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.094321859 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.09854411 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.098258612 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.099033386 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.100672913 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.099582557 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.097238837 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.095825368 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.102129966 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.098155459 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.099195969 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.097192391 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.095573223 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.100052326 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.100558108 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.097746949 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.101523581 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.097029388 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.101255465 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.096919312 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.098149297 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.098057289 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.095126193 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.094135159 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.104595179 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.111389649 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.105816388 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.109991479 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.099155827 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.1070361 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.096842878 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.101987988 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.098734753 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.102927288 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.10094402 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.099143143 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.098703052 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.101983595 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.120387136 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.10845511 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.100938089 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.099064727 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.10595966 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.103374366 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.106973996 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.097882803 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.101024582 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.1037234 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.097499476 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.09811807 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.101795078 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.101297512 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.098160468 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.09591349 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.101701867 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.100263911 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.097061566 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.098841897 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.100380087 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.100321296 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.101399368 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.098706074 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.103449347 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.100227491 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.108088808 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.094033236 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.09731137 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.099596809 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.102540343 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.098287357 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.101024657 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.098212526 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.106432753 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.096341485 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.103365617 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.109570074 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.096521669 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.099313396 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.100486645 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.098506259 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.101377073 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.097320456 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.103608677 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.110375504 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.101536391 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.101181892 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.102683948 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.097438872 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.102688224 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.101210957 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.100481445 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.100924916 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.101456298 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.1013392 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.101314747 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.111091248 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.097179419 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.103830021 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.101613305 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.103066244 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.102227673 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.103220953 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.103687026 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.107836923 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.110103448 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.110511745 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.102555515 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.105605835 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.104226693 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.102156408 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.109842809 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.101756986 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.120009986 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.111451425 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.102330983 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.099794473 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.102446928 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.10738622 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.100801942 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.103534102 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.110857603 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.100065841 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.102627896 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.110306609 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.105210675 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.103374337 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.112058246 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.10610224 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.105059981 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.101677274 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.108663746 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.104056973 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.10585196 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.108045724 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.105449349 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.10773239 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.110337117 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.101429305 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.102721088 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.104760817 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.111159444 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.099685935 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.102465622 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.109621195 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.104021581 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.10308769 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.106979296 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.101365776 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.108633425 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.103004319 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.104388398 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.104271469 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.107020856 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.112893077 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.115460377 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.109706618 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.11702799 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.106879436 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.117912891 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.102481306 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.103068137 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.102811919 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.108534859 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.114232438 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.106450462 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.104336988 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.114011841 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.101799079 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.104650981 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.109865797 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.102715548 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.103447228 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.102040652 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.107241553 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.10879955 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.109384815 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.100970191 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.104158578 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.105904912 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.103284752 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.107698024 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.105452369 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.105213132 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.112217033 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.104631279 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.10468789 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.105855542 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.106702669 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.10337579 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.105311803 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.108122877 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.109550009 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.102954658 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.104950668 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.110347255 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.105340004 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.11280844 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.104471099 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.103902637 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.106230078 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.110947568 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.106189594 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.105813299 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.105847669 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.107588518 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.108059609 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.106976971 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.116639711 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.111849998 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.108939343 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.108304698 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.105879043 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.107312626 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.118303708 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.13562069 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.108924359 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.110581692 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.11135994 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.115721408 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.108828253 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.113537193 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.110598474 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.114600395 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.109558361 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.106262386 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.110385 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.120154642 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.107915568 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.107200203 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.108800247 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.112330061 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.109286514 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.107603086 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.112506672 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.109900376 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.107957263 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.121720114 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.106104798 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.108370766 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.106934329 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.106954952 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.108423284 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.108678387 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.110924179 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.108913675 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.107614884 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.111002878 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.111711395 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.117324585 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.11062758 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.115467152 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.121657523 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.107992733 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.110956135 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.109903395 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.109955039 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.11178825 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.106304569 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.103074253 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.10909879 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.108318041 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.109866741 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.112607684 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.120025587 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.110468142 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.11055324 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.11040076 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.112788848 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.108078369 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.112633333 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.112425742 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.121157184 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.11468643 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.125694194 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.119526251 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.11056658 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.113512118 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.119061395 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.120974457 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.113973632 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.107546676 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.114934643 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.110629928 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.113609386 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.11081055 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.109200886 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.112255745 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.116564816 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.113622589 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.11084222 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.110452241 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.110141364 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.114318476 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.109724351 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.119447773 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.112429189 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.108415979 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.110707619 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.112553063 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.113329716 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.115151739 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.110735769 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.110406651 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.112696259 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.110844257 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.114339957 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.109300708 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.110623246 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.111449438 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.113461113 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.108693953 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.113249704 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.11014509 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.115174685 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.115710837 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.101061029 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.113099232 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.114334267 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.114438041 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.115236371 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.113965037 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.109853628 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.115085165 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.109374328 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.122058724 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.110590317 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.111762124 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.110262532 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.111659763 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.11763874 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.107492706 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.119222522 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.109806344 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.11186999 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.115352832 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.11755049 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.129793032 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.121734041 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.119039899 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.120703492 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.117066483 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.110635251 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.111025394 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.11393543 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.11577285 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.115387222 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.114646538 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.113486694 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.116896613 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.114987672 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.115427367 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.115778294 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.114564677 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.114849979 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.11437402 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.116862955 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.127430072 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.12064247 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.114402773 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.116328893 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.114518452 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.11878632 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.128495902 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.113807343 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.116862281 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.114788858 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.118912799 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.111810923 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.123944526 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.125220667 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.11902535 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.114637844 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.121744353 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.134526353 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.11499881 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.131857185 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.149739124 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.116813818 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.119521352 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.119811726 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.118856311 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.116131147 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.120422563 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.117455839 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.125051691 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.114483173 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.115021431 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.121256291 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.11536159 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.119032168 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.117716766 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.097380456 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.116677128 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.119933928 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.122475635 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.117302876 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.117081007 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.117914949 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.116118896 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.114664842 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.113849385 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.112803781 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.116298764 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.113592474 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.113952613 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.123680533 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.113859483 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.11819762 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.127578711 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.127907417 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.115019365 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.603494339 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.119411794 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.117249247 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.11701546 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.112493698 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.1180071 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.121506936 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.115034578 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.120122821 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.114385372 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.113006286 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.11365296 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.112226035 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.110704594 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.124471117 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.125512999 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.109945935 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.109516429 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.115986073 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.108541003 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.116916824 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.112319375 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.109749538 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.109791647 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.107357892 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.107355301 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.106548011 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.107224772 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.111958117 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.116292585 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.108730567 seconds)
  done (took 1257.498692503 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.106526867 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.10647535 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.108980147 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.100896135 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.10811725 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.108483302 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.109456426 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.106281075 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.106199026 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.106660304 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.109156061 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.105690494 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.105177964 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.108227371 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.10647389 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.1077358 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.110545632 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.108331774 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.107345861 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.108881732 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.105466879 seconds)
  done (took 46.283600753 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.109065755 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.10738396 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.106624362 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.105811413 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.111265451 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.106040703 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.106223765 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.109476861 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.105018239 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.107820022 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.104885859 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.105956734 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.109962352 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.106528991 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.105967462 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.106207629 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.104482877 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.104740708 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.106786636 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.105591776 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.106216514 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.107031726 seconds)
  done (took 48.380109628 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.105199735 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.107001743 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.107828101 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.100900924 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.107028178 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.104486148 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.102099712 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.109334819 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.105601392 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.109466067 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.114636949 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.115824876 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.105443875 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.106411687 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.103639315 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.105884768 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.253806632 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.104985798 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.109859044 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.104211774 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.107652637 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.112941181 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.102804209 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.104535008 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.104145223 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.105080567 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.101375886 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.104143191 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.107311982 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.111610778 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.11200225 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.107395282 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.107295373 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.110708744 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.106788781 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.107242356 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.113374131 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.10684953 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.107920285 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.105144383 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.117790773 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.130217312 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.106343671 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.106681505 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.116036973 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.104162689 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.107038768 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.110800405 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.114563128 seconds)
  done (took 105.473599146 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.105020212 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.105657462 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.106798229 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.106671059 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.104278328 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.108193347 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.108281828 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.10908976 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.107198807 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.109928202 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.107361329 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.109152032 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.108945444 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.107298743 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.108087447 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.108150863 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.106689746 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.103664822 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.106726016 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.106864962 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.109078757 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.107390931 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.106004315 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.101875816 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.106337655 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.107021434 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.105660866 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.097204646 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.097245242 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.097195523 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.098476663 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.096831097 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.096803083 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.096914134 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.0965022 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.096192723 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.0971607 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.095169888 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.095557797 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.096107486 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.097862807 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.095012841 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.095611335 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.095590097 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.095772498 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.098359501 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.095949739 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.096132184 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.094737034 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.094793575 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.096068252 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.095008105 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.095535352 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.094808413 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.096379145 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.095307875 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.093342873 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.095156485 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.095118283 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.0943704 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.095476218 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.094867326 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.094605176 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.094372641 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.095333307 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.093892866 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.094219044 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.093415197 seconds)
  done (took 144.843529967 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.094400532 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.094574587 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.093848245 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.094870535 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.094465045 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.080816019 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.09328029 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.094264243 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.094290235 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.095183548 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.094079335 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.093996191 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.094618885 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.093161983 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.094751068 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.093357712 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.09334528 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.093591428 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.093991098 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.095259732 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.093162165 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.093166748 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.094229401 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.094732939 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.094441756 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.094049025 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.094073516 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.094119424 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.093104011 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.094419338 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.093711835 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.0939831 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.092552185 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.093167367 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.095027396 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.093724276 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.091801264 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.093484962 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.093741584 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.092737611 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.092130643 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.092562675 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.093507629 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.09357322 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.093973126 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.092091339 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.092769417 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.091923467 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.093299122 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.091586654 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.091962472 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.091166138 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.091613872 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.091665623 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.089922759 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.091481133 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.091675071 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.092607296 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.091378556 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.090630714 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.091424292 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.091326353 seconds)
  done (took 131.789735953 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.089353824 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.091119367 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.088910767 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.090973526 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.090582263 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.090077352 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.09141974 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.09011322 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.091638077 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.091331247 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.089900347 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.09089393 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.09098542 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.090103397 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.090266677 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.091465033 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.090189221 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.091057363 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.092003538 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.089489103 seconds)
  done (took 43.830151651 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.089369002 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.090644666 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.092415973 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.090010666 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.090621388 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.088524189 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.089628368 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.089298121 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.0889357 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.089459434 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.090190993 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.088987919 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.090333655 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.088874845 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.088266687 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.089716208 seconds)
  done (took 35.451975018 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.091083261 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.089393757 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.089670732 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.089842332 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.091283599 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.088986756 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.087920194 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.088553518 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.088092169 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.091079238 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.088921563 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.088332795 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.089477639 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.089246646 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.090535074 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.088919501 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.088157564 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.088744602 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.088510837 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.089490393 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.090868628 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.089471487 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.089499452 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.089553712 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.090180204 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.088813423 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.088739643 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.088988725 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.090060065 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.08879406 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.060203589 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.08894423 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.088552568 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.089421816 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.088256652 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.088156837 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.090297706 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.074561858 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.077107306 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.088370612 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.087423448 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.090303723 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.088150295 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.08968852 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.08825255 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.089606371 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.087328081 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.088936752 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.087470574 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.087400979 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.087354006 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.088328073 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.088195772 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.086113771 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.087265098 seconds)
  done (took 116.854194104 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.085027266 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.086084952 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.086106594 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.085958283 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.086091369 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.086733502 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.087762125 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.08609667 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.086795168 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.086154373 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.086432455 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.087215862 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.086844087 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.08680584 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.087521327 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.086104258 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.086987542 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.086995729 seconds)
  done (took 39.570263486 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.08724521 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.088009142 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.087767334 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.087518433 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.087087477 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.086978766 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.08857436 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.079532078 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.086399748 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.08750843 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.087813231 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.088025091 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.087907951 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.086946151 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.088070583 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.088312726 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.089313094 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.087517633 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.08810797 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.088152511 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.087407283 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.088880076 seconds)
  done (took 47.937470062 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.08891907 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.087855019 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.103344664 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.105752194 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.107715792 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.116881655 seconds)
  done (took 14.625525739 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090134841 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088449347 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.090978904 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088874845 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089669927 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089447897 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.089252069 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.089386168 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089287296 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088977069 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090172697 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089581885 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.089902193 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089705413 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.091076771 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090076325 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088869066 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.089275639 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090491323 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089996766 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.09109422 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.090349545 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090311982 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.09086106 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.092031523 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.091040208 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.090483412 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089718565 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090257546 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090230054 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.090415353 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090715879 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.089953057 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091314469 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.091369042 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.09041036 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.091006346 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.084863919 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.091935478 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.091067977 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.090625124 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.091006994 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.091421241 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.091982091 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.091785531 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.091811431 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.091334167 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091728444 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.092211554 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.091129456 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.09059628 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.091071408 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.091025265 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.091624315 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.091049003 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.092151991 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.09206916 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.092213369 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.092314844 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.092480036 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.092472242 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.093081817 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.093302206 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.09272306 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.092329324 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.093059696 seconds)
  done (took 140.009311979 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.093289402 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.091939237 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.092139312 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.092846358 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.09189472 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.093898836 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.092197336 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.092757575 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.092774394 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.093522649 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.094517519 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.092414003 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.092525465 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.093272819 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.094174873 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.093271857 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.093260018 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.092483895 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.093815256 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.095555953 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.093249641 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.093339348 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.093563574 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.093084598 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.094358864 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.09300064 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.093486965 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.093889402 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.093901077 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.094774264 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.068534093 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.092574539 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.093727018 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.094076971 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.096090079 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.094242695 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.093440251 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.095183406 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.095142424 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.094572896 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.095124194 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.094408654 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.094298368 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.095194388 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.094619696 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.09393675 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.093784085 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.093889477 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.083818588 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.094987212 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.095379877 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.095316762 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.095782693 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.097383518 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.095325479 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.094248356 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.095177879 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.096986662 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.095800361 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.095211981 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.09549738 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.094791854 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.097353705 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.095518213 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.095690538 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.096409199 seconds)
  done (took 140.203738696 seconds)
done (took 2910.387709119 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.169463947 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.126193184 seconds)
  done (took 16.319258906 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.239377164 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.130670078 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.283136513 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.213220688 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.102597194 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.122004941 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.097107 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.097534177 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.189312282 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.09169494 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.10998525 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.096527353 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.09701327 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.096856788 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.096196825 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.098270384 seconds)
  done (took 56.195437781 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.098611929 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.100337984 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.09800994 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.097062845 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.1095835 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.170143238 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.117646927 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.101658504 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.11078404 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.130649211 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.114752743 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.102022752 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.105886793 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.102055115 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.18879631 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.142150696 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.154413768 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.171188291 seconds)
  done (took 40.236164812 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.176133797 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.108599945 seconds)
  done (took 11.311712551 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.127395774 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.103786962 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.123326808 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.100268242 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.112854492 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.120479183 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.108860403 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.114122608 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.130477358 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.124316964 seconds)
  done (took 73.18961652 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.098145853 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.098606003 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.346356255 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.104730829 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.102312229 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.120790423 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.096686603 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.126837341 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.097797402 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.094980225 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.106735794 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.349860188 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.110857946 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.096741703 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.439395859 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.110287928 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.095475778 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.127067923 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.128123234 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.100803881 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.103038918 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.109700212 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.259085109 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.796521035 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.098081689 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.101204992 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.104107159 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.095064067 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.098746473 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.098123713 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.099828542 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.096053667 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.10209475 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.095647703 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.105846428 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.101266877 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.591373377 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.119573346 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.104548833 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.171893219 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.140950035 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.103536231 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.926467343 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.099733095 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.096038285 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.110180045 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.777037063 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.175047559 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.098394693 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.260959654 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.444788195 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.112493674 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.266190121 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.25384885 seconds)
  done (took 145.291727313 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.094279563 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.33304518 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.248533588 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.097594694 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.3583353 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.307327923 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.097484192 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.141449313 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.099474465 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.298540582 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.349370058 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.20023821 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.097865048 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.097215835 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.09942454 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.09713823 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.241847749 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.163504266 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.098159741 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.096576433 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.122379232 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.298057674 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.218238618 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.100400306 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.12575505 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.302614374 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.220005273 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.198996451 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.907703452 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.097061806 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.159180139 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.100850818 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.096301773 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.097156147 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.249833114 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.189935271 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.185137613 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.100966174 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.098132671 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.098345246 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.771380629 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.298467283 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.193206772 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.221984003 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.343575809 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.311947956 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.71217585 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.097808964 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.725966869 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.263067087 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.303268275 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.305826977 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.216972584 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.102406371 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.654931751 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.098450063 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.099328412 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.320778779 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.316658291 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.197631231 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.102564384 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.100261242 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.099200677 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.337552368 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.102734466 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.190807141 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.10243985 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.100807406 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.191883696 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.200845796 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.32453005 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.319625381 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.130251335 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.422303028 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.590186148 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.302606126 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.163465914 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.319620712 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.102226876 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.100674002 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.179189372 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.941339106 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.354599989 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.342060311 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.298003828 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.130282601 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.749913074 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.100360609 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.287788054 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.290939061 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.33401829 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.340588862 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.333838116 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.49630876 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.100607401 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.101255506 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.404943631 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.217411385 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.056381086 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.457066185 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.329965566 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.592898415 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.12707386 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.444803916 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.229789917 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.103967826 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.750034901 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.103080838 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.30688872 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.139997121 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.103588913 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.104087769 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.291692798 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.009523142 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.101186177 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.117986955 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.162047456 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.105308443 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.306174092 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.105942512 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.347483067 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.103959911 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.334414232 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.729405453 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.132570595 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.32736545 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.343025137 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.739253677 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.342806888 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.345238817 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.216504351 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.37780554 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.104565711 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.103276448 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.372365603 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.105679126 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.103678847 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.271391222 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.106613767 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.245515871 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.107350349 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.36815689 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.123972722 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.333332093 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.106508361 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.341248698 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.135271819 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.153192543 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.106910654 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.234103669 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.107265867 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.03979602 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.260885193 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.106030435 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.103974241 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.884015015 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.105935137 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.25326133 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.329526801 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.12496084 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.173505371 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.672433265 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.097761092 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.192429995 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.126446402 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.38052174 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.105669071 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.355709162 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.080901012 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.584983687 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.105126425 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.339865501 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.341356699 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.109472741 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.105171377 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.947236525 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.106137187 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.105829705 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.262162925 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.531669723 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.012801624 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.303748561 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.110174032 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.234141617 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.109900202 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.194664411 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.450451546 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.105918817 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.106547056 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.105824463 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.107722199 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.106740308 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.366890331 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.133239078 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.539583675 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.243324963 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.363881077 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.412413871 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.302475261 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.147280881 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.110892161 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.330682601 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.109491099 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.168810211 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.109750113 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.127342539 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.33363294 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.110395584 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.311477328 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.344862981 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.16052563 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.153132577 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.113789536 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.109836837 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.030203461 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.252357357 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.193713537 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.112706642 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.10836697 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.221538876 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.227742495 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.288262932 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.931854411 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.238449934 seconds)
  done (took 953.989248354 seconds)
done (took 1298.558350998 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.108856099 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.111627824 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.114087968 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.111475875 seconds)
  done (took 30.481155362 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.10983086 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.097834614 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.111090303 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.111112407 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.110598369 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.110708849 seconds)
  done (took 14.685527134 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.110331203 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.111744256 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.112539259 seconds)
  done (took 23.369996911 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.541572306 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.512163094 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.184759763 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.251770447 seconds)
  done (took 11.525725362 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.115155876 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.111330615 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.110984012 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.111414972 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.111799299 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.111575823 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.112834586 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.112711285 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.113070321 seconds)
  done (took 21.053602959 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.263693943 seconds)
done (took 107.415074538 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.254148252 seconds)
    (2/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.98958762 seconds)
    (3/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.517668815 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.188966556 seconds)
    (5/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.320706905 seconds)
    (6/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.111553306 seconds)
    (7/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.440047104 seconds)
    (8/341) benchmarking ("sort", Float64, false)...
    done (took 5.829137155 seconds)
    (9/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.11445189 seconds)
    (10/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.815538897 seconds)
    (11/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.192781169 seconds)
    (12/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.328421079 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.503487401 seconds)
    (14/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.114332053 seconds)
    (15/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.127988561 seconds)
    (16/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.325151517 seconds)
    (17/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.369292623 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.133194902 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.411763084 seconds)
    (20/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.203195703 seconds)
    (21/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.330716062 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.127866748 seconds)
    (23/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.452000287 seconds)
    (24/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.117925506 seconds)
    (25/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 9.715793934 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.214908913 seconds)
    (27/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.258640278 seconds)
    (28/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.332162538 seconds)
    (29/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.174840868 seconds)
    (30/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.508307697 seconds)
    (31/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.709274175 seconds)
    (32/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.306433955 seconds)
    (33/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.253176638 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.128046965 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.981194732 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.217757361 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.353575924 seconds)
    (38/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.176638179 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.19488302 seconds)
    (40/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.24444763 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.348730518 seconds)
    (42/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.14121345 seconds)
    (43/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.125207082 seconds)
    (44/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.428789805 seconds)
    (45/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.068727529 seconds)
    (46/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.11896189 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.224149698 seconds)
    (48/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.541085896 seconds)
    (49/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.379697499 seconds)
    (50/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.524242562 seconds)
    (51/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.116277569 seconds)
    (52/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.209124103 seconds)
    (53/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.114853469 seconds)
    (54/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.114542007 seconds)
    (55/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.41204089 seconds)
    (56/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.120113016 seconds)
    (57/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.422551351 seconds)
    (58/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.200411337 seconds)
    (59/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.11970843 seconds)
    (60/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 9.773395863 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.454354382 seconds)
    (62/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.224182751 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.587340327 seconds)
    (64/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.276546115 seconds)
    (65/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.867799235 seconds)
    (66/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.399278304 seconds)
    (67/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.501253752 seconds)
    (68/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.506875083 seconds)
    (69/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.193968928 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.81324193 seconds)
    (71/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.294969506 seconds)
    (72/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.38181272 seconds)
    (73/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.126922315 seconds)
    (74/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.262972737 seconds)
    (75/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.126693004 seconds)
    (76/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.097709648 seconds)
    (77/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.381187735 seconds)
    (78/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.129797926 seconds)
    (79/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.192305819 seconds)
    (80/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.595896002 seconds)
    (81/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.385612315 seconds)
    (82/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.919915966 seconds)
    (83/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.471533918 seconds)
    (84/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.310323846 seconds)
    (85/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.046967586 seconds)
    (86/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.207596404 seconds)
    (87/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.372318887 seconds)
    (88/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.302938296 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.145734679 seconds)
    (90/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.524434128 seconds)
    (91/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.778170729 seconds)
    (92/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.126864958 seconds)
    (93/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.526534612 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.18628196 seconds)
    (95/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.121214011 seconds)
    (96/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 5.362381015 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.871239848 seconds)
    (98/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.475305544 seconds)
    (99/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.121895076 seconds)
    (100/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.237358165 seconds)
    (101/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.26837608 seconds)
    (102/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.3183385 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.820253946 seconds)
    (104/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.825911293 seconds)
    (105/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.249953039 seconds)
    (106/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.205102379 seconds)
    (107/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.905312732 seconds)
    (108/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.250420474 seconds)
    (109/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.247017714 seconds)
    (110/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.094806506 seconds)
    (111/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.611508815 seconds)
    (112/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.075669857 seconds)
    (113/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.132884807 seconds)
    (114/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.130322724 seconds)
    (115/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.119223922 seconds)
    (116/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.054447826 seconds)
    (117/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.140570629 seconds)
    (118/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.508129009 seconds)
    (119/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.200931926 seconds)
    (120/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.408596895 seconds)
    (121/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.844610423 seconds)
    (122/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.343827195 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.420078478 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.39080274 seconds)
    (125/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.199515056 seconds)
    (126/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.567442995 seconds)
    (127/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.135124222 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.244193502 seconds)
    (129/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.456263323 seconds)
    (130/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.43220424 seconds)
    (131/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.439855406 seconds)
    (132/341) benchmarking ("sort", Int8, false)...
    done (took 5.053459346 seconds)
    (133/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.137894857 seconds)
    (134/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.129749924 seconds)
    (135/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.831049044 seconds)
    (136/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.948077183 seconds)
    (137/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.249310131 seconds)
    (138/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 4.181100724 seconds)
    (139/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.211608248 seconds)
    (140/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.371085451 seconds)
    (141/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.749006673 seconds)
    (142/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.516589609 seconds)
    (143/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.211318095 seconds)
    (144/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.196231885 seconds)
    (145/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.457125324 seconds)
    (146/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.123451848 seconds)
    (147/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.409187232 seconds)
    (148/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.35682064 seconds)
    (149/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.424610761 seconds)
    (150/341) benchmarking ("sort", Bool, false)...
    done (took 2.338106636 seconds)
    (151/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.184228783 seconds)
    (152/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.196719832 seconds)
    (153/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.203607138 seconds)
    (154/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.143288949 seconds)
    (155/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.233330165 seconds)
    (156/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.249302149 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.136526351 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.134906806 seconds)
    (159/341) benchmarking ("sort", Int64, false)...
    done (took 5.747822192 seconds)
    (160/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.255606235 seconds)
    (161/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.121350565 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.442061072 seconds)
    (163/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.414559333 seconds)
    (164/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.003375866 seconds)
    (165/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.661662328 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.00499483 seconds)
    (167/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.425138021 seconds)
    (168/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.234577816 seconds)
    (169/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.384379992 seconds)
    (170/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.272004939 seconds)
    (171/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.229137205 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.517540306 seconds)
    (173/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.124781808 seconds)
    (174/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 3.780901787 seconds)
    (175/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.132775728 seconds)
    (176/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.137579509 seconds)
    (177/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.495201014 seconds)
    (178/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.133884795 seconds)
    (179/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.21437889 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.357895773 seconds)
    (181/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.991138204 seconds)
    (182/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.385309318 seconds)
    (183/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.227141392 seconds)
    (184/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.222107155 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.822625607 seconds)
    (186/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.129833833 seconds)
    (187/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.254606348 seconds)
    (188/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.48822528 seconds)
    (189/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.445060987 seconds)
    (190/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.289003921 seconds)
    (191/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.129246577 seconds)
    (192/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.238129593 seconds)
    (193/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.245740854 seconds)
    (194/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.231415004 seconds)
    (195/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.204595985 seconds)
    (196/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.44883765 seconds)
    (197/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.12729395 seconds)
    (198/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.887689279 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.149740696 seconds)
    (200/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.59821094 seconds)
    (201/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.45503659 seconds)
    (202/341) benchmarking ("sort", BigInt, false)...
    done (took 7.128169196 seconds)
    (203/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.292526148 seconds)
    (204/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.495438919 seconds)
    (205/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.141163783 seconds)
    (206/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.220394105 seconds)
    (207/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.183353039 seconds)
    (208/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.223690867 seconds)
    (209/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.323432269 seconds)
    (210/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.129485243 seconds)
    (211/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.127636254 seconds)
    (212/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.295908117 seconds)
    (213/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.328018541 seconds)
    (214/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.364261097 seconds)
    (215/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.24142195 seconds)
    (216/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.268522445 seconds)
    (217/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.517455189 seconds)
    (218/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.140723589 seconds)
    (219/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.572801387 seconds)
    (220/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.128890939 seconds)
    (221/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.468192858 seconds)
    (222/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.133826175 seconds)
    (223/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.530595417 seconds)
    (224/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.353164544 seconds)
    (225/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.128391098 seconds)
    (226/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.962107846 seconds)
    (227/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.404388792 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.131976747 seconds)
    (229/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.256790184 seconds)
    (230/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.258106201 seconds)
    (231/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.77375203 seconds)
    (232/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.417893667 seconds)
    (233/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.406054881 seconds)
    (234/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.327047901 seconds)
    (235/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.873592642 seconds)
    (236/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.126768439 seconds)
    (237/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.265341405 seconds)
    (238/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.146766598 seconds)
    (239/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.128038619 seconds)
    (240/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.126393397 seconds)
    (241/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.055932258 seconds)
    (242/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.944112972 seconds)
    (243/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.016732371 seconds)
    (244/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.153758679 seconds)
    (245/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.203380428 seconds)
    (246/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.825453254 seconds)
    (247/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.435462053 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.98509087 seconds)
    (249/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.141858174 seconds)
    (250/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.325745145 seconds)
    (251/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.866639433 seconds)
    (252/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.664922472 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.207771133 seconds)
    (254/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.436759518 seconds)
    (255/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.349554733 seconds)
    (256/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.133376315 seconds)
    (257/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.539359081 seconds)
    (258/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.300242201 seconds)
    (259/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.226937151 seconds)
    (260/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.891807835 seconds)
    (261/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.139524855 seconds)
    (262/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.722762274 seconds)
    (263/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.42070259 seconds)
    (264/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.258279853 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.327847357 seconds)
    (266/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.550516353 seconds)
    (267/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.462363539 seconds)
    (268/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.131142784 seconds)
    (269/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.286710532 seconds)
    (270/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.383266057 seconds)
    (271/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.136402644 seconds)
    (272/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.196583049 seconds)
    (273/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.154822717 seconds)
    (274/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.054675338 seconds)
    (275/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.467811458 seconds)
    (276/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.131843545 seconds)
    (277/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.565746493 seconds)
    (278/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.576653682 seconds)
    (279/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.163664191 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.229480471 seconds)
    (281/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.257263209 seconds)
    (282/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.139329747 seconds)
    (283/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.128382726 seconds)
    (284/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 9.109302764 seconds)
    (285/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.234181142 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.132098801 seconds)
    (287/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.131530619 seconds)
    (288/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.13071467 seconds)
    (289/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.134169296 seconds)
    (290/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.328056342 seconds)
    (291/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.425238652 seconds)
    (292/341) benchmarking ("sort", Float32, false)...
    done (took 5.776628474 seconds)
    (293/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.151511437 seconds)
    (294/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.436648117 seconds)
    (295/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.248471011 seconds)
    (296/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.565762247 seconds)
    (297/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.523283784 seconds)
    (298/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.148801437 seconds)
    (299/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.021918696 seconds)
    (300/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.137988332 seconds)
    (301/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.369980944 seconds)
    (302/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.358640613 seconds)
    (303/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.144209595 seconds)
    (304/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.227525273 seconds)
    (305/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.221967983 seconds)
    (306/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.251688132 seconds)
    (307/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.279090925 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.272783413 seconds)
    (309/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.208681659 seconds)
    (310/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.886780514 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.245340773 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.335914686 seconds)
    (313/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.144098129 seconds)
    (314/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.134332812 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.134932155 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.098040037 seconds)
    (317/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.130237348 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.111611327 seconds)
    (319/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.366333129 seconds)
    (320/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.005128542 seconds)
    (321/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.13864728 seconds)
    (322/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 8.910466192 seconds)
    (323/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.493879292 seconds)
    (324/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.216077271 seconds)
    (325/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.253026754 seconds)
    (326/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.01524575 seconds)
    (327/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.161539171 seconds)
    (328/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.995498088 seconds)
    (329/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.535055527 seconds)
    (330/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.294018985 seconds)
    (331/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.60352548 seconds)
    (332/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.237548456 seconds)
    (333/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.426106346 seconds)
    (334/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.237005032 seconds)
    (335/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.024927998 seconds)
    (336/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.152278061 seconds)
    (337/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.38081607 seconds)
    (338/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.462427588 seconds)
    (339/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.548289755 seconds)
    (340/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.347148151 seconds)
    (341/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.826949494 seconds)
  done (took 1179.913625513 seconds)
done (took 1182.04561904 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.156065472 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.136921749 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.637012464 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.148812736 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.13731421 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.140551272 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.649390713 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.166801167 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.154132919 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.651299333 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.149038489 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.139454516 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.153408678 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.172367953 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.150721468 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.152743242 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.143720708 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.163589613 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.173567503 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.144859771 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.191038521 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.145027625 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.138278108 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.191010258 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.139376321 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.154623742 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.159381507 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.190368628 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.190562335 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.141893692 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.145136601 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.496774907 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.188792708 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.144476384 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.150569406 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.155691559 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.145152125 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.155440494 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.158013221 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.155500359 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.140236569 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.150814747 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.144460695 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.143330958 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.139197909 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.139232023 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.14262159 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.265811003 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.144059397 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.485962314 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.198457111 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.159108462 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.192147603 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.144070306 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.142008981 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.142902216 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.191125974 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.145998474 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.144826665 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.483891711 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.231823495 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.154621129 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.485985995 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.201688096 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.151506391 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.150100959 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.141571404 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.159656439 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.497937062 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.690228873 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.173841243 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.162263477 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.14206912 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.144165694 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.156172794 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.651046773 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.156920115 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.720886005 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.165661238 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.15749265 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.147440818 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.144653048 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.143846162 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.159897609 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.161726925 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.142903887 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.148987402 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.141086249 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.157020081 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.500258433 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.18498702 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.642509598 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.15032533 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.1631643 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.161869837 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.722836609 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.168721732 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.16094007 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.138910337 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.481296032 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.183127426 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.164121827 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.145789985 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.155261522 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.26004188 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.162305135 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.163604532 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.144476243 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.165930578 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.150959171 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.144448106 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.159142403 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.164133068 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.178851748 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.161089703 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.144313169 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.153412162 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.150062537 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.162111237 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.154056348 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.151330951 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.155297607 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.145186897 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.196469485 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.164070859 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.160411816 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.260229631 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.150243701 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.27050691 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.159632413 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.151208166 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.145068893 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.489847866 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.187062439 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.166455108 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.15344956 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.168968557 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.167071041 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.162019912 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.148403082 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.160838999 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.148297673 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.191613148 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.124490563 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.17101568 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.197710337 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.159305979 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.151806197 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.165235763 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.180530492 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.166100056 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.150867306 seconds)
done (took 337.271285608 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.189149776 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.143887231 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.218478312 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.144601618 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.210153283 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.195263197 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.143582634 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.14437759 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.143639553 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.529322801 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.145054271 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.149151593 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.141856274 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.144233055 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.1928343 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.144398633 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.144517671 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.378545404 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.145400158 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.203662009 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.144737333 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.145449749 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.145334501 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.53482658 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.144980426 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.143551508 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.20413844 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.144762697 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.384007985 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.145634766 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.144855421 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.386522844 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.204216891 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.158034396 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.152729117 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.152443482 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.212420893 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.153071117 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.191332689 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.192502672 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.220582994 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.178988685 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.145799979 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.145590377 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.149645217 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.147335993 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.145761375 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.178696257 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.14776281 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.151104797 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.379742042 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.150965799 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.15362166 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.146165649 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.146987077 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.16035655 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.146701575 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.147522791 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.205744973 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.148017604 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.192898179 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.535881574 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.531304897 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.147602012 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.14601065 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.147151282 seconds)
  done (took 202.10425636 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.214701451 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.232410396 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.216039878 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.151665138 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.198987711 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.212209252 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.15196175 seconds)
  done (took 17.448099947 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.153819543 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.14815842 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.170470788 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.171727449 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.14707493 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.289217984 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.159765844 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.153315401 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.173630008 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.148891243 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.485090927 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.171043368 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.153602334 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.14666137 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.160484374 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.177010346 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.151051639 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.149526359 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.246180923 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.226114075 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.154912181 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.156409135 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.176657735 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.160130123 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.148880343 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.149670757 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.149201195 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.156180967 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.149554006 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.148930752 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.149311654 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.162055466 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.149507311 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.149171859 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.150140115 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.150838628 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.149678332 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.149919722 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.149792953 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.14870615 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.149826289 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.149617014 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.150087477 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.150167566 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.15050943 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.172857115 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.149835404 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.149164545 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.150602793 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.150647209 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.179241086 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.150484339 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.150375174 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.156143919 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.191015881 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.157790485 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.150910079 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.150946246 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.151434488 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.15107864 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.151442422 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.230409343 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.174371853 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.151771254 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.174447039 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.189199659 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.151345493 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.151591032 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.151298237 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.176062751 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.151542575 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.175620712 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.152925394 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.25168707 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.152827647 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.296070165 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.175638819 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.156005622 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.155846151 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.150586808 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.160022283 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.15281855 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.154877262 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.159938575 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.157682956 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.15271651 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.152766113 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.154410766 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.161034754 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.153096019 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.195618648 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.153093818 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.153216978 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.250729566 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.153160485 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.250509758 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.179071659 seconds)
  done (took 232.444723285 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.158520978 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.154964444 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.167218125 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.154014047 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.153842189 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.15849203 seconds)
  done (took 15.022811552 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.156401711 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.155797409 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.152657485 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.153231454 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.153758768 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.155237149 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.153807967 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.155241656 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.157014311 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.154214495 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.154718502 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.15415142 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.155540738 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.154499438 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.154433305 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.153381362 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.154945366 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.154188629 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.15451877 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.154172947 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.359806629 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.154980234 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.154780359 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.157765855 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.157879354 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.144734577 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.163757725 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.154739999 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.154645886 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.160512576 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.159718629 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.133142734 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.152153967 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.160616662 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.159189781 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.15955201 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.145373041 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.156443543 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.150387634 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.130535172 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.156728121 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.155641423 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.156675151 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.156563573 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.158306146 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.163194278 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.160532529 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.164391003 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.155590012 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.157110773 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.157190282 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.156305644 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.157104184 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.157539444 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.161030563 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.162904639 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.160636377 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.156248586 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.156254669 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.160069967 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.159674614 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.157416989 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.158501839 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.160729009 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.164149986 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.157733702 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.161152812 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.160595228 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.15733876 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.157343175 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.158442513 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.157892566 seconds)
  done (took 158.522081583 seconds)
done (took 627.610639821 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.248442434 seconds)
  done (took 9.32753119 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.337605432 seconds)
  done (took 9.512546078 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.568160501 seconds)
  done (took 12.651650927 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.174820959 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.21013497 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.175233875 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.164373714 seconds)
  done (took 30.814653168 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.460202875 seconds)
  done (took 9.540652977 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.168372085 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.155085292 seconds)
  done (took 16.471824919 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.184368165 seconds)
  done (took 9.26509299 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.321043363 seconds)
  done (took 9.431167423 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.177560316 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.180628712 seconds)
  done (took 16.456462946 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.159077937 seconds)
  done (took 9.239941945 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.918078944 seconds)
  done (took 10.084088964 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.170639013 seconds)
  done (took 9.269601933 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.235970766 seconds)
  done (took 9.31695968 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.133984029 seconds)
  done (took 10.214607293 seconds)
done (took 173.677885514 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.165562804 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.158106298 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.161174578 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.160478599 seconds)
  done (took 30.726214835 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.194539001 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.195100565 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.20414719 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.193727563 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.184601239 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.185416584 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.194393161 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.194879256 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.184893602 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.192402189 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.195483844 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.192203196 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.19464946 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.203291388 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.203820235 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.192965226 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.194837407 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.196083722 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.185506661 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.204282599 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.193163212 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.194431182 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.16115736 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.160782828 seconds)
  done (took 54.678717838 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.351655134 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.226964068 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.313892169 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.206705681 seconds)
  done (took 11.181509699 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.160979005 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.230134487 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.215039295 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.210470988 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.258111471 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.266720562 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.216897346 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.37365953 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.279513756 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.290758668 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.171218828 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.185252817 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.189204483 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.210160621 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.266804176 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.164318705 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.163570646 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.279828603 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.226945095 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.375179657 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.163893542 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.218010387 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.249804714 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.217327199 seconds)
  done (took 55.667271116 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.165359404 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.173592196 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.17282968 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.165963317 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.166602145 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.165856554 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.173150978 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.168280323 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.188164124 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.168218054 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.166913699 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.166644668 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.173381745 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.166768769 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.1663445 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.179048331 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.180243556 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.166796027 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.170556109 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.172656335 seconds)
  done (took 45.504170889 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.163824492 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.011846348 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.511683187 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.415567637 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.165257545 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.167102905 seconds)
  done (took 33.52237412 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.178778581 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.182323201 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.172043283 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.191130468 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.212110408 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.172149793 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.228137694 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.330905946 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.173677676 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.224607327 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.186372815 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.172301473 seconds)
  done (took 28.51124233 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.165361965 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.16854459 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.168125105 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.180131855 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.177433841 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.174458147 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.174498317 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.166609698 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.180210482 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.18491034 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.174232803 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.177112591 seconds)
  done (took 48.17968542 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.380551872 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.393329604 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.38509667 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.71064452 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.481361842 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.150774153 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.452352529 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.379690729 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.847449274 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.875028127 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.464128208 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.149477499 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.115403131 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.092900335 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.064289153 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.409856198 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.168756471 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.024762197 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.425526029 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.216862644 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171516241 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.168384751 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.168404407 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.463083431 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.495323773 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.17591072 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.380607304 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18506539 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.188384272 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.381465816 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.583816614 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.216217357 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.372009733 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.426400531 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.510168891 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.33830114 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.175828342 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.296277225 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.20828182 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.203481723 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.178993767 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.180066015 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.711184536 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.163287134 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.428804459 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.170316339 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.28342599 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.140029366 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.095880505 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.506682811 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.279581307 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.168295579 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.204634385 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.60259613 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.289223046 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.388402107 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.173138583 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.298101376 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.22291067 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.443998095 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.413258134 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.175160216 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.382428814 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.096025869 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.526329104 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.289919152 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.172633272 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.175237925 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.870977338 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.412712529 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.25186351 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.518430773 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.92465131 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.171663964 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.173999515 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.218325011 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.26176458 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.171984247 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.463781783 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.152739139 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.09771762 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.270459756 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.5667401 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.176174089 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.170662496 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.179210747 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.017635494 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.097381579 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.268222185 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.448548386 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.491088083 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.173007793 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.173320243 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.182356896 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.175108273 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.117791583 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.668319538 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.232072826 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.098367674 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.737891589 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.600570764 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.134409915 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.602065584 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.210298852 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.454826739 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.326223295 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.578196241 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.380257073 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.417721892 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.703997192 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.179252987 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.788308532 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.2561256 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.249652821 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.173234963 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.733702357 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.303007841 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.486741936 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.285829338 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.172718198 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.099404765 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.185145185 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.376644332 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.578051926 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.224151498 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.174780436 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.179204807 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.174026555 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.17743136 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.280035545 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.189857131 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.470134159 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.248648549 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.175448458 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.11132155 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.179542351 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.464654242 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.753371738 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.231315261 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.459356997 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.44272569 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.880382043 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.771451152 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.123005643 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.445000026 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.246136089 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.251053595 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.749136442 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.309837333 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.272366616 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.173421587 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.315327757 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.184907481 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.17875852 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.485935599 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.588647409 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.603074523 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.220005459 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.17646839 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.133761122 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.310468371 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.413808287 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.237771882 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.201363423 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.181704187 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.259745919 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.403037195 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.177202504 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.102764434 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.42385033 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.420279238 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.469056026 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.58913971 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.23774994 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.248021552 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.186776202 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.389569749 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.259019869 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.829641344 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.734594314 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.396403022 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.692098749 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.132286929 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.815844099 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.466400896 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.554742902 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.193774145 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.629819529 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.306709567 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.811711051 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.203759035 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.703898552 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.104115487 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183002371 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.515356031 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.135082081 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.493973952 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.250697649 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.241519833 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.180405886 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.179313877 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186256723 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.11083714 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.28620217 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.238882732 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.252175561 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.105728897 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.780854354 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.213213428 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.181400205 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.180209043 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.528313974 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.023847494 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.132447987 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.179702404 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257118773 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.924988584 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.725730495 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.183968102 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.182984834 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.777645391 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.185730764 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.093032519 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.313396714 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.936655859 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.206832223 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.45799277 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.878187101 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.470456494 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.25658725 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.256341454 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.181369032 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.187972664 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.882172695 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.166229498 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.877964368 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.471545869 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.455423387 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.627832211 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.248023668 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.389066052 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.195001727 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.181875061 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.692278984 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.206108278 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183114204 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.384580439 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.697064128 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.539304257 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.822408293 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.2667721 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.182186718 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.45178004 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.190929595 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.628147419 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.874588485 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.188435162 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.182661967 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.451910094 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.868220311 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.183511682 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.143621175 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190071058 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.39472099 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.386164671 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.454457888 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.483119423 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.633839164 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.109954636 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.188272949 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.208199832 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.426595213 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.183619465 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.218500456 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.630914398 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.255349371 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.611335709 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.476637285 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.588879591 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.813408203 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.450737961 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.249357588 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.194402454 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.845364031 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.317916499 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.116082127 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.30248645 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.110062245 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.930790273 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.475814766 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.202453788 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.45519723 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.16689468 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.530170734 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.483069168 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.468727801 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.227969168 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.214319564 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.184976834 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.237679827 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.185223395 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.326660755 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.29682596 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.192146663 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.678252621 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.220262243 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232052339 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.190619731 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.676410412 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.206145038 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188412253 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.887894306 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.210032626 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.304208458 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.256652783 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.934966248 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.627143678 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.276992787 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.060944048 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.837608825 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.44804304 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.244470089 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.637544016 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.223067312 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.589279911 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.186780477 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.39915479 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.192105294 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.710448202 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.228512824 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.46066746 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.142090813 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.399079414 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.387910786 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.210059903 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.192588024 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.11345972 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.29527373 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.061957846 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.171219167 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.189900354 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.868881164 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.61069027 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.338181194 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.648036979 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.009772171 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.189891256 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.553844666 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.578626208 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.764970792 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.19214679 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186327889 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.502297729 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.290668614 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.517370293 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.457259021 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.196288181 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.21400112 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.401085259 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.314151295 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.110053069 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.649582971 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.77353439 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.889270331 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.199420397 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.391119972 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.541564704 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.428596474 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.220121746 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.26187604 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.593666978 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.459417911 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.259128804 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.115338996 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.188886044 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.585610528 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.58811041 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.285541333 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.430826983 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.505296187 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.747471329 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.626421153 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.572643766 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.583121879 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.635724768 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.600466854 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.431391614 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.55905864 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.512758234 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.073039909 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.602724339 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.402191437 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.280225292 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.470362565 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.064771543 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.90054887 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.43470341 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.196556343 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.119466208 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.398477014 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.199932949 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.530904041 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.761224715 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.438320428 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.478897615 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.650813456 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.730406211 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.33021451 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.21427409 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.157174435 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.21491977 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.212404231 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.192231081 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.682776691 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.484787937 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.206988366 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.13284006 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.865260276 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.119673327 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.405220868 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.331194171 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.224240688 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.748722851 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.472360902 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.291022263 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.483686444 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.395584681 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.224763271 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119444075 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.936187748 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.142237234 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.267721306 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.618203857 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.209651058 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.195302209 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.397091103 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.122754822 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.239883229 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.198401099 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.421572325 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.787155252 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.465777979 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.32190715 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.442274928 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.495121376 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.056555891 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.216824163 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.466514207 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.12102623 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.772532046 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.894891793 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.237808009 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264921549 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.193688703 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.198069881 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.464614412 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.556396662 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.288430261 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.722368541 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.224445598 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.218546066 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.549416396 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.28385541 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.196605503 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.199787227 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.678328359 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.424592642 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.195921044 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.176496472 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.408829229 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.268068499 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.379023287 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.27104165 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.709771909 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.201017602 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.062483617 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.292028851 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.143943823 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.196579611 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.9601521 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.249744146 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.194567331 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.46905558 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.850484899 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.399589639 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.590244179 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.066929716 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.343113238 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.234637359 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.199672337 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.20272948 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.593505378 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.499067427 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.197291667 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.468813069 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.24756055 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.20268295 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.859483599 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.165799691 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.197817696 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.879577553 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.085378813 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.928385005 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.591586178 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.204220903 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.232944253 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.200599952 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.123937924 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.198907798 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.376126838 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.173662646 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.203519103 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.569014203 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.538591622 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.285020836 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.204152837 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.199786252 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.205133117 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.411203773 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.712791365 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.214567246 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.899288709 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.402828841 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.207843383 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.68970564 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.650090463 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.410151091 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.234847088 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.342876346 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.470610512 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.750189601 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.347821464 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.171567718 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.426209899 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.202187175 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.471559794 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.473481698 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.200157487 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.412180658 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.630723986 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.483275705 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.554807926 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.513108135 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.26596241 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.352950307 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.100133955 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.208537652 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.202234865 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.468768306 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.258120663 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.200455451 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.209472914 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.75368776 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.96199252 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.670598852 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.356788639 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.545699974 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.040855477 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.95628379 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.203753954 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.128355915 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.200990395 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.226357886 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.204041472 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.128564124 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.891564341 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.927159936 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.414268366 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.511454894 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.127925401 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.405598941 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.780721105 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.128119921 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.17138294 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.202327142 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.467215699 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.129019255 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.205690434 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.155956987 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.510896484 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.881835328 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.468229904 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.201966459 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.146570798 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.208017504 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.204479822 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.202032553 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.28652859 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.203680905 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.319929933 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.471126694 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.60576814 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.304936743 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.842306846 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.900297244 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.140302676 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.247913002 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.759260391 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.772867394 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.504675512 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.330173683 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.889296677 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.147965839 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.205995311 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.2199789 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.442411266 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.207829179 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.206965804 seconds)
  done (took 2269.594655477 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.267167733 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.267799 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.341621769 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.236824211 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.297891264 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.258400003 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.287674547 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.271820016 seconds)
  done (took 60.353551999 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.204129317 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.158186144 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.214458421 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.205595605 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.204599809 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.243035691 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.396724128 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.230406165 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.204648871 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.208885627 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.20536788 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.209106017 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.20577295 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.660516431 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.226859854 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.591755082 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.245498497 seconds)
  done (took 82.796005375 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.279981652 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.323903051 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.231542991 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.918615908 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.236250877 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.614848615 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.223686208 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.224239987 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.354981194 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.524966426 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.277798101 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.229814215 seconds)
  done (took 94.582844547 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.224927961 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.224180741 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.223898432 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.266272991 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.222985909 seconds)
  done (took 13.305567287 seconds)
done (took 2830.74437961 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.468806719 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.326197333 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.302042513 seconds)
  done (took 6.816745858 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.366515078 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.441444409 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.529281432 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.537014582 seconds)
  done (took 12.023352432 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.517214689 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.597905458 seconds)
  done (took 7.25898531 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.659078631 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.243117444 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.618509528 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.225564565 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.226937343 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.230528123 seconds)
  done (took 23.832313748 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.225691834 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.226178596 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.225242961 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.225369633 seconds)
  done (took 11.04682521 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.223869733 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.955468334 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.227497695 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.239783332 seconds)
  done (took 22.791023023 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.373567721 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 5.923521309 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.001663855 seconds)
  done (took 13.443108642 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.847585839 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.678100369 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.838898586 seconds)
  done (took 10.514329872 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.057446438 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.042088535 seconds)
  done (took 8.253705245 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.378865081 seconds)
  done (took 4.523903505 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.056064906 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.538797416 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.715631093 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.740447907 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.807337548 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.447322611 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.58073097 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.509675122 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.62129578 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.642528994 seconds)
  done (took 28.805339334 seconds)
done (took 166.444888951 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.673672248 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.256873678 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.437187546 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.612058008 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.482582901 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.441350644 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.530765976 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.608859642 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.29014216 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.267360377 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.617144073 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.463343258 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.467449013 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.249477528 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.477386347 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.257364723 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.472131235 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.691639581 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.286652488 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.498488876 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.528872445 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.251722701 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.458054297 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.274490397 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.476992677 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.388946519 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.855297914 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.250964477 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.43633336 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.875062253 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.388387618 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.649296129 seconds)
  done (took 181.063313448 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.117576556 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.229229131 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.23631995 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.228962524 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.524201809 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.234710961 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.230202422 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.228721733 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.443297015 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.427848934 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.230149267 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.519293181 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.230799724 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.230183743 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.232027612 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.230211818 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.572551885 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.155668305 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.230818357 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.230383946 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.230794634 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.392112843 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.230979134 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.414643065 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.54772859 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.232436923 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.230835339 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.231235622 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.231697115 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.231194467 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.231259663 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.23146557 seconds)
  done (took 219.349996072 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.230803204 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.225578554 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.230992049 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.231670881 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.231627158 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.233306824 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.23395639 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.231177065 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.041022414 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.024853878 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.232953733 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.23244332 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.231367535 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.231924221 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.231010742 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.23313498 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.231238918 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.231967699 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.232575324 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.231809215 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.231974197 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.903370608 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.233251996 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.925570846 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.233969351 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.235293987 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.23381864 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.232319255 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.232297959 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.232815549 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.23322903 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.23328871 seconds)
  done (took 232.548226851 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.469931799 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.233986525 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.234316877 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.249734739 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.234444181 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.233995776 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.24187591 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.48025433 seconds)
  done (took 22.531132169 seconds)
done (took 657.664346372 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.591373248 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.966127967 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.36806122 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.25920406 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.494532748 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.305380604 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.252821015 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.312372171 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.905854154 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.333364436 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.644820379 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.263278993 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.946067591 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.285815789 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.369084342 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.309963964 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.599313851 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.855718037 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.388352469 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.90809605 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.46270806 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.179792039 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.334379849 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.95237382 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.661192641 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.199109749 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.285082506 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.603476987 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.258937877 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.487668399 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.909846715 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.519929136 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.270434468 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.256828384 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.30876631 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.297445955 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.461854689 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.267584411 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.364638634 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.971648887 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.919770603 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.784092993 seconds)
  done (took 115.270338213 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.244111006 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.24172803 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.241633774 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.241956761 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.251552303 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.241564166 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.242407366 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.242463316 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.241973247 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.242408768 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.242148327 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.25098349 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.242610966 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.250632746 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.242330318 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.242303901 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.242153711 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.250888913 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.243155417 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.243134643 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.243263145 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.242796716 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.239116217 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.243331308 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.243506878 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.24372598 seconds)
  done (took 60.503504642 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.237836304 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.416995474 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.527812379 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.274021578 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.239413138 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.241697301 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.268275413 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.245904152 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.242255058 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.241120211 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.353095199 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.244502916 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.252622086 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.521832996 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.271205735 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.239606437 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.239548771 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.239632115 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.425355693 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.257074226 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.27041653 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.246853971 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.269948203 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.255859814 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.242114221 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.241594351 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.243241952 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.702488442 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.253264557 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.354870047 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.30094158 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.276047032 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.629328179 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.5370371 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.311414925 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.248230097 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.240236969 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.40614261 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.254035264 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.241782581 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.269925562 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.250628589 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.528643863 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.768657066 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.256760925 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.241014103 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.697373126 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.416836591 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.290691328 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.259013093 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.536919811 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.274058122 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.241883933 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.243192969 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.280349044 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.258239659 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.243235552 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.523589774 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.258713351 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.270735161 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.25014995 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.243100924 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.435446873 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.252120862 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.422059394 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.251770986 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.248447057 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.244646555 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.533061417 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.27485059 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.763058279 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.258500872 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.243111764 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.356869799 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.427721307 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.723563129 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.258189502 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.436586077 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.648150946 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.282842489 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.25543651 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.68771417 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.285428076 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.253928031 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.243502551 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.244009868 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.243394824 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.285504442 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.270683333 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.683783614 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.763388359 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.542831553 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.285034642 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.258797323 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.245720701 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.525652891 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.255525255 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.24417266 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.524742531 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.794584527 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.260704791 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.250996839 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.747642009 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.261329209 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.275002023 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.256580586 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.545724888 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.277934251 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.286454996 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.245720677 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.251248644 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.248427542 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.275039096 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.256497675 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.245204277 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.734545117 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.423655393 seconds)
  done (took 277.068075431 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.249085351 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.245553965 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.245085368 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.245092538 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.245062362 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.245905087 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.246458127 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.24508457 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.246616555 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.243734505 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.244781748 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.246146523 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.245869078 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.24825783 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.289272468 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.247616573 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.732238039 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.24474 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.246629315 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.248043307 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.811791217 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.252932837 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.246077728 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.24783053 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.247256108 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.248361969 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.249913128 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.292048556 seconds)
  done (took 178.218497883 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.247757573 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.29538906 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.258863177 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.286583574 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.259664317 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.247865824 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.26942634 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.26368748 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.254217798 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.247056446 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.248384268 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.276404506 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.256048046 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.321556209 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.27652526 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.278474391 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.325853687 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.254295809 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.248903334 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.248549906 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.296306629 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.262746486 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.277202456 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.304370329 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.261045671 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.297302576 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.262660496 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.248745528 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.249842205 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.338682911 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.269869975 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.277238418 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.285013829 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.26832929 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.342710609 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.343421005 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.328864717 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.277660191 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.253957652 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.249799993 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.249893874 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.251373167 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.298102049 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.264063565 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.250866536 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.341128477 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.271411936 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.250277287 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.269939451 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.250307906 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.2628178 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.267573544 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.283701719 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.351241356 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.299371176 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.267946682 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.27267457 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.26980964 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.251387964 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.323890657 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.257413145 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.340941517 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.272804541 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.252747056 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.252494838 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.255357719 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.299965077 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.287394138 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.328200456 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.257970801 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.324403555 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.306027753 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.266586705 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.252023922 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.251813424 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.301595188 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.340450689 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.305945201 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.31655349 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.290155874 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.26158543 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.252752396 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.254433387 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.280004969 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.259413369 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.342161127 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.347249029 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.258317512 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.252567168 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.252812483 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.253211086 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.27611971 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.311058044 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.294934866 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.336870601 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.286818041 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.288858945 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.261359393 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.265819471 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.258483368 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.284401714 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.260955466 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.265204707 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.59130447 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.2908654 seconds)
  done (took 241.827380516 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.610853736 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.295783705 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.323761164 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.51508728 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.642670139 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.177755501 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.294063104 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.306687223 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.313745113 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.419291568 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.370191806 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.346988176 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.290752461 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.277023 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.295796502 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.313163393 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.331061779 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.600376741 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.393720836 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.795034731 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.298286824 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.525131771 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.589354346 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.630208319 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.340241015 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.69265812 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.922689487 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.393259168 seconds)
  done (took 73.481199172 seconds)
done (took 948.525107204 seconds)
SAVING RESULT...
DONE!
