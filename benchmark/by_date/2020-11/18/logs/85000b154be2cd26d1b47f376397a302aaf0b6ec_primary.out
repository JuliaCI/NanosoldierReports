cset: moving following pidspec: 9652
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.981932078 seconds)
loading group "shootout"... done (took 1.123157975 seconds)
loading group "string"... done (took 0.682134504 seconds)
loading group "linalg"... done (took 8.586097139 seconds)
loading group "parallel"... done (took 0.169155959 seconds)
loading group "find"... done (took 2.852882189 seconds)
loading group "tuple"... done (took 2.066769679 seconds)
loading group "union"... done (took 15.205714603 seconds)
loading group "dates"... done (took 1.560742813 seconds)
loading group "micro"... done (took 0.221026769 seconds)
loading group "simd"... done (took 4.795786208 seconds)
loading group "io"... done (took 1.065978446 seconds)
loading group "random"... done (took 9.60316051 seconds)
loading group "problem"... done (took 1.519704625 seconds)
loading group "array"... done (took 25.225891826 seconds)
loading group "misc"... done (took 1.896413541 seconds)
loading group "scalar"... done (took 43.542084752 seconds)
loading group "sort"... done (took 3.326818495 seconds)
loading group "sparse"... done (took 12.660844082 seconds)
loading group "collection"... done (took 18.463915615 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.534233465 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124423457 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128544507 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.122111366 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.181130333 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122572405 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130386995 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085736503 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.845161555 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.143360182 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116139299 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.436745087 seconds)
done (took 5.381285829 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167136065 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093558488 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083376887 seconds)
  done (took 1.361861523 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072469339 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.060938284 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067700864 seconds)
  done (took 1.386385909 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065531664 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135173252 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067411984 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066991652 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.07051325 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066773893 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067336213 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066645352 seconds)
  done (took 1.730138033 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072415716 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068332069 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065842615 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067922316 seconds)
  done (took 1.461619678 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065639961 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123059474 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065037219 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065287902 seconds)
  done (took 1.503936245 seconds)
done (took 8.882189519 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.14058974 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.826641388 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.754565888 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123854567 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.246608673 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.451284702 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124692256 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.185775328 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.090247172 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075941863 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122388321 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078382716 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.449952857 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.400420595 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072384849 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.16941773 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.641960738 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089922524 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135214738 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.458584359 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074268781 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087996455 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084976957 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072514918 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.335341777 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.15417594 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.664646052 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.100394394 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069422159 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095613044 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.07099184 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078939972 seconds)
  done (took 10.748996498 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093549159 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.091096733 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.06991765 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124725091 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.097121399 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070354093 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075773646 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069375568 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089625902 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124715885 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091245922 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.10053228 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067054461 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069818307 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.080155879 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197565055 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080689018 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082192064 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068484203 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081554827 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106643141 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078649957 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078974966 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078653621 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130237743 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169717913 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097081667 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099007895 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.06923173 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.080162942 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118670349 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126100406 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067386562 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066383193 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120023951 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095876553 seconds)
  done (took 4.646611651 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.900081783 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096150546 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083426782 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.075384886 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106945433 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113616733 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.125187458 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.12242938 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100127333 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069694363 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153129735 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.643650814 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.134895843 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072301788 seconds)
    (14/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.117347578 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120010303 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.362472168 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.079215167 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07058929 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069262483 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071342432 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069838401 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112394598 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066560911 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176219028 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.58796976 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070949148 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069705273 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096907187 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066327662 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.143550057 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092645143 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07022017 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.55682758 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066181668 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064354844 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088820669 seconds)
    (37/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.064132963 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066186532 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.206144122 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069760851 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079940496 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067238889 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109461781 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.08292603 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.494191646 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.07041508 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.562847343 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.226618955 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.07332044 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072845958 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102584156 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065195104 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068306782 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.040178426 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.121826256 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067030037 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.273112899 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070800211 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069266376 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069210027 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.100699548 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067530551 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069610861 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073766819 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096543978 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.789731562 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.093582255 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096801236 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06814396 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.405240868 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076994799 seconds)
    (72/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066381094 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071463874 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071867363 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.085768517 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111403696 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066805656 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066600506 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107829943 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089413994 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089198675 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070415924 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067689711 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066581155 seconds)
    (85/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064329634 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.354539953 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.17881639 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067083773 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067926287 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.482524499 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064769353 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066122913 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068109587 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089723899 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067367584 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063826616 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064671289 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099344698 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067404823 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.818839 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070490283 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.464952865 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069677423 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.106021333 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120155103 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068081039 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.09559344 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068915108 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065605782 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074348394 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.06642732 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065292534 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070613318 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066376544 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06690437 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070036388 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068963349 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06825209 seconds)
  done (took 23.220956759 seconds)
done (took 40.707772088 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.314403033 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078978635 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079422877 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079082945 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079188675 seconds)
  done (took 1.869420285 seconds)
done (took 3.198227648 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133733039 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076407897 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064824145 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.101160169 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069078744 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.101829177 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108357439 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.10529059 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069999817 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.069087295 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069498302 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.103113206 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105646337 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069316895 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.099197272 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.104065609 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069294361 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.0677451 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069395771 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069466648 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069419163 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065484541 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069253008 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069098995 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099374106 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069879616 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065187005 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099192794 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069307882 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098794441 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069561128 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069525777 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.068854598 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100152254 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069621552 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099784752 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065272175 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.06969882 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069834498 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069429995 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069195509 seconds)
  done (took 4.606064439 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071963543 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081898877 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.0840087 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063084845 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072625447 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083440884 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063256398 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082272144 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088603362 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083108152 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082870913 seconds)
  done (took 2.138099782 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070764185 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084006424 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087790029 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062826811 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073627619 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084304174 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062435769 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083270973 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086382655 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08452484 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083824273 seconds)
  done (took 2.126627859 seconds)
done (took 10.128105293 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097065556 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.06680743 seconds)
  done (took 1.413608481 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.223779968 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.627336146 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.309282897 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093972207 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072939922 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086131017 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.203073321 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067721526 seconds)
  done (took 8.120458836 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.102228457 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.069038151 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069466838 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068416929 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069574367 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069668337 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068662703 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069999819 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068315664 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.068117781 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070647111 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068044957 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.06948804 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068825901 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069905749 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070081127 seconds)
  done (took 2.504649021 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.10516302 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069997203 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.100289205 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062794762 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.0724268 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063528557 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071245077 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073439387 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070645009 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071893957 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072552623 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.070921413 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071628456 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.07203232 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073874003 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073587728 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073163638 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070492398 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073319592 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074012515 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072539262 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073715805 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073999801 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071830118 seconds)
  done (took 3.159988016 seconds)
done (took 16.466706953 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.17587287 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075895849 seconds)
  done (took 1.512856521 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.06829875 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069585487 seconds)
  done (took 1.412929768 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073709205 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062052704 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079620934 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070896803 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061902063 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061323106 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078012649 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062152291 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.06178277 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062120376 seconds)
  done (took 1.948230198 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06347508 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069136531 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067092968 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065636566 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067512249 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063161081 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.066290954 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063121744 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070203339 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062091747 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066863475 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.084322116 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066391289 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084818673 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.066332449 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066515765 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068887399 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065695917 seconds)
  done (took 2.503047707 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061700415 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062958629 seconds)
  done (took 1.407630941 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065002115 seconds)
    (2/7) benchmarking "second"...
    done (took 0.06282813 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065177575 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064797407 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.06302184 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.06222102 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062832259 seconds)
  done (took 1.723114494 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.422102205 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122374246 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341131139 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069238431 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076813287 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.255313464 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.06425314 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068839782 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068916346 seconds)
  done (took 2.810762212 seconds)
done (took 14.608896677 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082675523 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181539286 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088658101 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.405072218 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091775955 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067589963 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113188396 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.174485807 seconds)
done (took 2.50663142 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214928964 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.243186843 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.39162303 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124467099 seconds)
  done (took 3.045872174 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336753332 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078699394 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076861929 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066893886 seconds)
  done (took 1.857046386 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065282496 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071745464 seconds)
  done (took 1.429603085 seconds)
done (took 7.84845092 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072134058 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.06241825 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.068362359 seconds)
    (4/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.092266595 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064693221 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.064652618 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.06420727 seconds)
    (8/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.074786177 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064794481 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062291452 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064680942 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.06470644 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06506134 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064612593 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064273128 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064976499 seconds)
    (17/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062417984 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064519888 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064890562 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064515538 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06447683 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.064077732 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064290896 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063902985 seconds)
  done (took 2.914402491 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080012122 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065994488 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067556938 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067258079 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068365668 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067300745 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067407624 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066346565 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067272224 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065728086 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067467142 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067398421 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065534673 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067652308 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066019356 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067311162 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06738154 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066018507 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065805852 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067498765 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06729247 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066351188 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067618835 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066785494 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067909935 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068026837 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065706045 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066407662 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067421758 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067535664 seconds)
  done (took 3.329486161 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066763307 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060335886 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061016616 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070047751 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060509787 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060922119 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061080985 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060320412 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060573482 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062048348 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061318192 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060252493 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061353552 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.06076769 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060345253 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061280096 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065612624 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079463343 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060879806 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060544261 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064747886 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060745945 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060805337 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060684439 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061553488 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061156615 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061270514 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061196553 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060386832 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061762723 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060598821 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064601791 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066120205 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060671767 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070634204 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065616918 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060811891 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.06486844 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061991918 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060326189 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.06049706 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060401775 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060529122 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060539251 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070874664 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061273723 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061986108 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061711099 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060774194 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060700408 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060530786 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062259602 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.06895644 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061848422 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060357681 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061950323 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060511453 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061666311 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060435159 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.059972378 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060117692 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.06415971 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061872612 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061479913 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080213405 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062391035 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070667949 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061027655 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061604021 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064383578 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.06131313 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078218409 seconds)
  done (took 5.836102713 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071713587 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072645567 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.07946783 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070771392 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065115119 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061862325 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065275635 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061927138 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071558695 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065850879 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06148354 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065386256 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071355463 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065847239 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062990467 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070886799 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065817774 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064984861 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061962698 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066313237 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063061286 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065538006 seconds)
  done (took 2.791206008 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.13611667 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066927346 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105731543 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074848312 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069057965 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.075597319 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066672749 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066584953 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066394888 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067005934 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067383994 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066906423 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069151615 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066890219 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067083636 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067467985 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06657734 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067117928 seconds)
  done (took 2.642246447 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077261584 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066477758 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089510017 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066607919 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066425696 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066381391 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06982125 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070608206 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065847102 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066012285 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070579956 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066533099 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066224082 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06620985 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066035802 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066586585 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066166845 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066783169 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071289071 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069812887 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069821627 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070073326 seconds)
  done (took 2.832815101 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077434314 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065046899 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080277568 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066527929 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061118445 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061213257 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065916762 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.0657699 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.06653415 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064919951 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065761115 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06119884 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067237226 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065353413 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067258795 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06580595 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065600651 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065766557 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065235609 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061776661 seconds)
  done (took 2.638152926 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086412171 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063860964 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063488381 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082683875 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063547489 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063510072 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.08327098 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064220632 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063750979 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085062792 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063625535 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063389004 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082786535 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.082729791 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063545402 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083200376 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083304612 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.083154969 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064159295 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063892397 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08510694 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064118614 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.082875068 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064279636 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063948819 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064094065 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064024321 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.083108387 seconds)
  done (took 3.338770803 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064694794 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063871569 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064404328 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064202868 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064945261 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064600549 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064891115 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064976416 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065841199 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066613608 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065626108 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064746497 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067011886 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.06426081 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064315343 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064574283 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064037941 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064610976 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064805073 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064227027 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064174421 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064155479 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063878559 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064620912 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064497863 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063708521 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064389118 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064416716 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064624712 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064366594 seconds)
  done (took 3.259348176 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073930498 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072128593 seconds)
  done (took 1.465668462 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062550144 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077754547 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061217132 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073397639 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069104033 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065545333 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069697474 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069181767 seconds)
  done (took 1.86297051 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067675029 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091088603 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063009319 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063281467 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065994183 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131977719 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074764767 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074387591 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075966134 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065146721 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063024371 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074692223 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062651035 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076121082 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063792185 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071377561 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069959187 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079945572 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075894924 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061156316 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075336368 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063737424 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060981286 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063194444 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062968574 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069632293 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077864012 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074915966 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070745618 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060449554 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080779355 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061149454 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062710786 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071279594 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065872845 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061646838 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098601837 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062016738 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066726848 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060981475 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073625083 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082371038 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076045786 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079845769 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063708584 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063327015 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.06136245 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063335136 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064905139 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071194736 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061154898 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069156607 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.061187368 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.06276148 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07216113 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061944925 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06698035 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071063404 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07496352 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072029629 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070518691 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077187168 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070493288 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069211573 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06228414 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080706768 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063195602 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074913794 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076531014 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063089648 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074403308 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060787729 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059900952 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061294188 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094624009 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063747487 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063053596 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061941693 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061227754 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062834203 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070950153 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066507269 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068545686 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064616221 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077057684 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070658079 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061124708 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068155941 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079631671 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064663278 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061646937 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077737374 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064862045 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060713971 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078648521 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070521887 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062249263 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061676353 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063879093 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074412643 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062026318 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059799771 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069566258 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062523533 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063360737 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065283415 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068676293 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060667472 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071105415 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064943503 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06203103 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059031129 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064459548 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.06162925 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059350705 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069948019 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060808356 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07467045 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066385172 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07419079 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074886307 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070231861 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07596298 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059979037 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058779272 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077640227 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069265695 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.199205649 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.083770656 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.063843073 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073483047 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.065252168 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063800372 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072011878 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061032944 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063896108 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061917131 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066411028 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063554729 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063506457 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066770638 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070347908 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073851 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062983586 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071091697 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061795291 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079221578 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073061649 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067426876 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066622654 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.064508673 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075407839 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069401461 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.073016723 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062663861 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063972123 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062524218 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.0737823 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073265631 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.065021374 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070650147 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066045757 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062585685 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.062085583 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062914887 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065248702 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065666539 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062628514 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069741184 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070269692 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.0755479 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.069093444 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071196553 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060639729 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.06094481 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06359681 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061400392 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066248551 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071497279 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077120339 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073585781 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082960254 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061647109 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071829958 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063109424 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078607236 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075302589 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062697751 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066136662 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060438252 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063193048 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.07071728 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072650829 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075333188 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076547377 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066260402 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065871124 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060926274 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076737567 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062248597 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069809156 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070862457 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066307678 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061529596 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063171386 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.07057788 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06587521 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061403229 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.07704613 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068361348 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061764118 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075364153 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061970975 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072391328 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061012157 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064707663 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066818136 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063036732 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071014003 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076823032 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060457648 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062129369 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07671937 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063011406 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063126766 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069856052 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076365489 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065962279 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069267534 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072856612 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071026352 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065598621 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.07054391 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061729651 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070284396 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064115848 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072623816 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061132376 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078048268 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059979853 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076065902 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061091653 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071277369 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061442134 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070330284 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061630338 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077180093 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062483308 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061126601 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071802132 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.05944643 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069415137 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059620468 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065787307 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06710598 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069736583 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062276614 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069979823 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.20295411 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.073983647 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.068903215 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071595777 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072104894 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066625162 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061786193 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070825639 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073675137 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.069923341 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063399678 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063643735 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062388971 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071650735 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063200128 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063017305 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070034791 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066456244 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067782506 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063369008 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063729688 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063836928 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07025898 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071220557 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079852205 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070816251 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069655393 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071674642 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061745183 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077120016 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.06175864 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.072344391 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060899575 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067736956 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071195125 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062171546 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081399695 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063393046 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070049943 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.0744394 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070786186 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065694502 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081351973 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065123993 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070536314 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.07030265 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066408499 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068426442 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063434017 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069881302 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071779887 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072947625 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.063197225 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069516103 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070835343 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063715302 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070172415 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063582736 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069919446 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063638794 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060804346 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.06592651 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073284116 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066316662 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066677048 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.06247556 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060318992 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061907015 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068873621 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066723469 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070348641 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077207614 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060657196 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062745321 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061047243 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065677205 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079846263 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071266069 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069485667 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066250793 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.061113655 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063150039 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063670841 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.06209457 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065095134 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.061456177 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061257349 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072314127 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064144743 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066086377 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062555291 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062953473 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.07181796 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.067738248 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063027717 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068198483 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061501045 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066551338 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060957796 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063155058 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066108647 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060613499 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064966293 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071796117 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077523006 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068266117 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070525568 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062367612 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069463923 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076083419 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068521037 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062705173 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.07028945 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060222196 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079093529 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070481616 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069367045 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070226781 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061998568 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076931883 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064867621 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070821405 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075547148 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061784296 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066486166 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059477979 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075072461 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064746461 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.05992922 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068196393 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068579093 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066136678 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072446848 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.206861972 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.073115419 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068568647 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066070668 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064570084 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.064071093 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070666678 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078778619 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.06272347 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066351545 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070390913 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070449607 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06613295 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073791149 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069827096 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063336429 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063861207 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065045042 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063331053 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07397165 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062680766 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066440488 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066279208 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061265293 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068167268 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078428354 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071193149 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071298829 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061376734 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061253928 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079652175 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065451608 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065804645 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070618085 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071263403 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074634144 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070997942 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078462045 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.06286406 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067599896 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074177168 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.063232306 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061466237 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065530238 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064301444 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071195828 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071475311 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069448314 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063939534 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068597903 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.07560767 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063579682 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066553825 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066956706 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062614993 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072210931 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070005145 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073108705 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062957194 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061239211 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065770696 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070797102 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069570258 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070692711 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062686636 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068379049 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075414775 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069717155 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065047341 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061386748 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065078024 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.071099139 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066500873 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061274062 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066225851 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065542257 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068859182 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071434651 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066496987 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061369739 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078576234 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070182032 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071367643 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.064102871 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06354253 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062428981 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061623768 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072634462 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061479615 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063677441 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066297851 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.06343725 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.079264151 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.070017931 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07769826 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063512908 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066280128 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061914277 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071383327 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066147585 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061749854 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072056557 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060626411 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076510292 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073202215 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067477399 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.06149459 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.086285124 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069606539 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076314762 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071312529 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070518742 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.06485527 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070910212 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063421735 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071851067 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060545396 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059612455 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070877973 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069431128 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072966975 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060350653 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.07056753 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062451712 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068633575 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067933077 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062027049 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06164069 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061943215 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069495218 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064447237 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069444542 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.208647188 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.081109378 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064470588 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073435757 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.07200808 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073884329 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076095785 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073909804 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069774149 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062385492 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069235354 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069327524 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063292473 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.067208611 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065105591 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082897724 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063843861 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.06313214 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076222783 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068160573 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061916465 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068521264 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.06645937 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072066266 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06264543 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072689441 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065810949 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062912617 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066216912 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066877288 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060869228 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062161387 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061997367 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071932524 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.06642732 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062065914 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080265895 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063694083 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070472001 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073230305 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068544783 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063543617 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061393326 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062684864 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074970823 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077023532 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065403259 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070982246 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064796247 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072946963 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062251091 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072595608 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071453769 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070013797 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061575081 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062177288 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076490368 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077398797 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065910174 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071078848 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.07090008 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063204897 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083564499 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071030397 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062831001 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.0724957 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064439093 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061325717 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060706069 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.06362586 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07335634 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061325458 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064853504 seconds)
  done (took 42.43558073 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.100009689 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06214505 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061321346 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061494106 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072086654 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062086143 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062018131 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063004958 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06244351 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064093154 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061765713 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064234166 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072108698 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075167072 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072369496 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065523996 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061493457 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062525174 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061321857 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06227781 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071948367 seconds)
  done (took 2.839349146 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065461854 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065729993 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065556854 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065730492 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064740133 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06206693 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065998731 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06139815 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065996834 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062061553 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066207372 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061687173 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061903151 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061821785 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061882679 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063379057 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066317901 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065213037 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061801266 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065889145 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063776793 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065545087 seconds)
  done (took 2.824781114 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063462449 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061903689 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070331246 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.06077639 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060957226 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064910371 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061316028 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065344038 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.06560088 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065101978 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070527296 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062507454 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060952663 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066536084 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061096553 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061785458 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103789715 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063018688 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062266404 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060531696 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063919793 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070046781 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061017446 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061132703 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065095309 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064491628 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061047354 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063952338 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061912296 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065337155 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061968689 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060745312 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070396582 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069576113 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065702131 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065539751 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.06314336 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062263835 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061433107 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061338683 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.06971657 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062944162 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061486481 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062844851 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.07012228 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061051801 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.06082929 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.07094307 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.06100405 seconds)
  done (took 4.590721936 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071782931 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.11335954 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067664764 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095359859 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073882666 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067643794 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066917422 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.09550411 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062763337 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063258939 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075632754 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075280643 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064027264 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065715031 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068149858 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064031115 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064921513 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063387784 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066445408 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06402968 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067034769 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067812236 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073658035 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073987002 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065013721 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063351781 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063566264 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.06542278 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074468164 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067356969 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065779917 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065984773 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074904622 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.069077828 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063876704 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063897507 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075554974 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064582795 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.067233521 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063055283 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064156439 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065658048 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068720375 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075393211 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064938873 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069067901 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064071883 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062250774 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074930615 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063715299 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068539387 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.07574092 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065173963 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065247855 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065573445 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074829252 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.06402774 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063199288 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064422474 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073679611 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062497768 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064547194 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077723301 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063387873 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.06736102 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075272522 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068858568 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064839381 seconds)
  done (took 6.262324772 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070898301 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.097133488 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07268467 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07225184 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071958401 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071709978 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071785613 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.072006643 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072075476 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072090456 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07191628 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.112064806 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068171968 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076689025 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071865259 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071613014 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071911762 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07158291 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07173268 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071759491 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071780092 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071933782 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071428946 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072166299 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074160963 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067920084 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071405747 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072059665 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072098703 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071902208 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074150511 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071898734 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071734707 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072862145 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074675925 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071809735 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062679646 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071859661 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072088101 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072104694 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068392296 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072753675 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071669773 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068319421 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07174743 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071666566 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072799043 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074482935 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.079390049 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072745496 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072313745 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071879299 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071482544 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071994241 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072123444 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078751818 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072174748 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072310963 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071993646 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07240828 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072277246 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078462331 seconds)
  done (took 5.980577515 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074652967 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068542206 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079909877 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062360495 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060761973 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071621586 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061904059 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062523213 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070227092 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.069997474 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072036314 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072215704 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072765386 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070492567 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070605822 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072462254 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071027029 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.07126542 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068240403 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070737327 seconds)
  done (took 2.824897546 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076386914 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080572444 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067200105 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070821162 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066828681 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070552521 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.06625461 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066968082 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067378323 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067474477 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072869405 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072039607 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067710002 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070616493 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071962468 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070901532 seconds)
  done (took 2.561693778 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065163082 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069943305 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068183318 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062666219 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064479197 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061738776 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062557861 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061182714 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063986279 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075364853 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062501451 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064977073 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.06280086 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061697183 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062076328 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065044586 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064494221 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063337183 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062924981 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.067057347 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070788035 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063190945 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065164655 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062593123 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064608891 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070667094 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063897691 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064552882 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.06234381 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065455242 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064778401 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068925131 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065236154 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063075437 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061761795 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062525648 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.063293304 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.065281211 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.06533593 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062819725 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061367982 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067649899 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063004253 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063387058 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064117571 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065388653 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063957626 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068005019 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06304711 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064757747 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06341267 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.06532874 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062975732 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.0697212 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064425908 seconds)
  done (took 4.995226392 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078750513 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066498821 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061104142 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061281394 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066773885 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066909333 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066285577 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066624732 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066989402 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061077002 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066580096 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066176954 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067062119 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066795468 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067323397 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066638748 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061434161 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066921167 seconds)
  done (took 2.630654536 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068050915 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061739196 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066241366 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063788062 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063608131 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.061815126 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061255868 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062822337 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063076519 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063361082 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063346355 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062677882 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062888893 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062620581 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061229525 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06316546 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.063073043 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061442385 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063620447 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061442809 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06177829 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061642687 seconds)
  done (took 2.828212095 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088964694 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084689878 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128250232 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080327407 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088481193 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072312271 seconds)
  done (took 1.988536059 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094501612 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104442368 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066159588 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066360119 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074830598 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069213332 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069833626 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069742417 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074858321 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073213191 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069586745 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07513888 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074556934 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070966305 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075342272 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076923399 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069521206 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069544658 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066451144 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077633643 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069232392 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075127921 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069955138 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069372251 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069562671 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07150907 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078349188 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073433483 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069442887 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075205761 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077363432 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069664997 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075166247 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073721628 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066568359 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075344472 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069634793 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077584955 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075410584 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071221133 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066562173 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075125242 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075447363 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071099497 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077646768 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070025843 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071690222 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069585554 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069688998 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079816663 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075224981 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071476233 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076108022 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077260767 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077641957 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079378179 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073547245 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07152934 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075379515 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073741564 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071377677 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075386518 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071733437 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074089673 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077407527 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071343843 seconds)
  done (took 6.311977749 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100837233 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067023849 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069861699 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073609295 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071432837 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069592583 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069673305 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070068486 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06973513 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067050024 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104967924 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069865316 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071689745 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0716086 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071057371 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069935279 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073256939 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071569457 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06713514 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079696845 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070110063 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071520471 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071618011 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071385612 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073667056 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077767596 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069748597 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06976088 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069679167 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07004988 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071533775 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069841199 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071404038 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067210213 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071189684 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069899405 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069705733 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071508024 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069472736 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075245482 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071582871 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077969609 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069943104 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069874913 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073787966 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06951695 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069547674 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066991667 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070190885 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066585363 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073437779 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074047245 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074077971 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07146786 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069982817 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070259591 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069692592 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069801602 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069828969 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077548595 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07119199 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069548613 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080439114 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070449837 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069951655 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071141446 seconds)
  done (took 6.233925425 seconds)
done (took 129.518571641 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219471697 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.191364525 seconds)
  done (took 1.847544618 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075998941 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.167013268 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075420249 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075469878 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.10961406 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107819386 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076806636 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072889727 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075189684 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072421693 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140207249 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076396315 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072701102 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073000977 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073375162 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07247774 seconds)
  done (took 2.870227544 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.109058914 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.184973615 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082664741 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070707533 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.11481495 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077685915 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.07288096 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075804636 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077197164 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070679712 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107120308 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081902677 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074537474 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077456782 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.073129276 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.07416075 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075637582 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076956346 seconds)
  done (took 3.035933204 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098431009 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.087085979 seconds)
  done (took 1.640950114 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.15570858 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10597048 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144868234 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.329607162 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.132801145 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127196222 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.130032802 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125861935 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110542288 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122522542 seconds)
  done (took 2.941418191 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106280131 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.10500896 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.308572969 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102715 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082486244 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077796011 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075743034 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080347653 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075498807 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076990314 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122116699 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075866015 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.07292737 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.123881756 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099332948 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.10659512 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071429227 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078470238 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080142495 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071262484 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076452434 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079839428 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179506995 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078550665 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100512726 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075423046 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.078293133 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075152406 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074913728 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078262207 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079538761 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100525601 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079028573 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083201418 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077351192 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097968818 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072562655 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099410365 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074510913 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.07267707 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07546045 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079406754 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072723428 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078255945 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075595322 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078313214 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080913438 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.07124339 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076037945 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074666647 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072894541 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077660281 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076934548 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077720663 seconds)
  done (took 6.269111311 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108888947 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106697761 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071185958 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.114430412 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108810793 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070439802 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105889158 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.10053618 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109261198 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070510122 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06993543 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069687831 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076831289 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079731179 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116747155 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109054804 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072286192 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070811656 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108416082 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107215055 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06927082 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102119159 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100766162 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.10686016 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068964448 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070366707 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069069685 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069555893 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074781243 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.07577815 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069260195 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077039564 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081651292 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076025428 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068664543 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069257802 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068943306 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076463068 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077032505 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076703864 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07569562 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068673969 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069210337 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069902478 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070103856 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068813873 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075754581 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076121638 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075214348 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069537023 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069879219 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.06886206 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070042626 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076252262 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075148749 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076740048 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076439831 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06903027 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069117803 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070984532 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077826591 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077569748 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07655362 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070396373 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077928282 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069139619 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078607045 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081855503 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069628926 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069483717 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06922677 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069345284 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069921167 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07515939 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075284573 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070278975 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069287773 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069634704 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076951326 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07499103 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069252863 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075098835 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068682065 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069437527 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069630565 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069865426 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074253507 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076099286 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069658965 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068592975 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069407504 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069413236 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068429389 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074911942 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075467116 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075566637 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074791346 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06897037 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074063933 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074324501 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068897063 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073964997 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06811195 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068754961 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068404145 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073968832 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072768182 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075076923 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067976278 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067199579 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073156441 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.214177883 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070826013 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076619279 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078704845 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076583604 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069621929 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078545748 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069913394 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07747997 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069769688 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07769574 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069645094 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075775833 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070070852 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068818688 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069542477 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.07596341 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070412181 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069468388 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070340938 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069752077 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075665076 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078592899 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07032927 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075705416 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.076034836 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070412053 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076025369 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069545628 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076582575 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069578093 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070164903 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068670221 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078759821 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069598825 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06951174 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069658536 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078193048 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070058421 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077827428 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075022279 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069230655 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078989871 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077891599 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074786102 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078249793 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070225957 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070342858 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069710909 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069909043 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075078253 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075955894 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.073068427 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069952886 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075021905 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077521643 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069355055 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075575323 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075267443 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075436992 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069795852 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070142812 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078089692 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07814008 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.306765594 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075002238 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075667724 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069516046 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074711633 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075097581 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069180075 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081551614 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069601063 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07947452 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075823988 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074366554 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07605147 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076978864 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077862518 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07805065 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080692318 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068747881 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069349833 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075630115 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069022402 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069402345 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075054348 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069820359 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069807103 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.08002247 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069719889 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07744036 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068611626 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075802485 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068542193 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069658664 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080153873 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069532181 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069625597 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075077705 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069664173 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074457299 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077053353 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074363927 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068524056 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069048298 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074364701 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074778579 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068218377 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068167634 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068519485 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073267968 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.07257466 seconds)
  done (took 18.667958912 seconds)
done (took 38.750733949 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172374258 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117294538 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.208902524 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.200433449 seconds)
  done (took 2.27022693 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101411771 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065845643 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081216216 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090914317 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065697498 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.077153357 seconds)
  done (took 1.99326688 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202495108 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174801425 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.24032935 seconds)
  done (took 2.121306506 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.368995362 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.14994136 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215959746 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.504663828 seconds)
  done (took 2.847803094 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.111050878 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101992331 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078800474 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.113248214 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086378678 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063406667 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.135107123 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.07105652 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.101405647 seconds)
  done (took 2.430243303 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.130669602 seconds)
done (took 13.331823928 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.12628495 seconds)
    (2/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.22620523 seconds)
    (3/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.123659633 seconds)
    (4/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.103042336 seconds)
    (5/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.20429654 seconds)
    (6/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.186084711 seconds)
    (7/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.248530861 seconds)
    (8/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.187518667 seconds)
    (9/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.188307226 seconds)
    (10/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.092973054 seconds)
    (11/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.111329937 seconds)
    (12/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.08686836 seconds)
    (13/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.125212664 seconds)
    (14/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.192581202 seconds)
    (15/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.218327008 seconds)
    (16/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.177707779 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.15778072 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076670043 seconds)
    (19/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.23338767 seconds)
    (20/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.191026631 seconds)
    (21/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.23742005 seconds)
    (22/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.092194385 seconds)
    (23/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.089730728 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.07878371 seconds)
    (25/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.084826747 seconds)
    (26/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080291301 seconds)
    (27/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.075899346 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079208593 seconds)
    (29/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.19174197 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.155990895 seconds)
    (31/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.212320721 seconds)
    (32/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.249219234 seconds)
    (33/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066467934 seconds)
    (34/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074987493 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075782037 seconds)
    (36/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.08972952 seconds)
    (37/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070314824 seconds)
    (38/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.088703017 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.181734081 seconds)
    (40/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.07381255 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091115818 seconds)
    (42/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071285344 seconds)
    (43/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.196524817 seconds)
    (44/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073556204 seconds)
    (45/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073607637 seconds)
    (46/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.207440709 seconds)
    (47/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.093242554 seconds)
    (48/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.094072337 seconds)
    (49/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.09107175 seconds)
    (50/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065794264 seconds)
    (51/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.148664244 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.079234436 seconds)
    (53/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.07556605 seconds)
    (54/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.19692136 seconds)
    (55/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.065860656 seconds)
    (56/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.069054052 seconds)
    (57/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069651935 seconds)
    (58/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.172292444 seconds)
    (59/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066249571 seconds)
    (60/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.239068026 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.134410802 seconds)
    (62/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075870501 seconds)
    (63/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.155842665 seconds)
    (64/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.073421011 seconds)
    (65/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074974439 seconds)
    (66/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.076809366 seconds)
    (67/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073079576 seconds)
    (68/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.181429628 seconds)
    (69/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.160288461 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067549536 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.065473518 seconds)
    (72/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.139541665 seconds)
    (73/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066497743 seconds)
    (74/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.065129632 seconds)
    (75/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.072529062 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.073634354 seconds)
    (77/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.140355919 seconds)
    (78/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.222533666 seconds)
    (79/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.069023088 seconds)
    (80/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.201398156 seconds)
    (81/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.06839294 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.15174576 seconds)
    (83/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.148212558 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076021256 seconds)
    (85/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.077617784 seconds)
    (86/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.083332471 seconds)
    (87/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.173650481 seconds)
    (88/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070021524 seconds)
    (89/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.0928837 seconds)
    (90/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.25640515 seconds)
    (91/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.154270602 seconds)
    (92/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.121977026 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.08650689 seconds)
    (94/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075728825 seconds)
    (95/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.067525384 seconds)
    (96/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.219717717 seconds)
    (97/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.084538427 seconds)
    (98/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.148441063 seconds)
    (99/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.149883618 seconds)
    (100/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.074504095 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.067108472 seconds)
    (102/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.066712992 seconds)
    (103/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.074581454 seconds)
    (104/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.083204638 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066757658 seconds)
    (106/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078509473 seconds)
    (107/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.078874225 seconds)
    (108/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.096387963 seconds)
    (109/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.144314636 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074779473 seconds)
    (111/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.170161423 seconds)
    (112/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.113430616 seconds)
    (113/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.093121299 seconds)
    (114/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.078442116 seconds)
    (115/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067750298 seconds)
    (116/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.073355816 seconds)
    (117/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071015687 seconds)
    (118/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.084256541 seconds)
    (119/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.133101683 seconds)
    (120/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074959093 seconds)
    (121/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074627249 seconds)
    (122/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.178184968 seconds)
    (123/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.078485206 seconds)
    (124/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076959424 seconds)
    (125/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.07040832 seconds)
    (126/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092492499 seconds)
    (127/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.144131757 seconds)
    (128/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.156844875 seconds)
    (129/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.142025447 seconds)
    (130/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.200943185 seconds)
    (131/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.074230572 seconds)
    (132/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.193717015 seconds)
    (133/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067639043 seconds)
    (134/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075718609 seconds)
    (135/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.073075018 seconds)
    (136/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.152877897 seconds)
    (137/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.180521094 seconds)
    (138/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075995218 seconds)
    (139/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.197128718 seconds)
    (140/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090350945 seconds)
    (141/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141312087 seconds)
    (142/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.122421829 seconds)
    (143/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.073448181 seconds)
    (144/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074282218 seconds)
    (145/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075295854 seconds)
    (146/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.137543153 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076277337 seconds)
    (148/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.088173911 seconds)
    (149/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.066138673 seconds)
    (150/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.068443473 seconds)
    (151/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.138953852 seconds)
    (152/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071327549 seconds)
    (153/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.221350271 seconds)
    (154/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075260519 seconds)
    (155/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070162756 seconds)
    (156/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076638445 seconds)
    (157/341) benchmarking ("sort", Bool, false)...
    done (took 0.142851979 seconds)
    (158/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.084444086 seconds)
    (159/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.064799157 seconds)
    (160/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067095643 seconds)
    (161/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.067217045 seconds)
    (162/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.142659227 seconds)
    (163/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066907445 seconds)
    (164/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.074026079 seconds)
    (165/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075953243 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133777187 seconds)
    (167/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.169423402 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 0.067034606 seconds)
    (169/341) benchmarking ("sort", Float32, false)...
    done (took 0.137559567 seconds)
    (170/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.163448381 seconds)
    (171/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.200346004 seconds)
    (172/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.067422864 seconds)
    (173/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074314743 seconds)
    (174/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068483628 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.155824303 seconds)
    (176/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081735415 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.0654304 seconds)
    (178/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.137243391 seconds)
    (179/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.074595772 seconds)
    (180/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.065346458 seconds)
    (181/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073755448 seconds)
    (182/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073399636 seconds)
    (183/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.065133995 seconds)
    (184/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073913841 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.267568724 seconds)
    (186/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.087120487 seconds)
    (187/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.076807262 seconds)
    (188/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.118594004 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077881002 seconds)
    (190/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.070363857 seconds)
    (191/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.079590676 seconds)
    (192/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067774753 seconds)
    (193/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074910148 seconds)
    (194/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066720042 seconds)
    (195/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.065479555 seconds)
    (196/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.079038779 seconds)
    (197/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.066767882 seconds)
    (198/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.067116214 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148197291 seconds)
    (200/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.239239306 seconds)
    (201/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.148433046 seconds)
    (202/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.066524396 seconds)
    (203/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.221961227 seconds)
    (204/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.067260347 seconds)
    (205/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066721254 seconds)
    (206/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.156519305 seconds)
    (207/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.067220786 seconds)
    (208/341) benchmarking ("sort", Float64, false)...
    done (took 0.13974627 seconds)
    (209/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.07861269 seconds)
    (210/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.066407875 seconds)
    (211/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.067665233 seconds)
    (212/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.164987056 seconds)
    (213/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073692126 seconds)
    (214/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066868289 seconds)
    (215/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.067085479 seconds)
    (216/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.07508486 seconds)
    (217/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.089007034 seconds)
    (218/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066937748 seconds)
    (219/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073992102 seconds)
    (220/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067438202 seconds)
    (221/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.066640607 seconds)
    (222/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.066034164 seconds)
    (223/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.066267214 seconds)
    (224/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068849367 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066751597 seconds)
    (226/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.067515763 seconds)
    (227/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.065687391 seconds)
    (228/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.086957418 seconds)
    (229/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.067383119 seconds)
    (230/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067688949 seconds)
    (231/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.067332021 seconds)
    (232/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.079718339 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077257346 seconds)
    (234/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.146242718 seconds)
    (235/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.067009838 seconds)
    (236/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.080261146 seconds)
    (237/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067685249 seconds)
    (238/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.068870625 seconds)
    (239/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.069385931 seconds)
    (240/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074188762 seconds)
    (241/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.068801547 seconds)
    (242/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068731116 seconds)
    (243/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070835926 seconds)
    (244/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066695985 seconds)
    (245/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.167073926 seconds)
    (246/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074001415 seconds)
    (247/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070197784 seconds)
    (248/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06751345 seconds)
    (249/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.165824374 seconds)
    (250/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065388606 seconds)
    (251/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.165072743 seconds)
    (252/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.066984516 seconds)
    (253/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.079550824 seconds)
    (254/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.067085298 seconds)
    (255/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066868063 seconds)
    (256/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.068902971 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092268004 seconds)
    (258/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073579938 seconds)
    (259/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067799131 seconds)
    (260/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.228833625 seconds)
    (261/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.067226777 seconds)
    (262/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144190693 seconds)
    (263/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068572631 seconds)
    (264/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071093256 seconds)
    (265/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094322796 seconds)
    (266/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066764937 seconds)
    (267/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.081880993 seconds)
    (268/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.065313028 seconds)
    (269/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066491053 seconds)
    (270/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.066740777 seconds)
    (271/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.066446775 seconds)
    (272/341) benchmarking ("sort", BigInt, false)...
    done (took 0.267112553 seconds)
    (273/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.067250311 seconds)
    (274/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065106528 seconds)
    (275/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.066217491 seconds)
    (276/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.221726082 seconds)
    (277/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.070273202 seconds)
    (278/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.084683778 seconds)
    (279/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066370737 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125248971 seconds)
    (281/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.180252607 seconds)
    (282/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.082586258 seconds)
    (283/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067526254 seconds)
    (284/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08518667 seconds)
    (285/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090251774 seconds)
    (286/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.066494503 seconds)
    (287/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149865282 seconds)
    (288/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.069577218 seconds)
    (289/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066688155 seconds)
    (290/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067907059 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086655257 seconds)
    (292/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.066170123 seconds)
    (293/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066649238 seconds)
    (294/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.067539369 seconds)
    (295/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072970191 seconds)
    (296/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067678498 seconds)
    (297/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.065189669 seconds)
    (298/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.067875181 seconds)
    (299/341) benchmarking ("sort", Int8, false)...
    done (took 0.146118105 seconds)
    (300/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065723771 seconds)
    (301/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065896186 seconds)
    (302/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.065824461 seconds)
    (303/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067568081 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.06519196 seconds)
    (305/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066779434 seconds)
    (306/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.065416734 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.130468349 seconds)
    (308/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065662141 seconds)
    (309/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.237563351 seconds)
    (310/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.068732075 seconds)
    (311/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.069299343 seconds)
    (312/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.091799482 seconds)
    (313/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.068989531 seconds)
    (314/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.069400093 seconds)
    (315/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.072011696 seconds)
    (316/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.068437087 seconds)
    (317/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.068806718 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091864934 seconds)
    (319/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.06815016 seconds)
    (320/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.071376462 seconds)
    (321/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.067340189 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.126807479 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079694706 seconds)
    (324/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088119959 seconds)
    (325/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153346333 seconds)
    (326/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.074089585 seconds)
    (327/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.067452539 seconds)
    (328/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.074433077 seconds)
    (329/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067478307 seconds)
    (330/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067442456 seconds)
    (331/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069727162 seconds)
    (332/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.081365622 seconds)
    (333/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.067035329 seconds)
    (334/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.06757247 seconds)
    (335/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.153753639 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066740929 seconds)
    (337/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.068353953 seconds)
    (338/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067246887 seconds)
    (339/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066542498 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.131664707 seconds)
    (341/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.069081919 seconds)
  done (took 37.005283996 seconds)
done (took 38.530646788 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092377439 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079788619 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078183529 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074891634 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078804178 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077240038 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078815584 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076452421 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077909903 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077569374 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077409483 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065470691 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073901685 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081510284 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075299216 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081356594 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079022563 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082791075 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067235965 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.08090037 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.0927281 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078463052 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.07503933 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080692812 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066984199 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075969316 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090223228 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087304217 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073413496 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075946837 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073668426 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082042815 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073987986 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072695025 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.079086668 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072444083 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.07581153 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073336335 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089419204 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.073065528 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067237871 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078887191 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074332519 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074612023 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075116409 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078199184 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.07204451 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079978775 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066493731 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077545167 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089740593 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071379868 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073273117 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074811457 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.07158399 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.07624838 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073134882 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077935619 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071354321 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078260002 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077174998 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074839371 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.06615983 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075144188 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073507071 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.07380411 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.06510149 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071230279 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066231923 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066486497 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065392242 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075075224 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073024602 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071194923 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065754566 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066414453 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065652537 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078098341 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072336342 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075876231 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.06637982 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071781896 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071053745 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.06679585 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071528881 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077903866 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065530069 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066232798 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065695065 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080785993 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072508852 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066729822 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077635445 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071247592 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071330196 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066305587 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065540106 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071126903 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074508069 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066031007 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065600798 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071663613 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071428675 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075042139 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066368328 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071081799 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071227234 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065450204 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07506134 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073326245 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074843899 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079904297 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074907067 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078079107 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066794097 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065039078 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075838251 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066394582 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071166225 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074287811 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071687745 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073877844 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066417709 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065384961 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071591883 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072370342 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066526577 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066627688 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066341595 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075773817 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073001191 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064750917 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065869855 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074236291 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074144523 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065178181 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064473902 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074443645 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065511482 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071494016 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071196668 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073933562 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065592903 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065628635 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.214145266 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066735483 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066721151 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072350677 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071998515 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067182768 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075308655 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072884805 seconds)
done (took 12.893041695 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067225467 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105527012 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.073778133 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083018321 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079102135 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068130716 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070971817 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.0836081 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070848626 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086740246 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095106759 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088652773 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093880624 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066298585 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067513286 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068682772 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065936925 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.07451681 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081310582 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090102474 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095679618 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066968277 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.07596463 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083292483 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077551448 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082887113 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068127078 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067665375 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069604413 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.123028274 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092185232 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066863714 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068533706 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080329811 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081365401 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074521723 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068076146 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071545026 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.0679096 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066586907 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068823146 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084075079 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070685026 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070496627 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067755867 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068655393 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067616858 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070550639 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080896403 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070449303 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074566334 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078386748 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068848117 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067796065 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065843176 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070536733 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067110799 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068363891 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067593153 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067083432 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067527321 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069958128 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067880316 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067495238 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070253302 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069547463 seconds)
  done (took 6.550959426 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083046122 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092556509 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081499883 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082508857 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066973788 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.06751351 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067644557 seconds)
  done (took 2.184556842 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06815748 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075039522 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079620962 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07948729 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089268105 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.07724713 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067652146 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098646784 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.06643516 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076138035 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.08280181 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080764816 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070779673 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079580873 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067714365 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079651417 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067865903 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074999659 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07511709 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.08060615 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072002698 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097095181 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080829239 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068115542 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081271994 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074948476 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070162392 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068169352 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06846392 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067355751 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067364058 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089352727 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073866711 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079034759 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068275577 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.0665923 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071636537 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068157269 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071226889 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076390318 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071290256 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066934214 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.06801745 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067405737 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068408506 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072098093 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068521858 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067434901 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067040615 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074587158 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066592248 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074384893 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069566412 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072462519 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072319441 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072516816 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074451068 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.0682193 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074986383 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.074025296 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067471708 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079427829 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079163227 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071310593 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078559785 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076174462 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073911391 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071058364 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067477545 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066897498 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067717064 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078874001 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070808995 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069980363 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.069196102 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072379593 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071436093 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082295694 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082319509 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080894741 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069710838 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067809481 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071544676 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082377593 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072118309 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067587176 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068400218 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066923676 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072449743 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.06763058 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071864984 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067339648 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.07404216 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070186949 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069411897 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075153649 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067368848 seconds)
  done (took 8.732461552 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070468529 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069390156 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068270299 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.06909428 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068978238 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068573428 seconds)
  done (took 2.089319849 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090730112 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.0684936 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080483743 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068736313 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090229889 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074853013 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074906835 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069862394 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084051314 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078849606 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074559008 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077432267 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073978849 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069894651 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074252083 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069480874 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.074157897 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070995182 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077738922 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070248571 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.080972619 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069687206 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072462028 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.07989021 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.07139469 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.06940407 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068908972 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077905332 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077384265 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069698291 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069528342 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070636572 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076297479 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.06918133 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074057989 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076178265 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067713815 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.07324329 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070595796 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070986486 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076846254 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069959566 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070418374 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073190135 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069285491 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076580481 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073640663 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071885235 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073772936 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073501752 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073677175 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068446946 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070796375 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073973637 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076247057 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069641506 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.07340002 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073942048 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069455705 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076420219 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068032968 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071289683 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069567206 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070942556 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072849259 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.07323638 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076419991 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070097102 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069946211 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067621351 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073039126 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068178191 seconds)
  done (took 6.91405945 seconds)
done (took 28.099013437 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.548973363 seconds)
  done (took 2.166772527 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.588061978 seconds)
  done (took 2.246365905 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.311311299 seconds)
  done (took 9.96978789 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.308239234 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.331683656 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.737126264 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.134010066 seconds)
  done (took 3.211273286 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.755865024 seconds)
  done (took 2.423616402 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230187278 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.220311101 seconds)
  done (took 2.12916903 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.336683562 seconds)
  done (took 1.996638485 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.143947587 seconds)
  done (took 2.801319998 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.230109626 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160681855 seconds)
  done (took 2.059768266 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.53990004 seconds)
  done (took 2.202101292 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.302950241 seconds)
  done (took 5.96983129 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233676959 seconds)
  done (took 1.94085468 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230160882 seconds)
  done (took 1.898681191 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.042033602 seconds)
  done (took 3.704966959 seconds)
done (took 46.387261461 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085176201 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087507661 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.0870507 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082377888 seconds)
  done (took 1.983191746 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075184941 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071090645 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074632089 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075455283 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072359149 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.074325364 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.07426753 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.0707513 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072643576 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071429078 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069677085 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071213584 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073469192 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.07130014 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073675295 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074666379 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071442327 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071219583 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073792621 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071145752 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073786666 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071003851 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069331801 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071182478 seconds)
  done (took 3.405125174 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079599492 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073524083 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076489271 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072295575 seconds)
  done (took 1.971942638 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078016614 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077604556 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087149549 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091714556 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077782279 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078382707 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084758485 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085907999 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.067139477 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088717727 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069716798 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067869569 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067853158 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086940917 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084221058 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063830955 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064751578 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077782195 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077577025 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080763905 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069680161 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066920344 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078003415 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078184184 seconds)
  done (took 3.522221956 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080485171 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066262536 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079504451 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092777103 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093085578 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066837583 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080112454 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.09356908 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12829317 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06666915 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072594869 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066453633 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104929787 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066611408 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081788849 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109661848 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112386015 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070678702 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099216798 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066513096 seconds)
  done (took 3.379175774 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076734402 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070544152 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071468943 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066816354 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077631712 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074171757 seconds)
  done (took 2.12163307 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068986365 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068664079 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067690968 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073542145 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.071725007 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069227339 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068150839 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067126559 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066912355 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068182254 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067319912 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068090315 seconds)
  done (took 2.501843283 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.155948745 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070328973 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071216631 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066780741 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071852145 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067480549 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082331902 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069843363 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085626594 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.06778736 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068039294 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070365515 seconds)
  done (took 2.624983052 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101098864 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102456428 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1471143 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118344004 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117733156 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097583751 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120766211 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095466998 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161530641 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138033955 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117740538 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094095186 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087496541 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070410406 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100791961 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103163182 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136774075 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073443993 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113633167 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165278117 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115225838 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.113545999 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122716746 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117669437 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081771216 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122829028 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095357473 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103461121 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124794271 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110788375 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120708081 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098510607 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073090875 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072621756 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150822554 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.102167792 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108290698 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094468533 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10275459 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088988265 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108326505 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070458425 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087864002 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.106662538 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08585413 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117877826 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088284005 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103500575 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081541172 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132277982 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107254745 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099382693 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086241435 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104383836 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13041653 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095931339 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110842768 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106365875 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0823253 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116800761 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.099771474 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.255955956 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095788965 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082156112 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161840709 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091221361 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.11345793 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114370495 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.084143542 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090463774 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.1047662 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132071895 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108566791 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108120874 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115140678 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096819117 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110914809 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093031732 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.12966826 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09480594 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.07409764 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.106384241 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129632669 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086211486 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101267081 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131231736 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093216138 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078684594 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093309341 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119758035 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081965417 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097189102 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071367116 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.099049539 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108475716 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098564799 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113554869 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108018773 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078985326 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126000271 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110042035 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073711054 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118207348 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099939638 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154178572 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096932495 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.076860371 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100594391 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094840264 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148981775 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085922037 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080794994 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099800214 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143029214 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09523273 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170425929 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097545355 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130006795 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097933033 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087946837 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075339977 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089565705 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102030329 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107203429 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101439472 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089128945 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077488508 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086748539 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095936631 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.255187982 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08350135 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116485609 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102996976 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076745117 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089755085 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077665973 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126954846 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079234264 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112550861 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126396802 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079430529 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106697646 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099064233 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109110719 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098170728 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108580606 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1419522 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116876727 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080500642 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.08463237 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109772869 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143435767 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.115252489 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086573826 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077879406 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101669911 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112589081 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098257889 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108524165 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102650366 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109998166 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098508392 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142192316 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1187928 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09207435 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096208603 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097680243 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124534578 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077742688 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15624266 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095755447 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119389201 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085581991 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142314863 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115035658 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090718497 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086283963 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096639339 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.106505114 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106685207 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1445664 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.09734005 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073937706 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094655386 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133789775 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077648376 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101058044 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091296519 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093450614 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117921937 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084098107 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081582491 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068647136 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101973954 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135852559 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069669511 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.276721984 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.11696273 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104172984 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.106482826 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071219948 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100673569 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139688783 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106951133 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142859678 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117345446 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101987776 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119507522 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.099849902 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106593589 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08077953 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126867854 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13579367 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09712871 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091120091 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136058458 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118891527 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136001314 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097515289 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11604547 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.107139697 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102114855 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105340549 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101996637 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146202506 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121695742 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125921555 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087303071 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107812828 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109914707 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137339491 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083189843 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118886584 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076313371 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113447081 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078253505 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108469179 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080112247 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.11283301 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080821291 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100500956 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070787202 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075487724 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142787287 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113350861 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090231521 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087304765 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137871867 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131542959 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082248757 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102762497 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105072692 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101271347 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101346315 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108776108 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085323207 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094674578 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.276354094 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080970476 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083575496 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100662653 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096118181 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108411632 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085773252 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076761694 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13769227 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105915812 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096187345 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078951482 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096466996 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123013028 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090267483 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088477871 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106949927 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104430209 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141872701 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.09092371 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.09923442 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118970718 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081729438 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093482313 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070862286 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085748225 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077031409 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.11040204 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077069436 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109845992 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069722217 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131561704 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088177734 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093673766 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103833149 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098926939 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128899708 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093012076 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132628996 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090957771 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103251117 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109321001 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095591018 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080920134 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104997285 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097199592 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110270669 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096716939 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106559883 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110807191 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095786821 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142289341 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090948171 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121413175 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106375987 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108469191 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105359211 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117276673 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138775055 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113599706 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113401835 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076275857 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083853269 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105499389 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100306582 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14514908 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101992015 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072614729 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086176065 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090201663 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.257448735 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107431321 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084543976 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143716596 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088819481 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.08858801 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114577605 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091161097 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099382768 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07774841 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096523814 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102180562 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09572883 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09529406 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108583891 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11882996 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115036679 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.134005137 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100565059 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093874847 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.12040751 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112152421 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111525101 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087134481 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08788351 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125282848 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103488743 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129701134 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101613011 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095777648 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103427547 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091751608 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101095606 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098487409 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.111084855 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081940184 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077695902 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069709467 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073600117 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120088382 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110887625 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100370041 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099384273 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073684383 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104562539 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100629173 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072909955 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089025471 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095385814 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10055906 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084802952 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093124299 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115111896 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092041378 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104450579 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100414672 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130314934 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101921047 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090361329 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144842635 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129583985 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089053384 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094099978 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073177475 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08040874 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102086801 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145078359 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118432938 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077332783 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.24418024 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079097205 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089374891 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073531635 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089353771 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090724149 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105336864 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095341109 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113567838 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105029643 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077298933 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104734855 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098464344 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093272771 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097740007 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103266548 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106797619 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.125385777 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102298261 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099064483 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077650039 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.082203593 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076883304 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080998844 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103007618 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078447333 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0780743 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130581277 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092600811 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105674662 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11056226 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086080376 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07678443 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135177023 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070934793 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135651012 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072787203 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08320564 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081922476 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080731756 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095691102 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106784253 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097864027 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115445452 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107568801 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106984854 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116538815 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15762473 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072637684 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144995158 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077148466 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076752772 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077339885 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113068147 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091580218 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108474607 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142038989 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091266275 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09390795 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078802485 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130190082 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099593897 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104640816 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084207487 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079884178 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129942022 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080755414 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072372068 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087663381 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111731591 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072902468 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103957959 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.249479462 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082555263 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116111395 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632758923 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091525926 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077386733 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09050924 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.144626422 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130749704 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084621839 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110082355 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.1214924 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091207503 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085663163 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109351053 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.182856403 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07554567 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096456621 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105693169 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100780858 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094119317 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093002049 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088721889 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09357313 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087548827 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081360206 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109464693 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088645764 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092714696 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098785717 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084302565 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081448184 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132328826 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105965458 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083804689 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090321409 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102430442 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089280242 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092579058 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070650322 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115251847 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092656926 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102553728 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092106335 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109345387 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122255831 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090217387 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113922489 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089974271 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110549632 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085941813 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079539047 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103469183 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079479117 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078632917 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118564043 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085426923 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094189306 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105778935 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.09652603 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115287473 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119355284 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112092279 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098769825 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079676965 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086919591 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.088761283 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075972228 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079405601 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075596064 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076676512 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.272879758 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087811009 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086130926 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116723356 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083945344 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105247888 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.102479075 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11076321 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08482856 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10252962 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110767474 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092153558 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104864049 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102027047 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129795783 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147285368 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100880976 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126311041 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134581851 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077964437 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077368134 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.069928581 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115671963 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080614992 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.08165561 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082315102 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134953029 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083045547 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095990842 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.23058872 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081698112 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083406187 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098279558 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.07095417 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084945625 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10996813 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086983345 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082635065 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10012466 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085284572 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119559845 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113222929 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090642749 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083627543 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08240631 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09472373 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105549958 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129812981 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091490075 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076756671 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107503817 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104657137 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125686112 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073841324 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081977161 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131382312 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093303102 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104754109 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081397011 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121544945 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134087173 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091726129 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135432188 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072420292 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084593144 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090869263 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127030515 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075962853 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088716416 seconds)
  done (took 65.425050554 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.150587326 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143747541 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.086829711 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.099660766 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188576029 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199100014 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120479047 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097727815 seconds)
  done (took 2.951859347 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069878789 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084849408 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082543222 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.209374358 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109547234 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068935164 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074772874 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083321063 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.069003443 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068603257 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.10295672 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068745078 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069631282 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.369734306 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067430321 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072730606 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068698118 seconds)
  done (took 3.55904645 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.328562363 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.428333016 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.22455656 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.68817628 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138532718 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486339549 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078089342 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083522796 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.626243325 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.373026596 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131900113 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088432147 seconds)
  done (took 18.504361621 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077146296 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079707917 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079837185 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076511366 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075129223 seconds)
  done (took 2.230729835 seconds)
done (took 115.873442117 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084457804 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.1730039 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068334357 seconds)
  done (took 2.099982868 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083295319 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082471033 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082696577 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079530185 seconds)
  done (took 2.159295615 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075952131 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077750895 seconds)
  done (took 1.976995061 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.224072846 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.175838413 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091155275 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083427145 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.08062929 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081097636 seconds)
  done (took 2.082273012 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072964891 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073004297 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072814791 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073788595 seconds)
  done (took 2.116835133 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068956463 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067756435 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.07022647 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072972649 seconds)
  done (took 2.106708101 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087184046 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083957752 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113313497 seconds)
  done (took 2.111584502 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083828266 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083577778 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079189616 seconds)
  done (took 2.077656173 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110286457 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098178901 seconds)
  done (took 2.036131505 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081768283 seconds)
  done (took 1.912412566 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091095456 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.09882362 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.142827551 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108429157 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.141913111 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127337392 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078036719 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078831967 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074587429 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073987094 seconds)
  done (took 2.843078694 seconds)
done (took 25.922686284 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080081313 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.368990199 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360877409 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088711758 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672840084 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357734081 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.003249438 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092230421 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101298053 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069478223 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085932818 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650537484 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.995453305 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.326860519 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.981477331 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.325235016 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651330643 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06970638 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068913439 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069853727 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.986542547 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068857239 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069231654 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069612262 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650406427 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375034381 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070087558 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.329582401 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069257857 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071525509 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357930624 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070957787 seconds)
  done (took 16.414550381 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071769047 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123922842 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073893482 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084984769 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071765769 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.0711339 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072741247 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070124964 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112173135 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06979116 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087266055 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069515876 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073497325 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070642005 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089859566 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069662331 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071467632 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071249736 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070172063 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073755279 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088827495 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069280178 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070013927 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070053836 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07020815 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082150477 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070564162 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069351156 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069421882 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072288964 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073250789 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070455078 seconds)
  done (took 4.291072415 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.122338863 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127615228 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074733848 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110377852 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.11940619 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071050643 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.151771765 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092789939 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115575136 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069992713 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086770509 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069226762 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104950067 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070952899 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089697749 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069794439 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070938818 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07029165 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069620718 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070065993 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088128665 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069298512 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070332111 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070591958 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069989629 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084514029 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070587669 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069221013 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069922338 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071684633 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07322874 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070817148 seconds)
  done (took 4.550639991 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070770159 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073027437 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081203847 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082070416 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068636798 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070560161 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071163525 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068443285 seconds)
  done (took 2.437741359 seconds)
done (took 29.54281813 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080760539 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069609423 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072520228 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088651572 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075597719 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072151876 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066192078 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076415054 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072998795 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072967789 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07477803 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068524637 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071550179 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066338112 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073213904 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067309447 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073741233 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.070977527 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071837161 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.072547904 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069627753 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073416469 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076161034 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071944031 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072095123 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.07199705 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076597724 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072988497 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067778586 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070312604 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070296451 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081785532 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073296546 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.07367582 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.06735301 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067259082 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071779228 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069966082 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073738429 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076260703 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069171983 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.07611845 seconds)
  done (took 4.865805369 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089834267 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.096513837 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088420172 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083322916 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.10900848 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083086377 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.09184935 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080424988 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079077669 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091357446 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.07534918 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080428196 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082569943 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076668737 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079682938 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075788009 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081043934 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.07485357 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079447118 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079793341 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091798072 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073330287 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080376303 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080540973 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.074920685 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.08087122 seconds)
  done (took 4.020128141 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074223093 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089834652 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093921498 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.142819062 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110750059 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.08405539 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083427412 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098527171 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102074279 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069551914 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073555923 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095722263 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097547739 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076239711 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107228627 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087217489 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081597336 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07129234 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076290725 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103925968 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091844043 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.08813535 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.10172267 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089019509 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068915892 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078852677 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076225971 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084611439 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076759686 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081517111 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073466639 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072725118 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070318602 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081250617 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073364034 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067716325 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.093789191 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081524202 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084442251 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106658538 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078788892 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070912872 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099575142 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133594385 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068727521 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071870914 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072819734 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081139963 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070795076 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098652373 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087478463 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068871241 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088076704 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070729162 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070469858 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085517676 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070704335 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070944674 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081308216 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075246935 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089798048 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074236512 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090545312 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068883487 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080416813 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.07045566 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070493416 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067919497 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104453582 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076523071 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121636909 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070394911 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068156745 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081608613 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080490955 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075564775 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068867826 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088160844 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081236648 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072710475 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.08098828 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072020566 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072343654 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104445416 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068443509 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067173719 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066929052 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071034487 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072081861 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069442055 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082191721 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068223322 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072292151 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084630227 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069259358 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069692842 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071279732 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070108328 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068352449 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080104275 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072953808 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070892501 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.08160497 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070077252 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072719364 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084055863 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078278412 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068132406 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070101206 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071456996 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071208555 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073182049 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072392437 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070830434 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076190557 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076119257 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075067206 seconds)
  done (took 11.278883241 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.166028559 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.15566541 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070518228 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.151566017 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077452092 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073613055 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.151858466 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.089188626 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070014076 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071001851 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069454768 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097731037 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.09270131 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104420302 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074113665 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070355708 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095364099 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.102214468 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.153855952 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147978167 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092778793 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077690962 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072080763 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070913763 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071377959 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078572474 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085836819 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077821711 seconds)
  done (took 4.61302222 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077282673 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085308488 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074215681 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093758384 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088895119 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070051958 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071588271 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071356734 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086811162 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.07727069 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070128215 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074118834 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073212401 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070031613 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070469731 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076252731 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.07631043 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068640938 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073231827 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074379605 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080130811 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095610942 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.07398314 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069653168 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072781576 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069246327 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.07582171 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079397449 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069310021 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099927355 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066913109 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07366925 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.08332556 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070788373 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069753814 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070035524 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069849302 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070076075 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070054319 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067830249 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067457657 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074351859 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068220784 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075590798 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083275396 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077177733 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070592301 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.07247821 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072077729 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.069107502 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072911443 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073215554 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072036069 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077477591 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073208247 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072054856 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070710525 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099220377 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075489519 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069036895 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069019004 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067660596 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071385091 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077426025 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086071274 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.070992533 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068126731 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.06970933 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074737115 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083784702 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069768097 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074986584 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06649262 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070099449 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071756975 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072486966 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070698304 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068040044 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069759664 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069850742 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069466488 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069408104 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068558287 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072429487 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067586399 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.0677402 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070054132 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070887371 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076132523 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068822965 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072292432 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070680785 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068942896 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072532564 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074336043 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072699651 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088914814 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07822212 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070101279 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067526749 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084122272 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071249584 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068843796 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075368269 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073995019 seconds)
  done (took 9.652127353 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092292003 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071330556 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089391544 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096258268 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080499636 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07510753 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084254187 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071315664 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085750114 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068991322 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078528446 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068026438 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082948668 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078875069 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071432883 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079601019 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07226383 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089957174 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084097295 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067798976 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078408581 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.081890788 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081838579 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087585804 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087344065 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088022535 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081724583 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071636647 seconds)
  done (took 4.152246593 seconds)
done (took 40.425206599 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.932379719 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.098699754 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.922121075 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.134755051 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.156324774 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.057492699 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.057259885 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.922187498 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.119773312 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.9528138 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.236815602 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.347976033 seconds)
done (took 68.857600642 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.982655425 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.070696927 seconds)
    (2/2) benchmarking "String"...
    done (took 2.146753961 seconds)
  done (took 6.07127953 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.522315214 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.923797599 seconds)
    (3/3) benchmarking "different"...
    done (took 1.973544587 seconds)
  done (took 8.272376497 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.059426675 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.953039525 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.184874666 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.921639327 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.928428677 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.314316792 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.737046647 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.389279335 seconds)
  done (took 32.283729387 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.147011271 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.143588036 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.67621639 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.706131653 seconds)
  done (took 16.57736108 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.526351666 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.185891653 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.184834485 seconds)
    (4/4) benchmarking "different"...
    done (took 2.184703612 seconds)
  done (took 10.997844303 seconds)
done (took 86.20289952 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.925839076 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.988340093 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.936967628 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.079405419 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.977435139 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.95363776 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.928558625 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.96118067 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.92645169 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.929905339 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.360329658 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.926244901 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.924204385 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.96332098 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.923195886 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.932488283 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.098785628 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.942081347 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.970600801 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.459839736 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.422439356 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.93811875 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.937423305 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.988961464 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.995334364 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.980903996 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.556527424 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.925864726 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.543590405 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.93809887 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.930216791 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.928790803 seconds)
  done (took 209.049896946 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.924475164 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.905509711 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.944795689 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.952568464 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.555957792 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.114206289 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.070254548 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.582186803 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.927833436 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.953040159 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.043756459 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.925864108 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.060771816 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.874598013 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.921494228 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.963832881 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.121059858 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.064789511 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.923967888 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.136636226 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.948331144 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.845894651 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.812891757 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.031274273 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.971969282 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.977002472 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.926839722 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.954296147 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.119573064 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.094281689 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.948445395 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.967609336 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.08784047 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.796724866 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.948070843 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.956014708 seconds)
  done (took 175.211535032 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.103840829 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.934495375 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.990517937 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.062110222 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.695919027 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.660531649 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.930330591 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.926219857 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.926758553 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.935103673 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.930395975 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.995908615 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.216785769 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.945457768 seconds)
    (14/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.926673332 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.92914052 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.927874516 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.534789463 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.934843733 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.927024232 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.927747207 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.991746662 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.301241406 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.063896969 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.930959427 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.938396177 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.063559124 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.939233996 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.928015656 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.063320551 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.932167714 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.007292174 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.062530192 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.939366126 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.009529569 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.935952381 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.420897936 seconds)
    (37/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.928987848 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.927597349 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.928134625 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.930694541 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.98721555 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.925758582 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.036176693 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.0215101 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.928218107 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.940850772 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.997273116 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.58602956 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.932269499 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.929782841 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.928474309 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.92989264 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.929109402 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.042957765 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.933536553 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.954440787 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.561588031 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.933266122 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.929962822 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.929354223 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.93005369 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.930463948 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.936731778 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.969209381 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.743968611 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.088151923 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.319270706 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.742631137 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.933938035 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.817933388 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.991353899 seconds)
    (72/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.931183493 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.931399078 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.00927958 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.930422738 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.929539281 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.929903045 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.929525789 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.015832393 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.011069221 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.931140091 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.065642723 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.934121922 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.930047246 seconds)
    (85/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.929931323 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.003934584 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.40132442 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.14423854 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.944345859 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.990535393 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.931254709 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.931740246 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.949675588 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.085649719 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.933236322 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.931187806 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.931270746 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.119887384 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.932994865 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.134863009 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.157317915 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.006380493 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.183787159 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.167620854 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.934451889 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.932675864 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.947222098 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.933480044 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.930873509 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.942114235 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.932176438 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.932005037 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.935391925 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.933278396 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.932820697 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.935277277 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.945247184 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.933054539 seconds)
  done (took 427.53323165 seconds)
done (took 815.800828704 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.545468622 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.745504056 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.532429087 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.564104785 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.534189779 seconds)
  done (took 14.785678665 seconds)
done (took 16.65187755 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.964754031 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.95062147 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.93870513 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.994354758 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.959038708 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.944946902 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.979889035 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.97738501 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.965071292 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.946032664 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.983261038 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.950665525 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.964614628 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.968503834 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.010663526 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.972977395 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.950489161 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.943196611 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.991004957 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.950412413 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.950096403 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.949357854 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.947965305 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.984648016 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.018601851 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.95843218 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.946563866 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.985840201 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.957974938 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.982191057 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.003716619 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.967876121 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.98106352 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.012146534 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.997569661 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.01702002 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.958638859 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.005940104 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.95386171 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.027871592 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.997031208 seconds)
  done (took 82.776364907 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.94453793 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.0822902 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.153740339 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.97539196 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.944033408 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.153416082 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.00080219 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.070090437 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.084340279 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.155031914 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.157629608 seconds)
  done (took 24.592307771 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.944270912 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.078617307 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.153739054 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.980146265 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.945970944 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.155837836 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.008094572 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.074586864 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.079665179 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.156931477 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.167017864 seconds)
  done (took 24.621208855 seconds)
done (took 133.858211186 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.311576042 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.971146533 seconds)
  done (took 6.150596837 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.940317569 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.957767938 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.095142829 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.939951369 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.940689264 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.940589245 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.940841156 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.940156408 seconds)
  done (took 17.562942293 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.93995693 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.940037765 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.94000985 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.940058942 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.940203345 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.940374834 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.940948689 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.91379949 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.940124621 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.939217299 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.941914504 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.94065687 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.940941545 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.940920411 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.941275109 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.940774208 seconds)
  done (took 32.89153495 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.942286049 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.940811744 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.941804331 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.940549103 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.940949275 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.941226602 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.942717999 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.941143977 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.940727161 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.941209096 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.940926469 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.941648397 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.94120568 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.940987446 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.94126424 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.939847361 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.942513432 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.942066032 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.943163566 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.942184499 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.942056058 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.943128756 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.945998545 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.942794922 seconds)
  done (took 48.47368063 seconds)
done (took 106.957990616 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.167122679 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.496583198 seconds)
  done (took 8.533665703 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.946996811 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.94257032 seconds)
  done (took 5.825449903 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.943991633 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.943540571 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.943927446 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.942723165 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.94397124 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.943188442 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.943411002 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.94345279 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.94352127 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.944537988 seconds)
  done (took 21.307433756 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.943531557 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.944744253 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.942377892 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.943114781 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.944387828 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.94263126 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.943839509 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.944148813 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.943113784 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.943340185 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.944748784 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.943737972 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.944000008 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.943901998 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.943840729 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.943936857 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.945649076 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.944186063 seconds)
  done (took 36.861395695 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.944650597 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.944976578 seconds)
  done (took 5.761346233 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.944530051 seconds)
    (2/7) benchmarking "second"...
    done (took 1.943960097 seconds)
    (3/7) benchmarking "month"...
    done (took 1.943435741 seconds)
    (4/7) benchmarking "year"...
    done (took 1.94352272 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.9448231 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.94491524 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.943905076 seconds)
  done (took 15.481706981 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.946650021 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.097770846 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.146918065 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.534739484 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.945869816 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.948146603 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.83614361 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.947822084 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.949765049 seconds)
  done (took 21.226150584 seconds)
done (took 116.871336329 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.794423341 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.947097081 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.184390337 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.017362505 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.005234562 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.240732277 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.969948426 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.488927891 seconds)
done (took 43.524203593 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.015899542 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.943236571 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.974560316 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.973780433 seconds)
  done (took 22.765732643 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.947888976 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.287961452 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.967034414 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.870448011 seconds)
  done (took 22.970061405 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.325727556 seconds)
    (2/2) benchmarking "read"...
    done (took 2.315955132 seconds)
  done (took 6.520332753 seconds)
done (took 61.150079528 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.946867606 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.946564603 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.946498124 seconds)
    (4/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.946708193 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.948469259 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.947193823 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.945875533 seconds)
    (8/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.946947606 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.947198187 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.946801601 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.946009704 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.945994507 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.946641102 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.947526607 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.947643522 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.94626922 seconds)
    (17/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.947305876 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.947615961 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.947166586 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.947328172 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.947743428 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.947280369 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.94751985 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.947445555 seconds)
  done (took 48.603642826 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.947362554 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.947998556 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.947310856 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.946832348 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.948762268 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.947646112 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.94808323 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.948311238 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.948029284 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.948211159 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.947500078 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.947760213 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.948797393 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.948886832 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.948368509 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.949709338 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.949167647 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.947839948 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.94853735 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.948232889 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.949297618 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.948770147 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.948312355 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.948521976 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.949949413 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.947722418 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.948399125 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.948310453 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.948729446 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.949044914 seconds)
  done (took 60.326236603 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.949462317 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.949802086 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.949252955 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.950434403 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.950077312 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.949085736 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.950434266 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.949995018 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.950543284 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.950492843 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.94988537 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.950055228 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.95073368 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.950369708 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.950526044 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.951135647 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.949755165 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.950291558 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.950729775 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.95130135 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.951140365 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.950914217 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.950371578 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.950716469 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.951216159 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.951018888 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.951039095 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.951127485 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.951772711 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.95127168 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.950603983 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.950292963 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.951776923 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.950889313 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.951591121 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.951928276 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.951686609 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.950605521 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.952486991 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.952245593 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.951913785 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.951893288 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.952771457 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.952230532 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.952068112 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.952549717 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.952336663 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.950692897 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.95179424 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.951269715 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.950980546 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.952175669 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.951723092 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.951601679 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.951242127 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.951615769 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.953544344 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.952703055 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.953016494 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.952917062 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.953334352 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.95154094 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.951653908 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.952575897 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.941127351 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.952553891 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.952912133 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.952147592 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.953535339 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.937190362 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.941407851 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.952856761 seconds)
  done (took 142.343221728 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.953547289 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.946846013 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.953068629 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.957456571 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.954794395 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.954835167 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.952041108 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.943351682 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.956423017 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.955034808 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.944018111 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.955728318 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.956107942 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.956167176 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.955314091 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.952959153 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.956654939 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.956069497 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.956485824 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.956216514 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.956960814 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.956850726 seconds)
  done (took 44.869005638 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.956747591 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.95565979 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.95636569 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.956302946 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.956739464 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.95818313 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.955970442 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.956802998 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.956536083 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.95650501 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.956421389 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.956924348 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.956304345 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.95698025 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.957716924 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.957100761 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.95676187 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.957247259 seconds)
  done (took 37.105749639 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.95667483 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.948408745 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.937482043 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.950666794 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.931492795 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.956854923 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.957432788 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.957682242 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.95747697 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.959031768 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.941336173 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.956793308 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.957917729 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.958634176 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.957400243 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.956455891 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.957320182 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.956540065 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.95721994 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.953893621 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.957771489 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.957603481 seconds)
  done (took 44.867908971 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.959281567 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.95857304 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.958383962 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.9586291 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.957940748 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.959550336 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.958778571 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.958674399 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.958872768 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.958457442 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.959066996 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.958101272 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.958446446 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.959744466 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.959321307 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.959892001 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.959334515 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.959881286 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.96001132 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.959491981 seconds)
  done (took 41.067986284 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.96051829 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.959542903 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.960162493 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.960567199 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.960177631 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.96003478 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.961052155 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.959369152 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.959300557 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.942294534 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.961501584 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.960624539 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.959997492 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.960541754 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.961299156 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.960436512 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.960315138 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.961833232 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.961558261 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.961537006 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.961726099 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.961237966 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.96197696 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.959874091 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.961643848 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.961813283 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.961871334 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.962135273 seconds)
  done (took 56.773657657 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.960255565 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.96143785 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.960426117 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.960639477 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.96199561 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.961482503 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.9622884 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.96096151 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.962052141 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.961655809 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.962292604 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.962023255 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.961874652 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.961803382 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.961935902 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.962279502 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.962632758 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.96222748 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.962670466 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.961211598 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.961670024 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.962775057 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.961144672 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.962192792 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.962862682 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.962671637 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.962138738 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.961689944 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.962623183 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.963124624 seconds)
  done (took 60.747183637 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.982217691 seconds)
    (2/2) benchmarking "in"...
    done (took 1.980370755 seconds)
  done (took 5.852453379 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.962387779 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.961028236 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.960760408 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.960885774 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.961673404 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.960749601 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.961241028 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.961569689 seconds)
  done (took 17.580427164 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.961654748 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.964041281 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.962620014 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.96267588 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.962058768 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.969695162 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.961670993 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.961355212 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.963121699 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.96239279 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.966933296 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.965627783 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.969800817 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.966755471 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.963135419 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.962629926 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.964099356 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.964702541 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.963673259 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.963171062 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.965149056 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.962336849 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.963045224 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.963050359 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.964043113 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.965344093 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.973236438 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.96423658 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.964438122 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.963166399 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.970077898 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.963357368 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.963527077 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.964902893 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.964199789 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.96330696 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.970335218 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.963401207 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.964063661 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.963670397 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.965403337 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.965308135 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.968377697 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.971923673 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.964088942 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.963653935 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.963048968 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.963202621 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.963934028 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.96758273 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.973409779 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.965089806 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.964453478 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.965255565 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.9663219 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.964958959 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.963957019 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.966751014 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.970849517 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.970994018 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.968607567 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.987264063 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.973512701 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.964684238 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.965655011 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.97545814 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.990657026 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.966292827 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.967272327 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.965598961 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.972669717 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.965633495 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.965973191 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.965142704 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.979888705 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.973917734 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.965779887 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.96551518 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.966793441 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.965823059 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.9671337 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.966037713 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.965726668 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.966873826 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.976538198 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.991538926 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.967633763 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.967770287 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.967772015 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.967381552 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.972328521 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.969166197 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.967267168 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.967336878 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.968890237 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.969167424 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.967865443 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.966503982 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.966638629 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.976958646 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.968308929 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.966814674 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.969906226 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.97596765 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.967414544 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.968304192 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.967768898 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.967753831 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.973825681 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.967725985 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.968468549 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.967970386 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.969072472 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.972388945 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.967964145 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.971222926 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.977124787 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.976487982 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.969419977 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.973118787 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.972215404 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.971480566 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.979402824 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.994099509 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.96687684 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.972031453 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.974100397 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.981528066 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.972678072 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.969781324 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.971122779 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.969092663 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.969027032 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.970198126 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.968858595 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.969002542 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.969390908 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.968691757 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.970306995 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.969834048 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.972555806 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.97088047 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.97180473 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.970660398 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.973976276 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.970990948 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.972400708 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.976512622 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.969778523 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.970547343 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.970131567 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.973484972 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.970243224 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.971132029 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.970791347 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.969534997 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.971070429 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.969902406 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.972548584 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.970170188 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.971260133 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.971012775 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.975890516 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.970480717 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.97138523 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.971188898 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.971399288 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.971748813 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.97285942 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.971388796 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.973961712 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.971899009 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.975527516 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.97096834 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.972489277 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.970651829 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.972253768 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.971506786 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.974529783 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.983506364 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.97536304 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.971959828 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.971641275 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.97953539 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.972728852 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.974233611 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.97244866 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.97186221 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.971863501 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.972260164 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.972721886 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.976698902 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.994519354 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.983297396 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.974302876 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.974066407 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.97749203 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.976618463 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.977089756 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.973838503 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.972925955 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.97511064 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.972908815 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.973600358 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.974344249 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.976213721 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.972753378 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.973898102 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.976350493 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.973883014 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.973921162 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.974681307 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.973366936 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.975407027 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.974089832 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.972501746 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.974447163 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.973879142 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.982068369 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.976328143 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.974359076 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.974363444 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.976079295 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.977109114 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.97493485 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.974804133 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.977562408 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.973958882 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.976384283 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.982719283 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.975432089 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.972408218 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.975200089 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.973917504 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.977391379 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.976233457 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.978710479 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.984769168 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.977479987 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.975933328 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.980200358 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.975478026 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.977305593 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.97584447 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.976798998 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.975493336 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.977434936 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.975644014 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.975977948 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.98303339 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.975284769 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.976281489 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.976501316 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.979047391 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.978010806 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.977684577 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.975950111 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.979852397 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.985499147 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.983461324 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.977072601 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.979383768 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.978677708 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.977916154 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.981092475 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.976505698 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.990457361 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.986025173 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.977621028 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.976822235 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.977397907 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.979737308 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.978133674 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.978192586 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.984689409 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.980896291 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.977662795 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.982453719 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.977341132 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.977598401 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.984300589 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.979147767 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.981110083 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.978357367 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.978051262 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.978660244 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.978267576 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.979748684 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.97770585 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.979261545 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.983129499 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.97798426 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.978822316 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.978930919 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.986219282 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.978862764 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.979201954 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.986626914 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.980275483 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.979152251 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.980517914 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.978665396 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.980930715 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.979684236 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.978942182 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.981082877 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.980111507 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.983172014 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.988996888 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.982665892 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.987509563 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.982047302 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.99061542 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.979851868 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.978956695 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.979452891 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.982365424 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.988638163 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.979618175 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.978543406 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.987997304 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.980889738 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.980888324 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.98449301 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.980306587 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.9804046 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.981224944 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.981665456 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.986460864 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.983860454 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.980390192 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.980414369 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.980311893 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.980283713 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.983883937 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.981608467 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.981515077 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.980833808 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.980138724 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.981206627 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.980882124 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.981803746 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.98121446 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.981743055 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.981052953 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.989807856 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.981359232 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.982395655 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.986089082 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.982119612 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.989843815 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.982403523 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.98200672 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.984119916 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.983066795 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.984031809 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.982093348 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.983017683 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.982176963 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.983040382 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.984214894 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.994097425 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.990237717 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.985731755 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.983868077 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.983525972 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.983057552 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.992811298 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.007950507 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.983451827 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.98555835 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.988036743 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.990230284 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.984844405 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.988862118 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.98672948 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.991522289 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.984615405 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.983130258 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.98724769 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.996638139 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.98474443 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.986035606 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.983735678 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.987777983 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.966519417 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.983556401 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.984923324 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.981155592 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.985216163 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.982472382 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.984805468 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.97239536 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.984876355 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.983890509 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.984201075 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.984130538 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.986039387 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.98527373 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.985424768 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.985175929 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.986094625 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.990466091 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.983288641 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.988619587 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.99545223 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.974785099 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.985148085 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.987372104 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.985707845 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.977929702 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.985435813 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.984665229 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.987447302 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.985848073 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.987674423 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.989772293 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.995296889 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.987741487 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.986324802 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.986519884 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.988606327 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.985826459 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.986312525 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.98792275 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.994694382 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.988601259 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.997184286 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.996043931 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.988015086 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.98711497 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.993474663 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.995613442 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.986370587 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.985237524 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.986522232 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.988863324 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.988833098 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.988505458 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.98672814 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.986772901 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.99130416 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.987241751 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.987238889 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.987510607 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.988274021 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.989479353 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.989266186 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.993106598 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.988715873 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.987661244 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.986542874 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.989129189 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.988109721 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.989671489 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.987123726 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.988410359 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.989023779 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.988953697 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.993678966 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.98787271 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.987969548 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.990067018 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.988345917 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.987679231 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.989613585 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.989138809 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.989191441 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.990986764 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.996928357 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.989392158 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.989946679 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.989607728 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.991012437 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.989389272 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.989408622 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.989347292 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.989757075 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.997102128 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.989705499 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.989365209 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.989095663 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.989715863 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.993488981 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.991948847 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.993860105 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.989738579 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.990030457 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.988629618 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.993662962 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.998509594 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.995013989 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.99280215 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.997176593 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.993989842 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.980792279 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.979680997 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.988315918 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.991105807 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.990256608 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.994268742 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.991818247 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.992693295 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.9910988 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.992555146 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.990848658 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.992998429 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.990106479 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.990583026 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.984428506 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.996476719 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.999048669 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.984049465 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.988719233 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.984947406 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.995105338 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.002568683 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.984309734 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.974625119 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.988596609 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.991808675 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.991919693 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.999644726 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.001389477 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.995435907 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.991555433 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.995875536 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.009582884 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.993293315 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.00080573 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.025465861 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.993649704 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.99098495 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.992662542 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.993435893 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.992529665 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.995364787 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.992314497 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.999661715 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.993637966 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.992955134 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.000603379 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.993278423 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.99378292 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.992752005 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.99376928 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.99979758 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.993387796 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.997106988 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.984959226 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.993355667 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.993586663 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.99565073 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.993133971 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.993615188 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.991967063 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.966405781 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.993718063 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.992262689 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.003305691 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.993341675 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.995413448 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.009516472 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.492822367 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.994568663 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.993801396 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.994601873 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.999093486 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.997493503 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.994097861 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.998081743 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.003944259 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.998123269 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.002770463 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.995818835 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.984778703 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.973980379 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.99562018 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.994369727 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.007109301 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.006381968 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.995049798 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.995657339 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.001647111 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.995208956 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.001776733 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.999971103 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.995184627 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.996246755 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.99499565 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.995206914 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.994665818 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.995486806 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.001914747 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.003773366 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.995342912 seconds)
  done (took 1182.960283181 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.996285572 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.996256704 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.996454458 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.99613504 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.995405835 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.994699338 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.994384663 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.993739909 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.994827334 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.993443839 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.994165426 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.986734726 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.987972724 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.993940797 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.993773827 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.991624276 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.988870795 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.989260717 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.989106583 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.990571731 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.990290556 seconds)
  done (took 43.768121615 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.989447444 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.990592887 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.990458894 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.989789172 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.990883323 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.991004405 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.990152242 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.990546578 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.990234167 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.987820923 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.987726067 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.987178963 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.987019505 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.9887058 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.985041498 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.98432092 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.985481825 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.983439241 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.984779386 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.984685823 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.984448483 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.983835669 seconds)
  done (took 45.644757546 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.98487803 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.984402302 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.985196156 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.985299029 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.984308747 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.978612225 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.982798163 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.984525431 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.981965629 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.983905435 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.991086859 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.990840043 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.982850303 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.971854882 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.982236505 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.983861831 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.127282739 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.982401045 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.982608783 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.983198126 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.983256725 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.988764763 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.982311654 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.982256079 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.983126667 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.983274574 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.983039357 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.983227191 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.968187938 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.983514875 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.989227282 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.983071399 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.983096458 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.985531888 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.983138862 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.984813218 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.98722313 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.982063893 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.982708736 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.983563276 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.993543424 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.007613014 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.983963103 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.981915814 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.990940721 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.984330947 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.981092402 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.984803382 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.991507147 seconds)
  done (took 99.291506364 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.98302663 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.98118345 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.980853485 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.980624621 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.981442557 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.981961516 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.98172039 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.981046205 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.980773882 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.982266845 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.981932023 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.980353226 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.980973306 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.979969866 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.980508941 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.981609897 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.981171157 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.981006315 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.981212708 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.980309251 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.980376038 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.980769998 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.980843442 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.980553684 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.980879219 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.980054162 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.981460611 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.980814001 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.981187881 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.981250861 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.981358756 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.980189773 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.981257358 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.981092445 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.981378432 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.981072319 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.981361211 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.981038847 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.98117203 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.981345054 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.981772928 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.981538314 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.982774309 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.982040801 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.982906034 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.981936767 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.981769728 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.982567789 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.982581802 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.981898183 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.982076115 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.981437091 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.982354727 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.981259133 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.982440637 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.982599025 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.983196598 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.982115916 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.983689336 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.982569776 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.982939708 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.984190062 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.982268203 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.983149232 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.98219099 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.982404626 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.983569433 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.982007968 seconds)
  done (took 136.661288529 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.983572492 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.985897789 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.985295914 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.984251186 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.983128441 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.982637417 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.982979135 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.982591658 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.982630819 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.982788888 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.983628306 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.982408486 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.983410546 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.981843357 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.983512983 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.982678306 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.982654326 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.985545623 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.983355059 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.983303271 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.983696084 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.982052587 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.983918776 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.983358034 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.983124516 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.984033283 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.983606432 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.98462601 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.976548629 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.975968746 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.976540542 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.976754653 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.977839369 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.975054909 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.97507213 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.97350977 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.974632952 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.978360032 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.973647785 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.974233175 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.972516481 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.973621698 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.974870086 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.972673065 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.972677785 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.974038568 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.973679605 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.973471616 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.977110203 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.972988361 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.972490252 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.972562673 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.972068364 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.975937875 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.97285973 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.972307934 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.972862003 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.973408728 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.973666112 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.972470421 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.971832498 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.971603109 seconds)
  done (took 124.567141738 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.972743459 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.971539451 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.972061509 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.971625005 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.972429749 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.972492381 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.970901742 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.971166181 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.970579849 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.971235155 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.972636607 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.973146609 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.974024994 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.973282983 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.973641253 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.974741544 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.972264267 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.972966415 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.971655681 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.972338501 seconds)
  done (took 41.345818929 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.971727315 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.972091567 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.973380801 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.97193658 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.973432822 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.972975308 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.971544548 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.972937857 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.973098844 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.974012658 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.972558641 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.972434085 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.972617215 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.972583518 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.974563855 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.972415367 seconds)
  done (took 33.464674912 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.972196207 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.972873673 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.974382088 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.971409461 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.972944617 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.971640553 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.973168605 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.973009457 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.9720028 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.972098932 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.971977393 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.973509994 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.97244979 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.972274115 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.971464972 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.97302849 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.972453821 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.972893972 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.972375423 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.971638637 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.97168556 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.972361549 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.972171313 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.972470018 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.972133939 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.971897723 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.972830526 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.973571019 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.972333588 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.969578185 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.96595281 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.959635158 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.972592871 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.972791581 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.970342589 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.970658484 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.970297409 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.971001671 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.972324552 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.970870182 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.970668423 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.971603013 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.971425722 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.971219564 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.970917108 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.971475087 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.97052609 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.971229397 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.971981516 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.970778912 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.971227595 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.970162779 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.969506319 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.972013256 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.97025657 seconds)
  done (took 110.332660299 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.970656437 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.969864561 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.971996519 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.97090811 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.969651407 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.97038385 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.97071044 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.972474008 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.970083261 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.970233022 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.970482056 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.969021303 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.970892175 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.96898895 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.969809163 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.969804129 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.969592395 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.969633676 seconds)
  done (took 37.361848623 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.969664778 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.969970137 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.970418757 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.970348083 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.969635309 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.968943899 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.970756401 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.969924021 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.969806826 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.96961674 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.96910123 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.969804568 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.969541938 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.969678963 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.970371096 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.968529535 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.968654501 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.969155045 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.969987977 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.970251491 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.969242228 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.969185948 seconds)
  done (took 45.229504396 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.969062983 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.96984848 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.982663817 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.987287423 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.988143721 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 1.999515983 seconds)
  done (took 13.792801432 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969758918 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.966744584 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.965832458 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967989212 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.968739302 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.966923888 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965932459 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.966606085 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.968818282 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.967758569 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966541981 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966622736 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.966368359 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.967143375 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.967854893 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.966292521 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.967032945 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.966387301 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.96722387 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.966938155 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.967108939 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.966668545 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966620113 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.96532648 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.967490498 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966743724 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967080618 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966869755 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.966394273 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.966073805 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.967257129 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.967691056 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967795419 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.966308928 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.966294849 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.968323894 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965917528 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.956529473 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.946865254 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966001886 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.967198914 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.966978586 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.966835558 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.967682591 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.960183061 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.963091326 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.967712165 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.968052254 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.967229188 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968862337 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970205551 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.967643907 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.968303857 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.968148269 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.968585399 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969498895 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.967994967 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.968805418 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967617164 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.96828814 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969709788 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969641152 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.96898533 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969048709 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.965960314 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.969837093 seconds)
  done (took 131.71114965 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970670858 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.970473095 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971481676 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972627383 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971886771 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970478609 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970737358 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971102089 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.972616497 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971918418 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971188538 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971196664 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971521014 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971973808 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.97212005 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.971527215 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970579497 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.970923134 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973196356 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971689009 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.972002843 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971480807 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.972249112 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.972555787 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972768896 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97192759 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.959540025 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971545516 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971591015 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973318972 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.972482587 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973937753 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971994595 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.972316878 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973871772 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.972406963 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972449185 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972942706 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.972708226 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.974167167 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.971581739 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973683877 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971329952 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973094296 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.974065557 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.973521832 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.973227367 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973150718 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973181034 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973522681 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.974311633 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.97377152 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.972930274 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973782126 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.976035402 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973840276 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.974530474 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.973714765 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.974912793 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.975136146 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.973751375 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.975632955 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973979989 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.974106546 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976666437 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.974941466 seconds)
  done (took 132.09039321 seconds)
done (took 2740.244156003 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.980635496 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.089759902 seconds)
  done (took 15.968481629 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.14037166 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.022468567 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.166338745 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.096922305 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.987252637 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.988622683 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.978800943 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.983349397 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.074534735 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.980286025 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.002506692 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.978680125 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.981757348 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.983965636 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.983469906 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.981351043 seconds)
  done (took 54.23827609 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.986917525 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.985257139 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.985267027 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.976862431 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.996551854 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.059544956 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.010587985 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.991203684 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.997468259 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.016430722 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.00299151 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.990278594 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.992518153 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.990948093 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.081009655 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.031848466 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.045984459 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.060555264 seconds)
  done (took 38.109224829 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.033128863 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.994899515 seconds)
  done (took 10.94199043 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.967752992 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.013785612 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.985913157 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.981441659 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.965704647 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.017393215 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.998020271 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.99789719 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.99885929 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.986615593 seconds)
  done (took 71.823454834 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.983323932 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.985409183 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.246017699 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.995450481 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.993925798 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.013077211 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.987186412 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.017852183 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.986131616 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.982626084 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.976486234 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.250750745 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.995977953 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.986890677 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.403094731 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.998477567 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.988522985 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.016459326 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.022750725 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.987399129 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.989901728 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.988413157 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.144900042 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.69385422 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.986861888 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.990925549 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.990964628 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.980823764 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.983085116 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.98270001 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.987659067 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.984859936 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.989043477 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.984541843 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.991045899 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.988993757 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.470533743 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.008620785 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.993099219 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.080333247 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.030030155 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.991940459 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.777673773 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.988832048 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.983392581 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.994076341 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.668728726 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.081773134 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.989056554 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.169223307 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.326649235 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.001258846 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.141884538 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.194105393 seconds)
  done (took 139.278501171 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.985310948 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.221731519 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.136809604 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.989182367 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.242336433 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.196630815 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.988138575 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.032569383 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.98874319 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.189196392 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.241581952 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.089810822 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.988854458 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.98755674 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.987268302 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.985011915 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.131103997 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.05302143 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.988393032 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.983952683 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.012589742 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.184803679 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.106897418 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.986476906 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.010846486 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.191689402 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.10621262 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.088303079 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.758115915 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.985412673 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.049387336 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.98972304 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.989890209 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.987761973 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.13915083 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.080823923 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.071791473 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.989064025 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.987236891 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.986088273 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.664860636 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.183888213 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.082654201 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.108666722 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.218742791 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.202601641 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.599222502 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.989449658 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.611366767 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.153567488 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.192184486 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.192775539 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.106587103 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.989261082 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.273738258 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.988473193 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.988502005 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.209538087 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.206109611 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.086623751 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.990476735 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.988801934 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.988958256 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.224319499 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.992754875 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.078988233 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.990924625 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.990689851 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.082087829 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.080788577 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.206341103 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.208422882 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.017022689 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.310786904 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.477498534 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.19139753 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.053026725 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.208108949 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.992506124 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.989083402 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.067059556 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.828688447 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.241058081 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.229970241 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.188585533 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.018599315 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.637201023 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.988885703 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.174738175 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.180422986 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.223198804 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.232425735 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.21060719 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.354164629 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.989249377 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.990003769 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.2936846 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.106846319 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.992076894 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.338900538 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.218697169 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.513358515 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.016657456 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.273600624 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.117680128 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.99268773 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.636034336 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.991301572 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.195571478 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.028070086 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.992345725 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.991036179 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.18113948 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.895756966 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.992368423 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.693180092 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.051315428 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.992384908 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.194546719 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.99285143 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.234614374 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.993269782 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.221977579 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.628006826 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.021463872 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.164470189 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.235792993 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.625042742 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.285108447 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.234591321 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.103946459 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.215933528 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.796056979 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.993927976 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.252417568 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.994558281 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.991415649 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.161170536 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.99521348 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.133466195 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.994337526 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.259159775 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.015215633 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.217769367 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.997799303 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.230103169 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.024884525 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.040968153 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.996476706 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.119415587 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.994599396 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.826755547 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.150137818 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.996256467 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.992698856 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.599137078 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.992589023 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.146851411 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.21727595 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.014797853 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.06057667 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.561062499 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.987277516 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.074757351 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.017205527 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.272232375 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.994680678 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.241642286 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.954412473 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.472328134 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.993401703 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.226694823 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.178586413 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.99747857 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.99310816 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.836120315 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.995634329 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.995913815 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.15191552 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.389153436 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.898724467 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.191399161 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.000720347 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.121861078 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.998047466 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.075276747 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.336794112 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.996561904 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.996283631 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.995519939 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.993294186 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.996366722 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.20422738 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.022535584 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.427577684 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.129013629 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.249779338 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.302010662 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.191354737 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.034435653 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.998028208 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.218169117 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.000260261 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.058505907 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.999684553 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.014994837 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.225457136 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.999895805 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.199287295 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.232213756 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.884815862 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.043589612 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.998736585 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.998608501 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.908695611 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.110420649 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.084074766 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.998705041 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.995284028 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.110284946 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.116349581 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.183186099 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.815406756 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.137713938 seconds)
  done (took 927.385853016 seconds)
done (took 1259.650059331 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.995846357 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.001123109 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.00113854 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.998778577 seconds)
  done (took 29.921001813 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.998179264 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.999541892 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.001593834 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.999709602 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.999991535 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.000253976 seconds)
  done (took 13.920490086 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.998519978 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.0010441 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.000747713 seconds)
  done (took 22.922514059 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.424534791 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.408372293 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.075592937 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.146293602 seconds)
  done (took 10.978854585 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.003840245 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.999532711 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.997062918 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.000531765 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.989292883 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.000408885 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.000691984 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.999790802 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.001837325 seconds)
  done (took 19.923521651 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.194898309 seconds)
done (took 103.787322721 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.613322219 seconds)
    (2/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.36844858 seconds)
    (3/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.343057122 seconds)
    (4/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.081688603 seconds)
    (5/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 6.999175381 seconds)
    (6/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.853824072 seconds)
    (7/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.412856388 seconds)
    (8/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 2.995379701 seconds)
    (9/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.122106426 seconds)
    (10/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.390231323 seconds)
    (11/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.540988593 seconds)
    (12/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.785512429 seconds)
    (13/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.165808033 seconds)
    (14/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.087382661 seconds)
    (15/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.765062053 seconds)
    (16/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.375567976 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 6.991375861 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.067257803 seconds)
    (19/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.387353866 seconds)
    (20/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.013446716 seconds)
    (21/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.292310126 seconds)
    (22/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.337239777 seconds)
    (23/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.896039672 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.028903809 seconds)
    (25/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.253409267 seconds)
    (26/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.474808398 seconds)
    (27/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.028771887 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.016916018 seconds)
    (29/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.000339654 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 3.543763791 seconds)
    (31/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.221188542 seconds)
    (32/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.312052297 seconds)
    (33/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.389437951 seconds)
    (34/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.115408965 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.013353384 seconds)
    (36/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 2.981433672 seconds)
    (37/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.0660355 seconds)
    (38/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.237528747 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.100277739 seconds)
    (40/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.209600534 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.74315241 seconds)
    (42/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.106367933 seconds)
    (43/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.411321565 seconds)
    (44/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.086879065 seconds)
    (45/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.230990085 seconds)
    (46/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.325643546 seconds)
    (47/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.008421319 seconds)
    (48/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 4.408797045 seconds)
    (49/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.302074741 seconds)
    (50/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.307349345 seconds)
    (51/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.00499297 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.455511254 seconds)
    (53/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.959053239 seconds)
    (54/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.87565117 seconds)
    (55/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.236374818 seconds)
    (56/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.172519922 seconds)
    (57/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.352136082 seconds)
    (58/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.445278069 seconds)
    (59/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.295281314 seconds)
    (60/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.346420601 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.134154263 seconds)
    (62/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.248517671 seconds)
    (63/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.004733889 seconds)
    (64/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.300543373 seconds)
    (65/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.713602889 seconds)
    (66/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.239377636 seconds)
    (67/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.013412085 seconds)
    (68/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.300832185 seconds)
    (69/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.167975023 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.598005024 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.315084016 seconds)
    (72/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.463485701 seconds)
    (73/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.213736948 seconds)
    (74/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.121414291 seconds)
    (75/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.308763464 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.019976473 seconds)
    (77/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.274645042 seconds)
    (78/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.396174951 seconds)
    (79/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.402495585 seconds)
    (80/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.328618106 seconds)
    (81/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.421714064 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.02847732 seconds)
    (83/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.004431725 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 3.937910876 seconds)
    (85/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.030382137 seconds)
    (86/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.577610798 seconds)
    (87/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.937355972 seconds)
    (88/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.06714331 seconds)
    (89/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.018298917 seconds)
    (90/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.002366393 seconds)
    (91/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 4.395504055 seconds)
    (92/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.145495239 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.868291171 seconds)
    (94/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.025692352 seconds)
    (95/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.744374079 seconds)
    (96/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.454252176 seconds)
    (97/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.116682163 seconds)
    (98/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.481698608 seconds)
    (99/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.029184149 seconds)
    (100/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.084502504 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.24137151 seconds)
    (102/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.283610072 seconds)
    (103/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.08871017 seconds)
    (104/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.009260354 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.398383412 seconds)
    (106/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.67513129 seconds)
    (107/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.014002561 seconds)
    (108/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.097001871 seconds)
    (109/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.276391525 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.018599686 seconds)
    (111/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.006240097 seconds)
    (112/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.131290454 seconds)
    (113/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.079357161 seconds)
    (114/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.92595118 seconds)
    (115/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.662478585 seconds)
    (116/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.136632635 seconds)
    (117/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.038498007 seconds)
    (118/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.265537734 seconds)
    (119/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.020827508 seconds)
    (120/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.028828051 seconds)
    (121/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.104471513 seconds)
    (122/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.016481645 seconds)
    (123/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.019680092 seconds)
    (124/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.364392814 seconds)
    (125/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.335738112 seconds)
    (126/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.764665339 seconds)
    (127/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.310315129 seconds)
    (128/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.16501054 seconds)
    (129/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.140423287 seconds)
    (130/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.262207723 seconds)
    (131/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.461058264 seconds)
    (132/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.01958756 seconds)
    (133/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.261304172 seconds)
    (134/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.04146367 seconds)
    (135/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.096600597 seconds)
    (136/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.018055586 seconds)
    (137/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.021025172 seconds)
    (138/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.034593694 seconds)
    (139/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.223541495 seconds)
    (140/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.907671928 seconds)
    (141/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.155558248 seconds)
    (142/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.874433813 seconds)
    (143/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.167352614 seconds)
    (144/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.116742996 seconds)
    (145/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.023327356 seconds)
    (146/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.171206201 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.280003698 seconds)
    (148/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.917274368 seconds)
    (149/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.362039388 seconds)
    (150/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.000448817 seconds)
    (151/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.166283154 seconds)
    (152/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.182039859 seconds)
    (153/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.020939818 seconds)
    (154/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 3.847654873 seconds)
    (155/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.318983409 seconds)
    (156/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.31781132 seconds)
    (157/341) benchmarking ("sort", Bool, false)...
    done (took 2.236146857 seconds)
    (158/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.506225466 seconds)
    (159/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.114330817 seconds)
    (160/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.425755431 seconds)
    (161/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.311930034 seconds)
    (162/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.226656749 seconds)
    (163/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.233759486 seconds)
    (164/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.046415841 seconds)
    (165/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.035406307 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.151258451 seconds)
    (167/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.553539183 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 5.66279143 seconds)
    (169/341) benchmarking ("sort", Float32, false)...
    done (took 5.692861407 seconds)
    (170/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.315964621 seconds)
    (171/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.240046028 seconds)
    (172/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.021978636 seconds)
    (173/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.04394177 seconds)
    (174/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.082360667 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.784956188 seconds)
    (176/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.544061037 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.232947983 seconds)
    (178/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.157779836 seconds)
    (179/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.112169984 seconds)
    (180/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.170146755 seconds)
    (181/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.036560281 seconds)
    (182/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.033227827 seconds)
    (183/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.023922219 seconds)
    (184/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.028009148 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.024894186 seconds)
    (186/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.10852977 seconds)
    (187/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.122419215 seconds)
    (188/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.148265376 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.039034961 seconds)
    (190/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.250192808 seconds)
    (191/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.28910135 seconds)
    (192/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.098090375 seconds)
    (193/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.146024611 seconds)
    (194/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.262625611 seconds)
    (195/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.180473889 seconds)
    (196/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.680970724 seconds)
    (197/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.247073728 seconds)
    (198/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.131918222 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.026326678 seconds)
    (200/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.030214925 seconds)
    (201/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.036590065 seconds)
    (202/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.295794736 seconds)
    (203/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.345246059 seconds)
    (204/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.159329743 seconds)
    (205/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.152275372 seconds)
    (206/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.0381201 seconds)
    (207/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.4235023 seconds)
    (208/341) benchmarking ("sort", Float64, false)...
    done (took 5.73397728 seconds)
    (209/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.027752692 seconds)
    (210/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.079172534 seconds)
    (211/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.12775374 seconds)
    (212/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.153207886 seconds)
    (213/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.034682753 seconds)
    (214/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.139723353 seconds)
    (215/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.02803805 seconds)
    (216/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.235443229 seconds)
    (217/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.136533536 seconds)
    (218/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.170913963 seconds)
    (219/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.047837037 seconds)
    (220/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.437776838 seconds)
    (221/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.427903344 seconds)
    (222/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.104286709 seconds)
    (223/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.132327705 seconds)
    (224/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.239435002 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.434983747 seconds)
    (226/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.246069934 seconds)
    (227/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.133633946 seconds)
    (228/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.903151858 seconds)
    (229/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.73222238 seconds)
    (230/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.333575312 seconds)
    (231/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.784510884 seconds)
    (232/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.778196907 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.325154651 seconds)
    (234/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.113931476 seconds)
    (235/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.152708186 seconds)
    (236/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.930320797 seconds)
    (237/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.182903113 seconds)
    (238/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.406321668 seconds)
    (239/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.124489126 seconds)
    (240/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.052683887 seconds)
    (241/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.616765352 seconds)
    (242/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.046391109 seconds)
    (243/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.28503002 seconds)
    (244/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.033511366 seconds)
    (245/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.435020148 seconds)
    (246/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.043978356 seconds)
    (247/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.101977636 seconds)
    (248/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.026705881 seconds)
    (249/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.234919848 seconds)
    (250/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.122664786 seconds)
    (251/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.114730323 seconds)
    (252/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.360594793 seconds)
    (253/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.033057616 seconds)
    (254/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.873153958 seconds)
    (255/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.217440696 seconds)
    (256/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.298964144 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.634684251 seconds)
    (258/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.044003231 seconds)
    (259/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.026271358 seconds)
    (260/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.332824823 seconds)
    (261/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.192924907 seconds)
    (262/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.165722289 seconds)
    (263/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.028032542 seconds)
    (264/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.165282155 seconds)
    (265/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.027125426 seconds)
    (266/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.278663644 seconds)
    (267/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.116966547 seconds)
    (268/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.109494833 seconds)
    (269/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.132847882 seconds)
    (270/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.239513667 seconds)
    (271/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.020360443 seconds)
    (272/341) benchmarking ("sort", BigInt, false)...
    done (took 7.081182117 seconds)
    (273/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.29332258 seconds)
    (274/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.044459616 seconds)
    (275/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.41491867 seconds)
    (276/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.023179597 seconds)
    (277/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.24590909 seconds)
    (278/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.265655709 seconds)
    (279/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.331296591 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.308847934 seconds)
    (281/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.359955836 seconds)
    (282/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.229805225 seconds)
    (283/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.087778195 seconds)
    (284/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.226689055 seconds)
    (285/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.804715017 seconds)
    (286/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.538140862 seconds)
    (287/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.029911037 seconds)
    (288/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.118303802 seconds)
    (289/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.216594579 seconds)
    (290/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.034726177 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 4.826880943 seconds)
    (292/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.913019402 seconds)
    (293/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.927541818 seconds)
    (294/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.676187161 seconds)
    (295/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.057112912 seconds)
    (296/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.027246683 seconds)
    (297/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 3.757836511 seconds)
    (298/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.018855593 seconds)
    (299/341) benchmarking ("sort", Int8, false)...
    done (took 4.948704809 seconds)
    (300/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.163669409 seconds)
    (301/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.114056245 seconds)
    (302/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.118668844 seconds)
    (303/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.109902892 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.380992804 seconds)
    (305/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.160757296 seconds)
    (306/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.255786229 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.12693681 seconds)
    (308/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.189364526 seconds)
    (309/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.332061916 seconds)
    (310/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.323481123 seconds)
    (311/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.342067174 seconds)
    (312/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.047344775 seconds)
    (313/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.430515573 seconds)
    (314/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.470658775 seconds)
    (315/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.532296844 seconds)
    (316/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.02830389 seconds)
    (317/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.251892969 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.918355917 seconds)
    (319/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.037468831 seconds)
    (320/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.14338492 seconds)
    (321/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.726891265 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.033432756 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.972039525 seconds)
    (324/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.03785339 seconds)
    (325/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.029548114 seconds)
    (326/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.048911882 seconds)
    (327/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.459135415 seconds)
    (328/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.170415342 seconds)
    (329/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.369351662 seconds)
    (330/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.037467491 seconds)
    (331/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.167096407 seconds)
    (332/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.835585382 seconds)
    (333/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.123106044 seconds)
    (334/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.443903313 seconds)
    (335/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.030209739 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.3673725 seconds)
    (337/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.031035054 seconds)
    (338/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.250945453 seconds)
    (339/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.223369616 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.159441988 seconds)
    (341/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.90439261 seconds)
  done (took 1144.078930074 seconds)
done (took 1146.111704824 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.088280666 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.033645499 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.542620132 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.04456399 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.03284996 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.038772716 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.552597587 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.062115774 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.051517972 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.5512333 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.046194163 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.036720204 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.051856011 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.068997698 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.045869362 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.050308199 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.042077244 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.058206075 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.069243667 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.039662451 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.083554649 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.042951744 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.033900411 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.085984894 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.036015525 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.049384727 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.057161899 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.086762046 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.086634521 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.040026776 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.038728715 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.39023256 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.087488074 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.040488567 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.046053621 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.051895081 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.042381592 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.051062932 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.055585167 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.050858219 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.034634974 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.045844012 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.038543423 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.037571147 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.035979374 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.03213501 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.038283829 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.161734743 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.05085401 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.380640906 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.103181144 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.058977783 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.088851965 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.038882135 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.040349407 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.039081863 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.087691822 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.042686327 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.039758367 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.378484429 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.133048982 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.051962836 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.381054718 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.101136511 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.048775886 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.047153499 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.035693682 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.05957763 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.397063995 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.597690908 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.071614309 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.058527556 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.039211946 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.038764858 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.053580694 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.552943371 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.054991906 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.621592691 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.065833491 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.052258761 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.043570889 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.041229163 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.040174885 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.054807302 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.060480432 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.040251273 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.042635344 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.046474481 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.053981629 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.402098981 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.085665471 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.54328942 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.047318148 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.062044339 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.061453075 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.616891345 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.063637001 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.062778047 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.040984187 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.399836355 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.082271877 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.062010896 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.041099098 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.05066082 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.155172832 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.061019845 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.063551257 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.037969584 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.061442117 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.04472646 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.039332689 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.053931075 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.060999431 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.07619515 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.057809855 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.041046544 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.047594442 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.045940071 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.06005245 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.050770064 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.047676661 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.051374655 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.042074326 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.093577749 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.061193033 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.056935055 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.155775317 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.045915602 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.166740757 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.055893832 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.047222166 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.040920684 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.383653951 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.091299947 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.061938467 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.037995203 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.059211215 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.056670224 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.049537482 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.033545499 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.05182639 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.034332988 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.08154122 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.004493155 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.061347107 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.083491854 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.051639555 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.04238091 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.055791401 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.0689265 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.054355761 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.039846007 seconds)
done (took 321.533413042 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.078710677 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.03025937 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.110196566 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.033652144 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.099548993 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.087036972 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.033560718 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.034259728 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.033320466 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.424627696 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.035164166 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.038265619 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.032595888 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.036758604 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.083476916 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.035030656 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.032849157 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.271990448 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.035661311 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.093743736 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.035671292 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.032495762 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.033136554 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.425577959 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.033232513 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.034424125 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.095679729 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.038027333 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.274822201 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.03676399 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.03314333 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.273078531 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.094272483 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.047058422 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.044695527 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.043658251 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.107817613 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.048043405 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.081097185 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.085934723 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.115504299 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.072518278 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.037487528 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.037912491 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.040254222 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.037090294 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.036861571 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.071027382 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.041598943 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.041600129 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.274584855 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.046406114 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.042970375 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.037019562 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.04087356 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.050903507 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.038912488 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.038671971 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.097139967 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.0274368 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.085976095 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.42994854 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.426634019 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.037701513 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.040988234 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.039712192 seconds)
  done (took 194.800130422 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.10341936 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.11009251 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.107070284 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.045269981 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.087100177 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.107177969 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.04244378 seconds)
  done (took 16.558169281 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.046162517 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.039969564 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.063849065 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.062013564 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.037204287 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.183309736 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.047728596 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.046814724 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.068228461 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.045226641 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.378087405 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.062951068 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.047805277 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.03809131 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.052981122 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.074513519 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.038778684 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.039406402 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.137868548 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.119295724 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.047544146 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.046067135 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.067423145 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.050594956 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.041603413 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.039328101 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.041599106 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.047393288 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.038549846 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.017789284 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.042209248 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.053655242 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.041181819 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.0376763 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.041662732 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.042531951 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.037609251 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.039828034 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.040298216 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.040350052 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.042098108 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.042894472 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.037264029 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.04186416 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.041473854 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.064806276 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.038783492 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.040090379 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.043593789 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.04279685 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.071776167 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.040697237 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.042806617 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.046361907 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.081183707 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.049709023 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.042151763 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.039020779 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.040171829 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.041805849 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.040213494 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.121337775 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.066059304 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.043424545 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.063606934 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.080072382 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.042569015 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.041885238 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.038545776 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.070528088 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.042051007 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.066207922 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.042262068 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.140947766 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.041776861 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.183797946 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.065211653 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.048997513 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.043683295 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.040888987 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.047865718 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.046181949 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.045554241 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.050123722 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.048516362 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.0417474 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.042959441 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.042935022 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.051342097 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.045434315 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.089780059 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.042351473 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.042340201 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.141851849 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.042114408 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.141636048 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.068629224 seconds)
  done (took 221.732201754 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.047942741 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.044703733 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.055668452 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.045306298 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.040175602 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.047877338 seconds)
  done (took 14.2451992 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.044875182 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.047936473 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.041586898 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.045532795 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.044110083 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.043237223 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.042788238 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.04508274 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.048504719 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.042311687 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.046089724 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.04262823 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.043741219 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.043550737 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.04361633 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.0426003 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.044916939 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.045151723 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.04226455 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.043267609 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.250154314 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.042344075 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.046485499 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.046182899 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.049223023 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.045816013 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.052772813 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.048374059 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.045760457 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.049162916 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.051572899 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.047711522 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.048610921 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.053990331 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.050235786 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.047724513 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.04918028 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.045737951 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.047117747 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.045710263 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.044935587 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.04695959 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.04342133 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.046613996 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.046500531 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.053010608 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.052510469 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.051973873 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.047116846 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.046718445 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.046029388 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.04438554 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.045050439 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.04581638 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.051682085 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.052690052 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.051158944 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.049221409 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.044587189 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.054726535 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.051012457 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.046835963 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.048553333 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.053106586 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.052426032 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.044592894 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.05180088 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.054231732 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.046780996 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.044201378 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.050353911 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.048887339 seconds)
  done (took 150.56851509 seconds)
done (took 599.842392028 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.130963611 seconds)
  done (took 9.099149996 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.212427364 seconds)
  done (took 9.285055605 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.580212667 seconds)
  done (took 12.551984695 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.067173476 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.055920143 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.056505248 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.046354515 seconds)
  done (took 30.206913333 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.302751843 seconds)
  done (took 9.254189943 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.062447084 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.045368662 seconds)
  done (took 16.142131822 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.200368015 seconds)
  done (took 9.169593894 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.506716809 seconds)
  done (took 9.507362535 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.066818572 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.070149256 seconds)
  done (took 16.124027259 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.051870311 seconds)
  done (took 9.018410563 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.903921996 seconds)
  done (took 9.96006933 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.06000195 seconds)
  done (took 9.043378909 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.116093887 seconds)
  done (took 9.082958666 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.092921323 seconds)
  done (took 10.059522041 seconds)
done (took 170.472707442 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.053866756 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.043815116 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.0420527 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.048001746 seconds)
  done (took 30.153094831 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.08202048 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.08604805 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.093439578 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.085917541 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.071838353 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.073559147 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.085825829 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.082002471 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.074900113 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.078734926 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.085448445 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.082346833 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.081990318 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.094865135 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.091524376 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.082701097 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.086536445 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.089838673 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.075252247 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.093999049 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.079925351 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.08158136 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.048631296 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.051782824 seconds)
  done (took 51.905945184 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.242244824 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.117774615 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.2025749 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.094826578 seconds)
  done (took 10.624707226 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.050548132 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.117460307 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.102269471 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.096301461 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.143724043 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.152895352 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.102423104 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.264217398 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.142995982 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.165829514 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.057246216 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.057379466 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.074670122 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.095162377 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.155496982 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.051231107 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.051545625 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.165562899 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.1130364 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.260757665 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.050880001 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.107079243 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.141155903 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.105257529 seconds)
  done (took 52.790340753 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.052980307 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.059898738 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.061067087 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.053499224 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.053553208 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.052348964 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.058086056 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.055734227 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.074393114 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.053855008 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.051040039 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.055590466 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.059871964 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.053163531 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.052754695 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.067948111 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.068880893 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.05431463 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.058461795 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.059003404 seconds)
  done (took 43.123942942 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.051232694 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.896507108 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.400681321 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.30153026 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.048820328 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.05114648 seconds)
  done (took 32.719745599 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.067957809 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.070942733 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.056442392 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.074000077 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.097853384 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.057989067 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.112313318 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.187624198 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.059951167 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.105920036 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.071268399 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.060119402 seconds)
  done (took 26.994735302 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.050829093 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.04948358 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.050856504 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.061731247 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.062653929 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.059608039 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.057003029 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.049876291 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.06302599 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.069953158 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.062132825 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.064214777 seconds)
  done (took 46.670575813 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.265692982 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.279112199 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.270393622 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.645714005 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.366951789 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.038051791 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.340224917 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.26410947 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.760848515 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.782249911 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.346425337 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.036258533 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.006003583 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.976809738 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.944507789 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.296754356 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.053996264 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.910122158 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.310069734 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.100446471 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.055702579 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.051637017 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.056877619 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.349258775 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.384494618 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.055417339 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.266537782 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.068540144 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.054287172 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.317895083 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.518384655 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.104587215 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.253736607 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.311419552 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.392004144 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.108184643 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.165210122 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.214772725 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.096635388 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.088911211 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.068116104 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.066710412 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.593439201 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.062495798 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.327745508 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.05693735 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.061942699 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.179089154 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.978023689 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.426593998 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.179460815 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.054235678 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.089214049 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.487616673 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.175371209 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.298299082 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.058342754 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.228908084 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108259936 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.379038167 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.172117973 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.163949479 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.266849452 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.979412173 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.451623733 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.188908666 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.056547056 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.061435244 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.753617815 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.297470377 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.134342956 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.44788459 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.824033091 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.055296289 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.056007537 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.096358753 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.153309808 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.052343837 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.358226538 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.029049159 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.980936544 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.153064308 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.455381237 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.062413492 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.055456122 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.064649172 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.904628909 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.980949963 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.151801734 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.368389177 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.388455241 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.057137754 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.052584556 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.071936736 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.058830177 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.002685703 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.614619452 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.118614292 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.98459915 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.618743247 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.520412639 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.019468281 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.524119726 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.09812782 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.33444876 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.203031103 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.463127825 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.267090654 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.304161377 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.587224751 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.061315389 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.61439013 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.140083213 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.132857735 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.057515449 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.618863849 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.232305663 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.417503885 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.179327918 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.056009397 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.98241476 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.068703863 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.263610424 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.520224297 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.110824872 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.05457124 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.061476263 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.059516572 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.061579053 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.220322592 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07355786 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.348745853 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.133757325 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.055738186 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.994245339 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.060348551 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.342895266 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.721542615 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.113281641 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.312034528 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.324894397 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.757898575 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.655136814 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.106850509 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.329049767 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.134528196 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134134564 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.654595995 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.196749166 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.154970371 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.060480478 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.192152811 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.066631118 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.0634551 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.441393714 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.472650288 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.489736212 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.104395694 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.059675055 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.020750477 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.234482694 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.301959661 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.158329085 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.085673398 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.065440542 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.143639695 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.287276665 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.060656838 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.987081534 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.315172304 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.306719372 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.349821934 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.476108865 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.14672873 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.131385953 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.072346385 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.275127824 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.142287752 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.716104925 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.605381953 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.277806815 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.637802163 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.024449933 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.700892799 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.37116414 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.448688548 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.079581162 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.512783997 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.237979165 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.732131269 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.088697031 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.588996244 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.988007646 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.068432799 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.406397381 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.021168088 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.373612925 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.131380168 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12183529 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.0627884 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.062972123 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.070597491 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.000012843 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.174104707 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.129190443 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134003309 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.988832808 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.697052126 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.06311598 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.067588585 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.054359583 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.398975876 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.897068116 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.015014305 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.066827498 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.139795508 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.805760698 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.613354282 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.061705389 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.06896403 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.669790011 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.058740417 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.964775894 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.064357597 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.946582726 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.090064452 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.375441407 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.771905058 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.356889125 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.143006287 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.142300518 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.065087614 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.066774505 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.733915541 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.071941101 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.76636536 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.352707735 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.339891591 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.509428967 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.129850064 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.275003011 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.078613605 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.068481177 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.576515333 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.090011693 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.065874292 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.266057542 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.585777486 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.456014898 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.715605036 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.151810617 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.065942421 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.335478466 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.071018207 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.527022076 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.755430648 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.073241803 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.06409618 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.320985952 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.750212751 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.063859633 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.977810555 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.069954666 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.261668916 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.269066832 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.342328031 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.366811881 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.512599897 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.988407338 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.070941129 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.089792915 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.309012905 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.062155121 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.101102243 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.515063281 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.156456939 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.491430358 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.346721324 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.499937275 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.706225405 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.326998389 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.126794316 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.073979556 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.724174525 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.201530975 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.996672055 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183180634 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.994105867 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.769837432 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.343563275 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.081885618 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.331366183 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.047038028 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.399881064 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.367033246 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.382813816 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.11589509 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.077789315 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.065591907 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.116101491 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.062590727 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.250198637 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.181291808 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.074087923 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.603667718 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103338035 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.115423204 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.071399261 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.605851147 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.087777155 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.0681792 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.762119494 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.092608953 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183075182 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.141136869 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.839685925 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.561204081 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.089208332 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.021510877 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.718139428 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.335531009 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.125843168 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.519489961 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108459981 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.470840364 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.06559677 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.280060211 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.067827856 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.639451616 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.113963972 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.340159677 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.027029796 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.27819265 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.259281739 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.09345863 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.071026009 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.990733407 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.173889568 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.95848611 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.052846323 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.058053976 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.74894552 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.513699924 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.275266843 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.546907105 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.889686483 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.070642644 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.442654212 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.473182726 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.691336278 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103727476 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.069981628 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.458820868 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.204882866 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.434547566 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.364665832 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.074836234 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.09288084 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.280403825 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193247257 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.991488181 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.561622293 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.649803518 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.768277761 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.081031736 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.275027366 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.442650497 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.35734283 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.105503189 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.146804455 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.476230398 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.337001724 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.138510647 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.994303498 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.070390296 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.465124804 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.466087949 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.168981322 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.31159744 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.389535237 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.693579469 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.559003569 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.509993575 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.510572845 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.487840801 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.469349433 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.284523627 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.443255018 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.398024417 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.661982038 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.484816132 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.285191794 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.173560447 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.351972358 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.953876117 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.781100018 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.318435587 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.078579681 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.00444041 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.282013887 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.076751886 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.562407494 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.596160919 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.321478498 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.413524675 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.550827561 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.613125878 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.263550261 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.09785209 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.037739579 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.099650298 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.093853168 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.074641473 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.563729388 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.362941051 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.086650821 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.018566329 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.737209662 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.001644199 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.284087575 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.256452808 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.110803605 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.626131514 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.400147678 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.174387488 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.370842273 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.311994865 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.113665646 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.999054091 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.856019245 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.016709624 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.157970426 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.50243868 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085538437 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.075144948 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274935759 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.000240733 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121045152 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.079424116 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.278137988 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.660952294 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.342828443 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201261679 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.318975327 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.378606801 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.94848584 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.099691626 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.346332825 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.00229435 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.701910099 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.771647799 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.114295009 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.146374772 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.071396529 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.078909363 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.346183365 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.45325519 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.174715914 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.749302389 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.105052198 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.097416309 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.472679238 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.169744457 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.078117176 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.076192202 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.555691739 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.302598171 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.074104237 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.050248309 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.287078345 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.145666053 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.271964865 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.152429997 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.593601778 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.078907167 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.006345136 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.180749123 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.025237907 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.070369563 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.881166881 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.132909383 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.075232333 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.347655252 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.770685179 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.279147178 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.471858994 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.987062932 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.251921119 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.118492193 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.080819978 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.083403123 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.468214716 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.381527546 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.072704884 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.34523282 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125490656 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.079407182 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.739230349 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.047706627 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.074631822 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.770968472 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.984090468 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.8051665 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.469633748 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.080386654 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.114842854 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.081162003 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.008711051 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.072728196 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.247749347 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.068774691 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.087984123 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.450279768 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.434246184 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.1644084 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.08123781 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.077608105 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.085948423 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.29157907 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.595620541 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096775799 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.778160329 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.278828453 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.078842112 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.574141083 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.521650692 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.348928023 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.115733178 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.269121204 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.321335472 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.622789147 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.267331599 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.054575802 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.301538482 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.07919166 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.355533197 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.35138054 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.076554052 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.292788457 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.572179911 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.363432771 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.432055092 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.391291652 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.147320653 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.267388283 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.976696805 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.0770323 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.084433591 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.346681278 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134984373 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.076963273 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.088902533 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.635577314 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.83364845 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.544912049 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.236029592 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.441127326 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.939395153 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.833598901 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.077603143 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.002606079 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.077014297 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.100941274 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.082883551 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.006843963 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.775401228 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.924506581 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.289657229 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.390879407 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.00252532 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.280557631 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.640077349 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.000618098 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.049293127 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.069287549 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.331004071 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.989436962 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.084952491 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.033979407 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.403668317 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.793604061 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.349800205 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.079708498 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.023668753 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.083027271 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.083579454 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.079580403 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.168172508 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.07994895 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197313788 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.341539588 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.488472271 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.186997274 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.719592236 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.77895474 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.013332307 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.120649151 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.638212013 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.634698697 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.411227493 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.213145404 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.776640964 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.022485513 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.087123366 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085548969 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.351124562 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.082953972 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.083540695 seconds)
  done (took 2200.904805125 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.083728916 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.131603791 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.140912853 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.265645915 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.085449447 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.211642224 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.14202169 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.1579756 seconds)
  done (took 59.216920613 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.082086408 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.065774399 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.088633197 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.081743689 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.077525314 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.081005001 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.275459642 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.10937018 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.081095174 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.08309824 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.08335962 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.08248416 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.084469676 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.081137002 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.098216305 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.391759927 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.105913594 seconds)
  done (took 79.978681996 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.139333617 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.885359584 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.087280223 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.756337114 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.128625859 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.42389804 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.082114173 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.08793839 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.192483152 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.381978765 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.123893262 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.099249242 seconds)
  done (took 92.422150423 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.082465945 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.086071761 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.083544329 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.085010617 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.08611136 seconds)
  done (took 12.425221203 seconds)
done (took 2741.961224781 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.327544559 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.18034302 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.152199263 seconds)
  done (took 6.332251551 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.228973452 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.274850391 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.391970338 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.368260853 seconds)
  done (took 11.270992267 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.368572162 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.448095514 seconds)
  done (took 6.817147582 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.45668528 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.092114862 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.479693293 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.084118961 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.074024991 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.082916595 seconds)
  done (took 23.247500715 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.087503992 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.087104968 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.0848819 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.067191755 seconds)
  done (took 10.325663146 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.087064471 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.851389286 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.080460836 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.093055242 seconds)
  done (took 22.112517238 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.222008472 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.104568667 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.857123028 seconds)
  done (took 10.184279668 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.701208631 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.526204205 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.686126414 seconds)
  done (took 9.913649182 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.224544622 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.069776818 seconds)
  done (took 8.293936954 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.22682407 seconds)
  done (took 4.225997888 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.917875775 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.398218202 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.567382631 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.611805505 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.671245581 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.305594839 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.404748867 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.353259695 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.477582088 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.528071801 seconds)
  done (took 27.236887956 seconds)
done (took 156.320360709 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.512040163 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.107998788 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.297370631 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.464929631 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.324046598 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.294435312 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.378179098 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.453685171 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.133575736 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.119082791 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.457660362 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.326675363 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.328185288 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.104309243 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.337216118 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.102524909 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.328370806 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.532379702 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.139063318 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.379339411 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.38312655 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.106376254 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.306885894 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.124243377 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.324315312 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.249554004 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.69865183 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.103025075 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.291603139 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.716858885 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.275784312 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.526631064 seconds)
  done (took 176.232484165 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.079115946 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.085236233 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.087859721 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.084881146 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.347254293 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.088313451 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.09102662 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.085344097 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.391059093 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.372736277 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.086763169 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.325084683 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.088554672 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.084969279 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.08613626 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.088105261 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.503572162 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.08483658 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.084263467 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.082947563 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.090048231 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.208712391 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.083653894 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.245884209 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.491418134 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.089784569 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.086718836 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.085811095 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.086341807 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.085437028 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.088572452 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.084447874 seconds)
  done (took 214.963422616 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.088184915 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.087719395 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.090232612 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.085642512 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.087313988 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.086767743 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.090528623 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.089298894 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.963604369 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.951403184 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.090027188 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.086464044 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.088696579 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.085542159 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.086053723 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.086018318 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.086148937 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.087701755 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.089212353 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.090947221 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.088504742 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.726606217 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.09023527 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.776375655 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.089774734 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.094230359 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.086730247 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.093207859 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.095218267 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.097065443 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.087280975 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.08926977 seconds)
  done (took 227.919117496 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.330616024 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.092694637 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.09184978 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.105244835 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.090759693 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.093149762 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.097807892 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.344726383 seconds)
  done (took 21.255700668 seconds)
done (took 642.39061769 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.451473594 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.82607525 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.219067093 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.116767799 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.363584123 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.156486211 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.110269525 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.17045497 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.761544689 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.18139598 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.52029303 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.116995405 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.820600132 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.137864104 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.221705607 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.167393087 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.452585038 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.711619126 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.24519903 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.768912674 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.31475419 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.035912708 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.184568773 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.800323266 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.537919232 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.049384693 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.136063563 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.453805004 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.115814815 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.343813831 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.775213015 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.380843714 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.123570175 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.112527215 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.160702806 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.14148281 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.314231638 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.121655987 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.224616742 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.828221846 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.801023074 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.642337201 seconds)
  done (took 109.131203806 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.099342547 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.094921092 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.098626004 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.098349574 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.111632169 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.099982747 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.099839578 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.097949569 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.098816563 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.101820622 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.098952821 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.10984396 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.100034462 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.107440069 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.098934952 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.098984779 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.100770636 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.10796743 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.102070688 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.102258694 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.101276306 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.099561709 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.09611912 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.099810052 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.100893328 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.097982748 seconds)
  done (took 56.64560004 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.096908497 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.248623639 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.371494056 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.123473571 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.098910283 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.098375735 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.125815207 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.102363957 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.09822655 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.100507097 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.188986522 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.100485932 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.111366364 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.367223579 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.123089182 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.099273872 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.100040292 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.099125973 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.255448831 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.10959702 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.128610906 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.104815011 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.129049749 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.114592971 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.098731773 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.098100695 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.101839462 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.502993262 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.112439272 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.19234419 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.138199467 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.129710395 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.437262329 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.381381674 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.162780455 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.105878827 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.098218622 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.238628874 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.110360997 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.096755913 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.126789069 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.106658483 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.375486129 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.608595983 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.11122865 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.097578804 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.501521861 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.250169834 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.142996104 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.111218616 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.3878869 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.128937623 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.101382362 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.099925896 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.13624521 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.11075195 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.10150386 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.343389862 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.11570096 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.129194306 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.108689072 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.104365277 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.262224715 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.106647903 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.255392241 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.109415624 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.105929778 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.100812912 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.376290179 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.127903776 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.61117437 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.112432997 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.100181324 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.196528035 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.257467928 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.525779864 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.110910277 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.266430986 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.452424956 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.137882435 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.112061639 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.492012271 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.140355775 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.110509687 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.10051211 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.099324975 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.100101745 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.14195787 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.125602437 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.532453502 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.607360134 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.360865949 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.140683745 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.114048471 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.105404989 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.347036222 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.112072557 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.103752831 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.370095767 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.636038327 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.112655246 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.110100025 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.591975169 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.117262158 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.132661673 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.113871393 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.390888643 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.128784935 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.144335539 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.103771799 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.108710183 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.106162796 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.134751346 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.112495781 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.102156535 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.581229437 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.254361024 seconds)
  done (took 259.232549646 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.105060092 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.099508951 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.103183693 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.100303596 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.100921566 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.106152761 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.101713528 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.098463964 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.102439566 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.100528603 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.100156396 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.105781991 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.102248035 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.108456742 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.136786986 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.104613196 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.588909456 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.104459346 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.106176564 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.102022544 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.675201662 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.10952996 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.105134468 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.103765061 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.107351231 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.103927641 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.10270511 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.135958334 seconds)
  done (took 174.047910572 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.107923919 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.163259944 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.116817064 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.149644093 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.10674433 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.106912341 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.128553719 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.118885197 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.110587565 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.10445195 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.104777937 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.135283533 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.111926134 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.201262969 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.132101163 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.139074485 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.20591979 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.109971479 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.102686696 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.106462767 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.148848006 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.117941275 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.13808549 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.167170874 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.112385447 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.160357234 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.117963311 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.106078189 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.105129553 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.217973599 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.120007401 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.133178496 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.137202078 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.129038149 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.221248858 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.217051002 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.204470309 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.134026443 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.109761055 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.108817772 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.107695492 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.105924031 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.161329426 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.116573138 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.109334831 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.225047952 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.121767378 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.108269709 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.126720471 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.105805888 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.121626731 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.12213506 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.142878664 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.232529067 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.151071684 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.130178708 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.131683499 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.123330981 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.106989373 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.205114493 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.109967777 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.221207529 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.128150718 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.107146582 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.109374093 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.111294034 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.154598965 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.144753529 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.206438363 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.112064006 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.205359993 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.158663329 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.11838175 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.106431586 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.107592123 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.163699382 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.216830035 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.158186136 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.16439745 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.141530686 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.114603496 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.105312108 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.110160293 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.136394369 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.1127885 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.22474798 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.220693688 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.113065801 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.111527832 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.109822672 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.107437066 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.137233157 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.172008305 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.147372947 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.216698688 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.144729683 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.149477695 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.1163204 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.122004618 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.114351596 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.144991793 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.118953011 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.120613267 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.444408705 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.145173294 seconds)
  done (took 226.956395587 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.484388605 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.149735573 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.177619509 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.361267381 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.491606432 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.014175501 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.149261068 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.162441334 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.168119737 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.284903563 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.221451484 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.204562038 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.144161611 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.12844871 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.154117845 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.167871357 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.185076858 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.469193014 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.255275354 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.645947246 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.146037392 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.41475771 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.442239383 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.485513658 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.194949872 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.530757763 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.762124522 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.248672054 seconds)
  done (took 69.275428967 seconds)
done (took 897.303516301 seconds)
SAVING RESULT...
DONE!
