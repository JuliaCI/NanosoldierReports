cset: moving following pidspec: 29407
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.986084009 seconds)
loading group "shootout"... done (took 1.11684026 seconds)
loading group "string"... done (took 0.677323235 seconds)
loading group "linalg"... done (took 8.614391345 seconds)
loading group "parallel"... done (took 0.167748559 seconds)
loading group "find"... done (took 2.86833253 seconds)
loading group "tuple"... done (took 2.071665524 seconds)
loading group "union"... done (took 15.304964909 seconds)
loading group "dates"... done (took 1.574131546 seconds)
loading group "micro"... done (took 0.222900195 seconds)
loading group "simd"... done (took 4.838120155 seconds)
loading group "io"... done (took 1.071791307 seconds)
loading group "random"... done (took 9.655446082 seconds)
loading group "problem"... done (took 1.536902692 seconds)
loading group "array"... done (took 25.366413852 seconds)
loading group "misc"... done (took 1.901513165 seconds)
loading group "scalar"... done (took 43.876326705 seconds)
loading group "sort"... done (took 3.349892182 seconds)
loading group "sparse"... done (took 12.837077373 seconds)
loading group "collection"... done (took 18.807184345 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.534769183 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.123841188 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128941287 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.121754285 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.180162097 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121820061 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129861118 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085473928 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.861000723 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138609493 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116030297 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.435477196 seconds)
done (took 5.413304391 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169481279 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.096501187 seconds)
    (2/2) benchmarking "String"...
    done (took 0.085873693 seconds)
  done (took 1.386874187 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.074294244 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062288391 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069268045 seconds)
  done (took 1.409487537 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066644677 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138404863 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.068125586 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068293918 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.071763 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068157918 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068457001 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067887527 seconds)
  done (took 1.759888847 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.074490403 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069307766 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067263937 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069211404 seconds)
  done (took 1.487431597 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067570679 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.125576147 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06731062 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066507907 seconds)
  done (took 1.529760473 seconds)
done (took 9.036957537 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.143383085 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.825589362 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.757831272 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126949622 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250888955 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.451382238 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124479932 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.186802545 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.092368861 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.076904924 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.125313174 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079943497 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.454829252 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.407133497 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073687944 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.174281802 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.634264406 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089733413 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.13284878 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.468175785 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073918285 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088168932 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084593251 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071758901 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.323433679 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.155279111 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.656414504 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.096743362 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069099539 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095845436 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070991975 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078406648 seconds)
  done (took 10.778836724 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.096178151 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.09333077 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.071200943 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126820382 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.097225906 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.07218045 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077793836 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069644667 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.09166409 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125468284 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091773909 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.098385348 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066954002 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069294213 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.080145114 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197371511 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080979574 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081559874 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068213988 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081160949 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106241124 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.080646997 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080628334 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080891033 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132336722 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.173308922 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.100835805 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098454873 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.069172173 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.081127155 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.12067369 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126260871 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069324687 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067198289 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122105492 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.09795688 seconds)
  done (took 4.699701106 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.900201239 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.098080531 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.084819707 seconds)
    (3/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.09511741 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074299669 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106423336 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114057715 seconds)
    (7/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.085112712 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.126644541 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.10009172 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.120516771 seconds)
    (11/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069407484 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.149638739 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.643804906 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.127701028 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071962244 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120441973 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361753443 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.090166357 seconds)
    (19/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.065801775 seconds)
    (20/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.069502661 seconds)
    (21/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068598565 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070790136 seconds)
    (23/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069632382 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112084242 seconds)
    (25/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066323337 seconds)
    (26/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175480845 seconds)
    (27/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.583806697 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070827841 seconds)
    (29/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069335891 seconds)
    (30/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.099741264 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065643239 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138449409 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092391146 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071179466 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.550315745 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065382344 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063803188 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088847038 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.092154602 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066635589 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069057916 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079414529 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067053247 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109385497 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07742542 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.476398877 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068291808 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.544650877 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.218782377 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.070663003 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070130661 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.099080267 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.062994466 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066059316 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.215378139 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.116353432 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065564797 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.270356508 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068158612 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068474453 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069023531 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.098744273 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067461844 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068427664 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07328433 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.09664151 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.791087718 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.085903719 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096386318 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067478892 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.399536076 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.072053543 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.06718476 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067301726 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.081299188 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.105026538 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064090223 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.063989923 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.09977386 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.086714701 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.084821773 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068053585 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.064995692 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06370429 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.327112929 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.146780315 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.063893541 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065417239 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.464271856 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062648892 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064685252 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.065993681 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.088582322 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.064616621 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.061873451 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.061898744 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097200335 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065167342 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.88355165 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.069335591 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.478601997 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.072022228 seconds)
    (103/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.069870791 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.126771989 seconds)
    (105/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.105553905 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.071511228 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099344411 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.07142943 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.067863434 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.077321907 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.069172033 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.068342547 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.073226865 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.068920072 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069500806 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.072034326 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070971486 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070685051 seconds)
  done (took 23.152608503 seconds)
done (took 40.743816083 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.325617045 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.083206313 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.083290416 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.082991719 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.082821126 seconds)
  done (took 1.936411142 seconds)
done (took 3.333992666 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.139118068 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.079575182 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.068120394 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.105049515 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.072347837 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.106109843 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.112481611 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.109115601 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.072459516 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.071739701 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.07189732 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.10702264 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.109346824 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.071716723 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.101819145 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.107919227 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.072044118 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.071146335 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.071980414 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.072097797 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.071627327 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.067310461 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.072580496 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.071788436 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.103395047 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.071861748 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.067389652 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.103038375 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.07213362 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.103007421 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.072317645 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.071981056 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.071550089 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.104051635 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.072113125 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.102786008 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.067083647 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.072261486 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.071156756 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.071743768 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.071595621 seconds)
  done (took 4.770808561 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.074765355 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085074353 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.086787363 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064835336 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074499377 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085962366 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06495656 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084808417 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092129562 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085744008 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085558348 seconds)
  done (took 2.217046608 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073804322 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.086501155 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.090860968 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064817503 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.076257533 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.086820922 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064513808 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.086226107 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08907524 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086682731 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.087095894 seconds)
  done (took 2.208736111 seconds)
done (took 10.497456914 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.099506493 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.06852209 seconds)
  done (took 1.463185718 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.231899023 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.639245816 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.242652393 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.094701546 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.073698774 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086380957 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.20321741 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068515296 seconds)
  done (took 8.132240249 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.106134886 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070955026 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.073046087 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.072481652 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.071038663 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.071815895 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.071009526 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.070572675 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.070799352 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.070837038 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071790374 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.071751617 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.070261008 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.072346106 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.072119265 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.073597007 seconds)
  done (took 2.585214036 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104815285 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.070925548 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101213059 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063174679 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073651091 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063972651 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072446603 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.07442802 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.071556547 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.072779196 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.07324443 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071916913 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072306763 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.072568891 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073927734 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074225853 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.074049005 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072051625 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07407437 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074700924 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.07316862 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073992997 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075229007 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072472014 seconds)
  done (took 3.224623166 seconds)
done (took 16.725357492 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.178446263 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075930846 seconds)
  done (took 1.557558698 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.07099361 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069662176 seconds)
  done (took 1.457783537 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.076497951 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062251762 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079490939 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070944155 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062639407 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062673304 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078635522 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062588117 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063174894 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063048531 seconds)
  done (took 1.997000427 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.065579457 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069500356 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.06777622 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066057376 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.068431808 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063827342 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065750855 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063943547 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070488296 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.06244677 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.067174782 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.084209919 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066765382 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084867779 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06653839 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066932975 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069530677 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.066776287 seconds)
  done (took 2.555798594 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.063916645 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062592024 seconds)
  done (took 1.458934319 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.067488716 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063174695 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065987657 seconds)
    (4/7) benchmarking "year"...
    done (took 0.065168619 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.06279338 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062136276 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063622439 seconds)
  done (took 1.77392099 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.430413587 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.125024225 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.346274396 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070042056 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.078017429 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.260449192 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064963064 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069563102 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069673618 seconds)
  done (took 2.883259954 seconds)
done (took 15.023684213 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.084671529 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.18514123 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.090438926 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.410465783 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092498842 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068725813 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11497599 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.174565846 seconds)
done (took 2.572395215 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.219208141 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.265483067 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.395032387 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.126971386 seconds)
  done (took 3.120391603 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.345502308 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079640466 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078290978 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068295291 seconds)
  done (took 1.911604797 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.067635451 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073014822 seconds)
  done (took 1.476950541 seconds)
done (took 8.077316049 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074596301 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.098682519 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062732135 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065366547 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065290203 seconds)
    (6/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063011454 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.064944058 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.075317323 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062971304 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065412477 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063371881 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.065435338 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.065367584 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065227727 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064571141 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065595384 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064813577 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065219721 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064977482 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064862576 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065144949 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06542105 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.064353426 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065202928 seconds)
  done (took 2.971039355 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.081633114 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067598651 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067987496 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067849935 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068873343 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.069611889 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.069883409 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.069083843 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069973484 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067955416 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069748911 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.070278658 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.068352201 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.070602754 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068461875 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.070431588 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069784996 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068409611 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068386176 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.070545562 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.070078121 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068872191 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.070596663 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069723798 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.070427285 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070606863 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.068412799 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.068525281 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070197136 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.07060273 seconds)
  done (took 3.448250625 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.069579651 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.062098806 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062251838 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071412871 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061700687 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061742687 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062200723 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061290113 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061916434 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.06309997 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062324247 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061125828 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062698018 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061062127 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061431215 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061802556 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066200565 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080298631 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061711008 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061362842 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065796106 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061588479 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.06124547 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061558859 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061763577 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061470707 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061070932 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061883483 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061399914 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.06285216 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.063103871 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066778524 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067902654 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062400341 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.073418691 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067996302 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062811864 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.067243056 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063858329 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.062794372 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062325371 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060954097 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061433363 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061389323 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.071771382 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061155322 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062857979 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061539952 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.063164218 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062712801 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.063321737 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.065188567 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.072494827 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.06443385 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.062505313 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063616148 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.062899347 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.063367619 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062488155 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.062624868 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.062787798 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.066230057 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.064395927 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.06379383 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.083796613 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.064426051 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072783063 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.062037584 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062889276 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064784369 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061637555 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.07939264 seconds)
  done (took 5.989468926 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.074442021 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.0737163 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.080197229 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.071825943 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065143024 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062688083 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066140658 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062829389 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072004625 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066462972 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062565623 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065936139 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071407301 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066620303 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06366473 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.073330801 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068154829 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067133143 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063680489 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068041738 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065332377 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06683667 seconds)
  done (took 2.863990753 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.138618617 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067807449 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107163817 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.075093999 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069663536 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.075703736 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067591911 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067358604 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067504371 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067845139 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067837805 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067605194 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070095022 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067861052 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067704453 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06924552 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069038331 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069248989 seconds)
  done (took 2.712325203 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.079607194 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.068414755 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091352766 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067741149 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067591257 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067124499 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071834853 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072878773 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.068545234 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.068837066 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.073225849 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068638039 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.06874926 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068836848 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068319733 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.069131515 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.068077327 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069335133 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072686047 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.072009026 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.072533144 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072031402 seconds)
  done (took 2.927761872 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080415179 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067618767 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082234555 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067763332 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062845591 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063332019 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068467507 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.068278386 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.068688669 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.067562058 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068069812 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062836888 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.069532549 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067850726 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.069776105 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068223194 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067575866 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067201381 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066190425 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061826383 seconds)
  done (took 2.725080469 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.089076734 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064946428 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064449365 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084304425 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064329322 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064406434 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084134359 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064219497 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064722636 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086225651 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06444541 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064211315 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.083695448 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084163396 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064493721 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083858992 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083989724 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.08431218 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064744056 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064572987 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086393957 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064727577 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.083672106 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064567349 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063952723 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064473089 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064433765 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.084105621 seconds)
  done (took 3.409943384 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.067282763 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064408555 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064997909 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064965045 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064951687 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.06524051 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066050545 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065514084 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065422088 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06567906 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065536842 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065338359 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068590622 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065480659 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065610029 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065591135 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065104176 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065325447 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065337119 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065375339 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.06542916 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065004498 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064833872 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065119789 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065258812 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065306834 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065291299 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065139023 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064602386 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064698263 seconds)
  done (took 3.329145731 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.076032716 seconds)
    (2/2) benchmarking "in"...
    done (took 0.073198148 seconds)
  done (took 1.51422529 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.064749889 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078821232 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061156913 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073905687 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070003364 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06555909 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070546697 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069889869 seconds)
  done (took 1.91516096 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.070450334 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.092420683 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063219838 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064348308 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066399405 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.133471107 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075483613 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075248658 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07691406 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065907744 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064292036 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.075661496 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063011639 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07675316 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065181034 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073093097 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071252211 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081961303 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077866059 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.063651586 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.078220239 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065540685 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.063494916 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065824534 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06436931 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071884868 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.081535767 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.077745876 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073653043 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.06252092 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082729226 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062080247 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062906868 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071662244 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.06660976 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.0625164 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.099616927 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062900629 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067907974 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061653266 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074276203 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083425752 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076725474 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.082026577 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064613403 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064169213 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061769001 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064286179 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065692595 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071758607 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062107937 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069793411 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.06108062 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.063586689 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072671892 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062263992 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067784035 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071859029 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075723117 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072689402 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.0712347 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077915364 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071387534 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069723364 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063037678 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082396126 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.06391689 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075890525 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077390454 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063085878 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.075574332 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061907753 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060675274 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061882556 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.095957686 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.06413126 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063296343 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062434789 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062572326 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.06373259 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072080997 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067513988 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069463292 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06606228 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078672617 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071966402 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062110005 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068542807 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080022436 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065714712 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062470392 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078774737 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.067019386 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.063255525 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.082711128 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.073743168 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.065408166 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.064245372 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.06686113 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077668852 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.064748894 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.062715329 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072595228 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.065424228 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.066250534 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.068080794 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071837022 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.063071873 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.073674263 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.06828478 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06486811 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.062164527 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.067032244 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063371946 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.062184716 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073003573 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.063214293 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077688752 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.069375109 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.077220274 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.078528194 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.073265621 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.079165047 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.063323094 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.061401248 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079135188 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070472085 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.062197134 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.078524986 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.060034153 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071328404 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063522556 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063052186 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.07232779 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.0607214 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062228618 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060518787 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065009614 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061671388 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062374224 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066674876 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069623689 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.072610632 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.061747171 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069438194 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.06099352 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075847823 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.070972562 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.064671174 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063422666 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061060772 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071449009 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066865289 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069916581 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059976971 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060944954 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060587118 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071321398 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070299128 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062486435 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067156759 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.06490898 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061641498 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060994396 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06176823 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065160007 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063683744 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061902238 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068951316 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069213269 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074358888 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067086486 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069208065 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059462192 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060216699 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061916432 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059605584 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064792954 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069522795 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075509719 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072118571 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.08101222 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060506041 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069768423 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061683976 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076757977 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073275013 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061154161 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064271787 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059561919 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061384639 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069734905 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071368805 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.073823298 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075812929 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065329877 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064953631 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060317086 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075530189 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.06121648 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069639969 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070327013 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06430984 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060263072 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061412954 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.069639364 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064632196 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.059833975 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.074948642 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.064305135 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.059230868 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.07391282 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060110808 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.070966015 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060274736 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064031333 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065678835 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.061451379 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.069350497 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074855813 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058843376 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.060565431 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07528576 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061347487 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061615227 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069109169 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076015105 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064695369 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.06807148 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071282982 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070122214 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06491196 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.069891374 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060858759 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069444412 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063315393 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.071750801 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060352323 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077206938 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059205347 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.07503564 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060465892 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070681848 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060733592 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069652595 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.060546014 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076559738 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061822092 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060798233 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071432224 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059613174 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069566354 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060116013 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065339804 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067136688 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070429058 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062145597 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069791348 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.314990034 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.074387627 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.070615052 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.073473273 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.074518467 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.069504162 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.064043167 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.074077649 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.077339966 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.074151752 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.066956078 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.067287148 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.065925434 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.075579219 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.066870669 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.066614669 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073464999 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06948863 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.070840074 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06604457 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.066220852 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.066376312 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073177899 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07441966 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082210378 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074353887 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.073788205 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.075433341 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.065018966 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.080552817 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.064337046 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.075491125 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.063032687 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069732046 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.073858246 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.064235567 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083159962 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064976049 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071349022 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078502003 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07457795 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.068850597 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.086186399 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.068490007 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.073856274 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.073422601 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.069507646 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.071746258 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.066460346 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.073389476 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.074453444 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.075521951 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06547865 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.072696257 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.074215424 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065261096 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.072363065 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.066800486 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.074286556 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.06660778 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.063666714 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.069541537 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076599275 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.0694808 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.069879606 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.065110518 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.063595423 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.065032283 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.071683122 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.069595769 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.073284633 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081086475 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.063547074 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.065624225 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.064288061 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.068607163 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083355484 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075043718 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.072813017 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.069438556 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.063491618 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.066269427 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.066267987 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.064629977 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.068300654 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.063360649 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.064487213 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.076027516 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.066620985 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.069077988 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065466837 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.065583154 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.074319949 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.069281565 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.065181455 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.070005031 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063512398 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068972024 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.06256375 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.06436034 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067635344 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061994862 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066509564 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.074847957 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.081488057 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.071427784 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.074178381 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.065581049 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.072468067 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.080475821 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.071461357 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065683408 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.074034534 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.063202209 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.08285091 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072975585 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071577693 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072756734 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.065289667 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.081291869 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.06835712 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.074884112 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.080205134 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065422577 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.070644835 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.063734386 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078208862 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066256357 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061458867 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069510766 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070006712 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.0678959 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.074123155 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.211376033 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071170119 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067752867 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.06653593 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064943428 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063711584 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.071491525 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079255165 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064657481 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.068455079 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.072165648 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072699313 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.068743938 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077103441 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.073125237 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065537812 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.066402236 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.068342682 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.065797955 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.077163575 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064647443 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.068609467 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068280408 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.063793408 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.071132325 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.081568862 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.074171972 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073115248 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062105958 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062067931 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080360545 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06599998 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065936166 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070541479 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072503416 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075081929 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.073063398 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080102352 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063514077 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068371851 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075248179 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064403131 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063883883 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.067709904 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.065545476 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.073824403 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075102157 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.072341469 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066495611 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.071139393 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075987764 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063911121 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067449496 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.06734406 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063025548 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073278306 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070616562 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.074169794 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063755621 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061797446 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.06585591 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071532647 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070001701 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071856375 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06301671 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068757533 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076475947 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070010575 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06572853 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062226143 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065919769 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.071820762 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.067218153 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062308244 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067011061 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066215756 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.069273661 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072039837 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.06715914 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061698668 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.079566222 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070499595 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071881087 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.064367402 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06400789 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062610846 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061869533 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073702178 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062345616 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064498821 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067240132 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063744457 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080031617 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.070520522 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078092011 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063117883 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.06645973 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061534343 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.0720841 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067048496 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.062321697 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072715229 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061467702 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077346488 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074066287 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067486169 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062062379 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.089535957 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.070479976 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077565149 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072129716 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.071010378 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066037139 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071953654 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064022992 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073970138 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062036104 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061061472 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072265366 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071075528 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074499233 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061660287 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072599202 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.063749757 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070301642 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.070000981 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063723757 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06292801 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063438767 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070981616 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066309017 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071140045 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.217118703 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079994259 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064055399 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.074284988 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072658723 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074352037 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076887196 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075137152 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071060327 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063154643 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07085921 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.070690996 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064002523 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06735662 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065935625 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08409961 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.064043341 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063832381 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07653748 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.06910478 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062563762 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068952326 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066453176 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072678782 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06359606 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073505246 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066438001 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063135188 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067687313 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067044333 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062045155 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062218738 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062714344 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072445231 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066682759 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062769261 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081733803 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064018886 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071315319 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073563031 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.06924108 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063824328 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061796793 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063638742 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075295151 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077520705 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065790494 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071002424 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063458002 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.071059772 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060891777 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070986429 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070203951 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070998528 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.06188773 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062484066 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.077081798 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077850091 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.06703947 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071394403 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.071564162 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063978881 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083270902 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071214634 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063135673 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072826884 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064362329 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062137672 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061475801 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063454371 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074102323 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062089528 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.06464521 seconds)
  done (took 43.054775185 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.103341154 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063990218 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063485725 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063783498 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074540588 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064150513 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063454811 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064693105 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063985289 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064677142 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061543824 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065031477 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07220028 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074871872 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072591024 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065964289 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061875805 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062921662 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062280202 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062988878 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072472765 seconds)
  done (took 2.937450524 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.067101454 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066786179 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066873657 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066575316 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066225056 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062120656 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065890416 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062019915 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066300202 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062457861 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066533407 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062170119 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062925932 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.062762458 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062931077 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063920142 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066478529 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06569346 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061954513 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067496651 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065315315 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.068136285 seconds)
  done (took 2.914290926 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.065544073 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.064032307 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.072014923 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062535836 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062644664 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066770409 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062641693 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067623954 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067808762 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.06741356 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.072589863 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.06219638 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061094311 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068223763 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061163294 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062850902 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.104320722 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062571799 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.06235647 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061169619 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.064341783 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071136029 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062125665 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.06177748 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06541375 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064797003 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061478743 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064321979 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062285876 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065822191 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063231369 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061377001 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070752016 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070192395 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066178449 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065834063 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063357276 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062166668 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061472232 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062617372 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071989716 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064793794 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.063108452 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.065979822 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071193539 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061891362 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062337133 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.072298522 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062629816 seconds)
  done (took 4.714244255 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.074078392 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.115743908 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067033756 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095214979 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073837255 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067830412 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067258382 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.096422264 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062904649 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063723431 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075236709 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07547985 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064301412 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065849215 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068591684 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064569219 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065296218 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063657245 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066990385 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063984593 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066724759 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068324265 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073783124 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074791773 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065491319 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063852623 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064523427 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065423693 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074501931 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067660252 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065693712 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066240855 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074766206 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.069836869 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063816405 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.064113791 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075015666 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065019096 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.064233062 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063128022 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064031555 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065844057 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068522591 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075962098 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064498106 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069173358 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064585716 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062293638 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074687884 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064276667 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068162255 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075926888 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06530441 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064720099 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066277246 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074571773 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064311589 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062955237 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065060705 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074393047 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062872417 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06550815 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077786688 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064144191 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067516798 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075872832 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069622986 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065163827 seconds)
  done (took 6.353093491 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072879067 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.097355922 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072789803 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072617962 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072321405 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073669283 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073985698 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073543532 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074257549 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075006871 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074572452 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.115189594 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069378839 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076445048 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071999478 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072584797 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.072098758 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071836795 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07174215 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071854641 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071677162 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072479941 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072112505 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07257342 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074560766 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068765467 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072314336 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072339841 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072769687 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072190067 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.075138861 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071866718 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071963557 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072715909 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07437815 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.072397448 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062595151 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072279046 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072708699 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072358472 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068370908 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072808101 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07282741 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068730094 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072295537 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071712512 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072948599 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074796268 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.079228458 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072867653 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072887396 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07232643 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07176415 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072088513 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072661169 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079348579 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072761244 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072587857 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072481381 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072552275 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072891455 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078906847 seconds)
  done (took 6.104018487 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077292756 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069745791 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.081057372 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.06210083 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061537053 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071242931 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061471466 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.06183746 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069353518 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068676476 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070583725 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071140437 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072960179 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070227581 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071465716 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073237809 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071517057 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070909162 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068481723 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.07072183 seconds)
  done (took 2.916555558 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077988464 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.081712971 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.069019368 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.07267564 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068520403 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.071724123 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.06634488 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066920549 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067680779 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067042453 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072278615 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071861048 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068293863 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070710583 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.072041764 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070966749 seconds)
  done (took 2.647579535 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.066198765 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070421898 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068020228 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063349514 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064547441 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062128949 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062746547 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061639352 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064066741 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.076108407 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062797467 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.0651773 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062981253 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061897228 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062342092 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065449711 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064156383 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062463567 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.06312735 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.067004032 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070679475 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063218147 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065010038 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062378531 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.06498328 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070974944 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064031312 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064864432 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062691096 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065046517 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.065084898 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070002921 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064895753 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063137754 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061590162 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062698413 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.063046698 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.065205227 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065235825 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062832557 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061368631 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.068094669 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064030745 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.06343466 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06428258 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065182735 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064137938 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068512374 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.063242445 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.065162406 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063001265 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064120243 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06340611 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069654941 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065677783 seconds)
  done (took 5.079245103 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080495004 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066460944 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061647277 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061281894 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066761615 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067153641 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066936353 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067342512 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067366297 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061760818 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067438334 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066287977 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067933096 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067471767 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067512374 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067263936 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061589606 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067012357 seconds)
  done (took 2.725075906 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.076274838 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068064565 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.07357629 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067328738 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.066772763 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066043445 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061794087 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062397403 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061928615 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067258957 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066605163 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.06676372 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06169133 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.0662609 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066580974 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066603694 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.066048122 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061712462 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066645953 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061698842 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066071728 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062041274 seconds)
  done (took 2.96640656 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.091524653 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.087734311 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.131606159 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.083044832 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090619029 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073546642 seconds)
  done (took 2.076323023 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.097085454 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.107153591 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066687062 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067164852 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075005426 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069608006 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069591509 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069837958 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07486272 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073721388 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069721712 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074933467 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075172775 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071361607 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074727204 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077207688 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069793017 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07001759 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067160881 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077453313 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069762773 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074857856 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069835199 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070074404 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071004042 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071784592 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077717765 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073616509 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069656164 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07551989 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077546143 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069821505 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074970833 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07399471 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066734273 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075049975 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070220506 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077376344 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0748486 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071646018 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.0665955 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075301938 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07536693 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071234552 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077281145 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069834695 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071431833 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069483533 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070121022 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079880728 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075227534 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071753609 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075565978 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077881207 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077838847 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080124412 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073908697 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071502017 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075252388 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073928037 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071550652 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0753262 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072278963 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074271098 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078095395 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071973208 seconds)
  done (took 6.398812926 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104351664 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068798749 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072050606 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075702427 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073622534 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071895535 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071753165 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072001966 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070396419 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067842241 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105008358 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070470234 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071633375 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071675952 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070349172 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070382687 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069971476 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071909579 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067692038 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079593109 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070132293 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071512636 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072581881 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071702236 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073781293 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077648885 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069695557 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069978411 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072892112 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069633847 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071327123 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070040444 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071242434 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06820691 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072423782 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069697397 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06942286 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071208913 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069673574 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07508534 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072384585 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077741244 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069746911 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070024133 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073696811 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069694203 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069984423 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067583599 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070029681 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067186447 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073489192 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073733975 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073859807 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071317963 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069847151 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070041383 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069657065 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069853121 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070163825 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077446664 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071770894 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070446375 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079847176 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07001766 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069975114 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071587748 seconds)
  done (took 6.335024077 seconds)
done (took 132.370673262 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.220553853 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.191685277 seconds)
  done (took 1.916694884 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.078061394 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.169938007 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075895791 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075813759 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109834003 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.10832204 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076347916 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073220296 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075606966 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073013311 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140246694 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076569054 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073562854 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073295872 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.07317761 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073546317 seconds)
  done (took 2.952824517 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.112178235 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.190350241 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.085387158 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072912066 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.11836233 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.080314041 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.075285394 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078274136 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077986493 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.071317526 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107987633 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.08231657 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074569226 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.07737315 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072931566 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074553207 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075862728 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077195474 seconds)
  done (took 3.138995297 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.101246699 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089291882 seconds)
  done (took 1.729789996 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.167300438 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107704315 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.14590666 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.333008283 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130829578 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.128762663 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.132253947 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.128113783 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.114964964 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.123799942 seconds)
  done (took 3.043302971 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.110695515 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.109045654 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.316324045 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.106613821 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.085145896 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.080477258 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.078333556 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.083356845 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.079088851 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.079100772 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.124945829 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.076156402 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073248864 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124282309 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099292056 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107091897 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071865598 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078526329 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080532981 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071396983 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.077091434 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080051147 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178878118 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078962995 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100136606 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07710059 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.07890562 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075131521 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.077150487 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.08124396 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.082189268 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.101668047 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078781543 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08280054 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077127023 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097640395 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072521045 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098957426 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074627448 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073185174 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075492714 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079396466 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072991529 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078947697 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.076647312 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078168113 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.08226466 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072622425 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.07614693 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075416599 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074160212 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077380169 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076707398 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07858167 seconds)
  done (took 6.407578595 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.111985627 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.107347726 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07181921 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.115013334 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.10640664 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070664019 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105404091 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101037138 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108867095 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070582629 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069941289 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07053762 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076849629 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080046944 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117713114 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108637919 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072122058 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.073713639 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.10876756 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.108460019 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069936047 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102649402 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100797655 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106598283 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069246222 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.07072871 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069476751 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070155946 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074830384 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.076700891 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069716289 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078237337 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.08247459 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076429506 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068939284 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069250976 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070913049 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.078637075 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076418198 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07710206 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075204894 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068940685 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069169917 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070038821 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070383872 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068760752 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075108938 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076325864 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075247757 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069678998 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070389388 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070713352 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072534479 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078698851 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077759752 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.08040747 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079519034 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071993664 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071457831 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.073347769 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080028501 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078467791 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076331347 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07040023 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077566317 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06993223 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078140026 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082289454 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069775361 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07009108 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.07023842 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069359212 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070206837 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075556676 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075190801 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069884759 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069763458 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069447405 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077945576 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075291269 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069727709 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075064542 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068778752 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069560314 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070572326 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069914895 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074836187 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076346478 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070123663 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069376538 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.06920107 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069766306 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069159069 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075018465 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076411313 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076497799 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075733281 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069884327 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075744815 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07525215 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069927809 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075132977 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069786746 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069926724 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070123023 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075396414 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.075151067 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077516604 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06919054 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068810469 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.07467553 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.21400717 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071011293 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.075854457 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081435347 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.078838819 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.071890933 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081646239 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070173791 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077630447 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070726813 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078056264 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070239971 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075519333 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070727617 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069438182 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069550653 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076137833 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071234526 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070018491 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069905493 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070205293 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075992597 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078868624 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070420098 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076031386 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075979658 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070700952 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076200379 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070007525 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077536348 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070595571 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070638822 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069566494 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079224505 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072094533 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071872409 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.072179758 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081324674 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072690219 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079625694 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074831672 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06924597 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079729119 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077692922 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075506534 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078018878 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070693886 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070402781 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069946434 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069730289 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.0748902 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076310645 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070027175 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070082789 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075495176 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077096577 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069646559 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074866761 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076420032 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075535282 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070326668 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.06987417 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078540545 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.317359419 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.078441888 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075146086 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075577563 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06957598 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074836151 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07549176 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069369955 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082092728 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069367782 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079504803 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075508188 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074612545 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075931491 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077067762 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077427494 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078004231 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079953582 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06964169 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069298708 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075714597 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069741839 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069346316 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075348579 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069896759 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069665363 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080137883 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069927105 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077585166 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.06913848 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075968684 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069109991 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070215018 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080434586 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069777642 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069922973 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075517311 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069818117 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075471702 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077835854 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075035066 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069628878 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06995845 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075827846 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076310248 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069076497 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068679786 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069351506 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074661269 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074086934 seconds)
  done (took 18.886323543 seconds)
done (took 39.627919468 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172138628 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116360551 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207413505 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199392789 seconds)
  done (took 2.334964216 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.105247048 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.068116959 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.082835281 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.091478928 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066148973 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.077076937 seconds)
  done (took 2.074580099 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.205835592 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174816504 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240218827 seconds)
  done (took 2.196050878 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.372674475 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.153171112 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.21871488 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.50669545 seconds)
  done (took 2.933225098 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.113834236 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.104917992 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.080906417 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.115719523 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.087474684 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063634213 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.13604714 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.07083887 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100280736 seconds)
  done (took 2.516164403 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.130074948 seconds)
done (took 13.791741761 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.245454415 seconds)
    (2/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.171054217 seconds)
    (3/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.113941882 seconds)
    (4/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.23292262 seconds)
    (5/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.244642179 seconds)
    (6/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.108683905 seconds)
    (7/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.185290286 seconds)
    (8/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.078074252 seconds)
    (9/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077159493 seconds)
    (10/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.221387646 seconds)
    (11/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.080573702 seconds)
    (12/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.225038769 seconds)
    (13/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.079641941 seconds)
    (14/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.079889378 seconds)
    (15/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079102366 seconds)
    (16/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070459067 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.125454145 seconds)
    (18/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.242828147 seconds)
    (19/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.222781085 seconds)
    (20/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.187155199 seconds)
    (21/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066711312 seconds)
    (22/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.157774481 seconds)
    (23/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.077636921 seconds)
    (24/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074817031 seconds)
    (25/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075994759 seconds)
    (26/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.076333213 seconds)
    (27/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.121001749 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.091865529 seconds)
    (29/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.176548171 seconds)
    (30/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.191351266 seconds)
    (31/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.163455779 seconds)
    (32/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.077147774 seconds)
    (33/341) benchmarking ("sort", Float32, false)...
    done (took 0.139186777 seconds)
    (34/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.193988965 seconds)
    (35/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.145014193 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.126827584 seconds)
    (37/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.077269779 seconds)
    (38/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073833574 seconds)
    (39/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.198507229 seconds)
    (40/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.094040988 seconds)
    (41/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.074346331 seconds)
    (42/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.150293293 seconds)
    (43/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.184895499 seconds)
    (44/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.145002874 seconds)
    (45/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.154201764 seconds)
    (46/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.09493268 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.124101861 seconds)
    (48/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086507423 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.077560358 seconds)
    (50/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.200250029 seconds)
    (51/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.150780622 seconds)
    (52/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.148994512 seconds)
    (53/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.080200859 seconds)
    (54/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.248200375 seconds)
    (55/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.200043012 seconds)
    (56/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.239934689 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.087775609 seconds)
    (58/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.153377423 seconds)
    (59/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.074649192 seconds)
    (60/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.068684451 seconds)
    (61/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.14775121 seconds)
    (62/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083551533 seconds)
    (63/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066357775 seconds)
    (64/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.075918185 seconds)
    (65/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.076884554 seconds)
    (66/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.123095336 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123745138 seconds)
    (68/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.066202612 seconds)
    (69/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082321054 seconds)
    (70/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.072735028 seconds)
    (71/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.142137729 seconds)
    (72/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.066019873 seconds)
    (73/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067874689 seconds)
    (74/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.076656814 seconds)
    (75/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080902312 seconds)
    (76/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.066203585 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.073551112 seconds)
    (78/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073502336 seconds)
    (79/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066006977 seconds)
    (80/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.301297964 seconds)
    (81/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.158074197 seconds)
    (82/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.081171604 seconds)
    (83/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.210837252 seconds)
    (84/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072465106 seconds)
    (85/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.147874713 seconds)
    (86/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.197763645 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.114524394 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.08995508 seconds)
    (89/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.071273471 seconds)
    (90/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.145188816 seconds)
    (91/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.066240807 seconds)
    (92/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.074808376 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.135065005 seconds)
    (94/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.184663487 seconds)
    (95/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.175063785 seconds)
    (96/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.142986335 seconds)
    (97/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.070856013 seconds)
    (98/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.071376948 seconds)
    (99/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.081337593 seconds)
    (100/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.069867093 seconds)
    (101/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.070282533 seconds)
    (102/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.069594981 seconds)
    (103/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.069048031 seconds)
    (104/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.076829422 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068790166 seconds)
    (106/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.077975851 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.092316321 seconds)
    (108/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.173873902 seconds)
    (109/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.092507893 seconds)
    (110/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.076381995 seconds)
    (111/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.070849559 seconds)
    (112/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.070247235 seconds)
    (113/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.074849779 seconds)
    (114/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.076690469 seconds)
    (115/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.090600956 seconds)
    (116/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.078777568 seconds)
    (117/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.087872034 seconds)
    (118/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.081024138 seconds)
    (119/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095170288 seconds)
    (120/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.078825262 seconds)
    (121/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.072546872 seconds)
    (122/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.186070275 seconds)
    (123/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.095806542 seconds)
    (124/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.071480242 seconds)
    (125/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.069982028 seconds)
    (126/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.168348791 seconds)
    (127/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.069420656 seconds)
    (128/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.183795627 seconds)
    (129/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.069566725 seconds)
    (130/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.119284077 seconds)
    (131/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.070062647 seconds)
    (132/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.077440662 seconds)
    (133/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.201121889 seconds)
    (134/341) benchmarking ("sort", BigInt, false)...
    done (took 0.273517159 seconds)
    (135/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.177357408 seconds)
    (136/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071341526 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.078263476 seconds)
    (138/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076238746 seconds)
    (139/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.148200045 seconds)
    (140/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.220186573 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.0914739 seconds)
    (142/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.084201864 seconds)
    (143/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.133539318 seconds)
    (144/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.140804821 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.156917242 seconds)
    (146/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.143183978 seconds)
    (147/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074349459 seconds)
    (148/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091388824 seconds)
    (149/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.085212181 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076549432 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.098656752 seconds)
    (152/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.08007247 seconds)
    (153/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.069732945 seconds)
    (154/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.083259265 seconds)
    (155/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066746853 seconds)
    (156/341) benchmarking ("sort", Bool, false)...
    done (took 0.14369693 seconds)
    (157/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.066815571 seconds)
    (158/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.201916863 seconds)
    (159/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066558922 seconds)
    (160/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066493295 seconds)
    (161/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.073834704 seconds)
    (162/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.064871513 seconds)
    (163/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.14258437 seconds)
    (164/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.070008699 seconds)
    (165/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.066063914 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073518557 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076472652 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 0.06741602 seconds)
    (169/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069647944 seconds)
    (170/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.12570415 seconds)
    (171/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074949324 seconds)
    (172/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.075399259 seconds)
    (173/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.194949975 seconds)
    (174/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.155984044 seconds)
    (175/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.080904553 seconds)
    (176/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065570232 seconds)
    (177/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083017088 seconds)
    (178/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070355279 seconds)
    (179/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.08269954 seconds)
    (180/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.065724098 seconds)
    (181/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.075107927 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.090071594 seconds)
    (183/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066766603 seconds)
    (184/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072960356 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065537252 seconds)
    (186/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064353581 seconds)
    (187/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.146883351 seconds)
    (188/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.316114928 seconds)
    (189/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.079422817 seconds)
    (190/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.070406358 seconds)
    (191/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.079385925 seconds)
    (192/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.075168721 seconds)
    (193/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.072578124 seconds)
    (194/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.073031502 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.088615192 seconds)
    (196/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.069603529 seconds)
    (197/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.069794814 seconds)
    (198/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.070361867 seconds)
    (199/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.069708142 seconds)
    (200/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074269854 seconds)
    (201/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.239396447 seconds)
    (202/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.067405275 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147773582 seconds)
    (204/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.065855854 seconds)
    (205/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.164115383 seconds)
    (206/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.220420296 seconds)
    (207/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075942939 seconds)
    (208/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.16673964 seconds)
    (209/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088689553 seconds)
    (210/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.200530594 seconds)
    (211/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.14147923 seconds)
    (212/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.07074746 seconds)
    (213/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.257875005 seconds)
    (214/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.067122344 seconds)
    (215/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085110373 seconds)
    (216/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.07053608 seconds)
    (217/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.06779472 seconds)
    (218/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067870178 seconds)
    (219/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.199090848 seconds)
    (220/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.147794778 seconds)
    (221/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.067190827 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.06585472 seconds)
    (223/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.068445733 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.08268206 seconds)
    (225/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075910897 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066812259 seconds)
    (227/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.067020851 seconds)
    (228/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074568875 seconds)
    (229/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.084296196 seconds)
    (230/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.07705565 seconds)
    (231/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.221451242 seconds)
    (232/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.144467216 seconds)
    (233/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.068065677 seconds)
    (234/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.066360033 seconds)
    (235/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068966041 seconds)
    (236/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.230641284 seconds)
    (237/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.084510779 seconds)
    (238/341) benchmarking ("sort", Float64, false)...
    done (took 0.138502641 seconds)
    (239/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.067062513 seconds)
    (240/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.164980492 seconds)
    (241/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067222139 seconds)
    (242/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.06684753 seconds)
    (243/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.067025156 seconds)
    (244/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.096074431 seconds)
    (245/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.172072012 seconds)
    (246/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.06888664 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.134002481 seconds)
    (248/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075326016 seconds)
    (249/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.066651342 seconds)
    (250/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.077451977 seconds)
    (251/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078816379 seconds)
    (252/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.07734992 seconds)
    (253/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067038109 seconds)
    (254/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067098719 seconds)
    (255/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.068608137 seconds)
    (256/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074179398 seconds)
    (257/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.066941549 seconds)
    (258/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.077497169 seconds)
    (259/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068433949 seconds)
    (260/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.083352387 seconds)
    (261/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073865609 seconds)
    (262/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070396374 seconds)
    (263/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068604281 seconds)
    (264/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065379881 seconds)
    (265/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.067166738 seconds)
    (266/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07491891 seconds)
    (267/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.09590755 seconds)
    (268/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.06634006 seconds)
    (269/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.223451998 seconds)
    (270/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.067792285 seconds)
    (271/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066670728 seconds)
    (272/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066735948 seconds)
    (273/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.066567785 seconds)
    (274/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.066818746 seconds)
    (275/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.068720907 seconds)
    (276/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066094875 seconds)
    (277/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089681291 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.068323193 seconds)
    (279/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.066924968 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.146477496 seconds)
    (281/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066861195 seconds)
    (282/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.067054402 seconds)
    (283/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073783272 seconds)
    (284/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.067113915 seconds)
    (285/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.066188978 seconds)
    (286/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.066696612 seconds)
    (287/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.066023741 seconds)
    (288/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149615707 seconds)
    (289/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066591772 seconds)
    (290/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.06729862 seconds)
    (291/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066500949 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.066374843 seconds)
    (293/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073061154 seconds)
    (294/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.066258403 seconds)
    (295/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.065064542 seconds)
    (296/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.066376692 seconds)
    (297/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.065309431 seconds)
    (298/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081646257 seconds)
    (299/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068229291 seconds)
    (300/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067099441 seconds)
    (301/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066954714 seconds)
    (302/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.066283271 seconds)
    (303/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.064670616 seconds)
    (304/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070466789 seconds)
    (305/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067141764 seconds)
    (306/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.066214146 seconds)
    (307/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.065970194 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084158613 seconds)
    (309/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.171061031 seconds)
    (310/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.247616339 seconds)
    (311/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.084003567 seconds)
    (312/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.068274405 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067991965 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.067876316 seconds)
    (315/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.135971858 seconds)
    (316/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.181688719 seconds)
    (317/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.068084 seconds)
    (318/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.085050321 seconds)
    (319/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.093168686 seconds)
    (320/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.071438544 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079488319 seconds)
    (322/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.08275174 seconds)
    (323/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.070990567 seconds)
    (324/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.06741949 seconds)
    (325/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067862756 seconds)
    (326/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094455351 seconds)
    (327/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.067334267 seconds)
    (328/341) benchmarking ("sort", Int8, false)...
    done (took 0.151749209 seconds)
    (329/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.070490346 seconds)
    (330/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067442261 seconds)
    (331/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067855669 seconds)
    (332/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085138329 seconds)
    (333/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.067069832 seconds)
    (334/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.06636101 seconds)
    (335/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.070638057 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087189039 seconds)
    (337/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078562818 seconds)
    (338/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068973406 seconds)
    (339/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078629537 seconds)
    (340/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.066743953 seconds)
    (341/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.067665895 seconds)
  done (took 37.373324666 seconds)
done (took 38.974352474 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.094494477 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.081747152 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078208276 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075122013 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078970329 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077463858 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078866322 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076667563 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078282665 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.078097517 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077977333 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065799292 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074578008 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081582043 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075795252 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081887059 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079226852 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082369732 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067099464 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081328689 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093203649 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078933059 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075260523 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080924705 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066880566 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075835029 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089992393 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.088600456 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073098489 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076769888 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074906808 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082589829 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074558094 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072957548 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076455975 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072575125 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076056602 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074150784 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089926376 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072472943 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066915081 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078629581 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074084672 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074445511 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075098354 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078226162 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071778574 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.082660384 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066442373 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.07769761 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089067271 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071347991 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073259342 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074719051 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.072181015 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075491713 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073963836 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.08013927 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.074071463 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.080330429 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.080840435 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.077416933 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068972935 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077871908 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.076042093 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.076645482 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067647404 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074341367 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068823402 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068408627 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067641096 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077512265 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07637828 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.07391186 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067820784 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068448711 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.068019281 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.080919138 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.075265959 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.078740152 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.069135253 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.073971834 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073891664 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068667031 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072126365 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078410369 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065523373 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066757167 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065349921 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080739835 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072890619 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066989403 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078018642 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070883104 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071184987 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066010196 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.06530265 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071134276 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074453107 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066437994 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065587042 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071412371 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071286483 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075435109 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067128431 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071549785 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071830141 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065424739 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075127439 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073841261 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075229863 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078983258 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075407062 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077843088 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066419504 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065356028 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075750317 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066783296 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071306948 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074066465 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071639664 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074254151 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.067051616 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065760211 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071129034 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072942709 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066563664 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.06670372 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066458149 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075513583 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073562991 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06506954 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066116074 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.07486525 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074755911 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065373025 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065175749 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075967768 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066210928 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072011545 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071512417 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074636658 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065234102 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.06574619 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.211691549 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066593488 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065992036 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072459475 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071534174 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.066957654 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075022015 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.07288857 seconds)
done (took 13.052176846 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.069878919 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107216098 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074009392 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082767925 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078686196 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068208551 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070874955 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083044694 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070857429 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086607527 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095158986 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.089380262 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.09394955 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.06578675 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067204472 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068445997 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.06577679 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075032528 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081591646 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090169388 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.09566502 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066826367 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.076553194 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084082917 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077981196 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083685738 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067978928 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068618153 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069710614 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.125205903 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092490835 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.067089555 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067990697 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080283044 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081486598 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074142844 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067644726 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07117638 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067948372 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067180169 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068635576 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081264748 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.07097232 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071253623 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068494207 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068370141 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067866967 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070242543 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.0803601 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070285965 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07466523 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078502949 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068727382 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.070358465 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065313363 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070880223 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067227552 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068028155 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.06752755 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067114836 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067467055 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.070078388 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068620096 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067813078 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.07024482 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069712782 seconds)
  done (took 6.617928465 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.085442463 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.094720821 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.08364658 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.084500065 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067540616 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067601264 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067847303 seconds)
  done (took 2.252400683 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.069730217 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076305255 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.081785445 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.083283935 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.091515059 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.078236151 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067487528 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099595987 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.067148979 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076153396 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.082961458 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081595644 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070786315 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079698216 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067796727 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079647514 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.06831372 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074718643 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075275934 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.081252135 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071713097 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097815556 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081151712 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068278171 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081111871 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075287702 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069821662 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.06811115 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06827113 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067611908 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067484536 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089730342 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.07426526 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079453701 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068195854 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066853019 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071982306 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068160876 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071750402 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076083398 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.070827277 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067437526 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067912876 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067509646 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068306498 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071949204 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068771298 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067487679 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067067795 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07473143 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066552694 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073953787 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.06987735 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072396534 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072511916 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071931591 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074873187 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067931731 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075112686 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07390405 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067235165 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080030514 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079078187 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071537962 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078854882 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.07613855 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073952226 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071635531 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067322808 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066874285 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068232899 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078960593 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070875307 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.06964334 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068626729 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072432413 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071574045 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.08306278 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.08272322 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080934579 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.06994179 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.06760175 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071694 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.083536108 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072430141 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067389468 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068554671 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067353123 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072838447 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067825401 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072337463 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067832446 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074494057 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069961559 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069796852 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075308008 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067938104 seconds)
  done (took 8.818204258 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.072424097 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069662279 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068827183 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068832691 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069182518 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.0690311 seconds)
  done (took 2.151547302 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.094111271 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.06885489 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.08059588 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068244454 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.09037716 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074861054 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074851188 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069974999 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084262684 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078663594 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074637483 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077396794 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074464152 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069547877 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074317149 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06948189 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073899701 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070909937 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078341539 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070358375 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081285424 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.06976434 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069980105 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080141469 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071374474 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069524669 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069485079 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078151168 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.07812127 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069859337 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069651848 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.07147356 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076331412 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069400302 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074573269 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07934305 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068214236 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073297033 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070766604 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.071534542 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.077236896 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069993894 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070365647 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073563851 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069524655 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076057274 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.07392952 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07160264 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074016797 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073097024 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073266966 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068260787 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.071123156 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.07323532 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078120247 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070987416 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073671322 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.075768474 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.072054754 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078107571 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.070191136 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073511125 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071389186 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.073266493 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.07549683 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.076044595 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.079393737 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070736187 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069834039 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067955991 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073162818 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068217534 seconds)
  done (took 7.016381686 seconds)
done (took 28.545471837 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.554699322 seconds)
  done (took 2.233094231 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.593801632 seconds)
  done (took 2.314573562 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.429583796 seconds)
  done (took 10.152412592 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.301730738 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.318427354 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.733866785 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.132581906 seconds)
  done (took 3.234529805 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.749137353 seconds)
  done (took 2.456932556 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.233214816 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.219045057 seconds)
  done (took 2.18928076 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.341175551 seconds)
  done (took 2.063717267 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.135977967 seconds)
  done (took 2.855515451 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.234011233 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164300877 seconds)
  done (took 2.126574809 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.54967537 seconds)
  done (took 2.275229716 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.267072186 seconds)
  done (took 5.996331397 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.239786091 seconds)
  done (took 2.00423185 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.233918529 seconds)
  done (took 1.965573181 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.056561606 seconds)
  done (took 3.781380487 seconds)
done (took 47.382633476 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086156315 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087159124 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086906586 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082500024 seconds)
  done (took 2.043814642 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076995252 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.072027612 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074934463 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075495304 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.07388663 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073670606 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073907972 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070260766 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072691349 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071231682 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069490936 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071276453 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.074176297 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071543277 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073528833 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074994393 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071081071 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071032864 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073586931 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.070753133 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073852558 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071244945 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069033399 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070511091 seconds)
  done (took 3.469218156 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.081615489 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.075591396 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.079251412 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.07414204 seconds)
  done (took 2.046609436 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.080049153 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.079630252 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.089320125 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.094377516 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.080438431 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.080571532 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.087511661 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.088508179 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.069096846 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.091479862 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.070927334 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067730594 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068541966 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086480563 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.083900263 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063935914 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064775672 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07812559 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077183323 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080856762 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069564173 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066702158 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.07853518 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077894993 seconds)
  done (took 3.613341278 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082358799 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067992373 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082083453 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.094186158 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.094649165 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066307246 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079637568 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093457295 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12841108 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066149291 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072444387 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.06684617 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104926568 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066271076 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081725187 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109578514 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112212668 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070195795 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099317816 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066385259 seconds)
  done (took 3.456408267 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07915513 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.072753372 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.073763357 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.068434826 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.080257551 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.076701236 seconds)
  done (took 2.200539925 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.071665984 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.071135366 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.069679821 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.075343099 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.071381749 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.071485116 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.070100663 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.069674327 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.069188609 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.070039784 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.069967284 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.070438027 seconds)
  done (took 2.590583961 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.1596487 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.073208805 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070783475 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067238703 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071660667 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.070526824 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082231094 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069006098 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085156239 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068013862 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068230973 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070843976 seconds)
  done (took 2.699055022 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104514517 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104132705 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150039838 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118869346 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117074672 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097407994 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120010188 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095769663 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160716447 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137594183 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11733989 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094139622 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087927863 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.07019311 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101257182 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101732046 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137357618 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07381738 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114218025 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.164566918 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114735982 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.113359126 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122541525 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11736414 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081650831 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122028165 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095629877 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103201857 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124659111 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10970798 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119440346 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098223323 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.07230779 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071852981 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150423174 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101298016 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107506982 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.09370614 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100502358 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089114879 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10812776 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.071162679 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.088596115 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.10750292 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085282786 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11679878 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088854191 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103959269 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081618049 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132039817 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106763036 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099337858 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086030159 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104275924 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129845547 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095867891 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110803463 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107338237 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083180069 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.118295325 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.099871576 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.253928129 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097084003 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084499108 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.165356452 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094353715 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.116836649 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11747356 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.085269335 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091415753 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106890489 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136811409 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111900646 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.111213471 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117239413 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09615623 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111330104 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.092932224 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129538003 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094393015 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073938749 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.10569258 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129636291 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086099997 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100509322 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130892337 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093160126 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07849648 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.092916192 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118932105 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081681104 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.096722167 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070645203 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098321695 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107792936 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098201099 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112865176 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107381828 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079044408 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125581282 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109866559 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073645119 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117226596 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099467414 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15271289 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096403448 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077110007 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100012792 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09379244 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148384674 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086181932 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08093976 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099053141 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140894067 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094844182 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.169876397 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096588907 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129659993 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09910541 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089103427 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076272896 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.09057011 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101897737 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10733785 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101853195 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089013754 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077392983 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086392528 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.255493777 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096206875 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085423877 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118262183 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.105760534 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.078526871 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090688595 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077796535 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127539343 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078761175 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10971175 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12607186 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080051712 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106580607 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099153613 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108717103 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098309795 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107863563 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141393709 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117621733 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080511343 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085212742 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108694237 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.147117508 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114228976 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08601104 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077763478 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10114443 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110905513 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098292784 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107321699 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100659267 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109378051 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098264091 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141992888 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118275888 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09183417 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095998189 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097023224 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124455597 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0779518 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156504832 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094987537 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118785376 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085998289 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14160257 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115117764 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090965582 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086070084 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096371223 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105529994 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106377034 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144245359 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096796313 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073040215 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094115981 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132180405 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077160195 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101191998 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090804409 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093830162 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118729796 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084389795 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081929866 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069020968 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101055523 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135304025 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070519304 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.277079155 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.119613012 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109254652 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.109072672 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.072666049 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104124508 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143655252 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107492405 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141472949 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11787062 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101703564 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11963135 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100381773 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106720543 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080598428 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.127085779 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136170696 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097379943 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091399677 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135582569 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119164137 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136497581 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097017187 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11588256 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106132239 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102083843 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104556647 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.103463265 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149502708 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125440869 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.128677689 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088198466 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108071172 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109637546 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137301971 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083076105 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117629401 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.075951029 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112447964 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078838431 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108652242 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080083875 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.113371843 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080404165 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100910632 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070127482 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074824413 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142052176 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.112600794 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090329446 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08709259 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137508038 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132421079 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081577702 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102393396 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104392076 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101343772 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10254981 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108261326 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085152748 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095247703 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.274206526 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081444733 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.08587469 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103678762 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098749722 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112308452 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08824644 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078610612 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138734223 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105947319 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096488804 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078864235 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096238038 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122874086 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091005064 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091968255 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109241034 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108267922 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145634798 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.094516176 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.102364577 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120625692 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082979319 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096021501 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.07272109 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088665527 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.079543627 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.114489238 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079781384 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11351609 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.072763473 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135471529 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09114301 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097152794 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107183125 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101842657 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133164446 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096428604 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133111194 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094645386 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106199057 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112455648 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098811168 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083766981 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106840021 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098347118 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113496738 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.100146029 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110128289 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112462816 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096911883 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14572035 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090990506 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12154676 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106709685 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10807163 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104738359 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116892133 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13774163 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112844808 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113390477 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075913437 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084054599 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105902621 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100965384 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145230647 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101788973 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072780746 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086822705 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090850435 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09543042 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103579708 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081654623 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139134376 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085936554 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086970609 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110846532 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.088602229 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09680731 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07566916 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094254508 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.099343696 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093262563 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094149334 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105948467 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115639029 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110856026 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129816749 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.097873377 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092085254 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.116929443 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108515341 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108150785 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08507156 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085230023 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120938027 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100459721 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125695859 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.098316013 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097538333 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100121995 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088846333 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097071912 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093697586 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.106664725 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078449441 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075170731 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.068190967 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.07124125 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.114806406 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105170407 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096629678 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096505035 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.07193046 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105052999 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10152662 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074026726 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089369051 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093807208 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097461102 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.082495077 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090250457 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.112731922 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089929781 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101102761 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097539612 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125503362 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.098122283 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08755803 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138430502 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125974195 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086029979 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092687483 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073875182 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080807091 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101101124 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13619632 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113001724 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.075595132 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.365818101 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.084220776 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094519349 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.079187481 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.094751151 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.096130503 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112314425 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100804522 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.120028811 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109715401 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081642893 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110411359 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104470427 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097959271 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102881499 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109527228 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110745845 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.13174872 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10585743 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102356303 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082194695 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.08658851 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081304156 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084564718 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108644821 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.083003665 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081473209 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134442159 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.093233867 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106906831 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110745489 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086945737 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077265121 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134222406 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.07099842 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135581786 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.07278133 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083746424 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082529792 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08054977 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095077448 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106441825 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097549535 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115778034 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110333665 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109591426 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114735499 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156893969 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072645295 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145900695 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077862385 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077111897 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079940002 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113616831 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091718922 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106936691 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142086718 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091890945 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094341826 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078397215 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130285225 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.100775209 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106145918 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084175231 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083079913 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134208053 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084622145 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.075899748 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092549706 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114354434 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.075378771 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106972215 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.255378054 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083338627 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118826771 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.635840343 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095044982 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.079646488 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093443607 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.146293261 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130402116 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084890524 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110403176 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120197413 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091103834 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085491105 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109228886 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.181931532 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075262816 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095603323 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.10481931 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099503056 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093844376 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093004984 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086865668 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093236509 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087211163 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080941176 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108976631 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089393757 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092728693 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099546139 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084317569 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081844517 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131966572 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105842205 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083498547 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091948153 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105825305 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092045402 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096082477 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.073712173 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119128139 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096083288 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105907201 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095417618 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113153489 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123873744 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090131226 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113083621 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089654535 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11040005 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086492264 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079419125 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102861438 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079247283 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078821234 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117748771 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085179836 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.092866052 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10527403 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096181301 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11488776 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117978588 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111496268 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098637083 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0795893 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086831439 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.089938202 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076982829 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079712635 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075623807 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077510375 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108561718 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085632362 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083781281 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114144261 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082321146 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102799216 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.099104903 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10804149 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085866033 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103257524 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110092589 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091493209 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102791899 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099305041 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.126683311 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143710717 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098043168 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.122010639 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131693525 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076589981 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075203808 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.069047906 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113403834 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079055714 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.080581239 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080853657 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129852082 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081292473 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094372727 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.230697617 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079998935 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.080837441 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094641735 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069690367 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082492556 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105924791 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083832544 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079737391 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097408184 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082917274 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115141213 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108525618 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088297945 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082133563 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080026175 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092512821 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103972138 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126408339 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089247263 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.074840654 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104359551 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102906098 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123862067 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.075498428 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083080814 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12815261 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091127701 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101956759 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079614143 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118014169 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.130629901 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0892259 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130752704 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071082849 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082745755 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087959596 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124239613 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074170571 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086898834 seconds)
  done (took 65.321404894 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.163288458 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.146349581 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.085604467 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101538305 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.192726858 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.202624063 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.123902118 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.099933443 seconds)
  done (took 3.206292577 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.073559301 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.086985145 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.084927544 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.215884257 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.112280051 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.070690483 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.075908846 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.08570643 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.069793757 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.069579187 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.105153746 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.06972869 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069707426 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.374581733 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.068629098 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.07402992 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.069735009 seconds)
  done (took 3.705988942 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.334247995 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.404516096 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.224923738 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.638519933 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.140994833 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.487121467 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077618877 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083827679 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.631161994 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371700629 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.134321262 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088715624 seconds)
  done (took 18.561118521 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.080985528 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.08146497 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.08131648 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.077655313 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.077298961 seconds)
  done (took 2.413918682 seconds)
done (took 117.082973562 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.088352552 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.175966901 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.069918929 seconds)
  done (took 2.226283522 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.086225896 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.083722826 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.083608841 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.081432773 seconds)
  done (took 2.281668812 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.079023272 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.079278952 seconds)
  done (took 2.101432676 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227309864 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.179837146 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092641525 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.086753314 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.083963388 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082529001 seconds)
  done (took 2.21052476 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.0768546 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.074076333 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074264406 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.075284286 seconds)
  done (took 2.24359299 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.072881528 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.069129699 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070906994 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.073220198 seconds)
  done (took 2.231546526 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.089916239 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085898503 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.11509128 seconds)
  done (took 2.238069112 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.087625677 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085677695 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.081261262 seconds)
  done (took 2.198071995 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.113711182 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.099451386 seconds)
  done (took 2.150766264 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.085138961 seconds)
  done (took 2.027492603 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.094874773 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.100321808 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.143317043 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.109706871 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.143227679 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.128253422 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079325333 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.080227903 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075792585 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07448008 seconds)
  done (took 2.967657579 seconds)
done (took 27.413037789 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.083631137 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.37626963 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.362751135 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089981613 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.677160676 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.359578472 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.001583115 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093403032 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102630778 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070319585 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087540264 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.653244479 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.994124008 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.33195874 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.979335426 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.332329674 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653524482 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071281167 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070240784 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070780778 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.982590212 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070206378 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.07068741 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071320969 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.65305831 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.377277648 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071688207 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.332791614 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070487551 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072713023 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358772258 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071182153 seconds)
  done (took 16.579061897 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07493132 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125773883 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074891958 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086150328 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072843877 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072114214 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073726348 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070984855 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113285323 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071469022 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087620071 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069974275 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.074165439 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.072236519 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09106761 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070480072 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071754766 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071387945 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071000591 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071578858 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089301094 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070063851 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071011729 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071265707 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070829662 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084133288 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071574209 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070202928 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070313724 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072686721 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073859826 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071521167 seconds)
  done (took 4.443037435 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.129220193 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129329525 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075863528 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.112298767 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.121033209 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072479176 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.154253088 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.094224443 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116451771 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.07062673 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.088003696 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070402206 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.106502137 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071636533 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090544282 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070746622 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071899546 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070932038 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070376974 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071032744 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089879493 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070273231 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070882162 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071385813 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071034569 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085288184 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071455416 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070510895 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070613882 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07261562 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07481092 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072547775 seconds)
  done (took 4.719781385 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.074539326 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.074141701 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.08220197 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.084564359 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068936863 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.0714692 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072451267 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068544399 seconds)
  done (took 2.570919722 seconds)
done (took 30.274471552 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.084810473 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.071114491 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.074611903 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.093370244 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.077038229 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072480073 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067625477 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.078762879 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.076049522 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.076612659 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.077777209 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.07146868 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07527967 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.070076103 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07641913 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068433986 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.075596374 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072770141 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.0731431 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.075054259 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.071368749 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074205981 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.07775884 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.07379951 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.073686718 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.073615001 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077901354 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074792144 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.069006674 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071470481 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070274778 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082681586 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074362311 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.075284742 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068679084 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068573317 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072735807 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070474504 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074609387 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077867702 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070409589 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077307152 seconds)
  done (took 5.062530484 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.093795576 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.096260068 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088466961 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.085057353 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.109874398 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.084569057 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.093498218 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081670716 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.080520226 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.092083442 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.076086632 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081368 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083133133 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077294474 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080901579 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.077438249 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082587686 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.076012695 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.081171523 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.081074544 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092893742 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.074208053 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081510086 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082252978 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075902683 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081991491 seconds)
  done (took 4.171549975 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.078287399 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.092462942 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.095042481 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.148604382 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.113276125 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.085551943 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084648552 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.100489619 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.104053738 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070228245 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.074169036 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096606815 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09914396 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077430501 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.10906153 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088419443 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.08273483 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.072689116 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076542467 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105218203 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.09332729 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088757971 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.10288892 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090451867 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069426653 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079448707 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076467727 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084982579 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077933963 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082473699 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074563258 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073983235 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.071424788 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082878368 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.074407022 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.068243108 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092809404 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082598436 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085950146 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.108944022 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080375543 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.072128783 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.100580344 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13721235 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069756858 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072794327 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.07454215 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082980659 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.074735477 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100994078 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088671119 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.070097809 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.089042937 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071584294 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.071770162 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08652249 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071728236 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071839267 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082790095 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.076067992 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091358113 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075885696 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091182769 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069653196 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081508134 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071636802 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.072119484 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068788144 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.10694611 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077524998 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.122671973 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071210651 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068394332 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082370729 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081399488 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076872946 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.070119988 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089324509 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.082633073 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073668221 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081606695 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072959077 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072924185 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.106482517 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068951562 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067979272 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.068028334 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071993489 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.073272435 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.07047091 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082913105 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.06944105 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072957239 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085086932 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.070139798 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070429829 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072460175 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070921877 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069524674 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080665609 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073690956 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071886162 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.082409897 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071291098 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073502496 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.085345092 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079379705 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069724489 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.071250019 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072260633 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071566586 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074715394 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073228981 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071643772 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07702752 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077233639 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.07516742 seconds)
  done (took 11.53889013 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.168074943 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.156927241 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071569799 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.152260942 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.080906921 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.074515665 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.153337542 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.090055347 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.071091317 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.072001268 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069786725 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.098555943 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.094369452 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105682885 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074851918 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071492895 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096204571 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.104594205 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.155389537 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.149474829 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.09434414 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078608883 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073010028 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.072038042 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072329256 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079816672 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086982724 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078852491 seconds)
  done (took 4.77103551 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.078917084 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.086091925 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.075032929 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094669023 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089040132 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070938626 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072607997 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.072639992 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.090372194 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.077937541 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070575975 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074533919 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074100585 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071395191 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071478694 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077030658 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076752927 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068961947 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074054152 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07536349 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080943287 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095689804 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.075021006 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070576539 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072939913 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070482009 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076695303 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080029279 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070736725 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.10084186 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067805428 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075069506 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.085209684 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071608335 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070289715 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071040111 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070987839 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.07081716 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.07096018 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.069167347 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.069927219 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.076988817 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069712102 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076548739 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.085255152 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.078161774 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.072247724 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.073458741 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073402204 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.068220609 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073664853 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073783602 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.073077761 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078698334 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074629248 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073255397 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071716523 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100150688 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076796893 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069915744 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069662614 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068510056 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.075310841 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077503635 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087172244 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071935199 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068886284 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070605386 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075115977 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084779666 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.07004799 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.076036671 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067557091 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070905805 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072845143 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072993676 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071948004 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068691445 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070136333 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.07045052 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070770454 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070258386 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069599035 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073198537 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068195287 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.069017968 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070974358 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071987545 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076751722 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069555584 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073132621 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072464736 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069330121 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073629691 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075689429 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073411581 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090393974 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079607443 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.071471354 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068155514 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.08497157 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072527367 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.0696954 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075855786 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074708289 seconds)
  done (took 9.875327456 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.096492615 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071769245 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090892001 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098205409 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081648953 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.076468226 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.085112119 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071330577 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08763112 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.070019358 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079605411 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069019878 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084143478 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079695616 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072073159 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080920457 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073129585 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091443598 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085730842 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069301849 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079409396 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082712289 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083470686 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.08882073 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087837572 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089138586 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082989162 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073471462 seconds)
  done (took 4.30861733 seconds)
done (took 41.696399636 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.069577808 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.223442743 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.049740506 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.270869448 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.10420561 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.163358783 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.15936872 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.050600233 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.222737597 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.06359607 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.357458094 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.461525012 seconds)
done (took 70.245008923 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.083448213 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.191852705 seconds)
    (2/2) benchmarking "String"...
    done (took 2.259454229 seconds)
  done (took 6.422319281 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.645920243 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.045251591 seconds)
    (3/3) benchmarking "different"...
    done (took 2.090991314 seconds)
  done (took 8.750049384 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.16853647 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.106007026 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.295700902 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.03986239 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.04758908 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.433188044 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.843337523 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.499058142 seconds)
  done (took 33.237931549 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.374902472 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.291405783 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.800806321 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.813662428 seconds)
  done (took 17.296840327 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.65277264 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.275135488 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.307072442 seconds)
    (4/4) benchmarking "different"...
    done (took 2.298419524 seconds)
  done (took 11.559407379 seconds)
done (took 89.588097183 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.031293453 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.076687541 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.037136766 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.166289307 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.126070366 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.076640064 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.061893215 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.088076034 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.029077179 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.033171068 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.498847981 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.042401804 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.041924338 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.074116084 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.044509566 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.108157071 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.713066339 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.058331469 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.049510414 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.594194341 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.549072219 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.049517647 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.051425068 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.101491175 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.112584632 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.073861489 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.587638181 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.05050634 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.669308858 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.068177581 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.045827194 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.050204922 seconds)
  done (took 213.316926025 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.046261205 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.136072748 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.167605935 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.076481626 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.541298969 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.243818302 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.19638406 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.588014937 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.050872375 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.067493361 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.358977356 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.043372695 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.374565801 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.036955424 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.041776455 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.08765998 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.312822483 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.337093965 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.045345226 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.233211421 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.052207031 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.189702278 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.156723712 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.317785973 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.07719153 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.055928556 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.056484833 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.06871783 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.237168651 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.30117481 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.068814616 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.084002573 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.234417723 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.910690521 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.051888045 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.05370529 seconds)
  done (took 180.877326016 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.221941273 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.055612124 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.108689836 seconds)
    (3/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.042136634 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.181790737 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.810287564 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.783138099 seconds)
    (7/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.047989687 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.044491 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.045086247 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.045207297 seconds)
    (11/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.051654956 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.047581853 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.114720134 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.941058134 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.28437075 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.053523314 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.051668597 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.55875006 seconds)
    (19/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.045339992 seconds)
    (20/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.050327215 seconds)
    (21/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.04698554 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.044774477 seconds)
    (23/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.121480117 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.42135021 seconds)
    (25/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.262940333 seconds)
    (26/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.046175566 seconds)
    (27/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.062555228 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.180330349 seconds)
    (29/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.05888512 seconds)
    (30/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.049207014 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.185788759 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.051607795 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.130239758 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.184595525 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.057801268 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.128952075 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.054379305 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.538048946 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.045861802 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.047914371 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.050853374 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.116231496 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.048209752 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.161933987 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.141153387 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.05138634 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.059636357 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.127196266 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.739862326 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.054619696 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.056872798 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.050315645 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.053512117 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.054121755 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.063586043 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.04818533 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.076256323 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.704040326 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.049989865 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.049305056 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.053468499 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.046747064 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.049475581 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.056479159 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.090951143 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.864186857 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.254668327 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.440175546 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.863801244 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.055869058 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.007155376 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.106543841 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.055179171 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.132663034 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.050267493 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.050962384 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.049848016 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.049034428 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.191966256 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.15134764 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.053376817 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.1851794 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.052096552 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.050089159 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.442941158 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.396429336 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.053510125 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.065373746 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.111080347 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.050885262 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.05039578 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.057643941 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.155833969 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.050707592 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.050062444 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.052753883 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.157425771 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.054252572 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.394101092 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.273180721 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.123366538 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.302995086 seconds)
    (103/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.049373838 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.057043872 seconds)
    (105/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.285139553 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.049052452 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.065922093 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.055115373 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.053904759 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.060897802 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.054172955 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.054660681 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.05171856 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.052977342 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.050878205 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.05289805 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.067421092 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.054742612 seconds)
  done (took 442.755760826 seconds)
done (took 841.181607712 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.664355542 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.75731184 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.650957024 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.674962566 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.648505561 seconds)
  done (took 15.378830279 seconds)
done (took 17.363505361 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.081894515 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.063605047 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.054368748 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.085730131 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.075054583 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.06572325 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.096842386 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.09693977 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.083225978 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.063580366 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.101488077 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.069533803 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.08573378 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.087402592 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.130131891 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.094841435 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.07125197 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.065095063 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.097016308 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.055951361 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.065404503 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.063728055 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.067169105 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.102330198 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.138602014 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.074993984 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.0659627 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.103120637 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.072193502 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.103543851 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.124082771 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.091621073 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.10508819 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.130615709 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.113886588 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.134361473 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.078220737 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.123827435 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.075065073 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.145397699 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.113295845 seconds)
  done (took 87.697022567 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.064529479 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.199447089 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.29787127 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.097168349 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.064574418 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.298122713 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.124318493 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.197632058 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.199601951 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.289399967 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.312800627 seconds)
  done (took 26.133392808 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.062807898 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.198609483 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.276072555 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.098639749 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.069296318 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.280161116 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.13033264 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.193426643 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.199326511 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.286614682 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.299377444 seconds)
  done (took 26.088693124 seconds)
done (took 141.905626706 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.430854914 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.088979557 seconds)
  done (took 6.507361973 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.060673566 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.087600838 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.215891038 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.06184087 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.062623835 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.063938492 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.061152295 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.065883417 seconds)
  done (took 18.664864783 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.064617254 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.062720609 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.063929298 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.064063908 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.065325474 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.063266945 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.066076911 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.059891459 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.063716115 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.064552857 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.06601542 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.063983687 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.066743834 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.063020812 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.062233402 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.064682486 seconds)
  done (took 35.016518257 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.063809163 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.066909283 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.066415793 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.064531916 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.063662318 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.063838983 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.067340724 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.064268458 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.062349188 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.066269705 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.063167538 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.064597641 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.065078102 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.065901496 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.067024535 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.064615744 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.06670108 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.068091224 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.064101409 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.065563887 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.066045404 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.068842357 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.069926213 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.067107638 seconds)
  done (took 51.562927149 seconds)
done (took 113.756318424 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.227023927 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.593226654 seconds)
  done (took 8.813766178 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.070565747 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.066938415 seconds)
  done (took 6.186692118 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.067785823 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.0674797 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.068601484 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.067448557 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.064989939 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.067672965 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.067647661 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.069045243 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.066211466 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.066237045 seconds)
  done (took 22.664452025 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.068618841 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.069136041 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.065698106 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.068706395 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.069329424 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.06791215 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.068062478 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.069617507 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.067643878 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.067470451 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.068945684 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.068171407 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.068595929 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.066553922 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.068894192 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.066972154 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.068121899 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.069378439 seconds)
  done (took 39.218544122 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.067151513 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.067095731 seconds)
  done (took 6.126777385 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.069504299 seconds)
    (2/7) benchmarking "second"...
    done (took 2.06986624 seconds)
    (3/7) benchmarking "month"...
    done (took 2.066894164 seconds)
    (4/7) benchmarking "year"...
    done (took 2.069032388 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.067980593 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.069490519 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.067862112 seconds)
  done (took 16.471868157 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.068140299 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.216597456 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.273531387 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.672353338 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.070957303 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.070745073 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.934220487 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.069055236 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.072946705 seconds)
  done (took 22.441736637 seconds)
done (took 123.917865223 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.909249217 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.067426983 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.287767186 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.132578415 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.133361313 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.361649745 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.087439434 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.791280347 seconds)
done (took 44.771722894 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.131547516 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.065832633 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.094601515 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.094340706 seconds)
  done (took 23.249424945 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.06590175 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.404152199 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.08009614 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.010897217 seconds)
  done (took 23.572085814 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.449199717 seconds)
    (2/2) benchmarking "read"...
    done (took 2.417916294 seconds)
  done (took 6.865679665 seconds)
done (took 62.822036818 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.066852457 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.067934096 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.068408132 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.067088149 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.067344348 seconds)
    (6/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.069122124 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.068752849 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.06980511 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.068942631 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.069850496 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.070844569 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.068133116 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.068099441 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.068002796 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.06758192 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.07026617 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.069275679 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.068681053 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.066849361 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.068240056 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.069349971 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.068279593 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.067031195 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.069528803 seconds)
  done (took 51.641862709 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.069238363 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.068745781 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.068679935 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.069907836 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.06963156 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.071960811 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.07209121 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.070541361 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.069799912 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.070093053 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.07017482 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.068802048 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.071573346 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.068324987 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.068076682 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.068435039 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.071103584 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.068548952 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.069033558 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.071028401 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.070670966 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.073688683 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.07112922 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.070456551 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.07039496 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.06903729 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.070642597 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.072401684 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.069849549 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.070087821 seconds)
  done (took 64.102187076 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.073033271 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.070999387 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.069680153 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.070661471 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.070688345 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.069878084 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.071732109 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.073507177 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.071876007 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.07633943 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.071374167 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.073349687 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.072260709 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.073311016 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.071233818 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.07116962 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.07424744 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.074752822 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.072883681 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.070998681 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.071348081 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.07364446 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.074552961 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.07341565 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.074080156 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.073310121 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.073149912 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.075042694 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.073033948 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.074424557 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.070914039 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.074090499 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.0735228 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.073066495 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.075424698 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.074522583 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.07497643 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.072632594 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.073494978 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.073345421 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.074952567 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.073943237 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.075159852 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.077070208 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.075056388 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.074978361 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.072808465 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.072756884 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.0733497 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.074069046 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.076196017 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.066348001 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.073545635 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.075904619 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.075645335 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.07497129 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.075529793 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.073977714 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.075032582 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.064274732 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.053450555 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.076053188 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.076330247 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.074611821 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.073550472 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.075627105 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.074736938 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.077228415 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.07721563 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.077229961 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.07784205 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.074373065 seconds)
  done (took 151.282546384 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.074887765 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.075381364 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.076206893 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.073100531 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.075000958 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.076641611 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.075920498 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.078134286 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.079850205 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.074893071 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.078529903 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.077748932 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.07811291 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.080640565 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.078563972 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.075152663 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.078466343 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.077301354 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.075516878 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.077371923 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.075578528 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.079446006 seconds)
  done (took 47.694166667 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.075761112 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.075335432 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.074522458 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.077495312 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.075332225 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.071764663 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.077829455 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.076086902 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.078094648 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.079723522 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.076900269 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.079118529 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.078167919 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.079180791 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.077434751 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.077294628 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.076695734 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.076623108 seconds)
  done (took 39.386532282 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.077117302 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.079797396 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.077967769 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.079436985 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.077654459 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.078036232 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.081744648 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.077139496 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.077841339 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.078885926 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.078843888 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.077904698 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.077133843 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.078909348 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.079678446 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.08005209 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.079983136 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.080969782 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.082276078 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.080845422 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.079415998 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.081227332 seconds)
  done (took 47.744037301 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.079110714 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.079282668 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.078337487 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.078676757 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.079385462 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.079836908 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.080396572 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.079818875 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.079302947 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.080246856 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.08136558 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.08127813 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.079938376 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.080237691 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.081236884 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.07959543 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.077751618 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.08067961 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.078157951 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.079558462 seconds)
  done (took 43.597960527 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.078703149 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.077912807 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.079748655 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.079700749 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.07784883 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.077346994 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.080321719 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.079265466 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.078092086 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.078919738 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.078855437 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.079873456 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.07975845 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.079691037 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.078975471 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.078407289 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.080242878 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.080860251 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.080717093 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.081398928 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.081320069 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.081475021 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.081076239 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.081522283 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.078472172 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.078808649 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.082083897 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.083179162 seconds)
  done (took 60.243282588 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.082343725 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.083086236 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.082744287 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.083083963 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.084205908 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.082983402 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.083796376 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.083347519 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.080106857 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.08376717 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.083552499 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.083505506 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.082564059 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.082556481 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.084008125 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.08316143 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.082621726 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.083206084 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.085520641 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.085254062 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.084712486 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.083075934 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.083609187 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.082679619 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.084165349 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.084282442 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.084207149 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.087755857 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.086024204 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.082823946 seconds)
  done (took 64.517808558 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.102077708 seconds)
    (2/2) benchmarking "in"...
    done (took 2.105628434 seconds)
  done (took 6.21738878 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.084697266 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.085893596 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.085763576 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.085060943 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.085553717 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.084661093 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.085052828 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.086432665 seconds)
  done (took 18.693553073 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.086858399 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.085631168 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.085699543 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.08428993 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.083440426 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.092459964 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.08621155 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.084901124 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.087165505 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.085973204 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.088123188 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.087987711 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.094232378 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.088494812 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.085834441 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.084466894 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.087047063 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.088771762 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.086782189 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.085046563 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.088063443 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.086194403 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.085577703 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.083517024 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.087528394 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.060622757 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.096390612 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.086804906 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.087716382 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.087004595 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.090388752 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.083032658 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.086821315 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.088388301 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.083923847 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.088438826 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.092080199 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.085221173 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.086671677 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.088439812 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.086865492 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.088829209 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.089850197 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.094375819 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.088339942 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.087021859 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.089680399 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.088548053 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.087163825 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.092575238 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.098044051 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.08797289 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.088675201 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.089553386 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.088555033 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.088716808 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.087971122 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.091134926 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.096791021 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.09346352 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.091874969 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.112798434 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.098190311 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.085801079 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.087291614 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.099726868 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.116929036 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.088286339 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.090681211 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.089020166 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.095693736 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.093878811 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.088245538 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.091494115 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.102806931 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.099058459 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.087544503 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.091290652 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.090315861 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.089055673 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.090470866 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.08824839 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.08781772 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.088747486 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.097954329 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.118971862 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.085722426 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.091208322 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.091516599 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.090713472 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.09434606 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.093193589 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.088643347 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.090197128 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.088889583 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.092182213 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.09096389 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.090687672 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.087991065 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.099752174 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.090881994 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.092325085 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.094634408 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.100081601 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.089865232 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.090520134 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.090093535 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.091036428 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.098386856 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.088650422 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.089707249 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.089120751 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.091249396 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.094206101 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.091080127 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.093703127 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.101589312 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.099235458 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.091803369 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.094212228 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.095477259 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.093086829 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.101984174 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.116123965 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.090756034 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.093014005 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.094851345 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.106405397 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.094630238 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.09242681 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.094562293 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.093971233 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.092400481 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.09348531 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.092551007 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.090087569 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.092941112 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.090484151 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.091986832 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.09112839 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.096210097 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.093284524 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.092761701 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.091827369 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.094748893 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.091708771 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.095952359 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.100719215 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.093100359 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.095218471 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.095587003 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.094498291 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.094960582 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.092647362 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.093451914 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.093596055 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.091181858 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.093080768 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.09334339 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.095368771 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.09545055 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.092428693 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.099553245 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.092248434 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.093991012 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.09337023 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.092787141 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.092072823 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.094931567 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.09358968 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.095863204 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.094268952 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.100365858 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.096156199 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.095020854 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.093633145 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.094382301 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.092841217 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.098490884 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.109957621 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.098588276 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.107720379 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.095331551 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.10384489 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.096090968 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.098613893 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.094917676 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.094178301 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.093213485 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.09578626 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.094992875 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.099718495 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.120179393 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.108763862 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.096402584 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.098015286 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.10115596 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.102325663 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.100996102 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.096674664 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.095877573 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.097675511 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.093995865 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.09531287 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.096703103 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.099782886 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.095334102 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.097619228 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.100931313 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.097078819 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.098501686 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.096315386 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.097576818 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.096517774 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.096541818 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.097189922 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.097028631 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.099470709 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.104371161 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.09928051 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.100005507 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.096642845 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.099638256 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.097047323 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.100966432 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.097626643 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.099504772 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.09616266 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.097942829 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.104115164 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.098125565 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.096864586 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.096474567 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.099797421 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.097923608 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.099805509 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.102232601 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.110876207 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.100386055 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.099715519 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.10482259 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.09942671 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.099150083 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.097564426 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.100613373 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.097500989 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.099900222 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.09884665 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.102936127 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.105014694 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.100414469 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.099447078 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.102878268 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.101822517 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.101226001 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.101512672 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.099676226 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.103048969 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.109393675 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.104084907 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.097964389 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.104099433 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.100075714 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.100482001 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.104729417 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.100670149 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.116692267 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.112896424 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.103070553 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.102800616 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.103537718 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.104727241 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.102250277 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.097749401 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.10717479 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.101910614 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.099759242 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.107620549 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.100135621 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.100190278 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.107250128 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.104340355 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.103044477 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.099698887 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.100371971 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.102575636 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.100580551 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.102326672 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.099705441 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.101631016 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.106486485 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.104915385 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.101745389 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.102158061 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.111010379 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.104153997 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.103153532 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.106986521 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.103468297 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.099153496 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.101227649 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.102200998 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.102784701 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.100077281 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.101829333 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.10246568 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.100450955 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.106381864 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.11719813 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.10508206 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.112357116 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.104124519 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.112578577 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.076953364 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.090390571 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.101284649 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.108593017 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.11255443 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.100970708 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.100700356 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.112457087 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.102342342 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.101674306 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.105193811 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.104227057 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.101725494 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.098386775 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.101799309 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.109933398 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.103886623 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.103089127 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.103265217 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.103121564 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.101258518 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.106892503 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.106392061 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.101598514 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.103239515 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.104469485 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.101706527 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.102656164 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.105239328 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.102178595 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.104813476 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.103157329 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.110987526 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.104824564 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.105723628 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.109491385 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.104703541 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.112776689 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.106361485 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.103093353 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.104483097 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.106530968 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.107564438 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.106774998 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.103742037 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.108057061 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.107102322 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.106269633 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.117952949 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.113970251 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.108976178 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.107988092 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.104860151 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.105839927 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.116395182 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.135311064 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.106774896 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.107769667 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.112196341 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.114740737 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.111045244 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.113512526 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.108803852 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.119226206 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.107182719 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.106702353 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.111795294 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.120814855 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.104073703 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.108553489 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.110199508 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.111202597 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.111981011 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.110707357 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.110442131 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.110626797 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.110563862 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.121122997 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.109849565 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.1090627 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.108599781 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.10886334 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.10653605 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.109379011 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.112054168 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.110442285 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.108616633 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.108146534 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.11216635 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.115470845 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.106547131 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.116240732 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.123080162 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.106909704 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.108793244 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.111357962 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.108790785 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.111501013 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.109064553 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.106443882 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.109143819 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.109977366 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.109690852 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.112682845 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.120218898 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.109888624 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.110899534 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.110607642 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.112945905 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.110969275 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.108515563 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.111065009 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.118407654 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.114294278 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.123497764 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.119866199 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.107469552 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.111600678 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.118481397 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.120708167 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.108466811 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.111342835 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.109006605 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.110901291 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.113653056 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.110530784 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.111808938 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.111365704 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.11648404 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.109730358 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.111893434 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.111514449 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.110166828 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.114126401 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.114529441 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.117509352 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.114875338 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.112866374 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.109503153 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.110923305 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.11462632 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.113561637 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.112665846 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.111056864 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.11317848 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.112831901 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.115739745 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.111714637 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.114156838 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.113763348 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.113371414 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.115408553 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.111947829 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.112210593 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.112942386 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.11556537 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.119627576 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.112151862 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.113586161 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.114342666 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.115802229 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.110399331 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.110861941 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.079171924 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.117451078 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.118952122 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.115541694 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.111681039 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.112568895 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.113532676 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.117590253 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.114267617 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.115894492 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.112767392 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.113081153 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.112796313 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.117969174 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.109328493 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.115384767 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.11829332 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.12564536 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.117748026 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.116416994 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.11441679 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.115397222 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.112567112 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.111436604 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.119589091 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.114024196 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.115845824 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.114061613 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.114407177 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.112442453 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.115421244 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.115305767 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.116104774 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.120025798 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.125630655 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.124692688 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.115621906 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.116201063 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.113993133 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.11789924 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.128734909 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.113065373 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.111701693 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.110992779 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.112537257 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.115664692 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.124092957 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.121032057 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.118318437 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.111275066 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.122846614 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.137781221 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.116393051 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.123171083 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.150998586 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.111869788 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.111709122 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.111029593 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.113971614 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.11266953 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.117578346 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.113442716 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.121715659 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.115896145 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.113402798 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.122672602 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.115465129 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.115614671 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.119367329 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.108760759 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.115937083 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.106083132 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.112870461 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.110908724 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.106523691 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.104072332 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.106852565 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.106460659 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.109370064 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.105616044 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.107081049 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.105145823 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.104145802 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.114898197 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.105610054 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.108021403 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.608082361 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.119216342 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.105422533 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.106259512 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.105493142 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.108932742 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.109478942 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.106629175 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.1087678 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.115535629 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.110212452 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.115082478 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.106741433 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.106343484 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.107696394 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.106528918 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.105600977 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.118993113 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.117991065 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.107088672 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.105837176 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.112780039 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.106596499 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.113535544 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.112574269 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.105966508 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.107404551 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.105567329 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.106842827 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.107813573 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.110163154 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.11136998 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.116611289 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.107614521 seconds)
  done (took 1256.078973606 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.109176514 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.106634874 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.106865697 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.109374792 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.109361323 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.107694821 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.105872713 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.106268751 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.105104492 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.107447438 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.103261594 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.104857485 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.103553359 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.104019462 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.10645429 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.105525208 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.105312992 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.106219461 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.108877143 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.103865205 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.104782348 seconds)
  done (took 46.264357305 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.104726547 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.105697899 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.104506405 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.104048397 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.103937595 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.107222804 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.10614567 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.104005898 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.104885207 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.104394483 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.10303876 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.103147014 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.103095042 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.10458086 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.103918936 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.104413909 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.102865 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.104054656 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.104508365 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.104609113 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.104309012 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.10522232 seconds)
  done (took 48.325126971 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.104073362 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.103665866 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.107076263 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.103887595 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.106122443 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.102224806 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.106258828 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.106192098 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.10578227 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.105626852 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.113861654 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.118760232 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.106659226 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.106203777 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.105308037 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.104393678 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.256039067 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.104872975 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.104910183 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.105328128 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.103518929 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.112120038 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.104485191 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.106806193 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.10315512 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.106081779 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.108663952 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.106047878 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.109200699 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.105954206 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.114717808 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.107383121 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.105612888 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.109291739 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.105717501 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.107089819 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.109652693 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.105725409 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.107379103 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.10783599 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.122242369 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.140033469 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.109416395 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.107766768 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.116042006 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.10966588 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.109332953 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.110457326 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.120443217 seconds)
  done (took 105.498420755 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.108090035 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.107121274 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.107896465 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.107627983 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.110624045 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.101031909 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.100836676 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.100447653 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.10343612 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.107306338 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.103189116 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.102149638 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.100932966 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.104674988 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.106195636 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.101482012 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.104304179 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.102324453 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.104293014 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.103667306 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.100367953 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.101834859 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.103078532 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.108271758 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.102540463 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.101187169 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.100858527 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.100947758 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.10426065 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.102704971 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.100619648 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.100164369 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.100561426 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.104097895 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.09937977 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.100394468 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.100643792 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.099692718 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.102147979 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.101197287 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.099223469 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.098589872 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.100382771 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.09932629 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.099671979 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.100102754 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.099184881 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.099514923 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.100023405 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.099443037 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.099317122 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.099442392 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.102232131 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.098481109 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.085774477 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.098206527 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.097503332 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.101904983 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.098116269 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.098103774 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.098092606 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.100813334 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.096457726 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.098006895 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.095399244 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.098479258 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.099183265 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.09528234 seconds)
  done (took 144.917173039 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.094372302 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.094014464 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.094386324 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.093431699 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.094175065 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.094253088 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.095308036 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.097080423 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.093905371 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.094106566 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.094504664 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.100161979 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.093924534 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.095689393 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.094067024 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.094390645 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.096462437 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.094219916 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.09336913 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.094120994 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.09250617 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.095329336 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.092698349 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.092418005 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.091969366 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.092933809 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.097403454 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.09271751 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.09171965 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.091867281 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.092505502 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.088430524 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.086385289 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.0858888 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.087632779 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.088610479 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.08547504 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.085167427 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.085722576 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.086174886 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.085305476 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.083764919 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.084156812 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.084270755 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.081413904 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.08451059 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.081059069 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.082028928 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.08506002 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.081681419 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.08226951 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.082776149 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.080717057 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.082143385 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.080417418 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.087043477 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.081341842 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.080963465 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.080997279 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.082997274 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.080276844 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.082046064 seconds)
  done (took 131.538092048 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.08307343 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.085315545 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.0814811 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.081856179 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.083057121 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.081837358 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.084464783 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.082075804 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.08084133 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.082832062 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.082024496 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.085549299 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.081968851 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.082262722 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.080926214 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.082196663 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.082959643 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.081532208 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.0825242 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.082430844 seconds)
  done (took 43.65708087 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.081683835 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.08138801 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.080022153 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.083040123 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.08146138 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.074388004 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.079736345 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.079618746 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.081541109 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.083420407 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.082848741 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.082223141 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.071828288 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.08184545 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.084292844 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.08098488 seconds)
  done (took 35.298407525 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.081644918 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.082955056 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.081778865 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.078527975 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.082457755 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.081036915 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.08075739 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.085613564 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.080647976 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.080355716 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.081094322 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.082233005 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.078936163 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.078261776 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.079397378 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.080742171 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.080848107 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.078446734 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.078897117 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.077035673 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.07985479 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.080840118 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.078525068 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.07829646 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.07829152 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.079368344 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.08082777 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.078206364 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.080914703 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.078802038 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.078573091 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.080407411 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.078806958 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.079688128 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.076701295 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.080157513 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.079753 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.080004271 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.07920716 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.078518846 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.079544714 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.07998734 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.079868376 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.079478357 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.078181609 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.082842661 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.079891638 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.081772356 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.080809942 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.080001408 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.085581945 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.080370282 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.081885307 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.083369451 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.080862009 seconds)
  done (took 116.417995209 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.080133305 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.080521119 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.081140511 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.08117142 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.080776261 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.079494513 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.080149177 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.081091538 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.083411086 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.078934796 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.079832873 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.080228225 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.080164699 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.082407029 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.080957251 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.079834909 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.080411997 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.079925444 seconds)
  done (took 39.458156018 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.08024482 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.080445223 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.080942512 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.079809361 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.08200389 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.081320268 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.080572383 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.081195587 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.081243298 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.085870889 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.081368642 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.081625008 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.081263403 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.083096837 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.082023134 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.080683885 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.081373909 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.081611512 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.084273264 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.081893634 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.081786233 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.081843187 seconds)
  done (took 47.803909408 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.081172463 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.078872725 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.092173567 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.096914361 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.097458749 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.108601184 seconds)
  done (took 14.559839525 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.081032603 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.083081215 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.08075482 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.080804967 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.081690156 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.081884129 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.082011425 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.081841889 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.081591 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.082858607 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.082465282 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.082498336 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.075429664 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.064311086 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.082302111 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08236643 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.081914444 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.082948937 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.083577769 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.083057066 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.083551082 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.083518546 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.083329625 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.083682478 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.081578834 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.083414853 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08428188 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.083777566 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.082923332 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.082571192 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.083893752 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.083370068 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.083177556 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.084033959 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.083041551 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.083103827 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.086022036 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08566734 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.084471811 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.084395414 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.084895299 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087392134 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.083951881 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08443381 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.084705335 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.083522584 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.08716769 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.084986046 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.084045667 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.084669908 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.083865796 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088388864 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.085654382 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.085169833 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.085162492 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.08570758 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.086289226 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.084800361 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.082336156 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.076706365 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.089267745 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.085793279 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.086983869 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.086775154 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.085422858 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090658898 seconds)
  done (took 139.51939236 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.086674581 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.084977037 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087224751 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.089267008 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.087026612 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087125545 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087193653 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.086938156 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088365371 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.087153705 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.086654349 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087827713 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08731432 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089821625 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.08670047 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.087753489 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08770967 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.089881351 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.086652288 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.087871995 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.087651796 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088179971 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.090580138 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.086790836 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087925671 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.087825102 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087410764 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.087805746 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.086967365 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.087701185 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.086938143 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.087448954 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.092818913 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.08775745 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087066405 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.088405093 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091978148 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088202519 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.087976528 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088089437 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.087886945 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.08786383 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088659075 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089122364 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088234873 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088362302 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090743645 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089269838 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.08871032 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.088783268 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.090439448 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090667186 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089796496 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090378207 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.088510692 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089641742 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089686458 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088433957 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089804274 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089557013 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.09183282 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.088739177 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089985034 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.08877516 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.09071997 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.092146011 seconds)
  done (took 139.852855254 seconds)
done (took 2906.31920814 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.109998307 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.167572466 seconds)
  done (took 16.289987481 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.254236284 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.138118225 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.277571818 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.208101948 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.092247362 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.096910365 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.093283104 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.094057466 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.184570261 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.094885213 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.126652812 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.09421893 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.093190279 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.095456192 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.092431198 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.093530198 seconds)
  done (took 56.156024817 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.098659158 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.098714907 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.097935793 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.095664973 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.109502192 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.177079991 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.120251407 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.100939597 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.112005818 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.127599998 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.116856813 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.101192563 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.105534086 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.102960679 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.188963854 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.143652049 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.154775725 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.171961814 seconds)
  done (took 40.242204856 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.177146596 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.10570822 seconds)
  done (took 11.305737263 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.100496393 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.092130763 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.111158677 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.098870158 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.113875134 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.127048636 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.101729161 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.103306968 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.115539428 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.114578471 seconds)
  done (took 73.09853741 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.096878447 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.095773375 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.350750365 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.102376392 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.103770666 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.122685859 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.096974373 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.127392453 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.100518884 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.091420642 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.104976 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.358162532 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.10880797 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.095514945 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.515488651 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.106432543 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.100417597 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.128427322 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.130332158 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.099265466 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.102024996 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.10156621 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.25846597 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.785492394 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.10105633 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.101840938 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.104050277 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.097509774 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.096897067 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.096927149 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.09886007 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.09744382 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.102571824 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.095710127 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.104198245 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.100942226 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.601371729 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.118049221 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.106064492 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.194614923 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.142709041 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.101784873 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.9406251 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.100547123 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.098638006 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.105458422 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.782181275 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.183228902 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.099118721 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.278741802 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.431967232 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.112099324 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.265340375 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.256265674 seconds)
  done (took 145.420648147 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.095632732 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.331805231 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.249113785 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.097034007 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.341289566 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.305822336 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.096612277 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.142642844 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.099240448 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.297422108 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.348239776 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.198728916 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.097660281 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.096861675 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.095356546 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.095708429 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.243863155 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.162716845 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.096861397 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.095929031 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.121317202 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.29746149 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.216902293 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.099906271 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.122448296 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.285146479 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.218293536 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.198478383 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.862294939 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.096298346 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.158427226 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.097740271 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.095155819 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.096460481 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.250054773 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.189879343 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.17986187 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.099748183 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.097012696 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.097647745 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.771613274 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.298840774 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.191306738 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.219451531 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.344678556 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.311182817 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.710176815 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.096930599 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.723826593 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.264023774 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.302222247 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.308876156 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.215644773 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.102134636 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.668031463 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.097963467 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.098187824 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.31896783 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.34298279 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.197038419 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.101848011 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.096631978 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.097728948 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.335266038 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.101892791 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.189661315 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.104546043 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.099064053 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.191136644 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.20149425 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.338642619 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.319340787 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.128028482 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.427685906 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.590749459 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.302007718 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.163374095 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.321100958 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.103465489 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.098178447 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.165147994 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.937563495 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.350739003 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.340999193 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.296596722 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.160726267 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.746261599 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.097944253 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.288485768 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.287489139 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.329199258 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.348413726 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.329799064 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.458614704 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.104044208 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.095114921 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.390138566 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.213304401 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.053000309 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.454029042 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.334425566 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.612705153 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.124792748 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.426720442 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.228923931 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.103209227 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.752602056 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.101453066 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.30735857 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.134971942 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.097464373 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.101262606 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.291307702 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.999956497 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.096710504 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.056990297 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.157831852 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.102597417 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.300132067 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.104623988 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.341234396 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.103304167 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.332219755 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.723175668 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.132536872 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.323755039 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.342599353 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.732817045 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.337789851 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.340489265 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.212370551 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.369951034 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.102494092 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.102306378 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.361893013 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.101969499 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.098220528 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.265620112 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.099503511 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.27586567 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.104547711 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.365049662 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.119745614 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.327456317 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.104732452 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.340584994 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.132583253 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.146481966 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.104852785 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.228515578 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.099524008 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.949391262 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.247871728 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.103703671 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.106670592 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.842226878 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.099726055 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.253329206 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.325408355 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.127753017 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.169696214 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.67027733 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.095509955 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.186450257 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.125604989 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.732820852 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.105074285 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.3495344 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.083042324 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.585657068 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.104187655 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.326373087 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.33473712 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.108082771 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.103825382 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.943848689 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.102745675 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.103442808 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.258655068 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.533185573 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.022814572 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.297909333 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.104273871 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.230526644 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.109665078 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.182001641 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.450041896 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.106333277 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.103328085 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.104306861 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.101967927 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.105671207 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.364606227 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.131275422 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.537312871 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.240721494 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.356279719 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.410457373 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.301831774 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.145941302 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.109252215 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.327531376 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.109035101 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.164959787 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.108349208 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.126635724 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.33505286 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.096910004 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.311580196 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.340719769 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.996925381 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.151999836 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.107944067 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.105895203 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.086132291 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.258042133 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.192671946 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.107060373 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.106311664 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.218869675 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.226103904 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.28877127 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.942626185 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.232343982 seconds)
  done (took 953.589567455 seconds)
done (took 1298.122709253 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.104964507 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.109214321 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.113698599 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.109190987 seconds)
  done (took 30.466728044 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.105207335 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.108930894 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.11527001 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.11016559 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.108025731 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.108994998 seconds)
  done (took 14.68740233 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.107117287 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.108714669 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.109416104 seconds)
  done (took 23.354045804 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.530724586 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.509893807 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.186837157 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.249973447 seconds)
  done (took 11.508092744 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.113424688 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.109142604 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.110218263 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.114234328 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.11452033 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.112809855 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.109756858 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.114867347 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.111089125 seconds)
  done (took 21.047979177 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.350847065 seconds)
done (took 107.453917285 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.139378004 seconds)
    (2/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.25126251 seconds)
    (3/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.641659685 seconds)
    (4/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.655574965 seconds)
    (5/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.417846899 seconds)
    (6/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.128510826 seconds)
    (7/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.046124021 seconds)
    (8/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.343581612 seconds)
    (9/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.129189304 seconds)
    (10/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.110970194 seconds)
    (11/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 8.840996328 seconds)
    (12/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.15159075 seconds)
    (13/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.126594673 seconds)
    (14/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.190482494 seconds)
    (15/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.126103597 seconds)
    (16/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.169370021 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.236132355 seconds)
    (18/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.840820242 seconds)
    (19/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.502132268 seconds)
    (20/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.262713815 seconds)
    (21/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.518025075 seconds)
    (22/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.108879932 seconds)
    (23/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.288410893 seconds)
    (24/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.123525529 seconds)
    (25/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.120966297 seconds)
    (26/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.112746297 seconds)
    (27/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.123078221 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.486667343 seconds)
    (29/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.207158986 seconds)
    (30/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.230370891 seconds)
    (31/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.398525977 seconds)
    (32/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.505793729 seconds)
    (33/341) benchmarking ("sort", Float32, false)...
    done (took 5.753551504 seconds)
    (34/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.249260431 seconds)
    (35/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.249818773 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.558812801 seconds)
    (37/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.601826713 seconds)
    (38/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.48206031 seconds)
    (39/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.127723419 seconds)
    (40/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.14945896 seconds)
    (41/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.203603171 seconds)
    (42/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.347858481 seconds)
    (43/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.749726823 seconds)
    (44/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.276259255 seconds)
    (45/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.130005546 seconds)
    (46/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.126012649 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 4.503456149 seconds)
    (48/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.553276865 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.208405228 seconds)
    (50/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.397446361 seconds)
    (51/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.128960855 seconds)
    (52/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.4680954 seconds)
    (53/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.783755814 seconds)
    (54/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.524424478 seconds)
    (55/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.902993455 seconds)
    (56/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.512715204 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.14505785 seconds)
    (58/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.131860448 seconds)
    (59/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.22606327 seconds)
    (60/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.016871097 seconds)
    (61/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.388853161 seconds)
    (62/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.491085522 seconds)
    (63/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.455517515 seconds)
    (64/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.242790196 seconds)
    (65/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.835525918 seconds)
    (66/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.229710387 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.987122635 seconds)
    (68/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.358558719 seconds)
    (69/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.93527028 seconds)
    (70/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.14015668 seconds)
    (71/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.209079676 seconds)
    (72/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.338743207 seconds)
    (73/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.718357859 seconds)
    (74/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.135239613 seconds)
    (75/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.65999343 seconds)
    (76/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.440043482 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.146841303 seconds)
    (78/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.139452504 seconds)
    (79/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.125674946 seconds)
    (80/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.357955349 seconds)
    (81/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.132457332 seconds)
    (82/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.280753063 seconds)
    (83/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.338065588 seconds)
    (84/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.189629887 seconds)
    (85/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.588830108 seconds)
    (86/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.12985808 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.25068741 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.417773748 seconds)
    (89/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.197552961 seconds)
    (90/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.358577423 seconds)
    (91/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.212788761 seconds)
    (92/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.253176626 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.251074038 seconds)
    (94/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.245753625 seconds)
    (95/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.566504576 seconds)
    (96/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.20953002 seconds)
    (97/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.130981798 seconds)
    (98/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 4.654137383 seconds)
    (99/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.271452334 seconds)
    (100/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.616584531 seconds)
    (101/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.129371903 seconds)
    (102/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.322175638 seconds)
    (103/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.916229388 seconds)
    (104/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.142035337 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.479006011 seconds)
    (106/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.889775564 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.646316945 seconds)
    (108/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.113638007 seconds)
    (109/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.4827546 seconds)
    (110/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.391417657 seconds)
    (111/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.13117577 seconds)
    (112/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.548010466 seconds)
    (113/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.208581734 seconds)
    (114/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.372817109 seconds)
    (115/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.062219764 seconds)
    (116/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.16400245 seconds)
    (117/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.828175691 seconds)
    (118/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.133839233 seconds)
    (119/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.280203351 seconds)
    (120/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.543856301 seconds)
    (121/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.40651825 seconds)
    (122/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.290894116 seconds)
    (123/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.212422548 seconds)
    (124/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.222829733 seconds)
    (125/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.551077402 seconds)
    (126/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.418201844 seconds)
    (127/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.82455219 seconds)
    (128/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.128380623 seconds)
    (129/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.550456101 seconds)
    (130/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.260621683 seconds)
    (131/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.372370978 seconds)
    (132/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.906500555 seconds)
    (133/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.441699345 seconds)
    (134/341) benchmarking ("sort", BigInt, false)...
    done (took 7.134888485 seconds)
    (135/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.072204612 seconds)
    (136/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.233898902 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.148119178 seconds)
    (138/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.150602281 seconds)
    (139/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.387278627 seconds)
    (140/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.444927752 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.909912764 seconds)
    (142/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.274488896 seconds)
    (143/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.142252593 seconds)
    (144/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.255965275 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.162277386 seconds)
    (146/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.38923778 seconds)
    (147/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.228826419 seconds)
    (148/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.881380068 seconds)
    (149/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.350469761 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.3973241 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.153684155 seconds)
    (152/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.133507946 seconds)
    (153/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.2060674 seconds)
    (154/341) benchmarking ("perf_countequals", "Bool")...
    done (took 3.87761535 seconds)
    (155/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.248336883 seconds)
    (156/341) benchmarking ("sort", Bool, false)...
    done (took 2.35467267 seconds)
    (157/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.13843849 seconds)
    (158/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.402192607 seconds)
    (159/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.776055119 seconds)
    (160/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.249504758 seconds)
    (161/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.236236332 seconds)
    (162/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.213121594 seconds)
    (163/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.240064278 seconds)
    (164/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.539940915 seconds)
    (165/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.347650536 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.152547472 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.14996964 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 5.76027555 seconds)
    (169/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.201488643 seconds)
    (170/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.13436521 seconds)
    (171/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.203475494 seconds)
    (172/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.147931194 seconds)
    (173/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.975431696 seconds)
    (174/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.904188415 seconds)
    (175/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.403309486 seconds)
    (176/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.343306112 seconds)
    (177/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.266956012 seconds)
    (178/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.277338145 seconds)
    (179/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.23877152 seconds)
    (180/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.360770786 seconds)
    (181/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.150750229 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.805331203 seconds)
    (183/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.145629782 seconds)
    (184/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.238089836 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.520102864 seconds)
    (186/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.290538851 seconds)
    (187/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.160186184 seconds)
    (188/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.098991415 seconds)
    (189/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.274699183 seconds)
    (190/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.248319945 seconds)
    (191/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.151793807 seconds)
    (192/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.221576525 seconds)
    (193/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.402779388 seconds)
    (194/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.418752028 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.136064243 seconds)
    (196/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.431014987 seconds)
    (197/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.459575875 seconds)
    (198/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.142019361 seconds)
    (199/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 8.684341648 seconds)
    (200/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.181571149 seconds)
    (201/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.135675535 seconds)
    (202/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 3.752652044 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.133333077 seconds)
    (204/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.248935561 seconds)
    (205/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.328854678 seconds)
    (206/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.325080527 seconds)
    (207/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.161371604 seconds)
    (208/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.222441737 seconds)
    (209/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.157667949 seconds)
    (210/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.545330699 seconds)
    (211/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.237630886 seconds)
    (212/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.509056675 seconds)
    (213/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.138743198 seconds)
    (214/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.347184337 seconds)
    (215/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.040007781 seconds)
    (216/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.430561081 seconds)
    (217/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.540954444 seconds)
    (218/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.28920071 seconds)
    (219/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.457147874 seconds)
    (220/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.139000256 seconds)
    (221/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.281000313 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.164103834 seconds)
    (223/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.138548987 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.532821461 seconds)
    (225/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.147829385 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.395744293 seconds)
    (227/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.339757489 seconds)
    (228/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.288912607 seconds)
    (229/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.24268536 seconds)
    (230/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.156945051 seconds)
    (231/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.135149619 seconds)
    (232/341) benchmarking ("map", abs, Int64, false)...
    done (took 3.999004413 seconds)
    (233/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.524283141 seconds)
    (234/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.561519711 seconds)
    (235/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.363988082 seconds)
    (236/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.464229201 seconds)
    (237/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.342701694 seconds)
    (238/341) benchmarking ("sort", Float64, false)...
    done (took 5.87561494 seconds)
    (239/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.612560195 seconds)
    (240/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.24921595 seconds)
    (241/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.367814339 seconds)
    (242/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.270525965 seconds)
    (243/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.546887646 seconds)
    (244/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.138298725 seconds)
    (245/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.202408733 seconds)
    (246/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.052631601 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.276733234 seconds)
    (248/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.151968556 seconds)
    (249/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.285143277 seconds)
    (250/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.142915752 seconds)
    (251/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.945751141 seconds)
    (252/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.436890722 seconds)
    (253/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.470771795 seconds)
    (254/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.465223028 seconds)
    (255/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.146152076 seconds)
    (256/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.161073979 seconds)
    (257/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.335469018 seconds)
    (258/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.985014437 seconds)
    (259/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.287820096 seconds)
    (260/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 4.208291832 seconds)
    (261/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.162541448 seconds)
    (262/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.215742472 seconds)
    (263/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.142679234 seconds)
    (264/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 3.581613752 seconds)
    (265/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.456877316 seconds)
    (266/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.159013657 seconds)
    (267/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.735718498 seconds)
    (268/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.563101313 seconds)
    (269/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.140654258 seconds)
    (270/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.344532421 seconds)
    (271/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.590807045 seconds)
    (272/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.462315502 seconds)
    (273/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.436298396 seconds)
    (274/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.424215942 seconds)
    (275/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.787085645 seconds)
    (276/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.276206462 seconds)
    (277/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.019079444 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.543634844 seconds)
    (279/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.159232071 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.164567306 seconds)
    (281/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.336451285 seconds)
    (282/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.324494122 seconds)
    (283/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.265635653 seconds)
    (284/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.218365129 seconds)
    (285/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.579092686 seconds)
    (286/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.329918895 seconds)
    (287/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.472502852 seconds)
    (288/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.145952735 seconds)
    (289/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.487044899 seconds)
    (290/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.921137956 seconds)
    (291/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.403109256 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.487024399 seconds)
    (293/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.154841867 seconds)
    (294/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.217824766 seconds)
    (295/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.228137961 seconds)
    (296/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.251609878 seconds)
    (297/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.150998233 seconds)
    (298/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.603795848 seconds)
    (299/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.222137924 seconds)
    (300/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.452488815 seconds)
    (301/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.145667133 seconds)
    (302/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.234043199 seconds)
    (303/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.301265879 seconds)
    (304/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.16024319 seconds)
    (305/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.277706986 seconds)
    (306/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.661759791 seconds)
    (307/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.426777051 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.289451412 seconds)
    (309/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.142490951 seconds)
    (310/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.225267214 seconds)
    (311/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.038048997 seconds)
    (312/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.449219485 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.457083286 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.46709609 seconds)
    (315/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.249992473 seconds)
    (316/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.143086741 seconds)
    (317/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.276094617 seconds)
    (318/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.393661385 seconds)
    (319/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.743937582 seconds)
    (320/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.233671835 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.083136869 seconds)
    (322/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.958761137 seconds)
    (323/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.238240054 seconds)
    (324/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.468387956 seconds)
    (325/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.532632386 seconds)
    (326/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.183568773 seconds)
    (327/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.452619517 seconds)
    (328/341) benchmarking ("sort", Int8, false)...
    done (took 5.106132591 seconds)
    (329/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.202798688 seconds)
    (330/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.626132903 seconds)
    (331/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.151241254 seconds)
    (332/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.051539909 seconds)
    (333/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.526832311 seconds)
    (334/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.28015546 seconds)
    (335/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.613991088 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.319150235 seconds)
    (337/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.621982564 seconds)
    (338/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.540154538 seconds)
    (339/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.80368996 seconds)
    (340/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.469586299 seconds)
    (341/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.236121014 seconds)
  done (took 1184.802585824 seconds)
done (took 1186.939346486 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.176413164 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.151198004 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.660533757 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.138227944 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.148632066 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.154139912 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.672064042 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.169483612 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.167327732 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.671993847 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.163496265 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.14915279 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.164821961 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.161457205 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.153207879 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.166184141 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.156097794 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.177147438 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.185543947 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.155925466 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.202380204 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.157402409 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.14912117 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.201428753 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.150380508 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.15123188 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.170846457 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.202600394 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.202969148 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.155130317 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.156824388 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.513731613 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.207780476 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.157394096 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.163966701 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.164656376 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.156132995 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.166716019 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.170897078 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.167738061 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.152497081 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.163209079 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.15492833 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.155775802 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.1511859 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.152842622 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.153411312 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.277794001 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.166376664 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.49563818 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.218267887 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.169347294 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.203699889 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.1547832 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.153870721 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.154705972 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.203824116 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.158483458 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.157578732 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.496810563 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.249839464 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.168400364 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.498177197 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.220415609 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.162115422 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.162833918 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.154234476 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.173245198 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.517170784 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.719677537 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.187824539 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.171916544 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.158221886 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.155743491 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.167460538 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.673710801 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.16962401 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.739691251 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.18299234 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.168026302 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.159641259 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.156448731 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.157267119 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.171194294 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.173340226 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.154033287 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.158581057 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.159076426 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.167575425 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.518976434 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.203230297 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.661161012 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.163567464 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.172684532 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.176237054 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.739808054 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.187162652 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.172143482 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.15692537 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.516695837 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.201805481 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.174182953 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.157013169 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.16618217 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.271915611 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.174216865 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.175001068 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.154231697 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.177631693 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.162288463 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.155389803 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.168948815 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.17759988 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.188774195 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.176024187 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.1567236 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.166536703 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.161971557 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.175033342 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.166355757 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.163006337 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.169150373 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.157439906 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.208491487 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.175537092 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.172552001 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.27067578 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.160982422 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.281019821 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.167684092 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.162345529 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.154768648 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.500121686 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.205968114 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.175157021 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.162073001 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.177959306 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.176349341 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.171669131 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.159244856 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.171276549 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.158584816 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.208082904 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.157175339 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.180838982 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.207833926 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.17185467 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.164258353 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.175124423 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.192341938 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.178370409 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.160791093 seconds)
done (took 339.224367382 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.199430872 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.15240662 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.231248905 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.155937156 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.222138657 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.208382471 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.153207042 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.153997282 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.154487887 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.552489125 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.155929068 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.160686255 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.153457568 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.15617229 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.203526199 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.156246483 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.155010872 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.401118039 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.144235356 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.212963246 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.151306358 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.157678429 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.157725203 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.5535843 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.15517246 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.154034232 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.216336822 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.15872656 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.395975799 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.155438192 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.154098847 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.396154838 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.214846211 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.169840505 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.165127393 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.162876265 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.22308735 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.167463417 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.202871068 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.201877226 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.229548256 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.187422803 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.154271258 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.152952351 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.162712989 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.153888916 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.158289545 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.190381918 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.153695896 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.163780798 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.402424539 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.165171006 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.161678412 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.158522058 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.15823704 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.16870646 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.152425909 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.150708659 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.210389401 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.150295307 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.197148387 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.547126659 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.545646032 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.151909498 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.15005106 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.151956235 seconds)
  done (took 202.800153015 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.215599402 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.225958034 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.215159877 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.154241677 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.198499538 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.219511053 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.153292963 seconds)
  done (took 17.452708113 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.156704339 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.153319026 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.171921727 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.173023328 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.149016922 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.287846161 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.162090484 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.156411688 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.176835508 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.157757345 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.487092939 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.173596222 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.158669963 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.149221018 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.161801331 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.179857638 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.153145112 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.153741713 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.233907148 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.227766027 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.157309134 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.160121671 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.180876264 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.165200151 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.154601648 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.15654978 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.150906683 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.157040103 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.152445367 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.152730931 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.1517472 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.163889302 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.154164191 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.152002006 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.153895175 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.155866155 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.152160498 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.153356198 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.152811881 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.149800428 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.153007165 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.152748049 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.152948876 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.154842429 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.153060593 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.174725691 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.154282084 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.153281497 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.153264367 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.147034585 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.181954262 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.154520167 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.137767255 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.148528384 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.19282892 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.162306944 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.154743848 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.158590827 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.155595296 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.157128845 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.157357377 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.230830343 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.179607849 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.158098536 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.175988178 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.192671567 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.156968203 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.155751481 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.153361883 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.178816339 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.158401428 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.176131162 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.156848968 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.252542746 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.15506326 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.295248087 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.177598853 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.158360049 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.157304792 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.155046205 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.160313292 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.157451553 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.157631832 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.159251579 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.161646667 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.155476646 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.158610893 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.154278845 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.161501398 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.158163891 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.198866467 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.133963158 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.156341933 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.255321213 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.159567562 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.251227082 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.185648141 seconds)
  done (took 232.685781334 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.158670679 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.157865804 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.169902677 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.15948495 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.155709345 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.161825685 seconds)
  done (took 15.039013372 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.158472584 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.163829299 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.158419041 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.158216271 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.155992498 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.157967192 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.15775402 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.155952057 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.161196628 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.158047314 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.157040626 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.157531667 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.158307751 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.156025049 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.158295012 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.159691388 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.160511143 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.158680887 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.157957502 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.15742004 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.35812837 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.157857252 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.155930976 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.159842636 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.163335731 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.160486641 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.164495259 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.158929287 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.159374219 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.161907048 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.161598033 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.157045049 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.162734717 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.165849416 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.165510567 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.16098768 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.166849604 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.158649761 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.161841738 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.15890539 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.157889206 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.156747654 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.159873065 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.158567761 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.159479807 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.16587397 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.163605511 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.167247711 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.162936111 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.160014023 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.161542368 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.161813417 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.159169024 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.159735628 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.163165197 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.168175102 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.164133434 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.160657426 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.158845912 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.163169867 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.167330032 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.159265046 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.162540187 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.165201454 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.16853375 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.158591736 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.163090355 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.164413514 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.1600606 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.162124375 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.161129646 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.161232657 seconds)
  done (took 158.852609281 seconds)
done (took 628.908667423 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.243103771 seconds)
  done (took 9.322097921 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.351695749 seconds)
  done (took 9.532727721 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.754832006 seconds)
  done (took 12.835411619 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.182932341 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.192456846 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.172030112 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.157771078 seconds)
  done (took 30.801169197 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.382896466 seconds)
  done (took 9.464448397 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.172456637 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.161213032 seconds)
  done (took 16.479604847 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.240117848 seconds)
  done (took 9.322804062 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.597042774 seconds)
  done (took 9.693575459 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.174485576 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.17905501 seconds)
  done (took 16.455185921 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.162158758 seconds)
  done (took 9.240814761 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.936651951 seconds)
  done (took 10.106145352 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.169284443 seconds)
  done (took 9.267156512 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.221743932 seconds)
  done (took 9.301787858 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.241986876 seconds)
  done (took 10.322488924 seconds)
done (took 174.231410048 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.167661321 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.157326914 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.159812088 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.156850841 seconds)
  done (took 30.722158536 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.197367993 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.196137284 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.205343494 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.197633771 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.189313673 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.189076242 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.197637794 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.1982061 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.189085095 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.195334424 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.198115297 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.194701137 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.196856901 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.208620218 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.207118205 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.196202454 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.197442022 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.197156076 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.188766412 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.205771803 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.197933086 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.198214309 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.164364038 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.164566006 seconds)
  done (took 54.752201575 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.351001364 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.228205244 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.315226966 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.207133605 seconds)
  done (took 11.181811968 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.164086357 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.2281285 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.218283177 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.210029683 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.258305916 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.267945212 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.220862817 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.374107093 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.280888396 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.290370263 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.173581889 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.185929907 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.188470846 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.211385563 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.267101775 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.164018469 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.16738109 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.283946195 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.225280505 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.373741611 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.163741352 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.220403758 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.252431433 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.217861021 seconds)
  done (took 55.691571012 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.165954823 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.170877218 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.172874738 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.166699408 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.169082801 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.166518313 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.174426734 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.16788722 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.191204675 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.168405919 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.165506543 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.165379598 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.172037636 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.166570173 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.168033447 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.179877837 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.18173342 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.166317485 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.156819648 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.172891503 seconds)
  done (took 45.495599034 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.163251767 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.008537437 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.509155073 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.413561129 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.161429384 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.16250343 seconds)
  done (took 33.503431425 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.177622016 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.183181017 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.170808858 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.185484225 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.212567435 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.172603142 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.22514214 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.3017031 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.174334881 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.223688804 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.185745244 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.172347227 seconds)
  done (took 28.469225119 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.163447708 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.164110301 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.165175626 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.176612742 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.176511736 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.172160071 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.172024625 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.163859088 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.177284191 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.18218461 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.173705993 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.176542733 seconds)
  done (took 48.148069954 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.380070163 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.396030264 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.382053513 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.758884969 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.484882417 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.149688438 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.453502208 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.378796204 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.87505331 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.90340538 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.468738297 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.15216983 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.122047102 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.096068347 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.065652578 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.410392012 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.167763257 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.025009729 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.422700449 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.216198963 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173526371 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.169099426 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.172879146 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.471182131 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.497016382 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.169777114 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.380573951 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184034715 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.169639851 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.432237945 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.6387978 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.222619754 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.369931117 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.430870653 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.526141474 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.226048044 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.27120827 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.333904681 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.213974934 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.203727191 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.178986509 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.179499147 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.709017495 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.178268136 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.441571655 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17042794 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.170354863 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.281029755 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.096718694 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.49204195 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.288907904 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.168191262 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.203835617 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.599025589 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.289678414 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.411822284 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.173854491 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.345101541 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227041328 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.426655118 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.285822976 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.274375694 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.381377728 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.095114267 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.575619885 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.300518357 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.172249816 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.175516651 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.870256294 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.411634533 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.250495719 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.502093761 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.930545289 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.171602208 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.172838878 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.212913702 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.259885352 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.171239825 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.463701275 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.163147054 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.09655526 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.270960738 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.565557079 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.176248436 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.169483998 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.179405385 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.015745656 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.095842584 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.266714929 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.429520835 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.501685079 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.173273529 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.172318506 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.194430014 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173566738 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.117899028 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.721580586 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.237781375 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.096898618 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.734361867 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.648210192 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.140992746 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.636574121 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.216121309 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.443564212 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.323553385 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.577713899 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.380004678 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.417683365 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.739167998 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.178570619 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.788110268 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.254221579 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.249995745 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.171715047 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.73040149 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.345091058 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.469909728 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.294772333 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.178533402 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.09935939 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.185904858 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.379019062 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.653235612 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.232473587 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.175746504 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.180410831 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.175584824 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.178114265 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.291843542 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190827036 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.467552816 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.249848755 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.176504578 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.112714884 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.181779444 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.458430865 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.837846977 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.237042915 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.44531004 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.442995279 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.875819564 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.77573643 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.12059133 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.446650155 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.251035257 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.252959925 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.749913721 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.301885901 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.275593848 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.176232104 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.315937187 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.185669799 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.18158966 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.568352881 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.596806588 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.603895349 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.223798166 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.180363036 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.128653736 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.360711801 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.42138457 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.285809235 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.211257398 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.184771754 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.263343845 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.409562786 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.177293788 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.106655463 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.419668188 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.420008249 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.470290662 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.595558521 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.275450413 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.255029447 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.191741333 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.392819948 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.261271419 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.838108917 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.722613078 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.39287924 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.745022859 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.144593453 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.818310326 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.449159324 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.571816998 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.197538243 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.632760658 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.356751976 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.868487952 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.213608353 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.704358685 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.109070955 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18838935 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.513668604 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.122775976 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.49978403 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.245953543 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.233710033 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.183527942 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.183844909 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.191170993 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.125182152 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.289362422 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.250335876 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257603682 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.109549505 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.830617791 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.226170368 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.183577119 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.169874178 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.576215111 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.078111136 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.136581562 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.183759784 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.260002465 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.926956072 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.73663418 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.189306474 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.187562376 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.79121567 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.188737018 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.089677006 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.186971218 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.070780054 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.208998063 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.446781143 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.888956328 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.495078762 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.261250045 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264359343 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.187765081 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.193645924 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.888094863 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.197803061 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.852895182 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.470317387 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.461442248 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.646747493 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.249933892 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.389807268 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.201980026 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.188042362 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.719994074 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.212671411 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.19042278 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.390294458 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.706512353 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.520607472 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.833339742 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.272314756 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.187458938 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.456413193 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.192805802 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.659609314 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.884931595 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.196541983 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.187789194 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.444314543 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.872606436 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.188218253 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.164929427 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.194016507 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.402572915 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.392731902 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.460738284 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.489093255 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.644016699 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.116101968 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.193871429 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.213315302 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.435261656 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.189742023 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.223954728 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.631498674 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.281013875 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.618948233 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.481979404 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.577138704 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.829955707 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.462744578 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.260228185 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.201323053 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.849906679 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.323722319 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.12181835 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.309727515 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.115709873 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.903017697 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.481194546 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.209823697 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.459835608 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.174652232 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.540976166 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.492361611 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.455146545 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.245004567 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.220534113 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.187133982 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.240383768 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.190955341 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.37119205 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.30738434 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.194961247 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.73392719 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227570857 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.237820775 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.194823257 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.725924526 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.215500566 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192552087 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.885740745 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.21656369 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.308092447 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.263420823 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.970270668 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.692322154 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.221418332 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.147262826 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.837011928 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.460991719 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.252647316 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.634175905 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.230003078 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.596148548 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.191534957 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.406582034 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.19676643 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.763524875 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.237572977 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.460620647 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.14627454 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.404578071 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.397625801 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.219251135 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.196996704 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.121417248 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.298753646 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.102334482 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.175124971 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.192901427 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.875055637 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.613640034 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.393949331 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.649549403 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.017030365 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.194521329 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.581114014 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.602166711 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.814072838 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226559876 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195571785 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.50486694 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.330981696 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.495168548 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.469678886 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.203326623 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.220236838 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.409202079 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.31762596 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.110028458 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.673250401 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.777549859 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.892803346 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.202970211 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.395373389 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.515135561 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.479881576 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.22668631 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.270622686 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.600580799 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.459068369 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.267215475 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.120264829 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.19082581 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.590688284 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.591903979 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.292001729 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.435750975 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.514689445 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.817701529 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.676978836 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.638458587 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.627970513 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.643218309 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.595560357 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.400706893 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.552893547 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.518439391 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.791042654 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.60882343 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.409439306 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.287373097 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.473136043 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.066853688 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.903656919 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.438320738 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.202585014 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.123223305 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.400883846 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.203409412 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.666199221 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.720123935 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.447918514 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.44782098 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.666530261 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.73474271 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.385481874 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.222970349 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.162697166 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.216890009 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.218622457 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.196109675 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.676557822 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.487020649 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.209799878 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.136270495 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.869098589 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.123585875 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.411659095 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.381211586 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.235275545 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.754928944 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.446370879 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.303835847 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.493734617 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.440352548 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.232353693 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123710296 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.969201577 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.150823903 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.288344765 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.626605064 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.214858988 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.204170704 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.404115259 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.128076925 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246210619 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.203502099 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.399455167 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.776543721 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.468804577 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.328661927 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.43500555 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.500123402 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.097996339 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.231217309 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.471575495 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.125513789 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.828276281 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.90277301 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.239239688 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.27137582 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.20190505 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.202972752 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.472196469 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.525507038 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.295915284 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.790932915 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.235693032 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.225628304 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.50539407 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.291302378 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.202432902 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.201770359 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.688088404 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.433223368 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.200907281 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.176861049 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.413807004 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.275387703 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.401131026 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.276295737 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.715120372 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.206083912 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.088885753 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.302799823 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.150702964 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.201115769 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.987038147 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.266001467 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.201502138 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.440581827 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.81700869 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.404251707 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.595283848 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.108297725 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.380142083 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.245957116 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.196392674 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.207134207 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.583334523 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.488103016 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.20300465 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.480328027 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.250776922 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.206039324 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.837276771 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.170845153 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.202775331 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.905444996 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.118640229 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.932874554 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.596783886 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.212300627 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.232214596 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.207392583 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.130353696 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.204753613 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.379054615 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.186535159 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.205744641 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.576539171 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.502420017 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.291121675 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.205319871 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.203923519 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.208941316 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.416217655 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.716863357 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.218787405 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.904435252 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.40935615 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.20891711 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.681539152 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.651069679 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.475308125 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.245130144 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.399572239 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.446762477 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.738246063 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.404067253 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.187323327 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.429800071 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.206259433 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.476345764 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.481634413 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.2053307 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.416674883 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.680771977 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.489209103 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.561372318 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.514992809 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.272580898 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.397037119 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.121789515 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.206759645 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.208638361 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.47510798 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.25924763 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.202067595 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.216053375 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.758900124 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.981430141 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.669181613 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.359914008 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.509421512 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.06055918 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.962015266 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.207649562 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.132890893 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.20237347 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.233626983 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.209043398 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.133862411 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.90218129 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.930470436 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.422338599 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.513137811 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.13354217 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.41232667 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.791094281 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.132976901 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.177482135 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.207856581 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.467756983 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.134757006 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.210599174 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.163813227 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.458246783 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.940956743 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.476631541 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.206559433 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.154131436 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.213419118 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.21169763 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.207824165 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.292902605 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.208571985 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.326278358 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.483400992 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.546906329 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.317794469 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.84936671 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.911622616 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.150967816 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.253139803 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.76671652 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.775127674 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.472652171 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.341973426 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.904832205 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.156181409 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.209797004 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.224712321 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.469142966 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.212185215 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.211213467 seconds)
  done (took 2273.975747264 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.279197637 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.257939707 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.260223634 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.24030952 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.367410767 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.348017335 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.283442061 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.282906886 seconds)
  done (took 60.441915003 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.210202343 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.230570619 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.213335383 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.20977644 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.207181734 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.255803371 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.404128238 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.237754995 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.208762677 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.211067258 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.208186587 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.212751336 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.209466711 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.207510029 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.211779118 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.519081588 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.230008797 seconds)
  done (took 82.388341932 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.267673402 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.022273256 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.216503539 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.888183192 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.253387549 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.563781323 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.21147245 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.215120268 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.319635731 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.50700867 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.264753289 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.22548797 seconds)
  done (took 94.106264945 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.210337435 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.211910873 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.210107756 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.207312408 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.211266264 seconds)
  done (took 13.172822572 seconds)
done (took 2834.197825466 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.45587824 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.304379397 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.285201189 seconds)
  done (took 6.717582108 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.356384625 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.400015014 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.517418857 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.538061153 seconds)
  done (took 11.944973567 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.496432673 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.585530957 seconds)
  done (took 7.208492712 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.588790488 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.220460068 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.606378612 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.217757006 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.215450205 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.217280386 seconds)
  done (took 23.783670335 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.209531336 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.212799797 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.211422879 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.213996507 seconds)
  done (took 10.976948619 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.210796353 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.980126695 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.213058638 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.220761921 seconds)
  done (took 22.749633312 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.357998145 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.254371999 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.983523391 seconds)
  done (took 10.726496324 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.837165955 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.659305514 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.816786154 seconds)
  done (took 10.44156674 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.35660077 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.196409791 seconds)
  done (took 8.681647597 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.357629662 seconds)
  done (took 4.487463567 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.050167101 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.525359548 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.693332995 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.730921863 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.79258098 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.429066179 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.532309088 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.486500779 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.64813611 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.610518282 seconds)
  done (took 28.630004424 seconds)
done (took 163.35321379 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.6447709 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.225366103 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.416606832 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.588426758 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.453338363 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.412824123 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.509476416 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.580681989 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.257471979 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.246711584 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.591675559 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.533489003 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.459815916 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.23225116 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.460988313 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.22938441 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.444784687 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.666570704 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.272293672 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.509499298 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.524210814 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.231438878 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.432545783 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.250505125 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.445349512 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.365144037 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.839758875 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.226172165 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.421913916 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.853770111 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.368612719 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.662788436 seconds)
  done (took 180.48940813 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.095906385 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.214681231 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.208826549 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.213038558 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.494335809 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.215415295 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.215415127 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.214387408 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.525112852 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.51909578 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.21405485 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.474536751 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.216563247 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.214569626 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.214220326 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.215207564 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.629189981 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.128104624 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.214818188 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.214755855 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.216339483 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.35485131 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.216834899 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.396070761 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.622766389 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.21849215 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.213804191 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.217118082 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.215091893 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.218705886 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.214794997 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.217099144 seconds)
  done (took 219.10995993 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.215762134 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.21643374 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.214642265 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.217407955 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.21569907 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.218842633 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.22103651 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.21819428 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.963347172 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.960821399 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.215148449 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.218568781 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.216189804 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.218332289 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.220397663 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.218075813 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.220211638 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.217237356 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.220649007 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.219554268 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.218320188 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.997592623 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.215992232 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.025217148 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.220023963 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.225885458 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.217225075 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.227837314 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.220729442 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.222700542 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.219114341 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.219833858 seconds)
  done (took 232.2138552 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.465323593 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.22202464 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.224258718 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.225940634 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.224541665 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.219534048 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.224447085 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.469619119 seconds)
  done (took 22.411856418 seconds)
done (took 656.367622373 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.591121109 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.962323298 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.349421493 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.243707718 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.472402014 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.28528909 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.24061266 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.304952963 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.881268004 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.306058537 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.649266503 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.246046931 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.965934899 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.266693537 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.354118972 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.300074403 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.601156201 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.883097594 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.37602 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.909446498 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.438274233 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.190501205 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.318442574 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.918302076 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.663984246 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.207275545 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.263677971 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.605277961 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.243475143 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.476656023 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.865672566 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.5041156 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.256199363 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.244693894 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.295409846 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.273014946 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.437616254 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.247264619 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.346811345 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.984500316 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.905277912 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.762364815 seconds)
  done (took 114.77303324 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.230720099 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.229937654 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.225949349 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.227585654 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.237818531 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.228651814 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.229727263 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.230090724 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.228343463 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.223985184 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.22763388 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.23876458 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.2308945 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.237792751 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.23027066 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.229327699 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.226823294 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.236377904 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.227397712 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.232707217 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.229730437 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.231892676 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.226171479 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.227827084 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.231494335 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.215645873 seconds)
  done (took 60.120261023 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.228181063 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.398872918 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.501198627 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.258637292 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.224373204 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.216411357 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.226136123 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.232256661 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.226927984 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.228806224 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.320097355 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.228909649 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.238610319 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.496687808 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.247049334 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.224926503 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.224858188 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.22896902 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.407439952 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.226476863 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.254227682 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.237162319 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.255039492 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.239233707 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.229603137 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.225961328 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.230351259 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.64344381 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.233956857 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.321752829 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.267649798 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.261079827 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.571911098 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.513151513 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.294408733 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.234589763 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.230773608 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.367019319 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.236456278 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.225122227 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.25277448 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.231005892 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.504472097 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.73253597 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.241745373 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.230980056 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.643834614 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.378382759 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.273577694 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.241708693 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.515127938 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.257586934 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.230797858 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.228716402 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.265013778 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.237885586 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.224801858 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.472427425 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.241120021 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.255345064 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.235491521 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.227763658 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.4143487 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.236345114 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.403641606 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.235530207 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.232957821 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.233843589 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.504423067 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.257370543 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.730018133 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.241358252 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.229327859 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.321733643 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.40374467 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.663764632 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.238909453 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.415704679 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.586450912 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.264077584 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.238127004 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.634289518 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.268486334 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.234904299 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.232063429 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.233385972 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.233683014 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.273132277 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.257240821 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.647305801 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.728428116 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.483859495 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.267349316 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.240590437 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.228426179 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.472475394 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.241355117 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.232159603 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.502736243 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.757468766 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.238666773 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.233761399 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.713896293 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.24377949 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.256748135 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.238897383 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.522633643 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.257323932 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.275122231 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.234017137 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.236801187 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.231890731 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.260194952 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.237292686 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.230199009 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.705743574 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.3817147 seconds)
  done (took 274.436668464 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.232015442 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.23151793 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.230771784 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.230274348 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.231083781 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.23368898 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.228823686 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.228969598 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.2308054 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.230605305 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.230455248 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.231923686 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.232995736 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.232991131 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.269051942 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.231611602 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.717691741 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.228253767 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.22867305 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.231290079 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.800685058 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.233950579 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.232191317 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.230517274 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.230128815 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.233275661 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.236180151 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.261714967 seconds)
  done (took 177.753174004 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.236156523 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.285410215 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.243578579 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.279282061 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.248521134 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.235441927 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.256723108 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.245286424 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.236566835 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.232789204 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.237489113 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.263200611 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.240127524 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.329760484 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.261309122 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.264550298 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.331189733 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.240310918 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.234682548 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.237794349 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.280843901 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.246889739 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.264392591 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.294224718 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.248030334 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.289460642 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.249109904 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.23827181 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.235516151 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.34441343 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.255594221 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.267576394 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.268098893 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.249337195 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.344491143 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.351883849 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.335680782 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.263266746 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.238741884 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.240121396 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.237396607 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.235522058 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.291178171 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.249835677 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.238801073 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.35005932 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.258513665 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.233637285 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.255297717 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.239062805 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.24828585 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.249017561 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.268914154 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.354486541 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.277822784 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.258727764 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.260850957 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.25201001 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.236463847 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.328781836 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.23882443 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.351473389 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.255218748 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.239220904 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.237943693 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.24068958 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.283406564 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.272175202 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.334616613 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.239553864 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.332252094 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.289453228 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.248062964 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.240002956 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.236720696 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.292196038 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.343051988 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.288712859 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.296019819 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.268995215 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.244037994 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.23685008 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.235697854 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.262057686 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.244443158 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.354462154 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.349296993 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.243284124 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.237710509 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.239318091 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.237985029 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.257786712 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.29713744 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.273409902 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.340068128 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.277012587 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.264165112 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.244023435 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.250921966 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.239055772 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.271532488 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.241728673 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.250672164 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.592519511 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.27471684 seconds)
  done (took 240.607325118 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.624531189 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.277340522 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.306253091 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.509800499 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.624621949 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.203204042 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.272061604 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.285595098 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.293366194 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.404682696 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.343524075 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.327468013 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.26964646 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.256997394 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.276080378 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.296172639 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.311457799 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.575448616 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.3742222 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.789165775 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.271913254 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.543866041 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.560338991 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.616126881 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.318670648 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.658269191 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.916692947 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.3784472 seconds)
  done (took 73.042936865 seconds)
done (took 942.877506897 seconds)
SAVING RESULT...
DONE!
