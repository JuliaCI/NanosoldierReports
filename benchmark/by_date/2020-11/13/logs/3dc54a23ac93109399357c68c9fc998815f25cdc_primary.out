cset: moving following pidspec: 1899
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 2.007199378 seconds)
loading group "shootout"... done (took 1.133797448 seconds)
loading group "string"... done (took 0.680848299 seconds)
loading group "linalg"... done (took 8.638749538 seconds)
loading group "parallel"... done (took 0.170593326 seconds)
loading group "find"... done (took 2.883267614 seconds)
loading group "tuple"... done (took 2.081266644 seconds)
loading group "union"... done (took 15.39853314 seconds)
loading group "dates"... done (took 1.486958725 seconds)
loading group "micro"... done (took 0.221537185 seconds)
loading group "simd"... done (took 4.831870585 seconds)
loading group "io"... done (took 1.088688811 seconds)
loading group "random"... done (took 9.645121006 seconds)
loading group "problem"... done (took 1.52406434 seconds)
loading group "array"... done (took 25.345516998 seconds)
loading group "misc"... done (took 1.899038601 seconds)
loading group "scalar"... done (took 43.865183305 seconds)
loading group "sort"... done (took 3.347192933 seconds)
loading group "sparse"... done (took 12.864505887 seconds)
loading group "collection"... done (took 18.89349997 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.537721486 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.126362757 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.131119124 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.124389168 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.185761932 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124404861 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.132872092 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087939096 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.866461361 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138310578 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116409216 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.44070124 seconds)
done (took 5.427147515 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169645123 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.094419209 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083136422 seconds)
  done (took 1.368328269 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071726516 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061711464 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069479078 seconds)
  done (took 1.394032434 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.067224495 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135436332 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067368536 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068700628 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.071628729 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068013702 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068616759 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.06808268 seconds)
  done (took 1.743129595 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072419007 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067971018 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067286449 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069651208 seconds)
  done (took 1.472912162 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066090606 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.124856067 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06677762 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066751459 seconds)
  done (took 1.517293133 seconds)
done (took 8.945157898 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.143211768 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.821054531 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.761413364 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.127037275 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250944251 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.452717289 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124989189 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.186234706 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.092505703 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077288024 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.125262694 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080418592 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.455625491 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.408002711 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.074276117 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.172399161 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.650153335 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089442058 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.134795301 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.466401981 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.076315404 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.089796763 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086806646 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.07224897 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.350126825 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.156257766 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.656092855 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.100195389 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070780949 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096508358 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.073491024 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.080544939 seconds)
  done (took 10.830356345 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093619114 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090522885 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.070521956 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.125675804 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.096851145 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072216495 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077567552 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069780927 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091368718 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.127417965 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.093182507 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.101098642 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.069011069 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070964991 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.081911355 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.199983524 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080408638 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082173376 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069323656 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083097118 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108553456 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.081312068 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080920841 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080472087 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132886968 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.17303692 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.100447634 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.101014373 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068572828 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.081987113 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11989772 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128345492 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069040673 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067218445 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122555395 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097512887 seconds)
  done (took 4.70133339 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.905663851 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.117939112 seconds)
    (2/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.097646511 seconds)
    (3/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.084745815 seconds)
    (4/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066919 seconds)
    (5/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.075730805 seconds)
    (6/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109005028 seconds)
    (7/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.115629449 seconds)
    (8/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.124527098 seconds)
    (9/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.126158566 seconds)
    (10/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.10544324 seconds)
    (11/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071083696 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153477413 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.655093656 seconds)
    (14/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.068245079 seconds)
    (15/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.149560357 seconds)
    (16/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071871345 seconds)
    (17/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.124381658 seconds)
    (18/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.365028806 seconds)
    (19/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.066869339 seconds)
    (20/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070461323 seconds)
    (21/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069759006 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.073320026 seconds)
    (23/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072134275 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.115744922 seconds)
    (25/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.068170269 seconds)
    (26/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.180559157 seconds)
    (27/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.589332707 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072831429 seconds)
    (29/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071609907 seconds)
    (30/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.102282557 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066931268 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.144018105 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094569112 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071747372 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.554836787 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067474367 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065750019 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089817577 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.205036972 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068083276 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069776807 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081842377 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068742873 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.112051901 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082718535 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.49408542 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.072333882 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.575722534 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.229423381 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.076385815 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.075167305 seconds)
    (52/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.066559861 seconds)
    (53/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104637868 seconds)
    (54/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.06629992 seconds)
    (55/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070262462 seconds)
    (56/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.932626759 seconds)
    (57/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.124393621 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068313632 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.278123653 seconds)
    (60/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070713745 seconds)
    (61/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070252234 seconds)
    (62/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071191726 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102147866 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068998861 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070315029 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074793812 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100887537 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.878266935 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089777706 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.09840561 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069531616 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.410436983 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076683645 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071263499 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071469257 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.08595949 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.114447721 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069007151 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068365622 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110707753 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.091681144 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.092849886 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07247705 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.070437543 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068646388 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.32400074 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.163133947 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.0676775 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067868113 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.480409272 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065831581 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067504075 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.06988141 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091209429 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068810703 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065430342 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.066039094 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.1002813 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069579859 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.803498054 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070557244 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.476248388 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071953831 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.108905819 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.121716193 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069958129 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099128574 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.070734072 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.067374996 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.076158602 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067621898 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066659017 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071593913 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067503957 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068562458 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071326822 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.07023255 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069627533 seconds)
  done (took 23.357669007 seconds)
done (took 40.993115029 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.317075796 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.08084352 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.081351524 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.08159873 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.081129148 seconds)
  done (took 1.885559068 seconds)
done (took 3.221421186 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.136436129 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.078169136 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066558085 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103571912 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070777911 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104075363 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111748489 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.107272437 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070750535 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.07079605 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070755255 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105191768 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107980648 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.071005988 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.101351378 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106606034 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.071423065 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.069845656 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.071246818 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.071021544 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.071321257 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066729445 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.071058604 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.07084289 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101994009 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.071444053 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066302145 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101542875 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.071100941 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.101435305 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070826471 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.071272504 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070819947 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.103048062 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.071310285 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.102639887 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066993291 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.07122203 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.071479387 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.071304347 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.071013756 seconds)
  done (took 4.677680617 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071450657 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083156658 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.0854724 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064329187 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073511865 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084318232 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064134872 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084085262 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.09049506 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084796619 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08422378 seconds)
  done (took 2.161178775 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070829337 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084714648 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089508184 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063819923 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075020994 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085580718 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064080762 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085175244 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088044786 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085599678 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085966851 seconds)
  done (took 2.150942417 seconds)
done (took 10.253226076 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.0971341 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.067696835 seconds)
  done (took 1.421399121 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.22952389 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.629650949 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.314598696 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092858447 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072506369 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086150841 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.200416697 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.06747085 seconds)
  done (took 8.138661758 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.104875446 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069799163 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069642082 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069620208 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069426411 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.072173175 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.071124349 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070808686 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069798781 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069501349 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071659188 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071630535 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071793318 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070205643 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070091521 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071203128 seconds)
  done (took 2.533279092 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104721334 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071465506 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101402851 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.06373979 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073984915 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06439221 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.073035157 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.074850582 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072629931 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.073148854 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074206892 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.07311362 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073183393 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073602914 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075564482 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075225228 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.07472777 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072759154 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07475857 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075750708 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.074695931 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075495056 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075840145 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073606206 seconds)
  done (took 3.204361423 seconds)
done (took 16.572699174 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175942477 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076020864 seconds)
  done (took 1.517721218 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068576991 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069530714 seconds)
  done (took 1.419887714 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073740257 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061213237 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.0792376 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072038941 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063820036 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063131523 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079326998 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063595851 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062960859 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063437364 seconds)
  done (took 1.962774116 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063423451 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069055075 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068973531 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066506304 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069270061 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064717615 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067199976 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063357773 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069922877 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062889519 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066307986 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083800143 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066254277 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08382945 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065677371 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.06596989 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067841745 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065382216 seconds)
  done (took 2.515452073 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062292784 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062430055 seconds)
  done (took 1.412787924 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065060133 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062299561 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064705632 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06482262 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062605003 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063146562 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.064021621 seconds)
  done (took 1.729183219 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.422038802 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124165274 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.349314033 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070479011 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.078742879 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.261309611 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065497394 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070744709 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070697686 seconds)
  done (took 2.839968732 seconds)
done (took 14.693613667 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082308644 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181695209 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088207598 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.406574402 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.0940294 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069860345 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114662707 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.176941704 seconds)
done (took 2.522369297 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214569382 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.253337248 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.400816753 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.126659361 seconds)
  done (took 3.076669483 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.338598579 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079023374 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078353963 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068952487 seconds)
  done (took 1.868143137 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065155598 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071209322 seconds)
  done (took 1.433771481 seconds)
done (took 7.90243448 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072563715 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062222019 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.067488361 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.092705706 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064816873 seconds)
    (6/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.0624508 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.064441569 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.074709751 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064589338 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062301589 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064786595 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.066418298 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066125316 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065679692 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065564045 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064796236 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066388958 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063503687 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065766232 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066109854 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066251717 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065438863 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.06471228 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066052708 seconds)
  done (took 2.931224925 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079817122 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066335768 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066885208 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067167886 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068883257 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068201451 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068852389 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067340663 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069146679 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067005649 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068755691 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069012826 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067265732 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069270262 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067301842 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069581149 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069012695 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067615815 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067771547 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.06955842 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068824767 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067614299 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069452378 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068134292 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069012927 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069510099 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066928211 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067519839 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06927988 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069418795 seconds)
  done (took 3.373190001 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066529846 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060454979 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062348942 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071565844 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.06134096 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062181181 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062213574 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.06179869 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062449824 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063261312 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062545687 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061683529 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062378011 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062279305 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061853891 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062491861 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.0667818 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081410921 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062164513 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062157874 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06596434 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061845251 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062405197 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062028714 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.06320676 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062183664 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.06192094 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.06266086 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061786816 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.063059402 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062073586 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066556542 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066793377 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062015431 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072188913 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067070651 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062003695 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065785682 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063031824 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061446995 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061505677 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061707133 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061981421 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062001118 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072276513 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062386565 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063238545 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062904095 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062572113 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061919056 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062037614 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.063867431 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070711653 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.06394152 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061489084 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062804749 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061756249 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062430348 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061630911 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061823994 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061666343 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065367605 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063436705 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.06263648 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081588008 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063286584 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072415643 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.062116044 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062360265 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065463374 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062479662 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079880943 seconds)
  done (took 5.935614633 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071555174 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072199794 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079235617 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.07057976 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065034298 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063334586 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067026761 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063201681 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072561935 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067423625 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06358798 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066589551 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072826472 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067487233 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064870235 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072718375 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067114789 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066252288 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.06339026 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067343322 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064343995 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066970972 seconds)
  done (took 2.823278513 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135829179 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066928774 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.10808449 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.077203937 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070391781 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.076986249 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067614022 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067515015 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068182472 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068721194 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068876376 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067869161 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070419641 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068481378 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068623529 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068781763 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068207233 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068588537 seconds)
  done (took 2.673775972 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076973004 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066296631 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091964043 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067981178 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06807479 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068045787 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071968161 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07207132 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067749589 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067838091 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071816356 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067573501 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.06764684 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067400377 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067438321 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067638808 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067205469 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067419424 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071651466 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071381529 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071181304 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072121959 seconds)
  done (took 2.868896635 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076951043 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065513707 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082573414 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06804762 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062359283 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.0623304 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067920135 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067086284 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067427816 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066434905 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066795674 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062196188 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068414062 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067016136 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06850014 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067025696 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067038501 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067671889 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066994679 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061905301 seconds)
  done (took 2.671679305 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.087140799 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063632824 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06401542 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084205674 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065274088 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.065230248 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084208757 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065189808 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065293276 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086737802 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065247544 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065254852 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.084512815 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084757861 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065361807 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084670021 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.08505841 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084741346 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065660148 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065208344 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08686489 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065328476 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.085007791 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065529824 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06495181 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064964406 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065258933 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.084657827 seconds)
  done (took 3.385714205 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06486735 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063887667 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064517757 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065647864 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.066220373 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.066293603 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066156239 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.06635851 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06524479 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065926064 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065811792 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.06532605 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068952532 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065478808 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065667667 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065636736 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065349421 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065508485 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065778741 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066235911 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065723845 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065458466 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065717998 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066195028 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066238081 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065537828 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066087585 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065723309 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065287912 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065786492 seconds)
  done (took 3.29864523 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073878117 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071530674 seconds)
  done (took 1.471991298 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062343987 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077589041 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061074894 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074629995 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070734887 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065512593 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071335967 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.07131604 seconds)
  done (took 1.87512318 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067831235 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090858364 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063123317 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064277664 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.067112071 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.134375633 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076681727 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075623202 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078742402 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066156052 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064466126 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076067996 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063494961 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077153918 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065537812 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072699121 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071137242 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081190274 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076803442 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062421858 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076443539 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064896246 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062315142 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064672102 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06365205 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070559814 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079851751 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076270817 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072550543 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.06164049 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083202221 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062838397 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063812941 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072547665 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067149597 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063314145 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100372747 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063908097 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068464698 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062124656 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075933818 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084243084 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077356835 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.080900742 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064669792 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064909242 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062626616 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064975679 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066162627 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.07231549 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062756557 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070388045 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062100877 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064644501 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073488222 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063240457 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068587812 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072462601 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076750626 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073653665 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071845035 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078680393 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071914975 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070734719 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06424007 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.083469745 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064458648 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076283028 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078307568 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064102672 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076839948 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062199054 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061409133 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062988095 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097682379 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064521907 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063872712 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062710374 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062342911 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064191682 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07248325 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068314678 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069935998 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066086856 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078144713 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071765584 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062377706 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069092657 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.08041274 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066054979 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062745655 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078944593 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066206965 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061796442 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080310141 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072220171 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064011191 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062970163 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065381486 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075419461 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063270285 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060874556 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070905763 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063918799 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064430163 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066723476 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06994482 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061448943 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071776273 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066430117 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063973294 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060576722 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066636881 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062834454 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060854868 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071318842 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061727736 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076293549 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068827419 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076845616 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076921517 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072780707 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.078065208 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061806514 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060879155 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.0805458 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071281486 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.200079655 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.08107965 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.064034103 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075667154 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.066894663 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065864663 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073596658 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.063181058 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065990334 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063179228 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068727127 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064653371 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065481418 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068894866 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.072009876 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.07533459 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064282616 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.072150106 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063526898 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.0789483 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073926643 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.068109628 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066971756 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.064162926 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075747975 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069634881 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.07244979 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062981643 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063467494 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.06295401 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073627603 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07269286 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064717505 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070648346 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067619988 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.06384471 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063385818 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06454074 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066488409 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066892877 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063690828 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071018647 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072723245 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077520937 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070598406 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071488186 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062122924 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062556174 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064635294 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061144145 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066152841 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071083151 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.0781608 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074837582 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084048365 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063264214 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073065038 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064944579 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.080114241 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.077120805 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064141478 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067876043 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061972171 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064671131 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.073020768 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075028424 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.077319778 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078495408 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067880226 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067509892 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062606304 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077955514 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063356786 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071377662 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072735772 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067682673 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063198636 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.065023521 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072246741 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067213915 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062845703 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079217697 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069281068 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062472219 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077300566 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063389713 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.074071578 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062762604 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.067029718 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068128946 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.065142884 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072347198 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077912234 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.062073303 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.06337953 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078450359 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.064647465 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064650178 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070934485 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078641232 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.066970795 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070625437 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073276639 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072388581 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066883353 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071724856 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063481487 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071971231 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065314403 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074055135 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062507446 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079903036 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061244461 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076779127 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062050874 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072812698 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062649261 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071425517 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062735673 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079244091 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063325365 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062473649 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073383988 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060632634 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071515678 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061382317 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066603519 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068109627 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071419892 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063549025 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071549292 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.204591534 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071816554 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.069441217 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.072994726 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073879486 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068504707 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062869006 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.071941065 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074513105 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071511536 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.06500056 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064543668 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063783177 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.073498074 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.06462437 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06481397 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071964158 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067855141 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068662161 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065210123 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065009568 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.06472061 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071936819 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073316293 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081599253 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071884527 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070824653 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072251221 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062546328 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078796883 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062728916 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.073433147 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.06193137 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069651727 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072482348 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063202738 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082465026 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.065078285 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071251222 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075758502 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071872859 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066444634 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081375475 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.068830916 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071734357 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071659555 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067818602 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.06971129 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065085949 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071996852 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072633977 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073782885 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064167567 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.071202858 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07234333 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064928455 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071403921 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064899261 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.07154092 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064896122 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061941119 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067319923 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074733809 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067549576 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068091228 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.06407935 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061934814 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063413764 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070368524 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067729077 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072021252 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078783583 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062211512 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064137032 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062549924 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066531105 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08135921 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073127793 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071388929 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.068177366 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062565769 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064466182 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065219132 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063565013 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066772421 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.061873585 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062500584 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073657493 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065531594 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067721044 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063506073 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064239362 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.07270853 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068167216 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063772701 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069778129 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.062766897 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.06793482 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061934841 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.06439705 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067395751 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061878424 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066403399 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.0734811 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079357602 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069136288 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071738262 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063512797 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070942585 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078121254 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070639521 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063697738 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071818546 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061537937 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081035391 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072202831 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070770102 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071685771 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063138491 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078629872 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066299527 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071713382 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076819135 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06319057 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068087643 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061428617 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077436456 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066281605 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.062038138 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069975355 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070210934 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.068088909 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073576345 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.209158722 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071025086 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068078278 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.067581232 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065947077 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065658116 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.073411086 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080160656 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064611742 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067617108 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071928566 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071808292 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067953666 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075747412 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.07176167 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064434514 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.065143504 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066913684 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063979897 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075217541 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06373516 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067458575 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067253163 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.06234514 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069869355 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079796713 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.07290859 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072926196 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062948519 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061950725 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080635482 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066434683 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066413573 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.07172298 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.073619673 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075643395 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.07331372 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080233193 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063798825 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069235635 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075742553 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064501192 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063441872 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066799837 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.065086763 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072412894 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073264174 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.07061229 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065436321 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069528256 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076882428 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064652457 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067696769 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.06796862 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06361541 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073695198 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071249671 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.074955204 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06447821 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.063228637 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.06712502 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071847788 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070985771 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072402321 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064710138 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070118219 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076875186 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071161654 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06688086 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062865379 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066756726 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072499204 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068060313 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063239624 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067538226 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066720041 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070163677 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.073025598 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.068181175 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062757329 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.08029364 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071125613 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.07287824 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065351866 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065209834 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063779148 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062696861 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074502078 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062528415 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064902026 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.06745312 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.06522743 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080801585 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071561947 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079248312 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064554881 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067365758 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.063155075 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07289282 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067589768 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063544975 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.074009057 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061984733 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078171095 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074331073 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.069089567 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062637144 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.089163677 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.070577237 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077695984 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072738674 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072307425 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066225125 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072485256 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064595391 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.07384904 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062402234 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.06135464 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072165482 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071366138 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074563788 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061434374 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071867636 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.063436675 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069872217 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069881064 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063251675 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06356924 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063716554 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070982507 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066305053 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071105917 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.210205713 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079866367 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064019586 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073308278 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.07121457 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072735987 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076158194 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07425091 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069867701 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062235002 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069695276 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071398803 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06451224 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.067875795 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066936125 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085270737 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.06529803 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.065099075 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077772091 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.069265432 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062724061 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069869924 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067486736 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.074013959 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064588192 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073905241 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067802659 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063858661 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06767468 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067456398 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062094462 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.063304806 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.063115092 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072981148 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067703019 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062982801 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08198689 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.065267889 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072321156 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073701602 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069107173 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.0649808 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062041045 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064727793 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.076870824 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079060985 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066842095 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071939312 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064876459 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072692775 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062393696 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072232763 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071444536 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071869543 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.063491008 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063374388 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.079061465 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079396798 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067816119 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072786509 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072962837 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.06500909 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.084766922 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072606959 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064650362 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.074216495 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065643036 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062077717 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062280317 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064857493 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.075123857 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062834218 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065826255 seconds)
  done (took 43.241463835 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099332113 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062551221 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061158799 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061796274 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072747455 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06210809 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061114984 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062464773 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062161071 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064088393 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.06133113 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065006586 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074693409 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076542492 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07352902 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067379363 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063224788 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063578629 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06323184 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064196545 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073298421 seconds)
  done (took 2.86456461 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065055062 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065660358 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065037639 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067516925 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.0665199 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062941821 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.0667142 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062966818 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067277272 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063534961 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067851969 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0633159 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063824828 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063165035 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063496002 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064750763 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067204088 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066575003 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062647524 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067046519 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064652044 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067162132 seconds)
  done (took 2.85965688 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063283242 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062083053 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071374657 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062461143 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062225421 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066173473 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062472291 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06688691 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.06666905 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066717208 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.07169068 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063513552 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061976965 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067950074 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062369518 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063226354 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.10630729 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.064153503 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063951318 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062093346 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065402714 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071984909 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062543105 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.06263591 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066955256 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066239271 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.06304402 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065227514 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063588105 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066699167 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063877044 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061883338 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071254452 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070932981 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067044198 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066747045 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064087119 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063327008 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062358072 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062064176 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071165162 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064131005 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062961736 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064229819 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.072139901 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062401612 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062343111 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.0717423 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061882281 seconds)
  done (took 4.663572309 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071599789 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.116441829 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068366791 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.09613294 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.075744193 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069079163 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068234013 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.096803343 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063417736 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064579496 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076831154 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07732051 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065475267 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066709426 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.070087477 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065585668 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066196388 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064678674 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067882826 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065286884 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068438218 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.070101393 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075034297 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.076702576 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066308572 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065044297 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064771746 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.067111668 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.07601276 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068900876 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067346357 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067686821 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076025521 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068782439 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065417414 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065629893 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.076976429 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.066242149 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065868751 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063918062 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065415715 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.066876002 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.069702195 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077130644 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.069450957 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.07067677 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065643873 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063673732 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076478144 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065800219 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069906469 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077683457 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066659101 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.066240328 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067387776 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076339039 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.066064651 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064811705 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.066085709 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.075976467 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064258289 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067082852 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.079538095 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065419093 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.068858942 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077066329 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070789883 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066759522 seconds)
  done (took 6.37939509 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070981298 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096431684 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073885383 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074072439 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073327218 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073635262 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073929515 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.074009959 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07313802 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074252868 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073936907 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.114777185 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070322559 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078066648 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07360556 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073403626 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.074135632 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073556033 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.074024387 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073946133 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07357962 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07460219 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073967438 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073041027 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075297562 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.070319521 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073757226 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073964741 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074187305 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074007429 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.07623171 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073946256 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074628516 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074246889 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076593103 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073734216 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064100065 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07408649 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.074029196 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.07416838 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069980011 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074224894 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.074348766 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.069888994 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07384411 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073708879 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074658465 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.077203972 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.081184576 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074366488 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.074542344 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074270303 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073497311 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073946797 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073120615 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079581052 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074118406 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074635024 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073633606 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074151424 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074839048 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.08105943 seconds)
  done (took 6.120399939 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.0751515 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067661933 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080858075 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061827654 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060921702 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071119482 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062097475 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061368343 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068181595 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068310201 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069741911 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.07090574 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072379051 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069949204 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071002812 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073023516 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070692919 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072230006 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070341133 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073510224 seconds)
  done (took 2.851484548 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076577232 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080121059 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067038687 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070253895 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066935012 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.071127815 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066607876 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066766661 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067028604 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067089559 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072028805 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.07348096 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069172258 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072680164 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073528795 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.073583228 seconds)
  done (took 2.580931038 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064943892 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069553316 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068519673 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063990273 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065649554 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062957478 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064152506 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062973955 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.065957699 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077462963 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063901875 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066665847 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064531062 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.064129801 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063711896 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.066862207 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.066232015 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063604806 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.065076099 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068533399 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072619705 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.065106712 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.067549584 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06394555 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.066278073 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.073012198 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065498857 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066219311 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.064042929 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.066767722 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066499541 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.07091332 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.066855778 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064926601 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063145927 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063913438 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064895461 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.067304904 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067216965 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064720205 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062700501 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069576287 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064367492 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064857062 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.066030155 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.06666486 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.066046625 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070057461 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064205911 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066744197 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06427509 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065928272 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064818821 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071560775 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066610127 seconds)
  done (took 5.091921289 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078382835 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066719846 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061309191 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061833808 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066345349 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06725371 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067023355 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066686842 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067127292 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061068746 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06677714 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.0659029 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067442322 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068194292 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069037192 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068649537 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062852884 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068865954 seconds)
  done (took 2.663170683 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.073993355 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066570622 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.07158079 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067953042 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.0681169 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068035136 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063290524 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063171797 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063364205 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068212207 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067927716 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.068071604 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063074986 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.06773059 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068096183 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06814266 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.067750617 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062980102 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067676736 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062721934 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067260383 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063162435 seconds)
  done (took 2.922213261 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088925198 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084633546 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.129183476 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082097516 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091061142 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074564919 seconds)
  done (took 2.005715399 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095253155 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104650675 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066131752 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066660711 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075070289 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069160187 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070106635 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071371527 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076746003 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075355837 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071415938 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077068882 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077226194 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073333635 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077271038 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079759043 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071875583 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071268202 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068648098 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079753528 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071639169 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07718445 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071819785 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07181915 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071391428 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073195497 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079841172 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075246223 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071841662 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077484661 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079760676 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071784463 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077102434 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073917462 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068103625 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077246523 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071857229 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079224528 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077053641 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072946679 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06828018 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077140164 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077062969 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073182262 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079529428 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0715319 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073639428 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071643192 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071905411 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081692743 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077294041 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073972434 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077708409 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079509407 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079726979 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081687117 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075343265 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073222665 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077342999 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075746588 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073633059 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077381508 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073207885 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075822246 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080050146 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073353468 seconds)
  done (took 6.439054347 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101690629 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06808558 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071475955 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075879431 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073362988 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071457621 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071754889 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071631744 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071557063 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068632416 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10845516 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071819696 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073332162 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073617477 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072208388 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071909432 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072054989 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073763005 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069133422 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081886804 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071580491 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07358732 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073445148 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073441166 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075235679 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079441691 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071727024 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071441999 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074700909 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071445383 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073237335 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072083377 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07344206 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068600378 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073501211 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071786604 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071937767 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073735645 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071325021 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07734486 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072955047 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079767365 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071599162 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071855969 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075365739 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071665915 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071929974 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069039728 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072329016 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069154687 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076225675 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075972024 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07581469 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073844369 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07189335 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072291721 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072153179 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071874545 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071471742 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079768321 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073180829 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071646016 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081784026 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07196413 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072091685 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073475712 seconds)
  done (took 6.370858656 seconds)
done (took 131.664945754 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218592244 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.192768499 seconds)
  done (took 1.854311936 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075817435 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166983734 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076188068 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075171887 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109224039 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108430726 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076256654 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072897007 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075387308 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072569251 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.142753888 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.077231569 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073878587 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.07490667 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.075765787 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07495547 seconds)
  done (took 2.891788076 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108627704 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.186802752 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.084620733 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072620228 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.117749071 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.079550779 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.075223575 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078393073 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079893774 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.072692421 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.110643978 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084945237 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.077769997 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.080061338 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.07507274 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076974778 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.078791425 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079762777 seconds)
  done (took 3.090193605 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098964742 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.087035075 seconds)
  done (took 1.659238366 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155703853 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105642884 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145013072 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.33177073 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.135994696 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.129328955 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.130460303 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.12554589 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111233654 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122048529 seconds)
  done (took 2.958083777 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106095599 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105770736 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.310392819 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103752048 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.083658413 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.080008727 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.078033858 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082768286 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.077801648 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.079113288 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.124995009 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077689682 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074599007 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127356282 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.102678295 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.109904951 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073538896 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.080972136 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.081962493 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.073183247 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.078350806 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.082845837 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.182493728 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.081431223 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.104059368 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.077915865 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.0801632 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.077129575 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.076742395 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.080841017 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.081927983 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.103529998 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.081361909 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.085375947 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.080195267 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.1005659 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.074448814 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.102481489 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.077091229 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.075184542 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077888688 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.081439066 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.075030173 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.081701908 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.078294493 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.08097085 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.082825978 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.073122946 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.077665884 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.077283146 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074966043 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.07958594 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.079319872 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.080588733 seconds)
  done (took 6.399026377 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108261483 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106498771 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071042596 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113382589 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105694874 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070497975 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.104988634 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101745156 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109138588 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070312454 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071503706 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072381703 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.080005783 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.083200154 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116300729 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108643583 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072684235 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.075417499 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.110898695 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.11059161 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071524745 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.105200448 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.103006293 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110210659 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.071058476 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.07231006 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070988837 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071267651 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07683962 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.078004403 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.07168613 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078985966 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.088493423 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.078685159 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06995657 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070992546 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070882487 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.078861316 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077516982 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07632508 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075179559 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070694721 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071623053 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071767121 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071979684 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070317908 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077581712 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.078372215 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077423202 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070762844 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071485637 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070747445 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071433869 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078585196 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07746197 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079666055 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079116898 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071443065 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071392312 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072971781 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079647957 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.080393256 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079316666 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072383355 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.079802335 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071490262 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081543474 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.085484308 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071711148 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071722035 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071132063 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071119983 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071454979 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077342712 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077574421 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07162809 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071120933 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070675666 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079644856 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077074484 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071479004 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076611434 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071060296 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070735035 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071545701 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071112001 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.076619211 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.077464697 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071484627 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070157091 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070655415 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071137699 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070253867 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.076965012 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077298428 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.077654296 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.076569734 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071127674 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076109505 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07545757 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070444011 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075965521 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070755676 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069867355 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070001612 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075720124 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.075476894 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077782921 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070314415 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070072578 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.076095232 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.216420149 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070546153 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076217182 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078335044 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.07644955 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069711105 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07921259 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070299379 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077557837 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06979731 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07784831 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069598728 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076134125 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06952132 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068872528 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069432371 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075867864 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070319175 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069768304 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07228841 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072001383 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.077937761 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.081399496 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069915623 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07551842 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075431821 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069752602 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075287856 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069692464 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076588747 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070233117 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069850975 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071131369 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081155812 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071927358 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071451092 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071515808 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080504786 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071443455 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080462371 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077428491 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070863031 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.085171733 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079809726 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075474844 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.07820681 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070159826 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070065685 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071182291 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071971501 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077090488 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07872197 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072464335 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071789783 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.077062782 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.080881954 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071610895 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.077601263 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077307749 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.077933394 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071912342 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071287848 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081175007 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.311339031 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077680698 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074844187 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075768407 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069516754 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076671597 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078130272 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071348492 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085300596 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071366481 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081960769 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077847029 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076808958 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078277615 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079404559 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.080039755 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.080261318 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.083328312 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071414363 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.071182286 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.077460925 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.07058661 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071465328 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077193059 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071526495 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071684077 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.082955371 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069238063 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077559015 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.070513828 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.077936729 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070307657 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071528594 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082674588 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071836375 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071531678 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076641845 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071132523 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.076606912 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.08048707 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075776019 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069849464 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.0712575 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077425304 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075609566 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070062692 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069698644 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070020907 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075286016 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074625549 seconds)
  done (took 19.043367275 seconds)
done (took 39.381750007 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.171446583 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116116175 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207864033 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.20043855 seconds)
  done (took 2.274928088 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101558172 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066444521 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081141014 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090767511 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065387849 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076014886 seconds)
  done (took 1.99917278 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.201690675 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175624834 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240682562 seconds)
  done (took 2.126940496 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.368310593 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.152683088 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.22173046 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.511400519 seconds)
  done (took 2.868807111 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110409534 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.102348434 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.07792505 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111052904 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085627402 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063402298 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133465649 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070015773 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099925195 seconds)
  done (took 2.432214535 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.129329588 seconds)
done (took 13.380599206 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.127347263 seconds)
    (2/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.2920348 seconds)
    (3/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.216555601 seconds)
    (4/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.187900391 seconds)
    (5/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.226892871 seconds)
    (6/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.115726825 seconds)
    (7/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.223675524 seconds)
    (8/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.238800209 seconds)
    (9/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.113012148 seconds)
    (10/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072315366 seconds)
    (11/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.239027879 seconds)
    (12/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.18337131 seconds)
    (13/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.243591133 seconds)
    (14/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.079046577 seconds)
    (15/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.265981025 seconds)
    (16/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.187660782 seconds)
    (17/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.221486805 seconds)
    (18/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.06945508 seconds)
    (19/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.146113198 seconds)
    (20/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.072782292 seconds)
    (21/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.078988223 seconds)
    (22/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.201838654 seconds)
    (23/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.187782283 seconds)
    (24/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.202509796 seconds)
    (25/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.079388569 seconds)
    (26/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.073111481 seconds)
    (27/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.076762793 seconds)
    (28/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.177289598 seconds)
    (29/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080339134 seconds)
    (30/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.173706606 seconds)
    (31/341) benchmarking ("sort", Int8, false)...
    done (took 0.156685154 seconds)
    (32/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.079209497 seconds)
    (33/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.080920201 seconds)
    (34/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.181013741 seconds)
    (35/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.19187338 seconds)
    (36/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076676047 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.094474514 seconds)
    (38/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.205485244 seconds)
    (39/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.259435617 seconds)
    (40/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.145344378 seconds)
    (41/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.222552604 seconds)
    (42/341) benchmarking ("sort", Float32, false)...
    done (took 0.140346753 seconds)
    (43/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.136115207 seconds)
    (44/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.067972764 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.12732156 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.079075695 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.075544843 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.078720264 seconds)
    (49/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.165355259 seconds)
    (50/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.158728085 seconds)
    (51/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.195884496 seconds)
    (52/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.071312232 seconds)
    (53/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.0708296 seconds)
    (54/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.196323736 seconds)
    (55/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.177380261 seconds)
    (56/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086669378 seconds)
    (57/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074117405 seconds)
    (58/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.075163532 seconds)
    (59/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.141404931 seconds)
    (60/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.067851158 seconds)
    (61/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.166313319 seconds)
    (62/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.158749643 seconds)
    (63/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073126005 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.123624897 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.1420281 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.084538804 seconds)
    (67/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075423131 seconds)
    (68/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.07411343 seconds)
    (69/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.156233386 seconds)
    (70/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.067721081 seconds)
    (71/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.081682546 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067931415 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.239352341 seconds)
    (74/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.168141181 seconds)
    (75/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.157674584 seconds)
    (76/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.206193113 seconds)
    (77/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.154587981 seconds)
    (78/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.147743949 seconds)
    (79/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.077703319 seconds)
    (80/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.078074894 seconds)
    (81/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.166481972 seconds)
    (82/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.069690834 seconds)
    (83/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.071137266 seconds)
    (84/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.08958845 seconds)
    (85/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.081648438 seconds)
    (86/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.081309343 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.077038454 seconds)
    (88/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.066735998 seconds)
    (89/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.211179151 seconds)
    (90/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.201520274 seconds)
    (91/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.069402516 seconds)
    (92/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.075891857 seconds)
    (93/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.227871852 seconds)
    (94/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.166122694 seconds)
    (95/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.06902227 seconds)
    (96/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.06956826 seconds)
    (97/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.088917247 seconds)
    (98/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.153910028 seconds)
    (99/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.079498774 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.101865607 seconds)
    (101/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.080308023 seconds)
    (102/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075968239 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.095052931 seconds)
    (104/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.070391523 seconds)
    (105/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.068846252 seconds)
    (106/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.083771972 seconds)
    (107/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.075831062 seconds)
    (108/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.086224328 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.076565157 seconds)
    (110/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.069283507 seconds)
    (111/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.092694619 seconds)
    (112/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.079483492 seconds)
    (113/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.079770377 seconds)
    (114/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.069024472 seconds)
    (115/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.069133197 seconds)
    (116/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.068530442 seconds)
    (117/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.06820823 seconds)
    (118/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.082781976 seconds)
    (119/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.091259073 seconds)
    (120/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.078478573 seconds)
    (121/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.184263217 seconds)
    (122/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.075917368 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.09330106 seconds)
    (124/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.080080272 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.086115449 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.072753191 seconds)
    (127/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.070840467 seconds)
    (128/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.070481948 seconds)
    (129/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.077139262 seconds)
    (130/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.142539477 seconds)
    (131/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.146929733 seconds)
    (132/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.069109949 seconds)
    (133/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.068722694 seconds)
    (134/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.200891674 seconds)
    (135/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.080161928 seconds)
    (136/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.13793263 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.078096631 seconds)
    (138/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.076629762 seconds)
    (139/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.231922604 seconds)
    (140/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.161187307 seconds)
    (141/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.069134866 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.077175189 seconds)
    (143/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.146472031 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.07888025 seconds)
    (145/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072998203 seconds)
    (146/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.143020302 seconds)
    (147/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.068375944 seconds)
    (148/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.069676447 seconds)
    (149/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07833149 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.124103834 seconds)
    (151/341) benchmarking ("sort", Bool, false)...
    done (took 0.145216075 seconds)
    (152/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.084442253 seconds)
    (153/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.070713449 seconds)
    (154/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.070269712 seconds)
    (155/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.068340539 seconds)
    (156/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.119671875 seconds)
    (157/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.077236287 seconds)
    (158/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.069857037 seconds)
    (159/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.06667962 seconds)
    (160/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075370697 seconds)
    (161/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.077487643 seconds)
    (162/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.069402086 seconds)
    (163/341) benchmarking ("sort", Int64, false)...
    done (took 0.069914365 seconds)
    (164/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.067729415 seconds)
    (165/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.069050742 seconds)
    (166/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.199084448 seconds)
    (167/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.068420525 seconds)
    (168/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.066681352 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092634711 seconds)
    (170/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.086054377 seconds)
    (171/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.068050092 seconds)
    (172/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.156107904 seconds)
    (173/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.068626391 seconds)
    (174/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.085012622 seconds)
    (175/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.144544093 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.088144912 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067349294 seconds)
    (178/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.068559122 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.140041502 seconds)
    (180/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067710768 seconds)
    (181/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.067839237 seconds)
    (182/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069787927 seconds)
    (183/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.181821655 seconds)
    (184/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.076771851 seconds)
    (185/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.234636409 seconds)
    (186/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.206371542 seconds)
    (187/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.068873517 seconds)
    (188/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.08768591 seconds)
    (189/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.223370552 seconds)
    (190/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.141741512 seconds)
    (191/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.090132084 seconds)
    (192/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066882958 seconds)
    (193/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.074516044 seconds)
    (194/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.09206212 seconds)
    (195/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.08154474 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147333404 seconds)
    (197/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069494423 seconds)
    (198/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.068623885 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.089909116 seconds)
    (200/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090701626 seconds)
    (201/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.078772332 seconds)
    (202/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.17425303 seconds)
    (203/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.068891082 seconds)
    (204/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.077994658 seconds)
    (205/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066523638 seconds)
    (206/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.147319236 seconds)
    (207/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.093566966 seconds)
    (208/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.092885308 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066519459 seconds)
    (210/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.073836587 seconds)
    (211/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068914072 seconds)
    (212/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06801771 seconds)
    (213/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.068334739 seconds)
    (214/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.067194095 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.084136774 seconds)
    (216/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.069147099 seconds)
    (217/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.137819505 seconds)
    (218/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.071874218 seconds)
    (219/341) benchmarking ("sort", BigInt, false)...
    done (took 0.272091218 seconds)
    (220/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.08541872 seconds)
    (221/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.068912016 seconds)
    (222/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.068749907 seconds)
    (223/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.070726603 seconds)
    (224/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.070092945 seconds)
    (225/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.077013203 seconds)
    (226/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.070268367 seconds)
    (227/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083070307 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.076417811 seconds)
    (229/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.069091917 seconds)
    (230/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.071907497 seconds)
    (231/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.073201236 seconds)
    (232/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.146925697 seconds)
    (233/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.070187961 seconds)
    (234/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.069155766 seconds)
    (235/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.068902895 seconds)
    (236/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.078001352 seconds)
    (237/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.072387609 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066723612 seconds)
    (239/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.06859478 seconds)
    (240/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068114813 seconds)
    (241/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.067812693 seconds)
    (242/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.195733407 seconds)
    (243/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.069110147 seconds)
    (244/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.075969202 seconds)
    (245/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.084743683 seconds)
    (246/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.151973271 seconds)
    (247/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.069029375 seconds)
    (248/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.080325037 seconds)
    (249/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.066958121 seconds)
    (250/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.078268871 seconds)
    (251/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.069302526 seconds)
    (252/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.070071966 seconds)
    (253/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.076152924 seconds)
    (254/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.072953085 seconds)
    (255/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.071328415 seconds)
    (256/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067882427 seconds)
    (257/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.06790792 seconds)
    (258/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.072640301 seconds)
    (259/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.095514513 seconds)
    (260/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.075776531 seconds)
    (261/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.073060726 seconds)
    (262/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.077130189 seconds)
    (263/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.086299651 seconds)
    (264/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.067224681 seconds)
    (265/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.172647022 seconds)
    (266/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.068408243 seconds)
    (267/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.233168614 seconds)
    (268/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.068670624 seconds)
    (269/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.080261998 seconds)
    (270/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.067748554 seconds)
    (271/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.071298352 seconds)
    (272/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.069102663 seconds)
    (273/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.147186946 seconds)
    (274/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.086081817 seconds)
    (275/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.069216512 seconds)
    (276/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.213682553 seconds)
    (277/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.095170552 seconds)
    (278/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075265742 seconds)
    (279/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067760351 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094247009 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.06684241 seconds)
    (282/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.075904999 seconds)
    (283/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.154454532 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067779839 seconds)
    (285/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.072379635 seconds)
    (286/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.068670402 seconds)
    (287/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.069262043 seconds)
    (288/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.068460424 seconds)
    (289/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.084516007 seconds)
    (290/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.072414162 seconds)
    (291/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.072566075 seconds)
    (292/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.079607592 seconds)
    (293/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124319001 seconds)
    (294/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.068216449 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.152166812 seconds)
    (296/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.069910805 seconds)
    (297/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.127103252 seconds)
    (298/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.094170525 seconds)
    (299/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.149162651 seconds)
    (300/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.071386318 seconds)
    (301/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.069158427 seconds)
    (302/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.068886397 seconds)
    (303/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.134407477 seconds)
    (304/341) benchmarking ("sort", Float64, false)...
    done (took 0.139382916 seconds)
    (305/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.06883708 seconds)
    (306/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.068279789 seconds)
    (307/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074138423 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.244100434 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.133895483 seconds)
    (310/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.071973293 seconds)
    (311/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.069495025 seconds)
    (312/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.070244179 seconds)
    (313/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.070618156 seconds)
    (314/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.086526203 seconds)
    (315/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.07281757 seconds)
    (316/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.069914255 seconds)
    (317/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.069234938 seconds)
    (318/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.097349309 seconds)
    (319/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076751733 seconds)
    (320/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076696248 seconds)
    (321/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.068860859 seconds)
    (322/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.069173872 seconds)
    (323/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.069869994 seconds)
    (324/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.131129692 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.08035498 seconds)
    (326/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.069727284 seconds)
    (327/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.068613401 seconds)
    (328/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.06944127 seconds)
    (329/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.088361461 seconds)
    (330/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.068711923 seconds)
    (331/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.069411819 seconds)
    (332/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.069175358 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.116499834 seconds)
    (334/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.068957184 seconds)
    (335/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.156939008 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.088330688 seconds)
    (337/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.077105029 seconds)
    (338/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07677558 seconds)
    (339/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.072017618 seconds)
    (340/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.090276032 seconds)
    (341/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.068677691 seconds)
  done (took 37.754001372 seconds)
done (took 39.286929339 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090920255 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.07961553 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080608613 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.07710802 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081085577 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.079868008 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.081175892 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.078748251 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080589077 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079982441 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.080008145 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.067625674 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.076538497 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.083873227 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077073664 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.084681512 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.081438999 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.084764279 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.069203037 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.083717756 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.096867001 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.08057699 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077662905 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.083240733 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.069028719 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.078125684 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093177903 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.090063456 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.075684419 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.078170035 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.076389403 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084086174 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.07602256 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073466863 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.078087817 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.074925639 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.078501488 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.07585051 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.092869083 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.075335199 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068732217 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079734849 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.075594865 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076069692 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.07744538 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080437792 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.073516287 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.085028228 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068772862 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079905614 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.09268377 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074338175 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.0761271 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.077306904 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.073779143 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077855748 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.075418173 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080367835 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073477231 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.080041003 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.080725856 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.0774008 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.067816147 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.076890934 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.075596922 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.075841987 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067291991 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07374994 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.067917549 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.067951771 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067292213 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.07724407 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.075192542 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073883491 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067773717 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.06818096 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067181361 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.080622234 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.074399512 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.078106753 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.06861208 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.073323402 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073355071 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068336462 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073946215 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.080127232 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.067251253 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068373929 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06726272 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.082786772 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.075064042 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.067870573 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.079616128 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073661607 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073583259 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068388469 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.067779686 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073669747 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.07695565 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.06883427 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.067061334 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074062907 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073249601 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.077214177 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.068773737 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073413876 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073793731 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.067368618 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07711885 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.075460326 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.077173294 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.081582676 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.077302192 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.08048052 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.068431285 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.067077848 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077863646 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.068264403 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074438779 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076508128 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.073470978 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.076293515 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.068828125 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.067192494 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073181794 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.074742201 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.068362965 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.068183119 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.068257541 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.077284937 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075444582 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06687868 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.067278525 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.076217825 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.076598569 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.066732264 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.066081587 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.076574984 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.068346266 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.073131599 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.073092012 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.076098759 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.06695452 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.066784754 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.213153268 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.069215894 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.068820509 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.074319841 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074576089 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.06930909 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.077571853 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.074483781 seconds)
done (took 13.218273196 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067310071 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107487829 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.076783841 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.085059578 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.081236377 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.070103859 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073112275 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086410815 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.073100972 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089461526 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.097468149 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.091008266 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096581834 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.068462041 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.069673438 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.069872969 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.067658921 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077032109 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.083888405 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.092402994 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.097858235 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.069100709 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.078405705 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.085899541 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079881021 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.085774937 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.07066054 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.069947121 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.071520561 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.127831242 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.095133722 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.068921196 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070025674 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083357531 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.083856202 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.07663726 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.069688635 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073055577 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069717827 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.069173323 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.071091202 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083681878 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072958935 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073537361 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.07067084 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.070422511 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.069912497 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072595611 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.082338985 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072466107 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077367928 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.080850584 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.070824866 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.07198531 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067996196 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073016177 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.06925683 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.069412411 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069552924 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.06872376 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069336693 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.071348332 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070150215 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070276377 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.073104237 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.071448312 seconds)
  done (took 6.704444061 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083240864 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.095441697 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.084626242 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.084785075 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068514491 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068964625 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069525038 seconds)
  done (took 2.207277611 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068011766 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077401958 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.081960063 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.082142506 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.091785131 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.079378713 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.06983546 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.100804782 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.068708109 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078315828 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.08537563 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.083370983 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.073187694 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.082186342 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.070113877 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.08175479 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070366061 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076990692 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077064659 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.083149728 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073783398 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.100170415 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.083206127 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.069887046 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.083531534 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077170396 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.071676452 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.069937306 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069949041 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069085512 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069209992 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.092352231 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.076160599 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081814835 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070134798 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068499131 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.074068567 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069952201 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.073778288 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.078701981 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.073199637 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.06958083 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.069804633 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.069108883 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.07046164 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.074363379 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.070343111 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.069447966 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.068956031 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.076742278 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068206546 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.075376247 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.071062891 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074090316 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.073811209 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07374921 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07663437 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.069597082 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076552283 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075745605 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069557771 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.082021846 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.081205829 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.07324321 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.081462698 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.078596601 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.075799285 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.073068211 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.068755166 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.068257702 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.069696208 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.081200749 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.072798984 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071479936 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070410506 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074581364 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.073272692 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.084875893 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.084800238 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.08200278 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.072192611 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.069356444 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073560261 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.08468045 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07431721 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069209312 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.07070296 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.069086213 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074522964 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.070310202 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074240781 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069734119 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076356857 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072080537 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.071946719 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077689574 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069600376 seconds)
  done (took 8.941339633 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069958282 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.071665396 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.07053789 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.070743727 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.07099043 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.07087859 seconds)
  done (took 2.109973908 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090806814 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.070421214 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.081863062 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.070362622 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.09238737 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.076880007 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07723447 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071978448 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.086338995 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.080901083 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.077279733 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.079171674 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.075978847 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.071818327 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.076707847 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.071125588 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.075733367 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073021153 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080060712 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072328132 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083462916 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.071904632 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071638695 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082063043 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073295501 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.070884456 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071466509 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080018295 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.079742763 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.071911801 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.071198035 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.073142714 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.078501985 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.071136428 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.076442002 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.081530707 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069812596 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075456994 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072148834 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.073008583 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.078474439 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071560005 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072280261 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.075118971 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.071691907 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.079267325 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.075480939 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.074148991 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.076060122 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.075297262 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.075749836 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070518172 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.073091996 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.075959429 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078728977 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071421823 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.075218755 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.075922007 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.071945296 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078311655 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.0702464 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073575362 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071440305 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.073080996 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.074674148 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075651497 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078450726 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071829336 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071672445 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070138539 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.075078063 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.069955585 seconds)
  done (took 7.070518387 seconds)
done (took 28.669131965 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.553940433 seconds)
  done (took 2.180818608 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.585041539 seconds)
  done (took 2.252132723 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.434735985 seconds)
  done (took 10.100399539 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.306726341 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.334480412 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.745990785 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133020248 seconds)
  done (took 3.229863523 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.756256769 seconds)
  done (took 2.432569317 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231301972 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226534416 seconds)
  done (took 2.14570956 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.337130832 seconds)
  done (took 2.00561265 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.156992158 seconds)
  done (took 2.824474439 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.231116007 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160562421 seconds)
  done (took 2.067067642 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.548986785 seconds)
  done (took 2.219348576 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.289165248 seconds)
  done (took 5.965132295 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.236082533 seconds)
  done (took 1.950450341 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.232552512 seconds)
  done (took 1.914116093 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.053959852 seconds)
  done (took 3.725389092 seconds)
done (took 46.689349769 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084336542 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087289819 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087848708 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.083522305 seconds)
  done (took 1.991182351 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075236402 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.073471841 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.07771487 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.077750716 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.07474735 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.076531482 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.076419987 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.073558461 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074725014 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073908778 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072109548 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.074211039 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.076861974 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.074042847 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076152642 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.07754267 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073678676 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.07370131 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.076651955 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.073849909 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.076514281 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.073626409 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.072026068 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.073403667 seconds)
  done (took 3.471345728 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.07928355 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073334443 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076987793 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.073857489 seconds)
  done (took 1.986103671 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077792271 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077576599 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087171023 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.09198666 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.080195134 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.080958814 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.087833009 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.088982904 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06962754 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.091513672 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.071839848 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.070287898 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070679127 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.090513196 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.08763265 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.06611919 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.067669803 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080948235 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.080112665 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.083395479 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.071796982 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.068797096 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.080259782 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.080539198 seconds)
  done (took 3.587001522 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080159276 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.06819935 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082120111 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.095272479 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.096630282 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.069168535 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.083134508 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.09737 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.132481944 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.069044523 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075453919 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.068789683 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.108628002 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.069447862 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.084747726 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112391488 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115826257 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.073094346 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.102016396 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068983838 seconds)
  done (took 3.440311735 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076701392 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070481909 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.073113009 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.069210238 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.080214145 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.077403659 seconds)
  done (took 2.138588567 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.06957456 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069421131 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068129072 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073599402 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.070966207 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.070988002 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.070435607 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.069140737 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.069441585 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.070245986 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.069768446 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.070469316 seconds)
  done (took 2.525518781 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.157262328 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071911937 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071094774 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067280226 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.073605602 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.073092949 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.085219191 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.071779878 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.089182324 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.070558977 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.070503238 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.072439726 seconds)
  done (took 2.658506471 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101762298 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102980876 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150287071 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121086923 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121631292 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100314036 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122846659 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.0996282 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.165428803 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.140927022 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121402855 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096656759 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089265945 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070281737 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100713409 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102114781 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136850715 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075081983 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115592562 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.166767967 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118751062 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.115960005 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125863 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121489201 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085049513 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125686945 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098858749 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107224243 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128715967 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114927959 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123646298 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.101490885 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.074986763 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.074829188 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152403959 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104947611 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111984951 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.097043592 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104434905 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091747682 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110834863 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.07217638 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.090362949 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.109116906 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088014787 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120907899 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.091278571 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107005604 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083816306 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134347852 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10944734 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101599953 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086223421 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104552895 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132671736 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098169511 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113051835 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10779185 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085039407 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.12019376 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102481978 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.255240596 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095965303 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08253691 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161751834 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090378799 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113697991 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114261198 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083628391 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091201889 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103423077 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132856794 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10811876 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108833279 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115859482 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096004577 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112115906 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.094976892 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.131513142 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097596155 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.076411287 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108723367 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133550693 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089153794 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104803339 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135108964 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095980464 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0808531 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096886855 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.12311841 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08453182 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.100494641 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073562035 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.101645703 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111103518 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102214376 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116542085 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11134969 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082085904 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127285865 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112389272 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076189921 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121753793 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102418808 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157220215 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100304209 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.079848768 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103602472 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097252685 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.151803275 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08858627 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083454039 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102161555 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145895177 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09778604 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.175412911 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100263285 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13365793 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100906046 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090607524 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078285611 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.092992949 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104434438 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110454544 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104502168 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091253797 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.079432184 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089427056 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.257723003 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096235076 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08506799 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118661634 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.106715346 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.079017167 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091964556 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080519129 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130727698 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.081248907 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113428323 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12766954 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.082696152 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108945117 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10273008 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111907417 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.101084448 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111062729 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14460673 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.119874776 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083828923 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.086588299 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112586905 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.150080981 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.116709809 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089222453 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.080801472 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104346572 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115598763 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101797036 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111790631 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104492476 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112080893 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101702595 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145929166 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121385414 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095156354 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098751081 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100609717 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.127414437 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080138549 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15822513 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098052618 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122953894 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088564589 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14561161 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.118956987 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093731317 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088490264 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100318354 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.10873122 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110304371 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145957925 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.098147304 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.075238831 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097306851 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136603993 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080148419 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104046702 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.093737909 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094790111 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118126734 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084231084 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081374136 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068435899 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10123379 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134132607 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069654417 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.276582197 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.119126699 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10539292 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.110120543 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.073044699 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10298297 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141166881 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11002199 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145556264 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12079254 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104754187 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120967933 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.103839122 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10823783 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083170776 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.130260582 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.138292574 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100770831 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095180828 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139829527 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122048558 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.139346373 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.101099621 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120150489 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.109722096 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105849878 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108226075 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.105358617 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14826174 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12434875 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.127681932 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089958471 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109221741 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113329688 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138429479 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086604543 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119945877 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.078132658 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113421407 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079457836 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11130886 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.083032098 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.115720293 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083214236 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10386638 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.073305874 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.077215882 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145054321 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.115805969 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093219835 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089945001 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.1392806 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135175845 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.084382095 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105545705 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107702068 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104502516 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103223027 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11157303 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.088704406 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096510362 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.27687235 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083949983 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.086331604 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103912627 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098389986 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112080811 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088314958 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078428037 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141020429 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107251883 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099443854 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081801212 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099521271 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.124764696 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093395923 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09146305 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10965133 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108190104 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145576812 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.093905675 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.10174127 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121849944 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084136225 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096060515 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.072944788 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088770022 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.079848417 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113745393 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080047959 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113241306 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.072070031 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135231099 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091301656 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.09726729 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106237601 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102409666 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133446447 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096194943 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133473605 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09464407 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106619597 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111572972 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097408102 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084334976 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108346943 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099691507 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113229557 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.100609102 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110163208 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114622135 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098290085 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.149713058 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094187497 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12450349 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109639095 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111891337 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107821697 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118551421 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140947487 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116963886 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115729323 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079431793 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085840942 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107821286 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103297699 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149529774 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10423289 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.074542649 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088702252 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094019458 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.259250874 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108398155 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086613727 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145399586 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089432639 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.089869166 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116081339 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.093863964 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100108114 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079134456 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099390779 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.103499672 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095326587 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096960164 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110531091 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120602517 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115753327 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.136496626 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.10190821 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.09737384 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122846778 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11474899 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114549683 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090417626 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090577053 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128546503 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107613261 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.132970457 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.105565211 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099673199 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106859748 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094356678 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104828781 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101017637 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.115048893 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084218881 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.079790931 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.071907037 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.075751787 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121322284 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112648378 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103092013 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102604372 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.075960744 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107583522 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104843443 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075706865 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090551581 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098039079 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101407378 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085500903 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094784841 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.116447901 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.093376011 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105563106 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102973242 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134935617 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.104387748 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091212569 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145786489 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132867422 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091770816 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097205143 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.074884042 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082908879 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105637787 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147209053 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12092631 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.079512795 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.247673451 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.07934569 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089390732 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073433528 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089743212 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090682379 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104776265 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094194496 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113501324 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104812752 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076875857 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104053241 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098405387 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093196047 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097357507 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103340657 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106396294 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.12454865 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102103394 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098190566 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07797127 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.0824818 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077316553 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08051964 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103571867 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.080505858 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077456364 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13020184 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092454945 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105597636 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110734002 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08793552 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079877785 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137985594 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.073227818 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138747607 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075547679 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086747544 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.084514523 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08352073 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098092504 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109366818 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100816958 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1177524 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110651691 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109342887 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11546673 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159886372 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074981198 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.146965452 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079760293 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079371447 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079880287 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116218053 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093953818 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108921551 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14561463 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093976777 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097267553 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080757756 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133052728 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.102667067 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107741469 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087199339 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083123242 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133114236 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083252749 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.075350588 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093541843 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114740286 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07589948 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105496478 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.251247954 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085216811 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117866316 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.635523896 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094918291 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.080100973 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09899328 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.148314108 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133939688 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086207292 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111991752 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.122196478 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09428403 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087775141 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112460511 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.189001886 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078185053 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099220763 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.108164152 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101814644 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097619419 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.095987425 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.091513111 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.096921283 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.090155758 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084100573 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112132452 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092481482 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095994372 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102164916 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087371179 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.08452165 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136303026 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.108478007 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.086408752 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093711576 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.10483353 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092976366 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096110204 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.072943797 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118739585 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094966978 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105988595 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095320139 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110562287 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123778168 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090865855 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114639996 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.091017673 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111320295 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088271221 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.081851525 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105812454 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.081607196 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081449986 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120694596 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.086508204 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09620761 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107836583 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.099827572 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11816169 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122547042 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116190444 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101994276 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082359006 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089145282 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.091053175 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078775857 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081691595 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.078094837 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.079337443 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.27521395 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087817872 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086306317 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118255446 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086577185 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106374077 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.103285728 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110883896 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084850353 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104331401 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11063275 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093246968 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106100829 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103535823 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.133065722 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151637575 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104015754 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128261082 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13770302 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.081276589 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.07889293 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072546754 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119517326 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083569998 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.084652327 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085007757 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136521939 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.085804523 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099118235 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.234585733 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083325327 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085763107 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101366096 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.074038452 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087299784 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112984195 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089828545 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084859644 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103547265 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086635103 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121183528 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116455506 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09404831 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086671215 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08492154 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098934095 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.108637101 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.133447971 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093903107 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.079301922 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109923849 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107551667 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127383674 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.076394767 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084798489 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.134868609 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096428409 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108245902 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083146337 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125215727 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137925097 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094945778 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137351116 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074142369 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086851199 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093904308 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.130727421 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078052349 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091827553 seconds)
  done (took 66.867947371 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.150815221 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143997917 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.084068939 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.099125132 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.187998942 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198908809 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120149045 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097710377 seconds)
  done (took 2.961900235 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069504273 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084667607 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082691572 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.21583823 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.113992896 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.071052997 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.07637108 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.086332718 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.070825825 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.070702694 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.106576137 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.071698796 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.070972445 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.376167727 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.070335954 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.0756393 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.070959049 seconds)
  done (took 3.615226998 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.329563984 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.470691987 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.235821538 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.71190816 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138995819 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486762224 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077409821 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083670972 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.627297859 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372091144 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131288404 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.090451935 seconds)
  done (took 18.598798594 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076870376 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079419145 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.07967959 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076281337 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075873653 seconds)
  done (took 2.244138081 seconds)
done (took 117.785456239 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084680544 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.176544119 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.07156435 seconds)
  done (took 2.120690243 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.0841422 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.08231086 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.081586227 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079431258 seconds)
  done (took 2.172740243 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.0756578 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077598844 seconds)
  done (took 1.989134814 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.225677264 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176434633 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.094331289 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083667547 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081226335 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.080917763 seconds)
  done (took 2.094885638 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073058644 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072289849 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074064547 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073823642 seconds)
  done (took 2.127901338 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068939115 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067579849 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.071152467 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.073391559 seconds)
  done (took 2.117596474 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.08668785 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084427541 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115186454 seconds)
  done (took 2.121643204 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084880987 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083713911 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079895191 seconds)
  done (took 2.089234967 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110245629 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098795395 seconds)
  done (took 2.045636655 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081020299 seconds)
  done (took 1.923073511 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090935899 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.09972435 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.14253991 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108460043 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140887609 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127013964 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078021007 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078435426 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.07433641 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073323622 seconds)
  done (took 2.851281059 seconds)
done (took 26.071590669 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079837677 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.369517125 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360640389 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088297507 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.67577134 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.360333924 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.010165425 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095890934 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.104337925 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072462992 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089077165 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.674994995 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.998779657 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.330424571 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.985538202 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.325989889 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.65256331 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069593881 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068623789 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069402592 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.995812937 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068568865 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06929544 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069799126 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650771908 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375154816 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070778569 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.32984044 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069200948 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073741909 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.360240869 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.073854898 seconds)
  done (took 16.503675937 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071700566 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123260062 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073375827 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085444615 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072571419 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073275155 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.075304526 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.072181299 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112614757 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069520166 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086625323 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068700602 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.07285224 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070432075 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089258134 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069455867 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071118674 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070712817 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070623467 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070376793 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087859504 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072353324 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072987097 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07231257 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070913462 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082636153 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070553382 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069597007 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069943658 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071526093 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072552782 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070904632 seconds)
  done (took 4.312269262 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.125986904 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.131803769 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.078475043 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.114619203 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.124268785 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.074551365 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.154529478 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.097210312 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.118917108 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072521971 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090416232 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.07248282 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.109163693 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073941671 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.092707108 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072666212 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074137536 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072001745 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069758364 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070302641 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088395517 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069327766 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069656786 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070366745 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069966819 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085030451 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070599383 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069137654 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068955873 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071754651 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073560546 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070675809 seconds)
  done (took 4.623441373 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071605079 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073263045 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080880492 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082483701 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068683283 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071964924 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071876568 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068222028 seconds)
  done (took 2.449826067 seconds)
done (took 29.744814376 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080520185 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070217239 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.075145274 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.091136028 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.077480178 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.074099223 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067825328 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.077357163 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073213569 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07330567 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07436653 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068173298 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.073340586 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.068227911 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07588689 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.069975935 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.075855531 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.073500882 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.074490068 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.075217084 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.07067094 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073840606 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.077832319 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.073005498 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071933564 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.071578576 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076197507 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074823589 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068829115 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070764433 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.071409047 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.083424372 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073855289 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.075894659 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.07001793 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.069759574 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.074413667 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.071052133 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.07426517 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.078610842 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.071590839 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.079148164 seconds)
  done (took 4.937400001 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089497327 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095894601 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088451804 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.082985475 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.10833356 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083170422 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091471022 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080826569 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.078964149 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091217519 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.074960791 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080314538 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081858412 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076175177 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079510904 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076227207 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081883345 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074746237 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080104989 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.07999003 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.09206517 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072854151 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080774255 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081407644 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075451603 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080871872 seconds)
  done (took 4.029911616 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.0744481 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090305213 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.096884654 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.146807821 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.114704245 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.086724112 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.085928924 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.100790915 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102665699 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068995555 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073498255 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096508928 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098074136 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.07666204 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108110114 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087161454 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081749091 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071206244 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075418268 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104496342 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.09268927 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087943682 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101866494 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088681696 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068465686 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078936895 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075850223 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084121705 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.07661176 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081326846 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073291462 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072572753 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069770857 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081393096 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.072961951 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067098861 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091489494 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081416969 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084652172 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107063275 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079370602 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071125053 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099145102 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135200509 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071438598 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.074616923 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074828487 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.084804978 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.076384218 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.101430209 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.090916571 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.071679519 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.089433721 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.072389468 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070569782 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085391739 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.072703602 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.072729146 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082124001 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.076189635 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090292031 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075132594 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090966089 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.07165592 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.083059153 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.073510516 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.073417247 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.070478179 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.108251784 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079064249 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.125672589 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.073050356 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.069625201 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.08439343 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.083504947 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.079164708 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.071452514 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.09205021 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.08393357 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.075500273 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.082416096 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.07358945 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.074547385 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.106525878 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.07090609 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.069515868 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.069009451 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.073524137 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.074071193 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070241835 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082196047 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068768705 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072570006 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084221735 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068603578 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070698943 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072355303 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070423444 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068304096 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079258267 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073021581 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070548877 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081086736 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070051409 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072400833 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083490177 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078632452 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068347874 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.07044889 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071231276 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.073305709 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.075994734 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.074624134 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.074105126 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.078814058 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.079666277 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.077318435 seconds)
  done (took 11.429776178 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.166465115 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.15782002 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.07339355 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.152642385 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07837643 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073664332 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.151728036 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.089611884 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069560146 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070698763 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068786901 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097413394 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.092679295 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104066392 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073500773 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070654378 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095272586 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103163572 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.154510364 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.150606997 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.095855116 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.080419496 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.074243343 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.073716628 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.073252444 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080913471 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.090751818 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078891494 seconds)
  done (took 4.648879904 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077161037 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085112247 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.076848676 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.096757866 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.090444243 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.072787504 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.074247767 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.073857938 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.089575409 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.079793693 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.072449007 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.076387957 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.075838435 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.073272649 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.072853191 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.078619391 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.078908417 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.07074168 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.075949763 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.076848434 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.083193075 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.096810259 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.076292478 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070875073 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073989927 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.072267756 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.078439417 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.082155129 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.072062383 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.102353742 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.069351174 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.0770221 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.086453495 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.073520109 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.071606226 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.072959827 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.073066884 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.072491171 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.072563505 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.070605579 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.07014141 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.077246875 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.070753416 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.078891862 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.086293232 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07921957 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.07365179 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074392242 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.074297412 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.068507217 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073573623 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072676075 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072009612 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077434741 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073386856 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072196963 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070675296 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098806582 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075353547 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068940454 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068755024 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.069888279 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.076554351 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.079374069 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.088371577 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.074127904 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.070120378 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.072559646 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.077351187 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.086373418 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.071603895 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.077922953 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.069653644 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.072247598 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.074463808 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.07488889 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.073454061 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.070069419 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.071972973 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.072017417 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.071999403 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.071624923 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.072020294 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073590218 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.069452967 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.069365327 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.07148972 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.072085261 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075941107 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068273003 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072282302 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070552425 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068405031 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073120492 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074691782 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073967036 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.091778521 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.080464756 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.072537579 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.070366389 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.086621056 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.074343025 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.071184964 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.077886739 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.076385429 seconds)
  done (took 9.868421478 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092318361 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.07328721 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.092508789 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098900482 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.082981942 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.077544764 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.087034248 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.073387901 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087403619 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.06987432 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078746067 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.0679516 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082930438 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078024427 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071300445 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079713596 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072468461 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089748112 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084538926 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068305342 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078702337 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.081616813 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082156797 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087688537 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086994157 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088345656 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081732993 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071779199 seconds)
  done (took 4.18376413 seconds)
done (took 40.951400708 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.937474606 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.10663123 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.933872851 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.131568859 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.223438301 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.066054657 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.071441542 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.929669489 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.087526118 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.960813011 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.270936248 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.367304882 seconds)
done (took 69.016528265 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.994894803 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.079088601 seconds)
    (2/2) benchmarking "String"...
    done (took 2.148782682 seconds)
  done (took 6.087055818 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.531768238 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.932234183 seconds)
    (3/3) benchmarking "different"...
    done (took 1.98256648 seconds)
  done (took 8.308023947 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.017625126 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.973551503 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.191586172 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.930059183 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.936986492 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.294342591 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.746326071 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.394942098 seconds)
  done (took 32.332575211 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.20425617 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.179648881 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.679928998 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.695491156 seconds)
  done (took 16.671767334 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.537289304 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.195171163 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.194370706 seconds)
    (4/4) benchmarking "different"...
    done (took 2.189586724 seconds)
  done (took 11.036712981 seconds)
done (took 86.415874835 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.933036488 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.730154482 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.938112386 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.087458814 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.993652163 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.963490229 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.939557161 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.962709668 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.935443364 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.938330899 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.371040841 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.933620223 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.933078544 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.971447292 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.082560495 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.964602436 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.430035798 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.946002224 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.951016576 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.714827185 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.405750612 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.948641913 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.949562638 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.994498712 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.189546366 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.956812871 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.971078376 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.942876458 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.551201114 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.946310758 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.937421689 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.939798552 seconds)
  done (took 210.318077281 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.933342948 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.997716655 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.054168584 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.951834165 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.418561816 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.127730719 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.080065078 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.460355853 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.939308687 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.959112114 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.120706867 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.934102162 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.126249793 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.920601722 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.929041991 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.032745181 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.212031924 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.152105721 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.932393212 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.122189307 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.952283195 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.936535526 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.892817744 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.106033228 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.968911406 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.039599556 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.959430327 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.943394408 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.124692296 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.179086468 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.960073248 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.96850242 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.11724691 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.800440762 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.947888301 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.941242699 seconds)
  done (took 176.108242565 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.11258217 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.937216312 seconds)
    (2/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.942760509 seconds)
    (3/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.997445062 seconds)
    (4/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.934828737 seconds)
    (5/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.070380152 seconds)
    (6/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.690350788 seconds)
    (7/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.673056575 seconds)
    (8/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.936313493 seconds)
    (9/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.935612646 seconds)
    (10/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.936360684 seconds)
    (11/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.942802241 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.939712377 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.003718616 seconds)
    (14/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.93543089 seconds)
    (15/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.607943334 seconds)
    (16/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.957270438 seconds)
    (17/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.936969184 seconds)
    (18/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.938939261 seconds)
    (19/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.55995375 seconds)
    (20/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.948387469 seconds)
    (21/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.935703582 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.936393634 seconds)
    (23/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.999828689 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.311483704 seconds)
    (25/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.072261178 seconds)
    (26/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.942012448 seconds)
    (27/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.94720401 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.073562008 seconds)
    (29/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.947785308 seconds)
    (30/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.938235708 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.071344955 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.941615904 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.014716323 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.072727318 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.949059494 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.017396631 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.944963996 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.419937707 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.936372662 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.937765566 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.938749048 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.001319617 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.937880222 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.036864801 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.026443466 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.937591684 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.951369506 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.128829801 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.571921696 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.940334497 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.938741359 seconds)
    (52/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.9386861 seconds)
    (53/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.937860928 seconds)
    (54/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.937750326 seconds)
    (55/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.938714739 seconds)
    (56/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.218419365 seconds)
    (57/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.942424416 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.965291202 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.544947396 seconds)
    (60/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.942296016 seconds)
    (61/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.938451329 seconds)
    (62/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.940119527 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.939012247 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.938936289 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.945699545 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.975475064 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.743779766 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.733210578 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.331011845 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.753844166 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.943453639 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.77494151 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.99680955 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.942112125 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.018202409 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.938733589 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.93942094 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.939293546 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.940593517 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.023563891 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.020264935 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.940991152 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.076760316 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.942629504 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.939393321 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.163614782 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.713675031 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.154033574 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.953630938 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.001691652 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.939621588 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.940026109 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.960989357 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.098841971 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.941733893 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.940032842 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.939985261 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.11883544 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.94130686 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.093891962 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.165714415 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.015078747 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.19241765 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.163859479 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.945088301 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.940637542 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.955002988 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.94189529 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.940447091 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.951223135 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.941171744 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.940810805 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.942537663 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.942589509 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.934955481 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.944990863 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.954951779 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.94163032 seconds)
  done (took 429.173203876 seconds)
done (took 819.62987467 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.563335742 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.655250732 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.553013556 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.566088533 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.549522509 seconds)
  done (took 14.760389694 seconds)
done (took 16.636739304 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.971383778 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.95794945 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.947877625 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.003055878 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.969446718 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.953506727 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.987899797 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.987236127 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.972515761 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.954041621 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.991265651 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.957930355 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.974199821 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.975690997 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.019322537 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.984131964 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.956393755 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.949186721 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.001488911 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.959398595 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.959730495 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.955648089 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.95699268 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.992180405 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.02540049 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.968036661 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.955093489 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.992661178 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.965007051 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.990405357 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.011491015 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.976590653 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.989785777 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.020298049 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.010217959 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.025466249 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.96513774 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.016489075 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.963265584 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.030139864 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.001670016 seconds)
  done (took 83.120495833 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.954621507 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.08800076 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.186134104 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.986580089 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.955128653 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.171663749 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.010872157 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.082031281 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.086053003 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.167681677 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.170924191 seconds)
  done (took 24.740213805 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.953088953 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.08881118 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.167013374 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.99043736 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.955370653 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.168394844 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.016809908 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.081430631 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.090863683 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.172037332 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.179785178 seconds)
  done (took 24.749552824 seconds)
done (took 134.487761025 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.321959558 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.977886739 seconds)
  done (took 6.176475128 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.947854213 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.967510585 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.104676968 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.94915565 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.950046207 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.949958157 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.949886686 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.949411362 seconds)
  done (took 17.645484087 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.949544909 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.948842122 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.949604853 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.949583348 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.949249042 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.949109487 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.949389958 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.948953857 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.948830775 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.949176907 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.949417794 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.949729944 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.950869969 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.949232391 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.950030936 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.9503144 seconds)
  done (took 33.069351544 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.950937972 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.950289683 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.950235835 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.95003374 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.950093833 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.950725864 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.952016974 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.950931089 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.951170375 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.9502372 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.951475865 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.950111624 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.950798577 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.95045398 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.951841622 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.95127188 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.952137876 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.951956349 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.952603852 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.951024981 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.951850144 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.950782421 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.953041779 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.948099522 seconds)
  done (took 48.704838597 seconds)
done (took 107.48633777 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.143700369 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.512720443 seconds)
  done (took 8.535970041 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.95596687 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.953233918 seconds)
  done (took 5.858174673 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.952285413 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.952257514 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.951689425 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.952687261 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.953154292 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.954057653 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.95228938 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.952965672 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.953579608 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.953038678 seconds)
  done (took 21.409212926 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.95313994 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.952953804 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.952864426 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.952808065 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.952544822 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.952074001 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.952776996 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.952683738 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.953347598 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.95293605 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.953228952 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.953430445 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.952916703 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.953955008 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.954099187 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.952672443 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.953833208 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.954395996 seconds)
  done (took 37.038729672 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.954759989 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.953256 seconds)
  done (took 5.790728863 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.95413647 seconds)
    (2/7) benchmarking "second"...
    done (took 1.953841407 seconds)
    (3/7) benchmarking "month"...
    done (took 1.953784322 seconds)
    (4/7) benchmarking "year"...
    done (took 1.954029686 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.954717362 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.953150261 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.954290177 seconds)
  done (took 15.560342638 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.954008397 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.101398459 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.151846103 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.555567378 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.955423404 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.957157182 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.790873719 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.957858961 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.959361193 seconds)
  done (took 21.266642196 seconds)
done (took 117.343248196 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.796083944 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.954693903 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.168959857 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.03011697 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.022653637 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.248450085 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.978672724 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.49905952 seconds)
done (took 43.585688267 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.031943339 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.953413583 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.98665436 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.990593254 seconds)
  done (took 22.814691182 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.955650028 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.277720053 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.980381892 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.85435175 seconds)
  done (took 22.968767429 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.333733041 seconds)
    (2/2) benchmarking "read"...
    done (took 2.311576246 seconds)
  done (took 6.534351563 seconds)
done (took 61.238419989 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.95633387 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.956686297 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.956935789 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.956462791 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.956040252 seconds)
    (6/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.956353953 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.956565872 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.956651343 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.956322694 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.956598895 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.957099022 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.956859263 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.957350988 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.956510517 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.957099825 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.957489007 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.956237849 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.958032244 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.95726768 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.957440873 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.957461938 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.957370947 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.957063656 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.957070181 seconds)
  done (took 48.850222028 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.957850939 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.957484687 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.957189889 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.95729679 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.957646004 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.957796397 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.957997421 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.958957754 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.958605727 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.958588298 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.958248096 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.958857447 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.957416798 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.958300268 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.958807748 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.957898536 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.958831227 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.958114768 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.958936207 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.958413889 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.958964425 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.958516391 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.95933186 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.958953954 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.958910131 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.958292382 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.944511933 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.959169441 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.959458133 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.959227739 seconds)
  done (took 60.624802144 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.95993915 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.959009475 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.956252281 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.953090984 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.952389554 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.959685522 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.960273317 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.95919104 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.958701145 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.960036812 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.960436467 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.959980773 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.95893031 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.960537773 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.960657751 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.960499545 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.960578012 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.95954202 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.959931048 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.960517486 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.959962624 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.960997004 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.960563732 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.960699205 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.960112941 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.960302117 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.961527503 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.961046858 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.960479255 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.960532771 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.96026131 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.960720981 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.96106281 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.961247183 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.96088448 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.960341611 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.961925424 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.960517178 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.961195306 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.961176414 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.960802813 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.961314876 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.962310281 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.961423851 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.961334629 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.962258655 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.962354774 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.962018613 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.961905543 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.961329865 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.961308594 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.962807433 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.961666418 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.961661239 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.96296645 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.962754773 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.962831407 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.963192498 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.962974289 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.96234414 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.962288387 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.963169709 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.962454495 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.962292417 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.963625181 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.963151641 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.962964218 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.962877907 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.962896283 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.962977951 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.961872183 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.962630826 seconds)
  done (took 143.079160798 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.962492065 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.963780762 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.962827243 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.963191511 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.963650282 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.963056549 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.963381631 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.963288942 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.963700933 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.963004366 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.963656738 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.962840499 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.963900721 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.963855468 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.96429309 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.9637776 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.963436041 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.963379805 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.964499691 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.9644577 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.963592684 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.964187792 seconds)
  done (took 45.088707136 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.963574549 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.963569477 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.96461087 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.964460406 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.962962663 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.964057615 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.963743939 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.964642357 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.961594022 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.964436134 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.967719516 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.965731865 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.965584955 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.9646974 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.965547728 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.965028316 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.964666669 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.965079689 seconds)
  done (took 37.253700733 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.966002538 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.965296082 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.96552389 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.964907014 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.966124786 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.965313343 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.96549794 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.965156379 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.964959538 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.965810493 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.965197081 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.965765918 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.966539238 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.965984067 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.965768599 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.966702554 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.965941705 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.966392635 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.966560833 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.966783056 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.967303605 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.966721348 seconds)
  done (took 45.143088697 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.966324017 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.966870456 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.96819214 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.966986665 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.967233056 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.967010514 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.966714583 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.967707346 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.966074199 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.9670197 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.967099242 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.967411523 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.967666009 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.967707837 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.967407647 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.967628717 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.96741209 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.96741164 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.967312214 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.96797131 seconds)
  done (took 41.239782579 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.967073169 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.967201903 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.966916422 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.967420017 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.968694366 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.967334581 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.967172736 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.967593422 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.968505623 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.967752362 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.967846085 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.96767091 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.967636417 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.967691208 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.967955035 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.967086181 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.967909676 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.968830513 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.968436058 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.967236559 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.968347828 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.96793563 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.968691462 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.968279886 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.967739375 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.968313718 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.969432614 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.969701844 seconds)
  done (took 56.998012825 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.969223416 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.969855204 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.969242009 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.969903039 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.970117794 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.969205275 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.969683927 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.969784871 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.968979001 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.968707834 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.971509059 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.969608464 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.969225464 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.968933725 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.969464099 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.970390636 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.96953841 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.970481771 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.970973658 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.969930768 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.969662063 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.969659425 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.969671102 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.970319895 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.970864236 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.970203834 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.970157643 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.970413221 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.963470714 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.969792249 seconds)
  done (took 60.986319914 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.989993164 seconds)
    (2/2) benchmarking "in"...
    done (took 1.991384064 seconds)
  done (took 5.878367002 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.95982378 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.970510862 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.961066305 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.970292972 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.971337191 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.971337373 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.970875999 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.971504179 seconds)
  done (took 17.641347252 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.971528674 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.973801096 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.971070332 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.971417511 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.971573774 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.978824487 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.971396641 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.972745784 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.972607785 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.971324828 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.976183234 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.974570566 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.979929632 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.976186117 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.971547621 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.97250166 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.972829439 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.973609769 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.973914715 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.971563712 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.975043241 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.971947775 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.97134719 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.971576798 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.971336466 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.974194156 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.982796393 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.973587047 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.973498509 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.971928093 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.97924271 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.972508258 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.97203611 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.973940485 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.973250607 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.972750374 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.979440803 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.973477469 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.973276106 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.973423724 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.97571967 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.975525852 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.97700885 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.981834125 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.974359964 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.973464082 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.972907792 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.974033437 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.972825013 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.978759182 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.981936964 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.974606431 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.973853288 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.974410169 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.976596277 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.974119822 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.97415114 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.97661628 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.980671075 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.981881977 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.977885327 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.99611711 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.983702841 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.973289077 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.973908897 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.983948596 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.999590324 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.976275761 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.976686708 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.975074995 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.982750496 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.974941145 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.97302342 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.974344808 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.989101242 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.983300873 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.974662952 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.974955064 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.975026467 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.975306812 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.976200524 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.975708087 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.976038415 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.975520943 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.985808973 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.001378465 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.975627398 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.974731688 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.977086989 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.977301519 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.980189039 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.978372388 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.975910132 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.975038067 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.977002151 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.979003822 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.975785731 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.976490216 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.975882142 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.985116434 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.976704262 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.97595979 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.980994348 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.985453253 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.976735039 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.976285045 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.976801369 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.97701776 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.985008147 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.977545207 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.977269147 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.976746741 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.976835384 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.982639148 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.978326477 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.981753255 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.985188308 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.985262283 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.978852411 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.98210024 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.981398073 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.980408533 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.989789249 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.003214154 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.977382052 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.982282121 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.983564046 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.990287083 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.981896421 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.977871384 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.981927546 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.977890541 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.978522524 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.980577863 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.978336311 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.978175193 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.979063816 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.978635863 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.978626407 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.979500639 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.98140199 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.980085676 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.980611042 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.979556229 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.983818926 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.978861598 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.981270228 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.986353029 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.978969692 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.978753666 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.979496919 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.981830855 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.980411328 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.980353959 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.978569153 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.979586219 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.980045419 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.980169837 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.981613771 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.980046323 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.980773145 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.980101469 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.984707322 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.980312645 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.980578167 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.980351857 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.980323478 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.980836569 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.982107922 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.981394814 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.982358373 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.980435578 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.985269901 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.980704346 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.981000113 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.980709556 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.98034011 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.980021044 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.984001286 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.991908944 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.984620506 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.99131229 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.98105198 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.98801242 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.981536209 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.982385643 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.981882321 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.981807075 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.981854332 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.980862006 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.982055131 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.985224793 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.004675523 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.992267715 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.984716817 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.983214694 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.987024943 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.986724996 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.987902591 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.982218846 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.982568455 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.983625401 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.981721421 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.982872374 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.982350208 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.985341615 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.981393983 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.982843177 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.986417314 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.982264931 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.982946666 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.982921149 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.983308389 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.984746498 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.982715594 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.981667639 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.982466076 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.983336779 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.991216009 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.985601479 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.982822374 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.98409908 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.986636785 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.983652429 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.983858907 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.984192222 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.987455351 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.983438127 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.984547822 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.991156888 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.984452742 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.98377521 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.983553296 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.984791956 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.986892315 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.984064432 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.987543992 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.993287484 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.987014116 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.984861513 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.990213277 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.984695445 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.986753028 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.985059426 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.985796859 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.984729247 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.986547748 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.984320152 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.984606862 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.992983443 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.984784638 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.985540536 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.987752771 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.987920813 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.985893181 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.987451701 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.984869394 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.98901891 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.994117208 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.992091719 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.986039852 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.987854087 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.98716657 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.987201924 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.989366432 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.986465808 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.000864691 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.995830518 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.986233074 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.986522999 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.985564095 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.99104481 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.986621861 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.98615245 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.993961164 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.985852559 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.986573318 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.991024857 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.985620756 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.986082169 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.994031612 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.989118231 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.989164149 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.988570561 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.986759463 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.987915298 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.987220836 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.989576612 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.987163274 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.989097165 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.991030723 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.984319363 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.988606632 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.986223604 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.99664257 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.98765322 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.987598526 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.994723726 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.98976321 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.987348889 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.98864701 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.98724419 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.98828502 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.988787369 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.98844696 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.989618132 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.989068899 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.991891383 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.999473114 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.992227351 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.996235139 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.990331989 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.999267484 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.988441222 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.989397253 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.988498303 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.992429397 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.996941878 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.988877612 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.987859458 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.997361787 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.989297374 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.990495367 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.993411903 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.988244212 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.988704553 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.989148072 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.990060391 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.994227709 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.993145654 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.989636799 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.989324956 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.989556589 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.988299931 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.992772215 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.991076463 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.990091033 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.989832909 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.989214583 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.98995578 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.990225997 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.99053535 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.991179613 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.989949503 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.990652744 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.99813309 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.990857557 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.990362275 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.994468807 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.991005457 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.998681832 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.990905987 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.990950573 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.992451256 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.991357809 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.993752655 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.991035807 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.990455169 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.991034122 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.991333096 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.992290819 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.003799837 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.99907743 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.993832868 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.993411974 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.991593027 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.992912921 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.001943735 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.016866593 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.991828727 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.993357564 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.996528894 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.998274751 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.993989981 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.998238851 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.995753508 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.001087486 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.993426922 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.992465902 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.996153538 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.00541342 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.992687726 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.993118164 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.992812617 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.997393951 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.99463787 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.992357841 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.992974187 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.996663174 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.993016992 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.004646851 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.993610975 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.994046494 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.992933339 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.992715166 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.993003293 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.993180849 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.994496315 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.995319571 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.993835264 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.993340243 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.995671501 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.99940646 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.993266454 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.997212327 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.003372894 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.994032233 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.99295717 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.995002669 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.993358172 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.995745357 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.994517138 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.993025123 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.994655266 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.994407733 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.994840238 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.998332494 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.004126774 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.995646852 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.994305344 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.994840654 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.998182106 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.993257666 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.99543288 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.996093967 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.002915514 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.999000737 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.005797552 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.005648452 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.994936856 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.996123607 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.003648181 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.003693088 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.995489254 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.99539822 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.994930263 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.998694326 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.998298996 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.997287239 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.996148265 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.996034098 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.001408564 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.996498059 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.995414289 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.995834925 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.996937011 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.998422686 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.998343437 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.001943867 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.996931763 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.996240402 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.996329009 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.997499622 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.998574163 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.999609716 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.997618803 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.996758745 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.99911806 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.999013572 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.001321448 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.9969679 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.998497467 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.999276616 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.997872767 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.997982273 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.997098057 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.998000562 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.9973885 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.001716398 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.007175919 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.997412041 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.999070292 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.999548755 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.001581471 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.998127299 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.998237047 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.998607331 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.998095413 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.006571686 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.000035407 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.997901102 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.998046816 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.998905343 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.004643458 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.999390992 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.002797092 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.995386888 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.999279179 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.997988232 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.002737878 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.008615714 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.004486773 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.002133024 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.007614937 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.003483293 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.001647449 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.000249492 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.998290833 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.99986224 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.999911069 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.00353071 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.001616039 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.002703297 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.000644651 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.002595344 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.999801709 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.00237637 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.965914357 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.998400196 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.003921787 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.010613068 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.009224755 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.99905762 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.002215732 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.00006986 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.982318847 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.011672061 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.999680677 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.999741533 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.000242295 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.001522422 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.001647425 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.007832869 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.010014863 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.00522079 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.00019983 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.006428001 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.020309511 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.003554777 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.011076426 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.032925045 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.002341893 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.001172562 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.001550104 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.002176472 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.002008081 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.004520701 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.001159931 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.003863871 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.002166208 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.002132149 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.009846014 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.997210139 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.99682072 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.99753159 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.998570925 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.003844724 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.997273669 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.003948241 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.997192523 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.997468465 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.997694826 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.999902271 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.997324661 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.9973639 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.997178537 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.000090907 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.997026571 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.99782799 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.006796707 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.998945364 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.999566186 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.49909745 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.009814818 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.998089763 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.997674522 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.997842313 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.003632033 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.001284912 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.995793383 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.978079118 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.006743759 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.002330184 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.007221003 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.999871865 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.999840735 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.000086517 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.99946802 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.998573865 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.012241064 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.010469597 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.999180653 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.999234677 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.006269068 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.999104843 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.006764269 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.005407307 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.998805298 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.000968795 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.999860936 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.997573004 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.998341708 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.997854428 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.002589375 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.007652719 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.996991678 seconds)
  done (took 1188.25272223 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.996180191 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.984643291 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.995163477 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.992586916 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.991812333 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.992757598 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.968680773 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.992865425 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.993188108 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.992891333 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.992573318 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.99221063 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.992912482 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.992830479 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.992645584 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.993515545 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.993061892 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.992713292 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.990152899 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.989843654 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.990500346 seconds)
  done (took 43.73800207 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.991328264 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.987071608 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.987003251 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.988194631 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.988911831 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.991730778 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.986892061 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987840645 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.987611366 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.987259254 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.986790074 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.987143033 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.988313471 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.987257061 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987730921 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.988338086 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.98600005 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.9861694 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.986532322 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.98655062 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.987378841 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.98689471 seconds)
  done (took 45.645885415 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.987411034 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.987358849 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.988689745 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.987299753 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.986952141 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.98665729 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.986936439 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.988793058 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.985940868 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.986304121 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.993746612 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.99515595 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.987169946 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.989226693 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.986833959 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.986750003 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.131975887 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.987274139 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.986813409 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.986703688 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.986772631 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.993409824 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.988394356 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.981128848 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.986602027 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.987558828 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.987480533 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.988393966 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.987734485 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.988315829 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.99200249 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.986794646 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.98940673 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.988763136 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.986903794 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.961216097 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.981334843 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.988757991 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.985802218 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.98530154 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.995442075 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.011220596 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.987088782 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.98500152 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.993087007 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.984823516 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.985320257 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.988716673 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.994791763 seconds)
  done (took 99.465965448 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.983926402 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.985114377 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.984726942 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.985415401 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.984752381 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.983576077 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.983844155 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.984319077 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.985352924 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.984252236 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.985250679 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.985125237 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.985907198 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.984707814 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.985120158 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.985038403 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.985599146 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.985596314 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.986330777 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.985660002 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.986075199 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.985993843 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.986013772 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.986050324 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.986413814 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.986610599 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.986648256 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.985672149 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.985963656 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.986398906 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.986908576 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.987430745 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.985775199 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.986120843 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.987142085 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.987184353 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.987329961 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.986882659 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.986240745 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.986251135 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.986986181 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.986911949 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.986635331 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.987460996 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.986475021 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.986745832 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.985879424 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.986234823 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.988756455 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.985687554 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.985889935 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.987064298 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.986398907 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.988270395 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.986830082 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.986466503 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.986723692 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.986348568 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.988016124 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.987117994 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.986732856 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.986687435 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.987000426 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.988508036 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.987135477 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.987321133 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.987380517 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.988962827 seconds)
  done (took 136.977795996 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.988317458 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.987637318 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.986737742 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.987543039 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.987663293 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.987794532 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.987878348 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.987289114 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.988265176 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.988626652 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.986944088 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.987552144 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.986536164 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.986638125 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.988843056 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.979526467 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.979855936 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.979255798 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.980491638 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.981045118 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.977834486 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.978927539 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.978293061 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.978727663 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.982101789 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.977352364 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.978096341 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.977226983 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.977577935 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.979195405 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.977756532 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.976924407 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.977204085 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.977940076 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.978678218 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.976559397 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.97614075 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.975987766 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.975401086 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.978486034 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.976051796 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.976670639 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.976246836 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.976349436 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.979536881 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.975614844 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.975524284 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.97564685 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.975445712 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.975863742 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.975978725 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.976312397 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.974209455 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.975040551 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.974935083 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.975804649 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.974923189 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.974919134 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.974254757 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.975584344 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.975979528 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.975199688 seconds)
  done (took 124.653910154 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.974435795 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.974341714 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.97631119 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.974186954 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.973977671 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.973680083 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.974915418 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.974165442 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.974299852 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.973593928 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.97383213 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.974271769 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.975274773 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.974093768 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.973780784 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.974920789 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.974940653 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.975268886 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.974559582 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.974382556 seconds)
  done (took 41.389213863 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.973532741 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.974553719 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.973929574 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.973675604 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.973300227 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.974232994 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.975617934 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.973691354 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.974545165 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.974007025 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.974137693 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.974655373 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.972957133 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.973581942 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.973462915 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.973291643 seconds)
  done (took 33.482794593 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.972719138 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.972970859 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.973198835 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.972999652 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.974452329 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.973264933 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.973061221 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.972875989 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.973126505 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.974514953 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.97379779 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.973172369 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.972482645 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.972936447 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.97313335 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.973522696 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.97176789 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.972947844 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.972192679 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.972556274 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.973300408 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.971613014 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.972377637 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.972448762 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.971746416 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.973649868 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.972042316 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.972141067 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.972577708 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.972505787 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.972520935 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.972379287 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.972296353 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.971708848 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.97192138 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.972422521 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.971157852 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.971826722 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.97151779 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.972378031 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.971913989 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.971548525 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.972101063 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.972255668 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.9729092 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.972877649 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.971289897 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.971433979 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.97142467 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.971857137 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.972837227 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.971142046 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.972184377 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.971165375 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.971837963 seconds)
  done (took 110.386927391 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.971667827 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.9708865 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.971409117 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.971032666 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.972171686 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.970857838 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.971611175 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.971108373 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.971059135 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.971123847 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.971252487 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.971198115 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.970669004 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.970675331 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.971804299 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.970796683 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.971319946 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.971023674 seconds)
  done (took 37.381511677 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.97119463 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.971263701 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.971455354 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.948495644 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.959206892 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.970370151 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.971405759 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.97003509 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.971459607 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.970927277 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.970636212 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.971522467 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.970188892 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.971921525 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.970697445 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.970468466 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.971727017 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.970196128 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.970050612 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.97104084 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.970719923 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.970559067 seconds)
  done (took 45.223188774 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.970070735 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.969247356 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.983292182 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.989267212 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.989009764 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 1.998913312 seconds)
  done (took 13.795637766 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.970155137 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97198887 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.969886043 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970641517 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969979563 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.969930041 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.970527317 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969731099 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969892295 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.970018738 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969825298 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971073908 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970139154 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970271965 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970282912 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970265057 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970667717 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.970404844 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970582412 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969731511 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.97049569 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.97078745 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970930324 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.97055369 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970647483 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.971059186 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971777321 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970404401 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970965845 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969918691 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971284878 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972558421 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970883324 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971094138 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971847882 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970616662 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.973442413 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.973588994 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97121089 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970990091 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.971310542 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970538254 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971685443 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971242747 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971712273 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971653558 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971622289 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.97220599 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970289051 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97166794 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969820211 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971405528 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971433162 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971811138 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971472826 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.97113999 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.971289551 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971802395 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.9710817 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.97164503 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.973033031 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971987167 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.973482715 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973419423 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973501064 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.972958924 seconds)
  done (took 131.995297584 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.972654238 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.972646151 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.972772742 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972576789 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.972911202 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.974130451 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972908841 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.973379755 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.973232712 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973517073 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97475845 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973290586 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.973806248 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972706793 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973523788 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.975006802 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.974707748 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.974132661 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.9736644 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973355424 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.974519869 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973921545 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973634624 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.974334055 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.974521072 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.975243388 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.973701562 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973487054 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.974297965 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97404956 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.975527317 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973881235 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.974456624 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.974288143 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973362057 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.975043159 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.974384857 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.974110352 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.97373603 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.974805024 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.97595363 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.975450647 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.975248722 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.975457791 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.975011454 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.974902257 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.975839588 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.975671504 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.975586804 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.974638621 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.975673553 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.976561704 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.975598721 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.975806158 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.975389824 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.975779947 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976235353 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.975864837 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.961182917 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973696154 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.975857272 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97687242 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.976618394 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976539375 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976764107 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976300847 seconds)
  done (took 132.211441383 seconds)
done (took 2749.279568922 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.074458438 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.054283724 seconds)
  done (took 16.03066909 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.141071016 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.012122267 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.165863863 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.094133296 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.007340681 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.007045963 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.978754325 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.979535439 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.071839321 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.97903046 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.988792295 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.979167194 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.978877476 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.978474831 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.97944857 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.980930257 seconds)
  done (took 54.23317737 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.984218498 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.9865462 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.983979436 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.981801354 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.995105119 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.058537405 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.006096707 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.986685422 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.996732068 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.015519803 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.999579222 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.987991928 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.990126104 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.988594915 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.074823804 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.028178215 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.041290371 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.057808257 seconds)
  done (took 38.066782634 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.063098078 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.988333779 seconds)
  done (took 10.963219529 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.98694231 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.002279848 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.00043298 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.010819286 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.994523877 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.004922244 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.018435942 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.017299134 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.996021084 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.012884608 seconds)
  done (took 71.959090859 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.985762646 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.984672144 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.290489876 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.992453711 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.992107974 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.009867461 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.981865893 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.01552553 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.984153671 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.981292694 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.995512567 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.299186141 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.996582719 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.984417064 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.400466383 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.99500679 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.989190127 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.014740445 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.019022955 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.988832349 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.989846851 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.987664711 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.146936676 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.689631573 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.98473395 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.990020921 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.992111957 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.981558824 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.981208239 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.984689499 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.987084423 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.983296442 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.988377885 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.986172239 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.991802625 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.989489089 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.490503084 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.004332207 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.983884005 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.080688707 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.029878643 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.991146627 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.82168523 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.987497507 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.98206846 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.994333675 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.665223202 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.070405104 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.985492989 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.167495104 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.315405743 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.999842485 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.165993926 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.145632495 seconds)
  done (took 139.342434226 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.981104957 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.218644805 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.133362698 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.983457626 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.238027669 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.191178241 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.982543126 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.030218311 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.983262753 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.183197798 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.233726181 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.08426745 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.98293564 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.98073156 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.983095023 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.980850182 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.128924632 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.048173707 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.98408543 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.980238157 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.006175547 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.181688479 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.102345616 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.984495968 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.006850369 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.187305402 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.102244259 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.068283809 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.751258952 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.980968896 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.043621062 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.983362066 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.981559503 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.980700703 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.134303517 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.075190241 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.065482117 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.983823874 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.981649391 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.981938818 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.659009276 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.182938066 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.077035603 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.104609652 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.229333116 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.195223293 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.590565326 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.981810733 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.607268553 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.14886751 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.187097488 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.189396176 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.10033524 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.986182595 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.532727415 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.982547992 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.982886426 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.204139386 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.229146207 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.081901631 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.985469953 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.982719524 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.983496727 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.220842238 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.986898026 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.075248016 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.985354018 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.983312355 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.075919117 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.083968948 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.223006335 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.203980626 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.014233476 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.309446778 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.472161143 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.185993475 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.049363818 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.203859285 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.98574518 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.984044156 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.063021141 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.816900922 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.23499198 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.224467404 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.181205273 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.014518594 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.634483944 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.983990651 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.171231605 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.173921472 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.21681333 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.23105233 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.217819203 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.335168542 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.985095027 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.984925621 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.278095045 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.102041769 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.932729347 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.340152138 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.213512442 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.512686472 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.012593932 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.312121378 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.113691345 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.988446404 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.6325188 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.987642791 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.190292745 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.023167974 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.98657625 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.987245326 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.175259006 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.894677609 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.984903271 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.936278991 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.045721852 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.989445869 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.18936792 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.989302812 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.230088718 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.988501998 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.217880057 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.603830131 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.016783438 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.212807256 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.23015902 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.623309147 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.225955014 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.226991642 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.100363101 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.256843666 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.989696869 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.986268649 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.247627041 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.989541793 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.987140514 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.154918618 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.987974755 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.164457925 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.989723424 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.236434709 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.007881453 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.201813835 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.988032255 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.224770541 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.020057583 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.037248918 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.990831114 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.117497667 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.989853621 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.834744948 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.143959129 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.99187598 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.987910477 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.730203957 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.989299929 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.135969722 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.212736213 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.008847377 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.056483696 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.553527723 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.98796881 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.070508072 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.010625001 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.629883152 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.990131542 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.236093664 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.951396092 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.471352805 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.989130289 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.22194852 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.223008292 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.994435167 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.989147662 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.832976928 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.988941906 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.989524018 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.144692614 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.421914684 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.895972376 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.186942376 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.995340825 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.117296103 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.991764308 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.063814944 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.33411028 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.98951811 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.990400299 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.990642106 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.989809011 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.991120624 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.249800329 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.016410365 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.435169818 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.126520517 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.244475732 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.296901282 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.18546106 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.03089172 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.992079236 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.2142669 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.993857562 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.052736608 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.992724239 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.010376311 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.217620674 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.994177729 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.196162937 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.224863457 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.883396518 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.037938536 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.993445121 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.991686309 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.977716173 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.140533685 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.077972283 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.99535927 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.991151854 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.104865671 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.112196596 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.172471895 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.814844059 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.107884219 seconds)
  done (took 927.795420588 seconds)
done (took 1260.299914776 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.990918505 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.996792667 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.997240763 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.993246384 seconds)
  done (took 29.896752221 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.993016996 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.994729035 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.99437263 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.995826672 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.994391822 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.994452855 seconds)
  done (took 13.885590136 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.992240052 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.997168311 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.99839369 seconds)
  done (took 22.906844661 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.418242689 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.401790493 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.072075925 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.143989195 seconds)
  done (took 10.955744437 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.997963409 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.994827249 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.99558737 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.996476661 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.996114158 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.995331865 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.997146013 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.996798349 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.996691425 seconds)
  done (took 19.893763971 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.143178838 seconds)
done (took 103.604879197 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.078408194 seconds)
    (2/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.313165475 seconds)
    (3/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.105960643 seconds)
    (4/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.239590037 seconds)
    (5/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 6.996406013 seconds)
    (6/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.466330446 seconds)
    (7/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.025140615 seconds)
    (8/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.16343238 seconds)
    (9/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 6.999761535 seconds)
    (10/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.119340905 seconds)
    (11/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.279595672 seconds)
    (12/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.855431023 seconds)
    (13/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.393737237 seconds)
    (14/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.008230283 seconds)
    (15/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.004632082 seconds)
    (16/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.290853881 seconds)
    (17/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.185345235 seconds)
    (18/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.098464352 seconds)
    (19/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.10197111 seconds)
    (20/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.095362856 seconds)
    (21/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.01379799 seconds)
    (22/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.895477946 seconds)
    (23/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.356328852 seconds)
    (24/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.391276192 seconds)
    (25/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.012532403 seconds)
    (26/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.092172498 seconds)
    (27/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.007093849 seconds)
    (28/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.472562584 seconds)
    (29/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.012932009 seconds)
    (30/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.938066184 seconds)
    (31/341) benchmarking ("sort", Int8, false)...
    done (took 4.940062666 seconds)
    (32/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 6.998368255 seconds)
    (33/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.078091974 seconds)
    (34/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.864493763 seconds)
    (35/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.031964455 seconds)
    (36/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.006855577 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.385520845 seconds)
    (38/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.326996834 seconds)
    (39/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.137490492 seconds)
    (40/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.188422421 seconds)
    (41/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.261621886 seconds)
    (42/341) benchmarking ("sort", Float32, false)...
    done (took 5.642922447 seconds)
    (43/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.09920052 seconds)
    (44/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.325968742 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.129612761 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.079525773 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.225710268 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.08336746 seconds)
    (49/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.275129361 seconds)
    (50/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.000000298 seconds)
    (51/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.217311109 seconds)
    (52/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.058354234 seconds)
    (53/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 6.997747943 seconds)
    (54/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 8.364635808 seconds)
    (55/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.004157441 seconds)
    (56/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.416300523 seconds)
    (57/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.00828064 seconds)
    (58/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.084876542 seconds)
    (59/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.146768474 seconds)
    (60/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.117307442 seconds)
    (61/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.198197584 seconds)
    (62/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.02642535 seconds)
    (63/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.024481047 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.307728833 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.125213943 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.243439855 seconds)
    (67/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.008958932 seconds)
    (68/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.095091793 seconds)
    (69/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.998880075 seconds)
    (70/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.534282433 seconds)
    (71/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.159718522 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.602761271 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.868871655 seconds)
    (74/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.28370257 seconds)
    (75/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.201443373 seconds)
    (76/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.225091597 seconds)
    (77/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.029162801 seconds)
    (78/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.251617952 seconds)
    (79/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.014260724 seconds)
    (80/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 1.997113956 seconds)
    (81/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.113218974 seconds)
    (82/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.476846849 seconds)
    (83/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.002222726 seconds)
    (84/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 4.31555612 seconds)
    (85/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.088079047 seconds)
    (86/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 6.998177657 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.093685494 seconds)
    (88/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.077962148 seconds)
    (89/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.239047928 seconds)
    (90/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.182999117 seconds)
    (91/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.330723796 seconds)
    (92/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.249393676 seconds)
    (93/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.003610672 seconds)
    (94/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.155580573 seconds)
    (95/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.119334327 seconds)
    (96/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.302177489 seconds)
    (97/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.481422958 seconds)
    (98/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.00282904 seconds)
    (99/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.072561324 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 2.971818054 seconds)
    (101/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.999466407 seconds)
    (102/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.107006298 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.024078539 seconds)
    (104/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.006986032 seconds)
    (105/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.180200725 seconds)
    (106/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.325662953 seconds)
    (107/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.016722162 seconds)
    (108/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.690958263 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.01302936 seconds)
    (110/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.31732253 seconds)
    (111/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.878010166 seconds)
    (112/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.146084811 seconds)
    (113/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.64011872 seconds)
    (114/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.548683736 seconds)
    (115/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.004458931 seconds)
    (116/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.237765027 seconds)
    (117/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.140404234 seconds)
    (118/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.545008247 seconds)
    (119/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.277024717 seconds)
    (120/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.007135198 seconds)
    (121/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.094003861 seconds)
    (122/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.083580866 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.593618919 seconds)
    (124/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.015039441 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.303943012 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.274984187 seconds)
    (127/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 2.956188002 seconds)
    (128/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.128119746 seconds)
    (129/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.018080221 seconds)
    (130/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.087111911 seconds)
    (131/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.138642281 seconds)
    (132/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.238361466 seconds)
    (133/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.329124528 seconds)
    (134/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.419761366 seconds)
    (135/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.64611889 seconds)
    (136/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.136945652 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.019103208 seconds)
    (138/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.080843925 seconds)
    (139/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.31156361 seconds)
    (140/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.646971862 seconds)
    (141/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.336225005 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.100183587 seconds)
    (143/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.083337915 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.286647062 seconds)
    (145/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.153698947 seconds)
    (146/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.133939471 seconds)
    (147/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.69868983 seconds)
    (148/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.21842853 seconds)
    (149/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.319050289 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.003848449 seconds)
    (151/341) benchmarking ("sort", Bool, false)...
    done (took 2.271231511 seconds)
    (152/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.093193917 seconds)
    (153/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.235511657 seconds)
    (154/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.689752158 seconds)
    (155/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.815361529 seconds)
    (156/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.243422731 seconds)
    (157/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.007099186 seconds)
    (158/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.033060909 seconds)
    (159/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.200203179 seconds)
    (160/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.019695453 seconds)
    (161/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.017842604 seconds)
    (162/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.003630932 seconds)
    (163/341) benchmarking ("sort", Int64, false)...
    done (took 5.717755205 seconds)
    (164/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.302392208 seconds)
    (165/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.085955026 seconds)
    (166/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.821994106 seconds)
    (167/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.011186967 seconds)
    (168/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.151769809 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.761130173 seconds)
    (170/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.929808762 seconds)
    (171/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.429007395 seconds)
    (172/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.793114169 seconds)
    (173/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.215657602 seconds)
    (174/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.394023853 seconds)
    (175/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.36946712 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.057043081 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.218229113 seconds)
    (178/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.404281393 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.118520984 seconds)
    (180/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.818338115 seconds)
    (181/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.560074282 seconds)
    (182/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.265258916 seconds)
    (183/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.182722957 seconds)
    (184/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.027959899 seconds)
    (185/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.404390334 seconds)
    (186/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.793001418 seconds)
    (187/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.157661982 seconds)
    (188/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.875614508 seconds)
    (189/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.374489494 seconds)
    (190/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.581602227 seconds)
    (191/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.137745889 seconds)
    (192/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.186471375 seconds)
    (193/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.219932154 seconds)
    (194/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.91303376 seconds)
    (195/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.904751434 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.009778972 seconds)
    (197/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.092768457 seconds)
    (198/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.007781908 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.350839961 seconds)
    (200/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.782075032 seconds)
    (201/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.01402762 seconds)
    (202/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.055930785 seconds)
    (203/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.348111853 seconds)
    (204/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.14707644 seconds)
    (205/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.125826619 seconds)
    (206/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.01495894 seconds)
    (207/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 3.859847563 seconds)
    (208/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.023787293 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 4.016768957 seconds)
    (210/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.277722678 seconds)
    (211/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.091343895 seconds)
    (212/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.397353401 seconds)
    (213/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.320311835 seconds)
    (214/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.02853023 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.294438258 seconds)
    (216/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.114967938 seconds)
    (217/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.142783523 seconds)
    (218/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.067997087 seconds)
    (219/341) benchmarking ("sort", BigInt, false)...
    done (took 7.006483831 seconds)
    (220/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.29289069 seconds)
    (221/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.331478543 seconds)
    (222/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.225377363 seconds)
    (223/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.017086094 seconds)
    (224/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 8.608965102 seconds)
    (225/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.243801488 seconds)
    (226/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.007105646 seconds)
    (227/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 4.310836657 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.037596119 seconds)
    (229/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.783812998 seconds)
    (230/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.117259774 seconds)
    (231/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.145496942 seconds)
    (232/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.207498756 seconds)
    (233/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.425932535 seconds)
    (234/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.154574171 seconds)
    (235/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.105874236 seconds)
    (236/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.876301131 seconds)
    (237/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.334122355 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.360860008 seconds)
    (239/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.229905322 seconds)
    (240/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.020810354 seconds)
    (241/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.326537455 seconds)
    (242/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.998175636 seconds)
    (243/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.268969283 seconds)
    (244/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.411282848 seconds)
    (245/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.096069724 seconds)
    (246/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.03628316 seconds)
    (247/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.224220226 seconds)
    (248/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.755041439 seconds)
    (249/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.109932644 seconds)
    (250/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.311186826 seconds)
    (251/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.405027625 seconds)
    (252/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.010639891 seconds)
    (253/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 3.502709414 seconds)
    (254/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.397311045 seconds)
    (255/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.97957813 seconds)
    (256/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.539052551 seconds)
    (257/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.244591827 seconds)
    (258/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.254299156 seconds)
    (259/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.013314839 seconds)
    (260/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.096337414 seconds)
    (261/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.096300218 seconds)
    (262/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.093469763 seconds)
    (263/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.211074917 seconds)
    (264/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.101417913 seconds)
    (265/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.010136999 seconds)
    (266/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.642823854 seconds)
    (267/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.310043599 seconds)
    (268/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.146494695 seconds)
    (269/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.684317664 seconds)
    (270/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.129721615 seconds)
    (271/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.978192615 seconds)
    (272/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.322205382 seconds)
    (273/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.286527383 seconds)
    (274/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.381624735 seconds)
    (275/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.315941078 seconds)
    (276/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.751485658 seconds)
    (277/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.628253366 seconds)
    (278/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.026826294 seconds)
    (279/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.126358465 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.670433228 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.047942805 seconds)
    (282/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.090368536 seconds)
    (283/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.010407901 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.326791864 seconds)
    (285/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.096863256 seconds)
    (286/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.219986644 seconds)
    (287/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.421373129 seconds)
    (288/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.013724355 seconds)
    (289/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.530920573 seconds)
    (290/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.294617136 seconds)
    (291/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.141422147 seconds)
    (292/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.48142459 seconds)
    (293/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.083601621 seconds)
    (294/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.389984056 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.016038014 seconds)
    (296/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.431360028 seconds)
    (297/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.117521005 seconds)
    (298/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.08020598 seconds)
    (299/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.011895407 seconds)
    (300/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.078397788 seconds)
    (301/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.321332573 seconds)
    (302/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.154459035 seconds)
    (303/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.019178531 seconds)
    (304/341) benchmarking ("sort", Float64, false)...
    done (took 5.724215958 seconds)
    (305/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.158932566 seconds)
    (306/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.494718924 seconds)
    (307/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.017127288 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.35620972 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.142487583 seconds)
    (310/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.773543762 seconds)
    (311/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.014873762 seconds)
    (312/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.228757066 seconds)
    (313/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.344438279 seconds)
    (314/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.279731847 seconds)
    (315/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.122398698 seconds)
    (316/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.228817264 seconds)
    (317/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.42286672 seconds)
    (318/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.055994869 seconds)
    (319/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.031219855 seconds)
    (320/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.025731623 seconds)
    (321/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.013519348 seconds)
    (322/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.198383893 seconds)
    (323/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.128054333 seconds)
    (324/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.328291356 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.004829402 seconds)
    (326/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.015447157 seconds)
    (327/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.416973243 seconds)
    (328/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.161357171 seconds)
    (329/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.950414201 seconds)
    (330/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.427368863 seconds)
    (331/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.257710067 seconds)
    (332/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.122956074 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.136231161 seconds)
    (334/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.162710339 seconds)
    (335/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.016220045 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.181874737 seconds)
    (337/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.027751279 seconds)
    (338/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.025534386 seconds)
    (339/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 2.989847176 seconds)
    (340/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.032154932 seconds)
    (341/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.126423965 seconds)
  done (took 1138.676788464 seconds)
done (took 1140.69662861 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.037121184 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.018485597 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.514920179 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.026735183 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.016215321 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.020692114 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.525550789 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.046802765 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.034375925 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.525424808 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.028344995 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.017866363 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.032595302 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.051500703 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.0296929 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.032012847 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.022844433 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.043573677 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.052920493 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.024054522 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.069734168 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.023354967 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.017398892 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.06901465 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.01801081 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.032875917 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.03791828 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.070353297 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.069247139 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.020445976 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.023815416 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.377840346 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.068540579 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.024633737 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.029891953 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.033692037 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.024255589 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.033515378 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.037472577 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.034154175 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.018550735 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.029684278 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.023889206 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.021682825 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.018827975 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.018437027 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.020948353 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.144811607 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.033569455 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.35926352 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.077021086 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.03769446 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.071499973 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.022457652 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.021901772 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.022202655 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.070852291 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.026993819 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.024540551 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.359916293 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.112378106 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.035462019 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.360297332 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.080989857 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.029649774 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.029213124 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.020035767 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.039884475 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.37893054 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.567352334 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.051221001 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.041019455 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.022231266 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.022426934 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.034336246 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.527427646 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.034904791 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.595727076 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.044393201 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.034663356 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.02733517 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.02342834 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.022371729 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.038407031 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.040194664 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.021601158 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.026992646 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.028525262 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.035492258 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.379788891 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.064428948 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.518049749 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.028781617 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.040815766 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.041688927 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.596215952 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.048024966 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.03839154 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.024621903 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.381058802 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.061132149 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.041298341 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.024400823 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.032709654 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.137084997 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.040561905 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.041649623 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.022308018 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.044705346 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.029111021 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.022104363 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.035635786 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.042398952 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.057568185 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.039098097 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.022029655 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.03123919 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.029157829 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.04061113 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.032103272 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.028915005 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.034796879 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.022924149 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.074665514 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.041295562 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.039252467 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.137879707 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.030167458 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.149073732 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.038571658 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.030040219 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.023300673 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.365918494 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.066149788 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.045815915 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.030297998 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.046770372 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.045305874 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.041383582 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.025956344 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.039789631 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.026040628 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.075965275 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.025322811 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.050043774 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.075622742 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.037914453 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.030650588 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.041690229 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.05925054 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.044908973 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.029789103 seconds)
done (took 318.766603849 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.070320287 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.023946927 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.098437293 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.025013676 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.090289086 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.077018091 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.024815197 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.02501117 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.025317464 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.405857364 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.025361765 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.030711047 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.023724929 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.025513395 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.07324171 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.026413412 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.026695785 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.25708011 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.025667342 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.083796856 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.025703627 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.026130006 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.025766735 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.412527521 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.02466295 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.025372654 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.085197416 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.025800134 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.26403457 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.02525822 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.025602896 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.26446854 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.085203348 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.039236764 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.034290374 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.034184942 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.093226187 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.035895542 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.07236731 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.074031092 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.101622549 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.062450887 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.025633464 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.027372023 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.030860497 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.028034299 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.028012457 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.060819221 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.026139863 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.034044999 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.258456944 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.035788354 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.033680037 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.028574437 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.028841444 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.042942989 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.029386284 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.027920549 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.086700703 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.028474055 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.074121929 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.448139674 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.410365714 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.029588867 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.028470622 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.029633173 seconds)
  done (took 194.158587847 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.092111114 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.102730695 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.094410794 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.032966068 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.078358449 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.097039011 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.033522854 seconds)
  done (took 16.482648151 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.035021031 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.029179555 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.052014756 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.052434723 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.029151291 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.166845603 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.041028231 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.033548549 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.054873369 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.030709161 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.364190819 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.052627676 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.037487951 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.028521172 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.041490762 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.057592492 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.030635872 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.030584934 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.126788331 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.106513415 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.035004792 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.037861087 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.058536797 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.041294959 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.031019081 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.031241708 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.030301412 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.037563376 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.030564259 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.031281597 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.030549777 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.04442568 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.030852522 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.029516352 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.031103263 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.031514725 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.03046652 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.030665346 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.03176045 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.029398422 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.031426608 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.031432942 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.031402914 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.031584521 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.031892566 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.054408249 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.031094904 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.03391258 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.034464803 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.035549142 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.062378597 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.03400085 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.033973195 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.039725972 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.074886137 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.042225533 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.035125082 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.034666367 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.034507937 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.035162389 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.035204235 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.11129163 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.056916747 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.03553017 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.058014871 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.071409058 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.035693589 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.035471583 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.036054656 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.058836006 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.035097982 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.058993286 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.035517967 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.133194019 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.035886809 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.176728356 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.058320357 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.038209976 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.039295473 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.035442778 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.042909966 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.036447044 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.038143534 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.043180461 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.041141611 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.037485406 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.036624893 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.036795318 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.043745516 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.035946622 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.081042502 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.037198585 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.036664519 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.132107984 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.036877352 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.133349793 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.064196806 seconds)
  done (took 220.910463401 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.042483393 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.037714186 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.050711916 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.037852189 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.037211296 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.041011125 seconds)
  done (took 14.20731169 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.039011552 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.040701612 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.037933676 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.038081066 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.036426209 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.037703051 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.037915437 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.038699817 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.041329017 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.037910026 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.038608542 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.038760819 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.039065046 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.037273993 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.03865722 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.038598395 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.03761031 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.037395786 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.037561976 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.039239467 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.237423446 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.03747987 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.03829483 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.04208177 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.04163626 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.038756842 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.045956014 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.038008718 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.038673948 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.043404833 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.042552731 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.039523519 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.041855951 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.043730167 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.042815294 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.041900898 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.043562046 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.039693798 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.039402757 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.039160227 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.040026161 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.039178622 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.039372711 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.040273837 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.040492164 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.046944974 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.043204171 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.047615971 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.040433611 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.040498047 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.040657354 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.039330667 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.040551481 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.040287281 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.045162059 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.0458247 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.043836619 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.040491228 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.039820725 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.043376661 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.044785806 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.041963552 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.04192578 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.044885559 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.04819552 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.040659597 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.044028423 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.045129717 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.040783594 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.040893793 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.041839628 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.041221555 seconds)
  done (took 150.101077747 seconds)
done (took 597.813679191 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.098771258 seconds)
  done (took 9.062727148 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.042199172 seconds)
  done (took 9.10229552 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.495039865 seconds)
  done (took 12.460892279 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.063191647 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.076745276 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.056062204 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.04541302 seconds)
  done (took 30.216650124 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.274929408 seconds)
  done (took 9.239056367 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.051502191 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.039889833 seconds)
  done (took 16.125228886 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.04309074 seconds)
  done (took 9.007924623 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.5154777 seconds)
  done (took 9.504463715 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.052381514 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.068247703 seconds)
  done (took 16.106110085 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.044114319 seconds)
  done (took 9.008272085 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.925278185 seconds)
  done (took 9.980353563 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.047458696 seconds)
  done (took 9.030536894 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.112456499 seconds)
  done (took 9.078047963 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.047194585 seconds)
  done (took 10.011376193 seconds)
done (took 169.902381638 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.048628329 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.043742996 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.040090832 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.039939521 seconds)
  done (took 30.137213934 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.078133589 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.078149004 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.086319905 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.077483 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.068027282 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.068151859 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.077959731 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.078722451 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.068253516 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.076409978 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.078527569 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.075066611 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.094364912 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.087918172 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.087709805 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.076093649 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.07784884 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.079705473 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.069567895 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.088390687 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.07757426 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.077835651 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.044507864 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.0445438 seconds)
  done (took 51.783483694 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.233803472 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.109418943 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.197515768 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.089479337 seconds)
  done (took 10.596241321 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.043841352 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.107994247 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.095907209 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.089888822 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.130061339 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.146857992 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.096596312 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.254582199 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.160257602 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.175777848 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.05150429 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.065599484 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.068593021 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.089417993 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.147825785 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.045392094 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.044287191 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.159818933 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.107293848 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.258880954 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.045315596 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.098365808 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.138729153 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.094125347 seconds)
  done (took 52.683830893 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.045520606 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.053070486 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.053108926 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.04587517 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.046525042 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.047582178 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.052922867 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.048381132 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.068504806 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.048099661 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.046111829 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.047553856 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.053462724 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.047220105 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.046438367 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.060103707 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.061806788 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.046807106 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.050757879 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.054161205 seconds)
  done (took 42.9920917 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.04383348 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.890904683 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.391655954 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.295809042 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.043419019 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.048417758 seconds)
  done (took 32.682405893 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.057753814 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.062928269 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.05132301 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.068311787 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.092224077 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.052481385 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.107462453 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.184790414 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.053732481 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.103703751 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.065159737 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.052263889 seconds)
  done (took 26.92140443 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.044638881 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.049706236 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.05161117 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.060782261 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.057402537 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.053865277 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.053697287 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.045308697 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.061854952 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.065236079 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.055355216 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.05882473 seconds)
  done (took 46.62908663 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.261956427 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.273859607 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.266354657 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.616862786 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.359188872 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.02855974 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.332510626 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.260644799 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.705953376 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.733343722 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.340002468 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.0263037 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.002147739 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.973605582 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.945904655 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.290955817 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.049392897 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.905487134 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.300418896 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.095391386 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.051570174 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.049015046 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.050735485 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.330778046 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.381944518 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.053811563 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.264358603 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067704469 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.116864452 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.264680271 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.478604405 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.101948157 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.254318536 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.314162355 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.386587871 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.172841563 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.055916583 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.193373951 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.092835642 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.087322292 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.061637177 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.062911537 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.594771364 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.064190406 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.324857947 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.05428599 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.133159109 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.026435214 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.978654069 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.34918352 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161292392 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.051827122 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.087563527 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.484487924 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172520288 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.295036401 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.058246336 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.202840735 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107524512 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.284836993 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.251246588 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.057051815 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.265658505 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.978987356 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.385748828 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171404188 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.055896255 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.058697144 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.754350356 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.270748893 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.13293698 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.350821034 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.805798471 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.05475197 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.056928363 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.096645706 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.143045107 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.054033448 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.346026445 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.05093914 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.981513181 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.154720153 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.449313259 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.059802226 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.053444587 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.062604052 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.900709958 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.98071142 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.152870905 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.295136129 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.373739707 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.056099713 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.055433037 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.077148862 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.058801343 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.00263857 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.582148292 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.118227249 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.982719656 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.608101927 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.491727861 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.019077502 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.481470588 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.095565259 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.322371792 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.195710484 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.46200765 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.263608144 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.287344498 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.588658888 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.061031802 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.669385168 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.136926289 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.133081666 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.056428485 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.619369924 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.205536199 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.326677564 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.166311697 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.057085974 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.982648361 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.067190029 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.259626767 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.493827293 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.108793007 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.056076514 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.062428448 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.056692373 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.059804378 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.1700212 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.072958301 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.361466534 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.126894533 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.05866125 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.995218665 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.062428468 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.334826877 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.671550004 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.115145866 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.309706229 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.323643168 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.755354607 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.65471401 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.004695324 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.324223546 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.128710324 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.133704222 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.642305515 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.191042991 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.15668733 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.058020039 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.196736826 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.065391614 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.060820395 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.396288413 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.472853757 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.483793669 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.102604123 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.058774933 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.008626825 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.214941269 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.297664447 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.110457793 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.085322034 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.063960762 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.142913946 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.28799523 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.058140123 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.985108117 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.307917864 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.302857409 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.349543249 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.467942438 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.099605643 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.129805901 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.070119386 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.27297368 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.141005175 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.705553254 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.606536245 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.280127003 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.593870135 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.02240792 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.696531727 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.298897472 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.436078787 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.075517993 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.513915238 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.213953525 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.71324205 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.088090565 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.585620066 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.964408218 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.065923055 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.405305897 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.017255001 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.381651577 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.128095504 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.132242073 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.061987637 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.062386916 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.068964515 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.955897963 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.162715692 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130028556 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134031885 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.988526637 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.673594287 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.097612554 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.063049498 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.061252783 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.387769429 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.894941518 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.012817848 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.061951108 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138471436 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.808599886 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.609310436 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.066248397 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.065494747 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.657134699 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.067473926 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.971713338 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.156109524 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.797350447 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.087471296 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.304759942 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.757374275 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.347344651 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.136956277 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138293707 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.063621887 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.067964417 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.76497855 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.072316357 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.764930811 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.346222986 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.334109829 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.501346599 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.124759689 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.270852534 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.078659397 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.064070886 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.53816774 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.087284065 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.06574876 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.267676436 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.579246894 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.37136079 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.703661503 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.149714258 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.065447311 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.330036719 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.065092699 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.497145711 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.748991326 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.066973233 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.064075188 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.327948682 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.749774788 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.066186827 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.039574696 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.072583339 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.277846213 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.267426912 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.33761804 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.363655773 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.512855333 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.992397924 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.070642577 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.09016721 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.307830685 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.065348067 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.101788761 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.511669251 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.105734726 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.492985645 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.357349887 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.43587158 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.693546743 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.330935712 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.129287333 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.077440907 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.719060892 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.1970717 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.998921825 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184666942 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.992848844 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.731973956 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.355698188 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.085743713 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.332018301 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.046263591 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.400057149 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.362158055 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.316426605 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.102469669 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.095377865 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.066944319 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.119446668 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.06695539 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.22735424 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.179748572 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.072140852 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.576010333 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103206787 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.11404089 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.072120455 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.567743568 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.087876382 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.069058016 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.760317908 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.091893481 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186544346 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.139158867 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.79829849 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.528577375 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.163323797 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.942965251 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.713517716 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.333720857 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.12346715 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.522336804 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107570988 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.472425337 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.069214838 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.281903475 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.072866847 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.609200119 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112468471 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.340948114 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.026076169 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.282077693 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.271593131 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.093307381 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.075056276 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.995792083 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.176348484 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.946369993 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.054134226 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.071850046 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.750602389 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.479590278 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.247796176 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.511170037 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.88840355 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.071827573 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.390978209 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.458304128 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.659182252 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.100496961 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.071562753 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.389960308 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.196938067 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.35518895 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.336379471 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.078445475 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.09603081 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.282468302 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.19557903 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.985505607 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.562634504 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.654097818 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.771309051 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.08165883 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.273720404 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.372486192 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.327226364 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.103517949 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.149143739 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.47547102 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.335689091 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.135963927 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.997120503 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.070850087 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.465176127 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.467917169 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.168786781 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.313488836 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.387620913 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.64375899 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.510073322 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.475176443 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.452824429 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.513158043 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.471360548 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.285664325 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.439926692 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.396865824 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.661492943 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.484491663 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.285453007 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.165272917 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.353826217 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.94864125 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.783159684 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.3156975 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.077573811 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.001727437 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.280219693 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.078632479 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.525646936 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.594143059 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.321437161 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.314935312 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.53882145 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.611051561 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.233258822 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.096420364 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.03905537 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.097078544 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.09472208 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.073351257 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.564864709 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.366072833 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.087417274 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.014482274 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.746585054 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.999904004 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.287579645 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.237481587 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.107213094 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.630810719 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.311764454 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.169783643 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.36441415 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.2945634 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.108461858 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.000809476 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.802510077 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.020204541 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.114831268 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.499053956 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.091956013 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.077790087 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.278313982 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.003864457 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121452447 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.074693188 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.284153404 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.656115156 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.344284392 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197741604 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.32130471 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.37543888 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.898825382 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.079124689 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.347820222 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.002590276 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.664243397 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.778284049 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.116902613 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.146823597 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.06243563 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.079421109 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.34777352 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.3749919 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.16712117 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.639873425 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.106850683 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.100380853 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.370942466 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.163081507 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.078303039 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.081283724 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.52590406 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.30727755 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.077870468 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.057351473 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.290162135 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151330753 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.274301127 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.149846004 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.591319976 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.08160405 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.900205724 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.171073563 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.026612063 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.077727357 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.821323941 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.491990327 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.091820522 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.37930812 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.735567475 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.295635205 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.488247302 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.126854133 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.585134107 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.142472929 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.095012901 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.099973884 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.493368332 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.402054323 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.092419742 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.368010222 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.148271072 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.09805168 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.754011615 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.062572872 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.092868034 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.821939231 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.988494779 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.826329717 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.487002213 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.09786168 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.120174928 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.094936583 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.020694075 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.094306092 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.25695288 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.10368778 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.103451089 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.472971688 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.488951071 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.193212044 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.096393694 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.092873549 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.099461351 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.307236163 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.610330665 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109804879 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.794978447 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.298759911 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.097922665 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.687927886 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.546910122 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.440713694 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.137898831 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.358434959 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.344777837 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.64271698 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.354396894 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.08049138 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.322334079 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.097215002 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.367814521 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.371786307 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.097181173 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.304878897 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.616388658 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.501374019 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.451928804 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.408825793 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.163123169 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.351334053 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.038549341 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.100891203 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.096532413 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.36489896 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.152313716 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.095523555 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.104257512 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.65026063 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.870142046 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.56843528 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.253623559 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.442431744 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.924393376 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.862412342 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.098884124 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.022743613 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.114188483 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.122551206 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.107745076 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.022870846 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.799488054 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.839668937 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.310998361 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.412270513 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.023583936 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.303473499 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.680839553 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.027455498 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.072396101 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.096702485 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.346635655 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.025376298 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.100392551 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.054687716 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.424087217 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.878840779 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.371409719 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.098519616 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043202901 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.102643742 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.103450491 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.096868592 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.183606181 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.098763947 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21501626 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.373126795 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.534758891 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.210668645 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.739852676 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.822666104 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.038743155 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.144407633 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.654477043 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.666192057 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.447391425 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.234495396 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.824408889 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.044966532 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.100340449 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115878704 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.358003805 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.104362427 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.102359208 seconds)
  done (took 2200.508645065 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.158339675 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.180844561 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.124243006 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.150749981 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.166470377 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.146208424 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.126328615 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.10579179 seconds)
  done (took 59.178186621 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.100762368 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.15256046 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.110201094 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.100486722 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.101259755 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.104924978 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.301750915 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.129946421 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.100909508 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.104203539 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.100282621 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.104947062 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.100781301 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.101477467 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.105796014 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.42092965 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.12176868 seconds)
  done (took 80.413554372 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.159365134 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.901190944 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.104477734 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.778989361 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.147711348 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.448651747 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.104718756 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.101763014 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.214787817 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.399500902 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.152967749 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.122120772 seconds)
  done (took 92.700040703 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.101194449 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.101481127 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.100283162 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.101504012 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.101863838 seconds)
  done (took 12.528187435 seconds)
done (took 2741.783494573 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.341337849 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.199543067 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.177560975 seconds)
  done (took 6.398766503 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.244158002 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.2926269 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.404942064 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.414102686 seconds)
  done (took 11.382498088 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.390766399 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.473969367 seconds)
  done (took 6.887136901 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.48316001 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.121356262 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.494231917 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.103497131 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.108171611 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.108863747 seconds)
  done (took 23.347981001 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.102946843 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.102605213 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.103729291 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.103954419 seconds)
  done (took 10.436698312 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.102196505 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.865952686 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.102755615 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.117309749 seconds)
  done (took 22.210821352 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.271502809 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 5.784897988 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.87224265 seconds)
  done (took 12.951578514 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.725967773 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.551251141 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.713868085 seconds)
  done (took 10.013693628 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.919686832 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.920007926 seconds)
  done (took 7.863052396 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.244501764 seconds)
  done (took 4.267752054 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.941770807 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.417216541 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.589614368 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.642413504 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.700077758 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.330140194 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.430317325 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.376959946 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.506856275 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.518282799 seconds)
  done (took 27.477512089 seconds)
done (took 159.704724883 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.52714513 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.137856264 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.31692758 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.483063742 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.350823362 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.317997621 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.392367527 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.472378953 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.151971274 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.137886137 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.482912467 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.345275601 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.338496379 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.13153613 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.343549878 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.128157099 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.342141977 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.544237075 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.156120244 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.398722232 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.399145178 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.12230353 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.324112047 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.138400456 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.34502882 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.266530504 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.716414222 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.135206526 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.307611978 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.732241913 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.270803604 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.557973854 seconds)
  done (took 176.841219733 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.09409828 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.106746336 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.10727398 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.105828836 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.37794171 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.107342837 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.100542819 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.106671771 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.313773611 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.283328223 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.092540529 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.368561732 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.108949576 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.106258267 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.108901214 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.106766478 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.411287564 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.107026203 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.106555469 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.107874323 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.10740115 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.250371079 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.107319678 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.264495023 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.401262495 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.109155334 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.10834927 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.108404801 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.094783783 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.108208882 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.108621481 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.107441595 seconds)
  done (took 215.232571888 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.107674208 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.108889152 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.108923477 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.108813857 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.108897975 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.108664196 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.108917102 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.108141744 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.794151578 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.794693192 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.109758688 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.109825599 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.112725689 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.108801729 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.116191689 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.108900389 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.11518934 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.116615239 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.117385974 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.117945245 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.108710656 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.891359123 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.110531962 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.932978625 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.111157173 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.119295745 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.109229112 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.10995655 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.109401047 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.109592099 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.109901524 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.110169864 seconds)
  done (took 228.552761614 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.356805813 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.111541269 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.113346201 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.118362357 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.111674778 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.110976578 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.109043872 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.357175907 seconds)
  done (took 21.419950167 seconds)
done (took 644.08746346 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.440722646 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.841961634 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.244656438 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.136202307 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.384557665 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.17974616 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.129889268 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.194900617 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.779925641 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.198886588 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.521847411 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.139343723 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.823543345 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.162329899 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.24604204 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.194895639 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.496176854 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.750596546 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.26807933 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.823175965 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.340091981 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.081508055 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.212550826 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.822946508 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.537556512 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.098921731 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.15882427 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.499849801 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.13696771 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.368546633 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.780563346 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.382769244 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.148573122 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.13277713 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.186105273 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.163317428 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.331745973 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.144441199 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.241935289 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.878884066 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.812690466 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.665197025 seconds)
  done (took 110.116389018 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.121064098 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.11878096 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.119608582 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.118792288 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.127962252 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.119268935 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.119149084 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.119114162 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.120171897 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.120371315 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.119579325 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.128140724 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.11973231 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.129226322 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.119935093 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.119480809 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.119903086 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.129157735 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.120831382 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.119971668 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.120800244 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.120490102 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.11545606 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.120673139 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.120698299 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.120480542 seconds)
  done (took 57.191289967 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.115680986 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.264546809 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.393867084 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.148300829 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.115447943 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.118127982 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.14433059 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.125050754 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.117400762 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.117907446 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.22472948 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.122225019 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.127312783 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.389495765 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.14659158 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.117174406 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.116682678 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.116809134 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.272336396 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.13239572 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.146158489 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.125175083 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.145883444 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.132325686 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.118661876 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.117798941 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.120624447 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.521288759 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.12941868 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.22809656 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.163634981 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.15503794 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.459150839 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.403575771 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.186495715 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.130034287 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.118049522 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.27802896 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.130354385 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.117886231 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.145981906 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.126012086 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.397010455 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.625939419 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.133658186 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.117587792 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.518024958 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.287593646 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.166939649 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.131335133 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.403791249 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.149230628 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.117923285 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.118735461 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.154952091 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.131779941 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.119017235 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.361479406 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.13513616 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.147160033 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.126308706 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.119838927 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.279373333 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.128297554 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.268337732 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.128010473 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.125284802 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.120169442 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.395964589 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.150695067 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.621119778 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.13343162 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.116553946 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.229324937 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.275716905 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.546196845 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.134554003 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.282319473 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.47596552 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.156939101 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.131077841 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.507808764 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.161251317 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.130051623 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.119256791 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.120264104 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.120147062 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.168037079 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.147138465 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.543525282 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.624996182 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.382438895 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.161214873 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.133289684 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.120929501 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.362890789 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.132051341 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.120900869 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.393316106 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.649620845 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.136360492 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.127415615 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.603283544 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.137133862 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.150649972 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.132034366 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.413963595 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.15175725 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.169880074 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.121686818 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.127916641 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.123490719 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.150859446 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.131419191 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.121324755 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.59444941 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.296690484 seconds)
  done (took 261.616480789 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.124395441 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.121359111 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.119267547 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.120436152 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.119682525 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.120767514 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.119370217 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.11972924 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.121423366 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.119504668 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.119461765 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.119918959 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.122022053 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.126720812 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.163180288 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.122833678 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.608827444 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.11747583 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.110923645 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.123413112 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.697468054 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.127653003 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.122618569 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.122152416 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.12227852 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.121380261 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.121667533 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.160095343 seconds)
  done (took 174.583531596 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.123511991 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.178412866 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.135863791 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.169702196 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.135690231 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.123461916 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.147404378 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.138115178 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.130579018 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.124620359 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.124609692 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.154377702 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.131716783 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.221158625 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.153835925 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.157458074 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.22456789 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.130380152 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.12463619 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.123395055 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.169690755 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.140628239 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.155807983 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.187456764 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.139968297 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.179761723 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.139957221 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.124918299 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.124783585 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.239840848 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.144271888 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.144435777 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.159016837 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.146170795 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.243411819 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.240882875 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.228152013 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.157373039 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.129845161 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.127311549 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.127437766 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.128390026 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.181472914 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.13868129 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.125362045 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.244873724 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.142113027 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.093727062 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.145843614 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.125330226 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.139082284 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.144198516 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.16130171 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.252448128 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.172874123 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.151595825 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.150606369 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.146051865 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.127324256 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.222795448 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.134032768 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.241795495 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.147462543 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.129223295 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.128452915 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.13070782 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.174323744 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.166898584 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.227688749 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.13458451 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.223113718 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.181460238 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.142949917 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.126834256 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.128140242 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.182843037 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.236746289 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.182078586 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.188971652 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.158014946 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.135757499 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.127966079 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.129726052 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.155793674 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.137391093 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.24378684 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.244516827 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.134211564 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.129261292 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.128036389 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.128839712 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.153381714 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.192334754 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.167663884 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.237039011 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.163600497 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.167014949 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.136859761 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.142036508 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.133944969 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.162242238 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.138404109 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.140399097 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.470400193 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.167296817 seconds)
  done (took 229.079958384 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.516308736 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.173787168 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.197447527 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.398905466 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.517211067 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.019112563 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.167766905 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.182208564 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.186161702 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.293674232 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.241803968 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.224764209 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.16671137 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.152182926 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.173194952 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.190535099 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.211598756 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.480800275 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.272324341 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.678115421 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.170318052 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.43773202 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.456639208 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.511122836 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.215163554 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.560051759 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.819200726 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.274858586 seconds)
  done (took 69.942778201 seconds)
done (took 904.566996868 seconds)
SAVING RESULT...
DONE!
